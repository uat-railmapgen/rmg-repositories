{"version":3,"file":"static/js/WindowHeader.af559af6.chunk.js","mappings":"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","sources":["components/page-header/rmg-param-app-clip.tsx","components/page-header/rmp-gallery-app-clip.tsx","components/page-header/open-actions.tsx","util/rmg-param-parser.ts","util/fonts.ts","components/page-header/terms-and-conditions.tsx","util/to-rmg.ts","components/page-header/rmp-to-rmg.tsx","components/page-header/download-actions.tsx","images/github-mark.svg","images/slack-mark.svg","components/page-header/about-modal.tsx","components/page-header/zoom-popover.tsx","components/page-header/procedures-modal.tsx","components/page-header/settings-modal.tsx","components/page-header/window-header.tsx","components/page-header/global-alerts.tsx","components/page-header/page-header.tsx","util/change-types.ts","util/helpers.ts"],"sourcesContent":["import { SystemStyleObject } from '@chakra-ui/react';\nimport { useEffect, useState } from 'react';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { RmgAppClip } from '@railmapgen/rmg-components';\n\nconst CHANNEL_PREFIX = 'rmg-bridge--';\n\nconst styles: SystemStyleObject = {\n    h: 500,\n    maxH: '70%',\n\n    '& iframe': {\n        h: '100%',\n        w: '100%',\n    },\n};\n\ninterface RmgAppClipProps {\n    isOpen: boolean;\n    onClose: () => void;\n    onImport: (param: Record<string, any>) => void;\n}\n\nexport default function RmgParamAppClip(props: RmgAppClipProps) {\n    const { isOpen, onClose, onImport } = props;\n\n    const [appClipId] = useState(crypto.randomUUID());\n    const frameUrl =\n        '/rmg/import?' +\n        new URLSearchParams({\n            parentComponent: rmgRuntime.getAppName(),\n            parentId: appClipId,\n        });\n\n    useEffect(() => {\n        const channel = new BroadcastChannel(CHANNEL_PREFIX + appClipId);\n        channel.onmessage = ev => {\n            const { event, data } = ev.data;\n            console.log('[rmp] Received event from RMG app clip:', event);\n            if (event === 'CLOSE') {\n                onClose();\n            } else if (event === 'IMPORT') {\n                onImport(data);\n            }\n        };\n\n        return () => {\n            channel.close();\n        };\n    }, []);\n\n    return (\n        <RmgAppClip isOpen={isOpen} onClose={onClose} sx={styles}>\n            <iframe src={frameUrl} loading=\"lazy\" />\n        </RmgAppClip>\n    );\n}\n","import { Box, CloseButton, IconButton, SystemStyleObject, useToast } from '@chakra-ui/react';\nimport { RmgAppClip } from '@railmapgen/rmg-components';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MdClose } from 'react-icons/md';\nimport { useRootDispatch } from '../../redux';\nimport { saveGraph } from '../../redux/param/param-slice';\nimport { clearSelected, setRefreshEdges, setRefreshNodes } from '../../redux/runtime/runtime-slice';\nimport { RMPSave, upgrade } from '../../util/save';\n\nconst RMP_GALLERY_CHANNEL_NAME = 'RMP_GALLERY_CHANNEL';\nconst RMP_GALLERY_CHANNEL_EVENT = 'OPEN_TEMPLATE';\nconst CHN = new BroadcastChannel(RMP_GALLERY_CHANNEL_NAME);\n\nconst styles: SystemStyleObject = {\n    h: '80%',\n    w: '80%',\n\n    '& iframe': {\n        h: '100%',\n        w: '100%',\n    },\n};\n\ninterface RmpGalleryAppClipProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function RmpGalleryAppClip(props: RmpGalleryAppClipProps) {\n    const { isOpen, onClose } = props;\n    const toast = useToast();\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const graph = React.useRef(window.graph);\n\n    const refreshAndSave = React.useCallback(() => {\n        dispatch(setRefreshNodes());\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefreshNodes, setRefreshEdges, saveGraph, graph]);\n\n    const handleOpenTemplate = async (rmpSave: RMPSave) => {\n        // templates may be obsolete and require upgrades\n        const { version, ...save } = JSON.parse(await upgrade(JSON.stringify(rmpSave))) as RMPSave;\n\n        // details panel will complain about unknown nodes or edges if the last selected is not cleared\n        dispatch(clearSelected());\n\n        // rest graph with new data\n        graph.current.clear();\n        graph.current.import(save.graph);\n\n        refreshAndSave();\n    };\n\n    const fetchAndApplyTemplate = async (id: string) => {\n        const template = (await (\n            (\n                await Promise.allSettled([\n                    fetch(`/rmp-gallery/resources/real_world/${id}.json`),\n                    fetch(`/rmp-gallery/resources/fantasy/${id}.json`),\n                ])\n            ).filter(res => res.status === 'fulfilled') as PromiseFulfilledResult<Response>[]\n        )\n            .find(res => res.value.status === 200)\n            ?.value.json()) as RMPSave | undefined;\n        if (template) {\n            handleOpenTemplate(template);\n            toast({\n                title: t('header.open.importFromRMPGallery', { id }),\n                status: 'success' as const,\n                duration: 9000,\n                isClosable: true,\n            });\n        } else {\n            toast({\n                title: t('header.open.failToImportFromRMPGallery', { id }),\n                status: 'error' as const,\n                duration: 9000,\n                isClosable: true,\n            });\n        }\n    };\n\n    // A one time url match to see if it is a template share link and apply the template if needed.\n    React.useEffect(() => {\n        const url = window.location.href;\n        if (url.includes('/s/')) {\n            history.replaceState({}, t('about.rmp'), url.substring(0, url.indexOf('s/')));\n\n            const id = url.substring(url.lastIndexOf('s/') + 2);\n            fetchAndApplyTemplate(id);\n        }\n    }, []);\n\n    React.useEffect(() => {\n        CHN.onmessage = e => {\n            const { event, data: id } = e.data;\n            if (event === RMP_GALLERY_CHANNEL_EVENT) {\n                fetchAndApplyTemplate(id);\n                onClose();\n            }\n        };\n    }, []);\n\n    return (\n        <>\n            <RmgAppClip isOpen={isOpen} onClose={onClose} size=\"full\" sx={styles}>\n                <iframe src=\"/rmp-gallery/\" loading=\"lazy\" />\n                <CloseButton onClick={onClose} position=\"fixed\" top=\"5px\" right=\"15px\" />\n            </RmgAppClip>\n        </>\n    );\n}\n","import { Badge, IconButton, Menu, MenuButton, MenuItem, MenuList, useToast } from '@chakra-ui/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MdInsertDriveFile, MdNoteAdd, MdUpload } from 'react-icons/md';\nimport { useRootDispatch } from '../../redux';\nimport { saveGraph, setSvgViewBoxMin, setSvgViewBoxZoom } from '../../redux/param/param-slice';\nimport { clearSelected, setGlobalAlert, setRefreshEdges, setRefreshNodes } from '../../redux/runtime/runtime-slice';\nimport { parseRmgParam } from '../../util/rmg-param-parser';\nimport { upgrade } from '../../util/save';\nimport RmgParamAppClip from './rmg-param-app-clip';\nimport RmpGalleryAppClip from './rmp-gallery-app-clip';\n\nexport default function OpenActions() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const graph = React.useRef(window.graph);\n    const fileInputRef = React.useRef<HTMLInputElement | null>(null);\n\n    const [isRmgParamAppClipOpen, setIsRmgParamAppClipOpen] = React.useState(false);\n    const [isOpenGallery, setIsOpenGallery] = React.useState(false);\n\n    const refreshAndSave = React.useCallback(() => {\n        dispatch(setRefreshNodes());\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefreshNodes, setRefreshEdges, saveGraph, graph]);\n\n    const handleNew = () => {\n        dispatch(clearSelected());\n        graph.current.clear();\n        dispatch(setSvgViewBoxZoom(100));\n        dispatch(setSvgViewBoxMin({ x: 0, y: 0 }));\n        refreshAndSave();\n    };\n\n    const handleImportRMGProject = (param: Record<string, any>) => {\n        try {\n            parseRmgParam(graph.current, param);\n            refreshAndSave();\n        } catch (err) {\n            dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.unknownError') }));\n            console.error('OpenActions.handleUploadRMG():: Unknown error occurred while parsing the RMG project', err);\n        } finally {\n            setIsRmgParamAppClipOpen(false);\n        }\n    };\n\n    const handleUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        console.log('OpenActions.handleUpload():: received file', file);\n\n        if (file?.type !== 'application/json') {\n            dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.invalidType') }));\n            console.error('OpenActions.handleUpload():: Invalid file type! Only file in JSON format is accepted.');\n        } else {\n            try {\n                const paramStr = await readFileAsText(file);\n                const { version, ...save } = JSON.parse(await upgrade(paramStr));\n\n                // details panel will complain about unknown nodes or edges if the last selected is not cleared\n                dispatch(clearSelected());\n\n                // rest graph with new data\n                graph.current.clear();\n                graph.current.import(save.graph);\n\n                refreshAndSave();\n            } catch (err) {\n                dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.unknownError') }));\n                console.error(\n                    'OpenActions.handleUpload():: Unknown error occurred while parsing the uploaded file',\n                    err\n                );\n            }\n        }\n\n        // clear field for next upload\n        event.target.value = '';\n    };\n\n    return (\n        <Menu>\n            <MenuButton as={IconButton} size=\"sm\" variant=\"ghost\" icon={<MdUpload />} />\n            <MenuList>\n                <MenuItem icon={<MdNoteAdd />} onClick={handleNew}>\n                    {t('header.open.new')}\n                </MenuItem>\n\n                <input\n                    id=\"upload_project\"\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\".json\"\n                    hidden={true}\n                    onChange={handleUpload}\n                    data-testid=\"file-upload\"\n                />\n                <MenuItem icon={<MdUpload />} onClick={() => fileInputRef?.current?.click()}>\n                    {t('header.open.config')}\n                </MenuItem>\n\n                <MenuItem icon={<MdInsertDriveFile />} onClick={() => setIsRmgParamAppClipOpen(true)}>\n                    {t('header.open.projectRMG')}\n                </MenuItem>\n\n                <MenuItem icon={<MdInsertDriveFile />} onClick={() => setIsOpenGallery(true)}>\n                    {t('header.open.gallery')}\n                    <Badge ml=\"1\" colorScheme=\"green\">\n                        New\n                    </Badge>\n                </MenuItem>\n            </MenuList>\n\n            <RmgParamAppClip\n                isOpen={isRmgParamAppClipOpen}\n                onClose={() => setIsRmgParamAppClipOpen(false)}\n                onImport={handleImportRMGProject}\n            />\n            <RmpGalleryAppClip isOpen={isOpenGallery} onClose={() => setIsOpenGallery(false)} />\n        </Menu>\n    );\n}\n\nconst readFileAsText = (file: File) => {\n    return new Promise((resolve: (text: string) => void) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.readAsText(file);\n    });\n};\n","import Graph from 'graphology';\nimport { nanoid } from 'nanoid';\nimport { InterchangeInfo } from '../components/panels/details/interchange-field';\nimport { linePaths } from '../components/svgs/lines/lines';\nimport { GzmtrBasicStationAttributes } from '../components/svgs/stations/gzmtr-basic';\nimport { GzmtrIntStationAttributes } from '../components/svgs/stations/gzmtr-int';\nimport { MTRStationAttributes } from '../components/svgs/stations/mtr';\nimport { ShmetroBasic2020StationAttributes } from '../components/svgs/stations/shmetro-basic-2020';\nimport stations from '../components/svgs/stations/stations';\nimport { LinePathType, LineStyleType } from '../constants/lines';\nimport { StationAttributes, StationType } from '../constants/stations';\nimport { Theme } from '../constants/constants';\n\ninterface ExtendedInterchangeInfo {\n    theme?: Theme;\n    name: [string, string];\n    facility?: string;\n}\n\ninterface InterchangeGroup {\n    name?: [string, string];\n    lines: ExtendedInterchangeInfo[];\n}\n\nexport const parseRmgParam = (\n    graph: Graph,\n    { info_panel_type, line_num, stn_list: stnList, style, theme }: Record<string, any>\n) => {\n    // generate stn id\n    const stnIdMap = Object.fromEntries(\n        Object.keys(stnList)\n            .filter(id => !['linestart', 'lineend'].includes(id))\n            .map(id => [id, `stn_${nanoid(10)}`])\n    );\n    // update stnIdMap if stations exist in the graph\n    Object.entries(stnList)\n        .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n        .forEach(([id, stnInfo]) => {\n            const nodes = graph.filterNodes(\n                (node, attr) =>\n                    Object.values(StationType).includes(attr.type) &&\n                    // @ts-expect-error\n                    (attr[attr.type] as StationAttributes).names[0] === stnInfo.name[0]\n            );\n            if (nodes.length !== 0) stnIdMap[id] = nodes[0];\n        });\n\n    // only import stations that don't appear in the graph\n    Object.entries(stnList)\n        .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n        .filter(\n            ([id, stnInfo]) =>\n                graph.filterNodes(\n                    (node, attr) =>\n                        Object.values(StationType).includes(attr.type) &&\n                        // @ts-expect-error\n                        (attr[attr.type] as StationAttributes).names[0] === stnInfo.name[0]\n                ).length === 0\n        )\n        .forEach(([id, stnInfo], i) => {\n            // determine station type\n            let type: StationType = StationType.ShmetroBasic;\n            const interchangeGroups: InterchangeGroup[] = (stnInfo as any).transfer.groups;\n            const interchangeLines = interchangeGroups.map(group => group.lines).flat();\n            if (style === 'shmetro') {\n                if (interchangeLines.length > 0) type = StationType.ShmetroInt;\n                else if (info_panel_type === 'sh2020') type = StationType.ShmetroBasic2020;\n                else type = StationType.ShmetroBasic;\n            } else if (style === 'gzmtr') {\n                if (interchangeLines.length > 0) type = StationType.GzmtrInt;\n                else type = StationType.GzmtrBasic;\n            } else if (style === 'mtr') {\n                type = StationType.MTR;\n            }\n\n            // read default attrs\n            const attr = {\n                // deep copy to prevent mutual reference\n                ...JSON.parse(JSON.stringify(stations[type].defaultAttrs)),\n                names: (stnInfo as any).name,\n            };\n\n            // add style specific attrs from RMG save\n            if (type === StationType.ShmetroBasic2020) (attr as ShmetroBasic2020StationAttributes).color = theme;\n            else if (type === StationType.GzmtrBasic) {\n                (attr as GzmtrBasicStationAttributes).color = theme;\n                (attr as GzmtrBasicStationAttributes).lineCode = line_num;\n                (attr as GzmtrBasicStationAttributes).stationCode = (stnInfo as any).num;\n            } else if (type === StationType.GzmtrInt) {\n                (attr as GzmtrIntStationAttributes).transfer = interchangeGroups.map((group, i) => {\n                    // override line code and station code to default as they are not provided in RMG save\n                    const interchangeInfos: InterchangeInfo[] = group.lines.map(line => [\n                        ...(line.theme ?? (theme as Theme)),\n                        '1',\n                        '01',\n                    ]);\n                    // add current line and station code to transfer[0][0]\n                    if (i === 0) {\n                        return [\n                            [...(theme as Theme), line_num, (stnInfo as any).num] as InterchangeInfo,\n                            ...interchangeInfos,\n                        ];\n                    } else {\n                        return interchangeInfos;\n                    }\n                });\n            } else if (type === StationType.MTR) {\n                if (interchangeGroups[0].lines.length) {\n                    (attr as MTRStationAttributes).transfer = [\n                        [\n                            // add current theme to transfer[0][0] as MTR display all transfers including the current line\n                            [...(theme as Theme), '', ''],\n                            // drop out of station transfer as they should be placed in another station\n                            // override line code and station code to empty as they are useless in MTR station\n                            ...interchangeGroups[0].lines.map<InterchangeInfo>(line => [\n                                ...(line.theme ?? (theme as Theme)),\n                                '',\n                                '',\n                            ]),\n                        ],\n                    ];\n                } else {\n                    (attr as MTRStationAttributes).transfer = [[]];\n                }\n            }\n\n            graph.addNode(stnIdMap[id], {\n                visible: true,\n                zIndex: 0,\n                x: 100 + i * 50,\n                y: 1000,\n                type,\n                [type]: attr,\n            });\n        });\n\n    // import lines\n    Object.entries(stnList)\n        .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n        .forEach(([id, stnInfo]) => {\n            (stnInfo as any).children\n                .filter((child: string) => !['linestart', 'lineend'].includes(child))\n                .forEach((child: string) => {\n                    graph.addDirectedEdgeWithKey(`line_${nanoid(10)}`, stnIdMap[id], stnIdMap[child], {\n                        visible: true,\n                        zIndex: 0,\n                        type: LinePathType.Diagonal,\n                        // deep copy to prevent mutual reference\n                        [LinePathType.Diagonal]: JSON.parse(\n                            JSON.stringify(linePaths[LinePathType.Diagonal].defaultAttrs)\n                        ),\n                        style: LineStyleType.SingleColor,\n                        [LineStyleType.SingleColor]: { color: theme },\n                        reconcileId: '',\n                    });\n                });\n        });\n};\n","const waitForMs = (ms: number) => {\n    return new Promise<void>(resolve => {\n        setTimeout(resolve, ms);\n    });\n};\n\nconst isSafari = () => {\n    return navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');\n};\n\nexport const waitForFontReady = async () => {\n    let retryAttempt = 3;\n\n    while (retryAttempt--) {\n        // railmapgen/rmg#274 ready font fact set may not contain GenYoMin when first resolved\n        const fontFaceSet = await document.fonts.ready;\n        const it = fontFaceSet.values();\n        while (true) {\n            const next = it.next();\n            if (next.done) {\n                break;\n            }\n\n            if (next.value.family === 'GenYoMin TW') {\n                return;\n            }\n        }\n\n        console.log('GenYoMin is NOT ready. Retry attempts remaining: ' + retryAttempt + ' ...');\n        await waitForMs(500);\n    }\n\n    throw new Error('Failed to load GenYoMin after 3 attempts');\n};\n\nconst readBlobAsDataURL = (blob: Blob): Promise<string> => {\n    return new Promise((resolve: (value: string) => void) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.readAsDataURL(blob);\n    });\n};\n\nconst matchCssRuleByFontFace = (rules: CSSFontFaceRule[], font: FontFace): CSSFontFaceRule | undefined => {\n    return rules.find(rule => {\n        const cssStyle = rule.style;\n        return (\n            cssStyle.getPropertyValue('font-family').replace(/^\"(.+)\"$/, '$1') === font.family &&\n            cssStyle.getPropertyValue('unicode-range') === font.unicodeRange\n        );\n    });\n};\n\nexport const getBase64FontFace = async (svgEl: SVGSVGElement): Promise<string[]> => {\n    const uniqueCharacters = Array.from(\n        new Set(\n            [\n                ...svgEl.querySelectorAll<SVGElement>('.rmp-name__mtr__zh'),\n                ...svgEl.querySelectorAll<SVGElement>('.rmp-name__mtr__en'),\n            ]\n                .map(el => el.innerHTML)\n                .join('')\n                .replace(/\\s/g, '')\n        )\n    ).join('');\n\n    const fontFaceList = await document.fonts.load('80px GenYoMin TW, Vegur', uniqueCharacters);\n    const cssRules = document.querySelector<HTMLLinkElement>('link#fonts_mtr')?.sheet?.cssRules;\n    if (!cssRules) return Promise.reject(new Error('cssRules can not be found in link#css_share'));\n    const cssFontFaceRules = Array.from(cssRules).filter(rule => rule instanceof CSSFontFaceRule) as CSSFontFaceRule[];\n    const distinctCssRules = fontFaceList.reduce<CSSFontFaceRule[]>((acc, cur) => {\n        const matchedRule = matchCssRuleByFontFace(cssFontFaceRules, cur);\n        if (matchedRule) {\n            const existence = acc.find(rule => {\n                const ruleStyle = rule.style;\n                const matchedStyle = matchedRule.style;\n                return (\n                    ruleStyle.getPropertyValue('font-family') === matchedStyle.getPropertyValue('font-family') &&\n                    ruleStyle.getPropertyValue('unicode-range') === matchedStyle.getPropertyValue('unicode-range')\n                );\n            });\n            return existence ? acc : acc.concat(matchedRule);\n        } else {\n            return acc;\n        }\n    }, []);\n\n    return await Promise.all(\n        distinctCssRules.map(async cssRule => {\n            try {\n                const fontResp = await fetch(getAbsoluteUrl(cssRule));\n                const fontDataUri = await readBlobAsDataURL(await fontResp.blob());\n                return cssRule.cssText.replace(/src:[ \\w('\",\\-:/.)]+;/g, `src: url('${fontDataUri}'); `);\n            } catch (err) {\n                console.error(err);\n                return '';\n            }\n        })\n    );\n};\n\nexport const getAbsoluteUrl = (cssRule: CSSFontFaceRule) => {\n    const ruleStyleSrc = (cssRule.style as any).src;\n    return isSafari()\n        ? ruleStyleSrc.replace(/^url\\(\"(\\S+)\"\\).*$/, '$1')\n        : process.env.PUBLIC_URL + '/styles/' + ruleStyleSrc.match(/^url\\(\"([\\S*]+)\"\\)/)?.[1];\n};\n","import { useTranslation } from 'react-i18next';\nimport {\n    Icon,\n    Link,\n    ListItem,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalCloseButton,\n    ModalBody,\n    OrderedList,\n} from '@chakra-ui/react';\nimport { MdOpenInNew } from 'react-icons/md';\n\nconst TermsAndConditionsModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.download.termsAndConditions')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <OrderedList>\n                        <ListItem>\n                            The layout of the elements on the signage or rail map, is designed by{' '}\n                            <Link color=\"teal.500\" href=\"https://www.shmetro.com/\" isExternal={true}>\n                                Shanghai Shentong Metro Group <Icon as={MdOpenInNew} />\n                            </Link>\n                            {', '}\n                            <Link color=\"teal.500\" href=\"https://www.gzmtr.com/\" isExternal={true}>\n                                Guangzhou Metro Group <Icon as={MdOpenInNew} />\n                            </Link>\n                            {' or '}\n                            <Link color=\"teal.500\" href=\"https://www.mtr.com.hk/\" isExternal={true}>\n                                MTR Corporation <Icon as={MdOpenInNew} />\n                            </Link>\n                            , depending on your selection. You shall grant appropriate permit or license from the\n                            relevant company above before using the generated images for commercial purposes, if it is\n                            required to do so.\n                            <br />\n                            标志版或路线图的元素或布局，基于你所选择的风格，为\n                            <Link color=\"teal.500\" href=\"https://www.shmetro.com/\" isExternal={true}>\n                                上海申通地铁集团 <Icon as={MdOpenInNew} />\n                            </Link>\n                            ，\n                            <Link color=\"teal.500\" href=\"https://www.gzmtr.com/\" isExternal={true}>\n                                广州地铁集团公司 <Icon as={MdOpenInNew} />\n                            </Link>\n                            或\n                            <Link color=\"teal.500\" href=\"https://www.mtr.com.hk/\" isExternal={true}>\n                                港铁公司 <Icon as={MdOpenInNew} />\n                            </Link>\n                            所设计。在产生的图像用作商业用途前，你应向相关公司取得适当之许可证或授权。\n                        </ListItem>\n                        <ListItem>\n                            The elements including shapes and lines on the image are drawn by{' '}\n                            <Link color=\"teal.500\" href=\"https://www.github.com/thekingofcity\" isExternal={true}>\n                                thekingofcity <Icon as={MdOpenInNew} />\n                            </Link>\n                            {' and '}\n                            <Link color=\"teal.500\" href=\"https://www.github.com/wongchito\" isExternal={true}>\n                                Chito Wong <Icon as={MdOpenInNew} />\n                            </Link>\n                            , based on the design standards or rules of the companies listed above. You may use them for\n                            any purposes, but it is recommended to state the name and the link of software alongside.\n                            <br />\n                            图像的元素，包括图形及线条，均由\n                            <Link color=\"teal.500\" href=\"https://www.github.com/thekingofcity\" isExternal={true}>\n                                thekingofcity <Icon as={MdOpenInNew} />\n                            </Link>\n                            及\n                            <Link color=\"teal.500\" href=\"https://www.github.com/wongchito\" isExternal={true}>\n                                Chito Wong <Icon as={MdOpenInNew} />\n                            </Link>\n                            基于上述公司设计标准或准则绘制。你可将其用于任何目的，但我们建议你于使用同时附以我们的名字以及本网站地址。\n                        </ListItem>\n                        <ListItem>\n                            Due to copyright, licensing and other legal restrictions, Rail Map Painter uses{' '}\n                            <Link color=\"teal.500\" href=\"https://github.com/ButTaiwan/genyo-font\" isExternal={true}>\n                                GenYoMin provided by ButTaiwan <Icon as={MdOpenInNew} />\n                            </Link>\n                            , and Vegur instead of MTRSung and Myriad Pro respectively to display and generate MTR-style\n                            signage. You shall grant appropriate permit or license from the manufacturers before using\n                            those generated images for commercial purposes.\n                            <br />\n                            由于著作权及其他法律限制，铁路路线图绘制器使用由\n                            <Link color=\"teal.500\" href=\"https://github.com/ButTaiwan/genyo-font\" isExternal={true}>\n                                ButTaiwan提供的源樣明體 <Icon as={MdOpenInNew} />\n                            </Link>\n                            ，以及Vegur，以代替港铁样式标志牌所使用的地铁宋及Myriad\n                            Pro。在产生之图像用作商业用途前，你应向字型生产厂商取得适当之许可证或授权。\n                        </ListItem>\n                        <ListItem>\n                            The exported images in PNG or SVG format may be modified, published, or used for other\n                            purposes except commercial use, under the conditions above.\n                            <br />\n                            输出的PNG或SVG图像可基于上述条款，在非商业使用时，用于修改、发行或其他用途。\n                        </ListItem>\n                        <ListItem>\n                            All flag emojis shown on Windows platforms are designed by{' '}\n                            <Link color=\"teal.500\" href=\"https://openmoji.org/\" isExternal={true}>\n                                OpenMoji <Icon as={MdOpenInNew} />\n                            </Link>{' '}\n                            – the open-source emoji and icon project. License:\n                            <Link\n                                color=\"teal.500\"\n                                href=\"https://creativecommons.org/licenses/by-sa/4.0/\"\n                                isExternal={true}\n                            >\n                                CC BY-SA 4.0 <Icon as={MdOpenInNew} />\n                            </Link>\n                            <br />\n                            于Windows作业系统上显示的国旗Emoji为\n                            <Link color=\"teal.500\" href=\"https://openmoji.org/\" isExternal={true}>\n                                OpenMoji <Icon as={MdOpenInNew} />\n                            </Link>\n                            所设计。许可证：\n                            <Link\n                                color=\"teal.500\"\n                                href=\"https://creativecommons.org/licenses/by-sa/4.0/\"\n                                isExternal={true}\n                            >\n                                CC BY-SA 4.0 <Icon as={MdOpenInNew} />\n                            </Link>\n                        </ListItem>\n                        <ListItem>\n                            We reserve the rights, without prior notice, to modify, add, or remove these terms. The\n                            Chinese translation is for reference only. In case of any discrepancy between the English\n                            version and the Chinese version, the English version shall prevail.\n                            <br />\n                            我们保留修改、新增或移除上述条款之权利，而无需另行通知。中文译本仅供参考，文义如与英文有歧异，概以英文本为准。\n                        </ListItem>\n                    </OrderedList>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default TermsAndConditionsModal;\n","import { MultiDirectedGraph } from 'graphology';\nimport { EdgeAttributes, GraphAttributes, NodeAttributes } from '../constants/constants';\nimport { StationType } from '../constants/stations';\nimport { LineStyleType } from '../constants/lines';\nimport { StationAttributes } from '../constants/stations';\nimport { SingleColorAttributes } from '../components/svgs/lines/styles/single-color';\nimport { GzmtrBasicStationAttributes } from '../components/svgs/stations/gzmtr-basic';\nimport { GzmtrIntStationAttributes } from '../components/svgs/stations/gzmtr-int';\n\ninterface edgeVector {\n    target: string;\n    next: number;\n    color: Array<string>;\n}\n\nconst visStn: Set<string> = new Set<string>();\nconst colorList: Set<Array<string>> = new Set<Array<string>>();\nconst colorSet: Set<string> = new Set<string>(); // color visit\nconst colorStart: Map<Array<string>, string> = new Map<Array<string>, string>(); // starting stn of each color\nconst headGraph: Map<string, number> = new Map<string, number>(); // head[]\nlet edgeGraph: Array<edgeVector> = new Array<edgeVector>(); // e[]\nlet countGraph = 0; // nn\nconst outDegree: Map<string, number> = new Map<string, number>();\nconst nodeIndex: Map<string, number> = new Map<string, number>();\n\ninterface RMGInterchange {\n    theme: Array<string>;\n    name: Array<string>;\n}\n\ninterface RMGStn {\n    name: Array<string>;\n    secondaryName: any;\n    num: string;\n    services: Array<any>;\n    parents: Array<any>;\n    children: Array<any>;\n    branch: {\n        left: Array<any>;\n        right: Array<any>;\n    };\n    transfer: {\n        groups: [\n            {\n                lines: Array<any>;\n            }\n        ];\n        tick_direc: 'r';\n        paid_area: true;\n    };\n    facility: '';\n    loop_pivot: false;\n    one_line: true;\n    int_padding: 355;\n}\n\nconst defRMGLeft: RMGStn = {\n    name: ['LEFT END', 'LEFT END'],\n    secondaryName: false,\n    num: '00',\n    services: ['local'],\n    parents: [],\n    children: ['lineend'],\n    branch: {\n        left: [],\n        right: [],\n    },\n    transfer: {\n        groups: [\n            {\n                lines: [],\n            },\n        ],\n        tick_direc: 'r',\n        paid_area: true,\n    },\n    facility: '',\n    loop_pivot: false,\n    one_line: true,\n    int_padding: 355,\n};\n\nconst defRMGRight: RMGStn = {\n    name: ['RIGHT END', 'RIGHT END'],\n    secondaryName: false,\n    num: '00',\n    services: ['local'],\n    parents: [],\n    children: [],\n    branch: {\n        left: [],\n        right: [],\n    },\n    transfer: {\n        groups: [\n            {\n                lines: [],\n            },\n        ],\n        tick_direc: 'r',\n        paid_area: true,\n    },\n    facility: '',\n    loop_pivot: false,\n    one_line: true,\n    int_padding: 355,\n};\n\nconst useStn: any = {};\n\nconst newParamTemple = {\n    svgWidth: {\n        destination: 1500,\n        runin: 1500,\n        railmap: 1500,\n        indoor: 1500,\n    },\n    svg_height: 400,\n    style: 'shmetro',\n    y_pc: 50,\n    padding: 10,\n    branchSpacingPct: 33,\n    direction: 'r',\n    platform_num: '1',\n    theme: ['hongkong', 'twl', '#E2231A', '#fff'],\n    line_name: ['地鐵線', 'Metro Line'],\n    current_stn_idx: 'jlaMj2',\n    stn_list: useStn,\n    namePosMTR: {\n        isStagger: true,\n        isFlip: true,\n    },\n    customiseMTRDest: {\n        isLegacy: false,\n        terminal: false,\n    },\n    line_num: '1',\n    psd_num: '1',\n    info_panel_type: 'gz1',\n    notesGZMTR: [],\n    direction_gz_x: 40,\n    direction_gz_y: 70,\n    coline: {},\n    loop: false,\n    loop_info: {\n        bank: true,\n        left_and_right_factor: 0,\n        bottom_factor: 1,\n    },\n};\n\nconst newRMGStn: RMGStn = {\n    name: [],\n    secondaryName: false,\n    num: '',\n    services: ['local'],\n    parents: [],\n    children: [],\n    branch: {\n        left: [],\n        right: [],\n    },\n    transfer: {\n        groups: [\n            {\n                lines: [],\n            },\n        ],\n        tick_direc: 'r',\n        paid_area: true,\n    },\n    facility: '',\n    loop_pivot: false,\n    one_line: true,\n    int_padding: 355,\n};\n\n// convert color['shanghai', 'sh1', ...] to a string (for compare)\nconst colorToString = (color: Array<any>) => {\n    return String(color[0] + '/' + color[1] + '=' + color[2] + color[3]);\n};\n\n// reverse an array\nconst reverse = (a: Array<any>) => {\n    const p = [];\n    for (let i = a.length - 1; i >= 0; i--) {\n        p.push(a[i]);\n    }\n    return p;\n};\n\n// verify the line whether is needed to add\nconst isColorLine = (type: any) => {\n    if (type == LineStyleType['SingleColor'] || type == LineStyleType['MTRRaceDays']) {\n        return true;\n    } else return false;\n};\n\n// get line color array\nconst getColor = (attr: EdgeAttributes) => {\n    let nowColor = new Array<string>();\n    if (attr.style == LineStyleType['SingleColor']) {\n        const newAttr = attr[LineStyleType['SingleColor']] as SingleColorAttributes;\n        nowColor = newAttr.color;\n    } else if (attr.style == LineStyleType['MTRRaceDays']) {\n        const newAttr = attr[LineStyleType['MTRRaceDays']] as SingleColorAttributes;\n        nowColor = newAttr.color;\n    }\n    return structuredClone(nowColor);\n};\n\n// add edge\nconst addEdge = (graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>, lineId: string) => {\n    const u = graph.extremities(lineId)[0];\n    const v = graph.extremities(lineId)[1];\n    const now = graph.getEdgeAttributes(lineId);\n    const nowStyle: string = now.style;\n    if (u == v) return; // skip u-u\n    if (isColorLine(nowStyle)) {\n        const nowColor = getColor(now);\n        if (!colorSet.has(colorToString(nowColor))) {\n            // count color\n            colorList.add(nowColor);\n            colorSet.add(colorToString(nowColor));\n            colorStart.set(nowColor, u);\n        }\n        // do add edge (u-v)\n        if (!headGraph.has(u)) {\n            edgeGraph.push({ target: v, next: -1, color: nowColor });\n        } else {\n            edgeGraph.push({ target: v, next: headGraph.get(u) as number, color: nowColor });\n        }\n        headGraph.set(u, countGraph);\n        countGraph++;\n        // (v-u)\n        if (!headGraph.has(v)) {\n            edgeGraph.push({ target: u, next: -1, color: nowColor });\n        } else {\n            edgeGraph.push({ target: u, next: headGraph.get(v) as number, color: nowColor });\n        }\n        headGraph.set(v, countGraph);\n        countGraph++;\n    }\n};\n\n// Calc stn out-degree (dfs)\nconst edgeDfs = (u: string, f: string, color: Array<string>) => {\n    if (visStn.has(u)) {\n        return;\n    }\n    visStn.add(u);\n    // console.log('DFS: ' + u);\n    let countDegree = 0;\n    const visNext: Set<string> = new Set<string>();\n    for (let i: number = headGraph.get(u) as number; i != -1; i = edgeGraph[i].next) {\n        const v = edgeGraph[i].target;\n        const col = edgeGraph[i].color;\n        if (colorToString(col) != colorToString(color)) continue;\n        if (visNext.has(v)) continue;\n        visNext.add(v);\n        countDegree++;\n        if (v == f) continue;\n        edgeDfs(v, u, color);\n    }\n    outDegree.set(u, countDegree);\n};\n\nconst editLineend = (newParam: any, u: string) => {\n    const newParent = structuredClone(newParam.stn_list['lineend'].parents);\n    newParent.push(u);\n    newParam.stn_list['lineend'].parents = reverse(structuredClone(newParent));\n    if (newParam.stn_list['lineend'].parents.length == 2) {\n        newParam.stn_list['lineend'].branch.left = ['through', structuredClone(newParent[1])];\n    }\n};\n\nconst swapBranchAsIndex = (newChild: Array<string>) => {\n    const xNum = nodeIndex.get(newChild[0]) as number;\n    const yNum = nodeIndex.get(newChild[1]) as number;\n    if (xNum > yNum) {\n        const t = structuredClone(newChild[0]);\n        newChild[0] = structuredClone(newChild[1]);\n        newChild[1] = t;\n    }\n    return newChild;\n};\n\n// Generate RMG saves (dfs)\nconst generateNewStn = (\n    u: string,\n    f: string,\n    counter: number,\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    color: Array<string>,\n    newParam: any\n) => {\n    if (visStn.has(u) && (newParam.stn_list[u] == undefined || u.startsWith('misc_node_') || newParam.loop)) {\n        return [];\n    } else if (visStn.has(u) && newParam.stn_list[u] != undefined && newParam.stn_list[u].children.length >= 2) {\n        // parent (for MTR Racecourse Station) update branch right (merge) info\n        const newParent = swapBranchAsIndex([f, ...structuredClone(newParam.stn_list[u].parents)]);\n        newParam.stn_list[u].parents = reverse(newParent);\n        newParam.stn_list[u].branch.left = ['through', newParent[1]];\n        // delete f in u's children\n        const newChild = [];\n        for (const ch of newParam.stn_list[u].children) {\n            if (ch != f) {\n                newChild.push(ch);\n            }\n        }\n        newParam.stn_list[u].children = structuredClone(newChild);\n        newParam.stn_list[u].branch.right = [];\n        const endParent = [];\n        for (const p of newParam.stn_list['lineend'].parents) {\n            if (p != u) {\n                endParent.push(p);\n            }\n        }\n        const newEndParent = swapBranchAsIndex(endParent);\n        newParam.stn_list['lineend'].parents = reverse(structuredClone(newEndParent));\n        if (newParam.stn_list['lineend'].parents.length == 2) {\n            newParam.stn_list['lineend'].branch.left = ['through', structuredClone(newEndParent[1])];\n        }\n        return [u];\n    }\n    visStn.add(u);\n    // console.log('DFS2: ' + u);\n    const newChild = new Array<string>();\n    const newInterchange = new Array<RMGInterchange>();\n    const newInterchangeSet = new Set<string>();\n    const visNext: Set<string> = new Set<string>();\n    for (let i: number = headGraph.get(u) as number; i != -1; i = edgeGraph[i].next) {\n        const v = edgeGraph[i].target;\n        const col = edgeGraph[i].color;\n        if (v == f) continue;\n        if (colorToString(col) == colorToString(color)) {\n            // same color => count children\n            if (visNext.has(v)) continue;\n            visNext.add(v);\n            if (!String(u).startsWith('misc_node_')) {\n                // a normal stn\n                const r = generateNewStn(v, u, counter + 1, graph, color, newParam);\n                if (r.length != 0) {\n                    newChild.push(...r);\n                }\n            } else {\n                // a virtual stn, use this.father as children's father\n                const r = generateNewStn(v, f, counter + 1, graph, color, newParam);\n                if (r.length != 0) {\n                    newChild.push(...r);\n                }\n            }\n        }\n        if (!newInterchangeSet.has(colorToString(col)) && colorToString(col) != colorToString(color)) {\n            newInterchangeSet.add(colorToString(col));\n            const tmpInterchange: RMGInterchange = {\n                theme: col,\n                name: [col[1], col[1]],\n            };\n            newInterchange.push(tmpInterchange);\n        }\n    }\n    if (newChild.length == 2) {\n        // delete branch without stn\n        for (let i = 0; i < 2; i++) {\n            if (newChild[i] == 'lineend') {\n                newChild.splice(i, 1);\n            }\n        }\n    }\n    if (\n        newChild.length == 2 &&\n        newParam.stn_list[newChild[0]].children[0] != 'lineend' &&\n        newParam.stn_list[newChild[1]].children[0] != 'lineend'\n    ) {\n        // sort branch as stn index\n        swapBranchAsIndex(newChild);\n    }\n    if (!String(u).startsWith('misc_node_')) {\n        const uType = graph.getNodeAttributes(u).type as StationType;\n        const uAttr = graph.getNodeAttributes(u)[uType] as StationAttributes;\n        newParam.stn_list[u] = structuredClone(newRMGStn);\n        newParam.stn_list[u].name = uAttr.names;\n        newParam.stn_list[u].num = String(counter);\n        if (graph.getNodeAttributes(u).type == StationType.GzmtrBasic) {\n            const gzAttr = uAttr as GzmtrBasicStationAttributes;\n            newParam.stn_list[u].num = gzAttr.stationCode;\n            newParam.stn_list[u].secondaryName = gzAttr.secondaryNames;\n        }\n        if (graph.getNodeAttributes(u).type == StationType.GzmtrInt) {\n            const gzAttr = uAttr as GzmtrIntStationAttributes;\n            const tmpTransfer: Array<any> = gzAttr.transfer[0];\n            for (const p of tmpTransfer) {\n                if (colorToString(p) == colorToString(color)) {\n                    newParam.stn_list[u].num = String(p[5]);\n                    break;\n                }\n            }\n            newParam.stn_list[u].secondaryName = gzAttr.secondaryNames;\n        }\n        if (newChild.length != 0) {\n            newParam.stn_list[u].children = reverse(structuredClone(newChild));\n            if (newChild.length == 2) {\n                newParam.stn_list[u].branch.right = ['through', newChild[1]];\n            }\n        } else {\n            newParam.stn_list[u].children = ['lineend'];\n            editLineend(newParam, u);\n        }\n        newParam.stn_list[u].parents = [f];\n        if (newInterchange.length != 0) {\n            newParam.stn_list[u].transfer.groups[0].lines = structuredClone(newInterchange);\n        }\n        return [u];\n    } else {\n        // if this is a virtual stn, should return the children of u.\n        if (newChild.length == 0) {\n            editLineend(newParam, f);\n            return ['lineend'];\n        } else return newChild;\n    }\n};\n\nconst downloadBlobAs = (filename: string, blob: Blob) => {\n    const url = window.URL.createObjectURL(blob);\n\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n};\n\nconst downloadAs = (filename: string, type: string, data: any) => {\n    const blob = new Blob([data], { type });\n    downloadBlobAs(filename, blob);\n};\n\n/**\n * Convert RMP to RMG\n * @param graph Graph.\n */\nexport const toRmg = (graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>) => {\n    visStn.clear();\n    colorList.clear();\n    colorSet.clear();\n    colorStart.clear();\n    headGraph.clear();\n    edgeGraph = new Array<edgeVector>();\n    countGraph = 0;\n    outDegree.clear();\n    nodeIndex.clear();\n    // calc color\n    graph\n        .filterEdges(edge => edge.startsWith('line'))\n        .forEach(edgeId => {\n            if (isColorLine(String(graph.getEdgeAttributes(edgeId).style))) {\n                addEdge(graph, edgeId);\n            }\n        });\n    // calc node index\n    let index = 0;\n    graph.forEachNode(u => {\n        nodeIndex.set(u, ++index);\n    });\n    // console.info(colorList);\n    const resultList = new Array<any>();\n    for (const value of colorList) {\n        visStn.clear();\n        outDegree.clear();\n        // console.log('Start DFS color as ' + value[2]);\n        edgeDfs(colorStart.get(value) as string, 'line_root', value);\n        let newStart: any = 'no_val';\n        let minStartNum: any = 2147483647;\n        let branchFlag = true;\n        let typeInfo = 'LINE';\n        for (const [u, deg] of outDegree) {\n            if (deg == 1) {\n                const index = nodeIndex.get(u) as number;\n                if (index < minStartNum) {\n                    newStart = u;\n                    minStartNum = index;\n                }\n            }\n            if (deg == 3) {\n                typeInfo = 'BRANCH';\n            }\n            if (deg > 3) {\n                branchFlag = false;\n            }\n        }\n        if (!branchFlag) {\n            continue;\n        }\n        const newParam = structuredClone(newParamTemple);\n        if (newStart == 'no_val') {\n            newParam.loop = true;\n            newStart = colorStart.get(value);\n            typeInfo = 'LOOP';\n        }\n        let newType: string;\n        switch (graph.getNodeAttributes(newStart).type) {\n            case StationType.GzmtrBasic:\n            case StationType.GzmtrInt:\n                newType = 'gzmtr';\n                break;\n            case StationType.MTR:\n                newType = 'mtr';\n                break;\n            default:\n                newType = 'shmetro';\n                break;\n        }\n        newParam.theme = structuredClone(value);\n        newParam.style = structuredClone(newType);\n        newParam.stn_list['linestart'] = structuredClone(defRMGLeft);\n        newParam.stn_list['lineend'] = structuredClone(defRMGRight);\n        visStn.clear();\n        const resStart = generateNewStn(newStart, 'linestart', 1, graph, value, newParam);\n        newParam.current_stn_idx = structuredClone(resStart[0]) as string;\n        newParam.stn_list['linestart'].children = [resStart[0]];\n        if (newParam.stn_list.length <= 3 || newParam.stn_list['lineend'].parents.length >= 3) continue;\n        resultList.push([structuredClone(newParam), typeInfo]);\n    }\n    return structuredClone(resultList);\n};\n\n/**\n * Expert RMG json\n * @param graph Graph.\n * @param lineName Line name array: [Chinese, English]\n * @param lineCode Line code string e.g. '1'\n */\nexport const exportToRmg = (param: any, lineName: Array<string>, lineCode: string) => {\n    param['line_name'] = lineName;\n    param['line_num'] = String(lineCode);\n    console.log(param);\n    console.log(JSON.stringify(structuredClone(param)));\n    downloadAs(`RMG_${lineName[1]}.json`, 'application/json', JSON.stringify(structuredClone(param)));\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    Text,\n    Badge,\n    Tooltip,\n    ModalFooter,\n    Button,\n    Input,\n} from '@chakra-ui/react';\nimport { RmgLineBadge } from '@railmapgen/rmg-components';\nimport { exportToRmg, toRmg } from '../../util/to-rmg';\nimport { MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { MdDownload } from 'react-icons/md';\n\nexport const ToRmgModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n    const graph = React.useRef(window.graph);\n\n    const toRmgRes = toRmg(graph.current);\n\n    const outputLineName = (theme: any) => {\n        if (theme[0] == 'other' && theme[1] == 'other') {\n            return theme[2];\n        } else {\n            return theme[1];\n        }\n    };\n\n    const outputLineType = (type: any) => {\n        if (type == 'LOOP') {\n            return <RmgLineBadge name=\"Loop\" bg=\"#ff6666\" fg={MonoColour.white} />;\n        } else if (type == 'LINE') {\n            return <RmgLineBadge name=\"Line\" bg=\"#33ccff\" fg={MonoColour.white} />;\n        } else if (type == 'BRANCH') {\n            return <RmgLineBadge name=\"Branch\" bg=\"#007B61\" fg={MonoColour.white} />;\n        }\n    };\n\n    const outputForm = () => {\n        const result = [];\n        for (const [param, type] of toRmgRes) {\n            const theme = param.theme;\n            result.push(\n                <tr>\n                    <td>\n                        <RmgLineBadge\n                            name={outputLineName(structuredClone(theme))}\n                            bg={structuredClone(theme[2])}\n                            fg={structuredClone(theme[3])}\n                        />\n                    </td>\n                    <td>\n                        <Input\n                            placeholder=\"Chinese Name\"\n                            id={'nameCh_' + theme[0] + theme[1] + theme[2] + theme[3]}\n                            size=\"sm\"\n                        />\n                    </td>\n                    <td>\n                        <Input\n                            placeholder=\"English Name\"\n                            id={'nameEn_' + theme[0] + theme[1] + theme[2] + theme[3]}\n                            size=\"sm\"\n                        />\n                    </td>\n                    <td>\n                        <Input\n                            placeholder=\"Line Code\"\n                            id={'lineNum_' + theme[0] + theme[1] + theme[2] + theme[3]}\n                            size=\"sm\"\n                        />\n                    </td>\n                    <td>{outputLineType(type)}</td>\n                    <td>\n                        <Button\n                            colorScheme=\"blue\"\n                            variant=\"ghost\"\n                            mr=\"1\"\n                            onClick={() => {\n                                const chName = document.getElementById(\n                                    'nameCh_' + theme[0] + theme[1] + theme[2] + theme[3]\n                                ) as HTMLInputElement;\n                                const enName = document.getElementById(\n                                    'nameEn_' + theme[0] + theme[1] + theme[2] + theme[3]\n                                ) as HTMLInputElement;\n                                const lineNum = document.getElementById(\n                                    'lineNum_' + theme[0] + theme[1] + theme[2] + theme[3]\n                                ) as HTMLInputElement;\n                                exportToRmg(\n                                    structuredClone(param),\n                                    [chName.value as string, enName.value as string],\n                                    lineNum.value as string\n                                );\n                            }}\n                            size=\"sm\"\n                        >\n                            <MdDownload />\n                        </Button>\n                    </td>\n                </tr>\n            );\n        }\n        return result;\n    };\n\n    const outputContent = () => {\n        if (toRmgRes.length != 0) return <table>{outputForm()}</table>;\n        else return <Text fontSize=\"md\">No available lines found.</Text>;\n    };\n\n    /*\nChinese\n本功能旨在将RMP保存文件转化为RMG保存文件。以下列表中的线路即为可以转化的线路。您可以在左侧的文本框中输入中文线路名称，在中间的输入英文线路名称，在右侧输入线路编号（供广州地铁样式使用），然后点击右侧下载按钮保存您的RMG保存文件。\n    */\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"2xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>\n                    <Text as=\"b\" fontSize=\"xl\">\n                        Generate RMG Saves\n                    </Text>\n                    <Tooltip label={t('header.settings.pro')}>\n                        <Badge ml=\"1\" color=\"gray.50\" background=\"radial-gradient(circle, #3f5efb, #fc466b)\">\n                            TEST\n                        </Badge>\n                    </Tooltip>\n                </ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <Text fontSize=\"sm\" mt=\"3\" lineHeight=\"100%\">\n                        This function is designed to convert RMP saves into RMG saves.\n                    </Text>\n                    <Text fontSize=\"sm\" mt=\"3\" lineHeight=\"100%\">\n                        The lines in the list following are the available lines for converting. You can enter the\n                        Chinese line name in the text box on the left, the English line name in the middle, the line\n                        code (for Guangzhou Metro style) on the right, and then click the download button on the right\n                        to save your RMG saves.\n                    </Text>\n                    <br />\n                    {outputContent()}\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" variant=\"outline\" mr=\"1\" onClick={onClose}>\n                        {t('close')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Checkbox,\n    HStack,\n    Icon,\n    IconButton,\n    Link,\n    Menu,\n    MenuButton,\n    MenuItem,\n    MenuList,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    Text,\n    useColorModeValue,\n} from '@chakra-ui/react';\nimport { MdDownload, MdImage, MdOpenInNew, MdSave, MdShare } from 'react-icons/md';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { Events } from '../../constants/constants';\nimport { MiscNodeType } from '../../constants/nodes';\nimport store, { useRootSelector } from '../../redux';\nimport { calculateCanvasSize } from '../../util/helpers';\nimport { stringifyParam } from '../../util/save';\nimport { getBase64FontFace } from '../../util/fonts';\nimport TermsAndConditionsModal from './terms-and-conditions';\nimport { StationType } from '../../constants/stations';\nimport { ToRmgModal } from './rmp-to-rmg';\n\nexport default function DownloadActions() {\n    const { t } = useTranslation();\n    const {\n        telemetry: { project: isAllowProjectTelemetry },\n    } = useRootSelector(state => state.app);\n    const { nodeExists } = useRootSelector(state => state.runtime);\n    const graph = React.useRef(window.graph);\n    const bgColor = useColorModeValue('white', 'gray.800');\n\n    const [format, setFormat] = React.useState('png' as 'png' | 'svg');\n    const formatOptions = {\n        png: t('header.download.png'),\n        svg: t('header.download.svg'),\n    };\n    const [scale, setScale] = React.useState(100);\n    const scaleOptions = Object.fromEntries(\n        [25, 33, 50, 67, 75, 80, 90, 100, 110, 125, 150, 175, 200, 250, 300, 400, 500].map(v => [v, `${v}%`])\n    );\n    const [isTransparent, setIsTransparent] = React.useState(false);\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('header.download.format'),\n            value: format,\n            options: formatOptions,\n            onChange: value => setFormat(value === 'png' ? 'png' : 'svg'),\n        },\n    ];\n    const pngFields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('header.download.scale'),\n            value: scale,\n            options: scaleOptions,\n            onChange: value => setScale(value as number),\n        },\n        {\n            type: 'switch',\n            label: t('header.download.transparent'),\n            isChecked: isTransparent,\n            onChange: setIsTransparent,\n        },\n    ];\n    const [isDownloadModalOpen, setIsDownloadModalOpen] = React.useState(false);\n    const [isTermsAndConditionsModalOpen, setIsTermsAndConditionsModalOpen] = React.useState(false);\n    const [isAttachSelected, setIsAttachSelected] = React.useState(false);\n    const [isTermsAndConditionsSelected, setIsTermsAndConditionsSelected] = React.useState(false);\n    const [isToRmgOpen, setIsToRmgOpen] = React.useState(false);\n\n    const handleDownloadJson = () => {\n        if (isAllowProjectTelemetry)\n            rmgRuntime.event(Events.DOWNLOAD_PARAM, { '#nodes': graph.current.order, '#edges': graph.current.size });\n        const param = stringifyParam(store.getState().param);\n        downloadAs(`RMP_${new Date().valueOf()}.json`, 'application/json', param);\n    };\n    // thanks to this article that includes every steps in converting svg to png\n    // https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n    const handleDownload = async () => {\n        setIsDownloadModalOpen(false);\n        if (isAllowProjectTelemetry)\n            rmgRuntime.event(Events.DOWNLOAD_IMAGES, {\n                numberOfNodes: graph.current.order,\n                numberOfEdges: graph.current.size,\n            });\n\n        // get the minimum and maximum of the graph\n        const { xMin, yMin, xMax, yMax } = calculateCanvasSize(graph.current);\n        const [width, height] = [xMax - xMin, yMax - yMin];\n\n        const elem = document.getElementById('canvas')!.cloneNode(true) as SVGSVGElement;\n        // remove virtual nodes\n        [...elem.children]\n            .filter(\n                e =>\n                    graph.current.hasNode(e.id) && graph.current.getNodeAttribute(e.id, 'type') === MiscNodeType.Virtual\n            )\n            .forEach(e => elem.removeChild(e));\n        // append rmp info if user does not want to share rmp info\n        if (!isAttachSelected) elem.appendChild(generateRmpInfo(xMax - 400, yMax - 60));\n        // reset svg viewBox to display all the nodes in the graph\n        // otherwise the later drawImage won't be able to show all of them\n        elem.setAttribute('viewBox', `${xMin} ${yMin} ${width} ${height}`);\n        // Chrome will stretch the image if the following width and height are not set\n        elem.setAttribute('width', width.toString());\n        elem.setAttribute('height', height.toString());\n        // copy attributes from css to each elem in the newly cloned svg\n        // TODO: #274 copy all possible attributes using document.querySelectorAll('link'), this is hard to maintain\n        Object.entries({\n            '.rmp-name__zh': ['font-family'],\n            '.rmp-name__en': ['font-family'],\n            '.rmp-name__mtr__zh': ['font-family'],\n            '.rmp-name__mtr__en': ['font-family'],\n            '.rmp-name-station': ['paint-order', 'stroke', 'stroke-width'],\n        }).forEach(([className, styleSet]) => {\n            const e = document.querySelector(className);\n            if (e === null) return; // no element in the canvas uses this class\n            const style = window.getComputedStyle(e);\n            elem.querySelectorAll(className).forEach(el => {\n                styleSet.forEach(styleName => {\n                    el.setAttribute(styleName, style.getPropertyValue(styleName));\n                });\n                el.classList.remove(className);\n            });\n        });\n\n        if (nodeExists[StationType.MTR]) {\n            try {\n                const uris = await getBase64FontFace(elem);\n                const s = document.createElement('style');\n                s.textContent = uris.join('\\n');\n                elem.prepend(s);\n            } catch (err) {\n                alert('Failed to fonts. Fonts in the exported PNG will be missing.');\n                console.error(err);\n            }\n        }\n\n        if (format === 'svg') {\n            downloadAs(`RMP_${new Date().valueOf()}.svg`, 'image/svg+xml', elem.outerHTML);\n            return;\n        }\n\n        // append to document to render the svg\n        document.body.appendChild(elem);\n        // convert it to blob\n        const src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(elem.outerHTML)));\n        // release after use\n        document.body.removeChild(elem);\n\n        // create canvas to be drawn on\n        const canvas = document.createElement('canvas');\n        const [canvasWidth, canvasHeight] = [(width * scale) / 100, (height * scale) / 100];\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n        // set background, respect to dark mode\n        if (!isTransparent) {\n            ctx.fillStyle = bgColor;\n            ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n        }\n\n        const img = new Image();\n        img.onload = () => {\n            ctx.drawImage(img, 0, 0, canvasWidth, canvasHeight);\n            canvas.toBlob(blob => downloadBlobAs(`RMP_${new Date().valueOf()}.png`, blob!), 'image/png');\n        };\n        img.src = src; // draw src on canvas\n    };\n\n    return (\n        <Menu id=\"download\">\n            <MenuButton as={IconButton} size=\"sm\" variant=\"ghost\" icon={<MdDownload />} />\n            <MenuList>\n                <MenuItem icon={<MdSave />} onClick={handleDownloadJson}>\n                    {t('header.download.config')}\n                </MenuItem>\n                <MenuItem icon={<MdImage />} onClick={() => setIsDownloadModalOpen(true)}>\n                    {t('header.download.image')}\n                </MenuItem>\n                <MenuItem icon={<MdShare />} onClick={() => setIsToRmgOpen(true)}>\n                    Generate RMG saves\n                </MenuItem>\n            </MenuList>\n\n            <Modal size=\"xl\" isOpen={isDownloadModalOpen} onClose={() => setIsDownloadModalOpen(false)}>\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>{t('header.download.image')}</ModalHeader>\n                    <ModalCloseButton />\n\n                    <ModalBody>\n                        <RmgFields fields={fields} />\n                        {format === 'png' && <RmgFields fields={pngFields} />}\n                        <br />\n                        <Checkbox isChecked={isAttachSelected} onChange={e => setIsAttachSelected(e.target.checked)}>\n                            <Text>\n                                {t('header.download.shareInfo1')}\n                                <Link\n                                    color=\"teal.500\"\n                                    onClick={() => window.open('https://railmapgen.github.io/rmp', '_blank')}\n                                >\n                                    {t('header.about.rmp')} <Icon as={MdOpenInNew} />\n                                </Link>\n                                {t('header.download.shareInfo2')}\n                            </Text>\n                        </Checkbox>\n                        <Checkbox\n                            isChecked={isTermsAndConditionsSelected}\n                            onChange={e => setIsTermsAndConditionsSelected(e.target.checked)}\n                        >\n                            <Text>\n                                {t('header.download.termsAndConditionsInfo')}\n                                <Link color=\"teal.500\" onClick={() => setIsTermsAndConditionsModalOpen(true)}>\n                                    {t('header.download.termsAndConditions')} <Icon as={MdOpenInNew} />\n                                </Link>\n                                {t('header.download.period')}\n                            </Text>\n                        </Checkbox>\n                    </ModalBody>\n\n                    <ModalFooter>\n                        <HStack>\n                            <Button\n                                colorScheme=\"teal\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                disabled={!isTermsAndConditionsSelected}\n                                onClick={handleDownload}\n                            >\n                                {t('header.download.confirm')}\n                            </Button>\n                        </HStack>\n                    </ModalFooter>\n\n                    <TermsAndConditionsModal\n                        isOpen={isTermsAndConditionsModalOpen}\n                        onClose={() => setIsTermsAndConditionsModalOpen(false)}\n                    />\n                </ModalContent>\n            </Modal>\n            <ToRmgModal isOpen={isToRmgOpen} onClose={() => setIsToRmgOpen(false)} />\n        </Menu>\n    );\n}\n\nconst downloadAs = (filename: string, type: string, data: any) => {\n    const blob = new Blob([data], { type });\n    downloadBlobAs(filename, blob);\n};\n\nconst downloadBlobAs = (filename: string, blob: Blob) => {\n    const url = window.URL.createObjectURL(blob);\n\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n};\n\nconst generateRmpInfo = (x: number, y: number) => {\n    const info = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    info.setAttribute('transform', `translate(${x}, ${y})scale(2)`);\n\n    const logo = document.createElementNS('http://www.w3.org/2000/svg', 'image');\n    // FIXME: return after image is loaded\n    // logo.setAttribute('href', 'https://uat-railmapgen.github.io/rmp/logo192.png');\n    // logo.setAttribute('href', logoImg);\n    logo.setAttribute('width', '40');\n    logo.setAttribute('height', '40');\n    logo.setAttribute('x', '-50');\n    logo.setAttribute('y', '-20');\n\n    const rmp = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    rmp.setAttribute('font-family', 'Arial, sans-serif');\n    rmp.setAttribute('font-size', '16');\n    rmp.appendChild(document.createTextNode('Rail Map Painter'));\n\n    const link = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    link.setAttribute('font-family', 'Arial, sans-serif');\n    link.setAttribute('font-size', '10');\n    link.setAttribute('y', '10');\n    link.appendChild(document.createTextNode('https://railmapgen.github.io/rmp/'));\n\n    info.appendChild(logo);\n    info.appendChild(rmp);\n    info.appendChild(link);\n\n    return info;\n};\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgGithubMark(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 98,\n    height: 96,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z\",\n    fill: \"#24292f\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgGithubMark);\nexport default __webpack_public_path__ + \"static/media/github-mark.6fa18895f6e6c7772cab7049f7e05f59.svg\";\nexport { ForwardRef as ReactComponent };","var _style, _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSlackMark(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 270 270\",\n    style: {\n      enableBackground: \"new 0 0 270 270\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\n\\t.st0{fill:#E01E5A;}\\n\\t.st1{fill:#36C5F0;}\\n\\t.st2{fill:#2EB67D;}\\n\\t.st3{fill:#ECB22E;}\\n\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M99.4,151.2c0,7.1-5.8,12.9-12.9,12.9c-7.1,0-12.9-5.8-12.9-12.9c0-7.1,5.8-12.9,12.9-12.9h12.9V151.2z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M105.9,151.2c0-7.1,5.8-12.9,12.9-12.9s12.9,5.8,12.9,12.9v32.3c0,7.1-5.8,12.9-12.9,12.9 s-12.9-5.8-12.9-12.9V151.2z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M118.8,99.4c-7.1,0-12.9-5.8-12.9-12.9c0-7.1,5.8-12.9,12.9-12.9s12.9,5.8,12.9,12.9v12.9H118.8z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M118.8,105.9c7.1,0,12.9,5.8,12.9,12.9s-5.8,12.9-12.9,12.9H86.5c-7.1,0-12.9-5.8-12.9-12.9 s5.8-12.9,12.9-12.9H118.8z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st2\",\n    d: \"M170.6,118.8c0-7.1,5.8-12.9,12.9-12.9c7.1,0,12.9,5.8,12.9,12.9s-5.8,12.9-12.9,12.9h-12.9V118.8z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st2\",\n    d: \"M164.1,118.8c0,7.1-5.8,12.9-12.9,12.9c-7.1,0-12.9-5.8-12.9-12.9V86.5c0-7.1,5.8-12.9,12.9-12.9 c7.1,0,12.9,5.8,12.9,12.9V118.8z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st3\",\n    d: \"M151.2,170.6c7.1,0,12.9,5.8,12.9,12.9c0,7.1-5.8,12.9-12.9,12.9c-7.1,0-12.9-5.8-12.9-12.9v-12.9H151.2z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st3\",\n    d: \"M151.2,164.1c-7.1,0-12.9-5.8-12.9-12.9c0-7.1,5.8-12.9,12.9-12.9h32.3c7.1,0,12.9,5.8,12.9,12.9 c0,7.1-5.8,12.9-12.9,12.9H151.2z\"\n  })))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSlackMark);\nexport default __webpack_public_path__ + \"static/media/slack-mark.3474c14d58fbbab9cfa2208b01a4ac3a.svg\";\nexport { ForwardRef as ReactComponent };","import {\n    Avatar,\n    Box,\n    Flex,\n    Heading,\n    Image,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    Tag,\n    TagLabel,\n    Text,\n    VStack,\n} from '@chakra-ui/react';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useTranslation } from 'react-i18next';\nimport GithubIcon from '../../images/github-mark.svg';\nimport SlackIcon from '../../images/slack-mark.svg';\nimport { useRootDispatch } from '../../redux';\nimport { setOpenGuidaoTransitQECode } from '../../redux/runtime/runtime-slice';\n\nconst AboutModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const appVersion = rmgRuntime.getAppVersion();\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.about.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody paddingBottom={10}>\n                    <Flex direction=\"row\">\n                        <Image boxSize=\"128px\" src={process.env.PUBLIC_URL + '/logo192.png'} />\n                        <Flex direction=\"column\" width=\"100%\" alignItems=\"center\" justifyContent=\"center\">\n                            <Text fontSize=\"xl\" as=\"b\">\n                                {t('header.about.rmp')}\n                            </Text>\n                            <Text>{appVersion}</Text>\n                            <Text />\n                            <Text fontSize=\"sm\">{t('header.about.railmapgen')}</Text>\n                        </Flex>\n                    </Flex>\n\n                    <Box margin={5}>\n                        <Text fontSize=\"xl\">{t('header.about.desc')}</Text>\n                    </Box>\n\n                    <Heading as=\"h5\" size=\"sm\" mt={3} mb={2}>\n                        {t('header.about.contributors')}\n                    </Heading>\n\n                    <Heading as=\"h6\" size=\"xs\" my={2}>\n                        {t('header.about.coreContributors')}\n                    </Heading>\n\n                    <VStack>\n                        <Tag\n                            size=\"lg\"\n                            w=\"85%\"\n                            onClick={() => window.open('https://github.com/thekingofcity', '_blank')}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src=\"https://github.com/thekingofcity.png\" size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\" width=\"100%\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    thekingofcity\n                                </Text>\n                                <Text fontSize=\"sm\">{t('header.about.content1')}</Text>\n                                <Text fontSize=\"sm\" align=\"right\" mb={1}>\n                                    {t('header.about.content2')}\n                                </Text>\n                            </TagLabel>\n                        </Tag>\n                        <Tag\n                            size=\"lg\"\n                            w=\"85%\"\n                            onClick={() => window.open('https://github.com/langonginc', '_blank')}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src=\"https://github.com/langonginc.png\" size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\" width=\"100%\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    langonginc\n                                </Text>\n                                <Text fontSize=\"sm\">{t('header.about.langonginc')}</Text>\n                                <Text fontSize=\"sm\" align=\"right\" mb={1}>\n                                    --Avicii\n                                </Text>\n                            </TagLabel>\n                        </Tag>\n                    </VStack>\n\n                    <Heading as=\"h6\" size=\"xs\" my={2}>\n                        {t('header.about.styleContributors')}\n                    </Heading>\n\n                    <VStack>\n                        <Tag\n                            size=\"lg\"\n                            w=\"85%\"\n                            onClick={() => window.open('https://github.com/203IhzElttil', '_blank')}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src=\"https://github.com/203IhzElttil.png\" size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\" width=\"100%\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    203IhzElttil\n                                </Text>\n                                <Text fontSize=\"sm\" mb={1}>\n                                    {t('header.about.203IhzElttil')}\n                                </Text>\n                            </TagLabel>\n                        </Tag>\n                    </VStack>\n\n                    <Heading as=\"h5\" size=\"sm\" mt={3} mb={2}>\n                        {t('header.about.contactUs')}\n                    </Heading>\n\n                    <VStack>\n                        <Tag\n                            size=\"lg\"\n                            w=\"85%\"\n                            onClick={() => window.open('https://github.com/railmapgen/rmp/issues', '_blank')}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src={GithubIcon} size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\" width=\"100%\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    {t('header.about.github')}\n                                </Text>\n                                <Text fontSize=\"sm\">{t('header.about.githubContent')}</Text>\n                            </TagLabel>\n                        </Tag>\n                        <Tag\n                            size=\"lg\"\n                            w=\"85%\"\n                            onClick={() =>\n                                window.open(\n                                    'https://join.slack.com/t/railmapgenerator/shared_invite/zt-1odhhta3n-DdZF~fnVwo_q0S0RJmgV8A',\n                                    '_blank'\n                                )\n                            }\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src={SlackIcon} size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\" width=\"100%\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    {t('header.about.slack')}\n                                </Text>\n                                <Text fontSize=\"sm\">{t('header.about.slackContent')}</Text>\n                                <Text fontSize=\"sm\" as=\"i\">\n                                    #rmg, #rmp, #palette-and-templates, #random\n                                </Text>\n                            </TagLabel>\n                        </Tag>\n                    </VStack>\n\n                    <Heading as=\"h5\" size=\"sm\" mt={3} mb={2}>\n                        {t('header.about.linkExchange')}\n                    </Heading>\n\n                    <VStack>\n                        <Tag\n                            size=\"lg\"\n                            w=\"85%\"\n                            onClick={() => dispatch(setOpenGuidaoTransitQECode(true))}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar\n                                src={process.env.PUBLIC_URL + '/images/guidaoTransit.jpg'}\n                                size=\"lg\"\n                                my={2}\n                                ml={-1}\n                                mr={2}\n                            />\n                            <TagLabel display=\"block\" width=\"100%\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    {t('header.about.guidaoTransit')}\n                                </Text>\n                                <Text fontSize=\"sm\">{t('header.about.guidaoTransitContent')}</Text>\n                            </TagLabel>\n                        </Tag>\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default AboutModal;\n","import React from 'react';\nimport { IconButton, Popover, PopoverBody, PopoverContent, PopoverTrigger } from '@chakra-ui/react';\nimport { MdZoomOut, MdZoomIn } from 'react-icons/md';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootSelector, useRootDispatch } from '../../redux/index';\nimport { setSvgViewBoxZoom } from '../../redux/param/param-slice';\n\n/**\n * A zoom control displayed in popover component.\n * This will greatly decrease the width of the header in mobile device.\n */\nexport const ZoomPopover = () => {\n    const [isOpen, setIsOpen] = React.useState(false);\n\n    const { svgViewBoxZoom } = useRootSelector(state => state.param);\n    const dispatch = useRootDispatch();\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'slider',\n            label: '',\n            value: 400 - svgViewBoxZoom,\n            min: 10,\n            max: 390,\n            step: 1,\n            onChange: value => dispatch(setSvgViewBoxZoom(400 - value)),\n            leftIcon: <MdZoomOut />,\n            rightIcon: <MdZoomIn />,\n            minW: 160,\n        },\n    ];\n\n    return (\n        <Popover isOpen={isOpen} onOpen={() => setIsOpen(true)} onClose={() => setIsOpen(false)}>\n            <PopoverTrigger>\n                <IconButton\n                    aria-label=\"zoom\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    icon={<MdZoomIn />}\n                    onClick={() => setIsOpen(!isOpen)}\n                />\n            </PopoverTrigger>\n            <PopoverContent>\n                <PopoverBody>\n                    <RmgFields fields={fields} noLabel />\n                </PopoverBody>\n            </PopoverContent>\n        </Popover>\n    );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    Text,\n    Badge,\n    Tooltip,\n    ModalFooter,\n    Button,\n} from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { StationType } from '../../constants/stations';\nimport { LineStyleType } from '../../constants/lines';\nimport { useRootSelector, useRootDispatch } from '../../redux';\nimport { setRefreshNodes, setRefreshEdges } from '../../redux/runtime/runtime-slice';\nimport { saveGraph } from '../../redux/param/param-slice';\nimport stations from '../svgs/stations/stations';\nimport { changeStationsTypeInBatch } from '../../util/change-types';\nimport ColourModal from '../panels/colour-modal/colour-modal';\nimport ThemeButton from '../panels/theme-button';\n\nexport const TranslateNodesModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const graph = React.useRef(window.graph);\n\n    const [x, setX] = React.useState(0);\n    const [y, setY] = React.useState(0);\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('header.settings.procedures.translate.x'),\n            value: x.toString(),\n            variant: 'number',\n            onChange: val => setX(Number(val)),\n            minW: 'full',\n        },\n        {\n            type: 'input',\n            label: t('header.settings.procedures.translate.y'),\n            value: y.toString(),\n            variant: 'number',\n            onChange: val => setY(Number(val)),\n            minW: 'full',\n        },\n    ];\n\n    const handleChange = () => {\n        graph.current.forEachNode((node, attr) => {\n            graph.current.updateNodeAttribute(node, 'x', val => (val ?? 0) + x);\n            graph.current.updateNodeAttribute(node, 'y', val => (val ?? 0) + y);\n        });\n        dispatch(setRefreshNodes());\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n        onClose();\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.settings.procedures.translate.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    {t('header.settings.procedures.translate.content')}\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" variant=\"outline\" mr=\"1\" onClick={onClose}>\n                        {t('cancel')}\n                    </Button>\n                    <Button colorScheme=\"red\" onClick={handleChange}>\n                        {t('apply')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport const ScaleNodesModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const graph = React.useRef(window.graph);\n\n    const [scale, setScale] = React.useState(1);\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('header.settings.procedures.scale.factor'),\n            value: scale.toString(),\n            variant: 'number',\n            onChange: val => setScale(Number(val)),\n            minW: 'full',\n        },\n    ];\n\n    const handleChange = () => {\n        graph.current.forEachNode((node, attr) => {\n            graph.current.updateNodeAttribute(node, 'x', val => (val ?? 0) * scale);\n            graph.current.updateNodeAttribute(node, 'y', val => (val ?? 0) * scale);\n        });\n        dispatch(setRefreshNodes());\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n        onClose();\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.settings.procedures.scale.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    {t('header.settings.procedures.scale.content')}\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" variant=\"outline\" mr=\"1\" onClick={onClose}>\n                        {t('cancel')}\n                    </Button>\n                    <Button colorScheme=\"red\" onClick={handleChange}>\n                        {t('apply')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport const ChangeTypeModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const graph = React.useRef(window.graph);\n\n    const availableStationOptions = Object.fromEntries(\n        Object.entries(stations).map(([key, val]) => [key, t(val.metadata.displayName).toString()])\n    ) as { [k in StationType]: string };\n    const [oldStnType, setOldStnType] = React.useState(Object.keys(stations).at(0)! as StationType);\n    const [newStnType, setNewStnType] = React.useState(Object.keys(stations).at(1)! as StationType);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('header.settings.procedures.changeType.changeFrom'),\n            value: oldStnType as StationType,\n            options: availableStationOptions,\n            disabledOptions: [newStnType],\n            onChange: (val: string | number) => setOldStnType(val as StationType),\n            minW: 'full',\n        },\n        {\n            type: 'select',\n            label: t('header.settings.procedures.changeType.changeTo'),\n            value: newStnType as StationType,\n            options: availableStationOptions,\n            disabledOptions: [oldStnType],\n            onChange: (val: string | number) => setNewStnType(val as StationType),\n            minW: 'full',\n        },\n    ];\n\n    const handleChange = () => {\n        changeStationsTypeInBatch(graph.current, oldStnType, newStnType);\n        dispatch(setRefreshNodes());\n        dispatch(saveGraph(graph.current.export()));\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>\n                    <Text as=\"b\" fontSize=\"xl\">\n                        {t('header.settings.procedures.changeType.title')}\n                    </Text>\n                    <Tooltip label={t('header.settings.pro')}>\n                        <Badge ml=\"1\" color=\"gray.50\" background=\"radial-gradient(circle, #3f5efb, #fc466b)\">\n                            PRO\n                        </Badge>\n                    </Tooltip>\n                </ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <RmgFields fields={fields} />\n                    <Text fontSize=\"sm\" mt=\"3\" lineHeight=\"100%\" color=\"red.500\">\n                        {t('header.settings.procedures.changeType.info')}\n                    </Text>\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" variant=\"outline\" mr=\"1\" onClick={onClose}>\n                        {t('cancel')}\n                    </Button>\n                    <Button colorScheme=\"red\" onClick={handleChange}>\n                        {t('apply')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport const RemoveLinesWithSingleColorModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { theme: runtimeTheme } = useRootSelector(state => state.runtime);\n    const { t } = useTranslation();\n    const graph = React.useRef(window.graph);\n\n    const [theme, setTheme] = React.useState(runtimeTheme);\n    const [isColourModalOpen, setIsColourModalOpen] = React.useState(false);\n\n    const handleChange = () => {\n        graph.current\n            .filterEdges(\n                (edge, attr, source, target, sourceAttr, targetAttr, undirected) =>\n                    attr.style === LineStyleType.SingleColor &&\n                    JSON.stringify(attr[LineStyleType.SingleColor]!.color) === JSON.stringify(theme)\n            )\n            .forEach(edge => graph.current.dropEdge(edge));\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n        onClose();\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.settings.procedures.removeLines.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    {t('header.settings.procedures.removeLines.content')}\n                    <ThemeButton theme={theme} onClick={() => setIsColourModalOpen(true)} />\n                    <ColourModal\n                        isOpen={isColourModalOpen}\n                        defaultTheme={theme}\n                        onClose={() => setIsColourModalOpen(false)}\n                        onUpdate={nextTheme => setTheme(nextTheme)}\n                    />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" variant=\"outline\" mr=\"1\" onClick={onClose}>\n                        {t('cancel')}\n                    </Button>\n                    <Button colorScheme=\"red\" onClick={handleChange}>\n                        {t('remove')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n","import React from 'react';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Badge,\n    Box,\n    Button,\n    Icon,\n    Kbd,\n    Link,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    StackDivider,\n    Switch,\n    SystemStyleObject,\n    Table,\n    Tbody,\n    Td,\n    Text,\n    Th,\n    Thead,\n    Tooltip,\n    Tr,\n    useColorModeValue,\n    VStack,\n} from '@chakra-ui/react';\nimport { MdArrowBack, MdArrowDownward, MdArrowForward, MdArrowUpward, MdOpenInNew, MdReadMore } from 'react-icons/md';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { setKeepLastPath } from '../../redux/runtime/runtime-slice';\nimport { setTelemetryApp } from '../../redux/app/app-slice';\nimport {\n    ChangeTypeModal,\n    RemoveLinesWithSingleColorModal,\n    ScaleNodesModal,\n    TranslateNodesModal,\n} from './procedures-modal';\nimport { isMacClient } from '../../util/helpers';\n\nconst procedureButtonStyle: SystemStyleObject = {\n    width: '100%',\n    justifyContent: 'space-between',\n};\n\nconst macKeyStyle: SystemStyleObject = {\n    fontFamily: '-apple-system',\n};\n\nconst SettingsModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const { keepLastPath } = useRootSelector(state => state.runtime);\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const linkColour = useColorModeValue('primary.500', 'primary.300');\n\n    const [isTranslateNodesOpen, setIsTranslateNodesOpen] = React.useState(false);\n    const [isScaleNodesOpen, setIsScaleNodesOpen] = React.useState(false);\n    const [isChangeTypeOpen, setIsChangeTypeOpen] = React.useState(false);\n    const [isRemoveLinesWithSingleColorOpen, setIsRemoveLinesWithSingleColorOpen] = React.useState(false);\n\n    const isAllowAnalytics = rmgRuntime.isAllowAnalytics();\n    const {\n        telemetry: { app: isAllowAppTelemetry },\n    } = useRootSelector(state => state.app);\n    const handleAdditionalTelemetry = (allowAppTelemetry: boolean) => dispatch(setTelemetryApp(allowAppTelemetry));\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.settings.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <VStack divider={<StackDivider borderColor=\"gray.200\" />}>\n                        <Box width=\"100%\" mb=\"3\">\n                            <Text as=\"b\" fontSize=\"xl\">\n                                {t('header.settings.preference.title')}\n                            </Text>\n                            <Box mt=\"3\">\n                                <Box display=\"flex\" mb=\"1\">\n                                    <Text flex=\"1\">{t('header.settings.preference.keepLastPath')}</Text>\n                                    <Switch\n                                        isChecked={keepLastPath}\n                                        onChange={({ target: { checked } }) => dispatch(setKeepLastPath(checked))}\n                                    />\n                                </Box>\n                            </Box>\n                        </Box>\n\n                        <Box width=\"100%\" mb=\"3\">\n                            <Text as=\"b\" fontSize=\"xl\">\n                                {t('header.settings.shortcuts.title')}\n                            </Text>\n                            <Box mt=\"3\">\n                                <Table>\n                                    <Thead>\n                                        <Tr>\n                                            <Th>{t('header.settings.shortcuts.keys')}</Th>\n                                            <Th>{t('header.settings.shortcuts.description')}</Th>\n                                        </Tr>\n                                    </Thead>\n                                    <Tbody>\n                                        <Tr>\n                                            <Td>\n                                                <Kbd>f</Kbd>\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.f')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <MdArrowUpward />\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.arrowUpward')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <MdArrowBack />\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.arrowBack')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <MdArrowForward />\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.arrowForward')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <MdArrowDownward />\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.arrowDownward')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <Kbd>i</Kbd>\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.i')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <Kbd>j</Kbd>\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.j')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <Kbd>k</Kbd>\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.k')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <Kbd>l</Kbd>\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.l')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                {isMacClient ? <Kbd sx={macKeyStyle}>&#8679;</Kbd> : <Kbd>shift</Kbd>}\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.shift')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                {isMacClient ? <Kbd sx={macKeyStyle}>&#8997;</Kbd> : <Kbd>alt</Kbd>}\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.alt')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                {isMacClient ? <Kbd sx={macKeyStyle}>&#9003;</Kbd> : <Kbd>delete</Kbd>}\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.delete')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                {isMacClient ? <Kbd sx={macKeyStyle}>&#8984;</Kbd> : <Kbd>ctrl</Kbd>}\n                                                {' + '}\n                                                <Kbd>z</Kbd>\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.undo')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                {isMacClient ? (\n                                                    <>\n                                                        <Kbd sx={macKeyStyle}>&#8679;</Kbd>\n                                                        {' + '}\n                                                        <Kbd sx={macKeyStyle}>&#8984;</Kbd>\n                                                        {' + '}\n                                                        <Kbd>z</Kbd>\n                                                    </>\n                                                ) : (\n                                                    <>\n                                                        <Kbd>ctrl</Kbd> + <Kbd>y</Kbd>\n                                                    </>\n                                                )}\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.redo')}</Td>\n                                        </Tr>\n                                    </Tbody>\n                                </Table>\n                            </Box>\n                        </Box>\n\n                        <Box width=\"100%\" mb=\"3\">\n                            <Text as=\"b\" fontSize=\"xl\">\n                                {t('header.settings.procedures.title')}\n                            </Text>\n                            <Box mt=\"3\">\n                                <Button\n                                    sx={procedureButtonStyle}\n                                    rightIcon={<MdReadMore />}\n                                    onClick={() => setIsTranslateNodesOpen(true)}\n                                >\n                                    {t('header.settings.procedures.translate.title')}\n                                </Button>\n                                <TranslateNodesModal\n                                    isOpen={isTranslateNodesOpen}\n                                    onClose={() => setIsTranslateNodesOpen(false)}\n                                />\n\n                                <Button\n                                    sx={procedureButtonStyle}\n                                    rightIcon={<MdReadMore />}\n                                    onClick={() => setIsScaleNodesOpen(true)}\n                                >\n                                    {t('header.settings.procedures.scale.title')}\n                                </Button>\n                                <ScaleNodesModal isOpen={isScaleNodesOpen} onClose={() => setIsScaleNodesOpen(false)} />\n\n                                <Button\n                                    sx={procedureButtonStyle}\n                                    rightIcon={<MdReadMore />}\n                                    onClick={() => setIsChangeTypeOpen(true)}\n                                >\n                                    <Box>\n                                        {t('header.settings.procedures.changeType.title')}\n                                        <Tooltip label={t('header.settings.pro')}>\n                                            <Badge\n                                                ml=\"1\"\n                                                color=\"gray.50\"\n                                                background=\"radial-gradient(circle, #3f5efb, #fc466b)\"\n                                            >\n                                                PRO\n                                            </Badge>\n                                        </Tooltip>\n                                    </Box>\n                                </Button>\n                                <ChangeTypeModal isOpen={isChangeTypeOpen} onClose={() => setIsChangeTypeOpen(false)} />\n\n                                <Button\n                                    sx={procedureButtonStyle}\n                                    rightIcon={<MdReadMore />}\n                                    onClick={() => setIsRemoveLinesWithSingleColorOpen(true)}\n                                >\n                                    {t('header.settings.procedures.removeLines.title')}\n                                </Button>\n                                <RemoveLinesWithSingleColorModal\n                                    isOpen={isRemoveLinesWithSingleColorOpen}\n                                    onClose={() => setIsRemoveLinesWithSingleColorOpen(false)}\n                                />\n                            </Box>\n                        </Box>\n\n                        <Box width=\"100%\" mb=\"3\">\n                            <Text as=\"b\" fontSize=\"xl\">\n                                {t('header.settings.telemetry.title')}\n                            </Text>\n                            <Box mt=\"3\">\n                                <Box display=\"flex\" mb=\"1\">\n                                    <Text flex=\"1\">{t('header.settings.telemetry.essential')}</Text>\n                                    <Switch isChecked={isAllowAnalytics} isDisabled />\n                                </Box>\n                                <Text fontSize=\"sm\" lineHeight=\"100%\" color=\"gray.600\">\n                                    {t('header.settings.telemetry.essentialInfo')}\n                                </Text>\n                                <Link\n                                    color={linkColour}\n                                    fontSize=\"sm\"\n                                    lineHeight=\"100%\"\n                                    href=\"https://support.google.com/analytics/answer/11593727\"\n                                    isExternal={true}\n                                >\n                                    {t('header.settings.telemetry.essentialLink')} <Icon as={MdOpenInNew} />\n                                </Link>\n\n                                <Box display=\"flex\" mb=\"1\">\n                                    <Text flex=\"1\">{t('header.settings.telemetry.additional')}</Text>\n                                    <Switch\n                                        isChecked={isAllowAppTelemetry}\n                                        onChange={({ target: { checked } }) => handleAdditionalTelemetry(checked)}\n                                    />\n                                </Box>\n                                <Text fontSize=\"sm\" lineHeight=\"100%\" color=\"gray.600\">\n                                    {t('header.settings.telemetry.additionalInfo')}\n                                </Text>\n                            </Box>\n                        </Box>\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default SettingsModal;\n","import React from 'react';\nimport { Heading, IconButton, Menu, MenuButton, MenuItem, MenuList, Wrap, WrapItem } from '@chakra-ui/react';\nimport { MdHelp, MdRedo, MdSettings, MdTranslate, MdUndo } from 'react-icons/md';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { RmgEnvBadge, RmgWindowHeader, useReadyConfig } from '@railmapgen/rmg-components';\nimport { LanguageCode, LANGUAGE_NAMES } from '@railmapgen/rmg-translate';\nimport rmgRuntime, { RmgEnv } from '@railmapgen/rmg-runtime';\nimport { Events } from '../../constants/constants';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { redoAction, undoAction } from '../../redux/param/param-slice';\nimport OpenActions from './open-actions';\nimport DownloadActions from './download-actions';\nimport AboutModal from './about-modal';\nimport { ZoomPopover } from './zoom-popover';\nimport SettingsModal from './settings-modal';\n\nexport default function WindowHeader() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const {\n        telemetry: { app: isAllowAppTelemetry },\n    } = useRootSelector(state => state.app);\n    const { past, future } = useRootSelector(state => state.param);\n\n    const [isSettingsModalOpen, setIsSettingsModalOpen] = React.useState(false);\n    const [isAboutModalOpen, setIsAboutModalOpen] = React.useState(false);\n\n    const environment = useReadyConfig(rmgRuntime.getEnv);\n    const appVersion = useReadyConfig(rmgRuntime.getAppVersion);\n\n    React.useEffect(() => {\n        // environment !== RmgEnv.DEV -> wait after rmgRuntime.ready() in useReadyConfig\n        if (isAllowAppTelemetry && environment !== RmgEnv.DEV)\n            rmgRuntime.event(Events.APP_LOAD, { isStandaloneWindow: rmgRuntime.isStandaloneWindow() });\n    }, [environment]);\n\n    const handleChangeLanguage = async (language: LanguageCode) => {\n        // do not change language in the global as japanese is not supported in other apps\n        // rmgRuntime.setLanguage(language);\n        rmgRuntime.getI18nInstance().changeLanguage(language);\n    };\n\n    return (\n        <RmgWindowHeader>\n            <Heading as=\"h4\" size=\"md\" whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">\n                {t('header.about.rmp')}\n            </Heading>\n            <RmgEnvBadge\n                environment={environment}\n                version={appVersion}\n                popoverHeader={\n                    environment === RmgEnv.PRD ? undefined : (\n                        <Trans i18nKey=\"header.popoverHeader\" environment={environment}>\n                            You&apos;re on {{ environment }} environment!\n                        </Trans>\n                    )\n                }\n                popoverBody={\n                    environment === RmgEnv.PRD ? undefined : (\n                        <Trans i18nKey=\"header.popoverBody\">\n                            This is a testing environment where we test the latest beta RMP.\n                        </Trans>\n                    )\n                }\n            />\n\n            <Wrap ml=\"auto\">\n                <WrapItem>\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label=\"Undo\"\n                        icon={<MdUndo />}\n                        disabled={past.length === 0}\n                        onClick={() => dispatch(undoAction())}\n                    />\n                </WrapItem>\n                <WrapItem>\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label=\"Redo\"\n                        icon={<MdRedo />}\n                        disabled={future.length === 0}\n                        onClick={() => dispatch(redoAction())}\n                    />\n                </WrapItem>\n\n                <WrapItem>\n                    <ZoomPopover />\n                </WrapItem>\n\n                <WrapItem>\n                    <OpenActions />\n                </WrapItem>\n\n                <WrapItem>\n                    <DownloadActions />\n                </WrapItem>\n\n                {rmgRuntime.isStandaloneWindow() && (\n                    <WrapItem>\n                        <Menu>\n                            <MenuButton as={IconButton} icon={<MdTranslate />} variant=\"ghost\" size=\"sm\" />\n                            <MenuList>\n                                {(['en', 'zh-Hans', 'zh-Hant', 'ja', 'ko'] as LanguageCode[]).map(lang => (\n                                    <MenuItem key={lang} onClick={() => handleChangeLanguage(lang)}>\n                                        {LANGUAGE_NAMES[lang][lang]}\n                                    </MenuItem>\n                                ))}\n                            </MenuList>\n                        </Menu>\n                    </WrapItem>\n                )}\n\n                <WrapItem>\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label=\"Settings\"\n                        icon={<MdSettings />}\n                        onClick={() => setIsSettingsModalOpen(true)}\n                    />\n                </WrapItem>\n\n                <WrapItem>\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label=\"Help\"\n                        icon={<MdHelp />}\n                        onClick={() => setIsAboutModalOpen(true)}\n                    />\n                </WrapItem>\n            </Wrap>\n\n            <SettingsModal isOpen={isSettingsModalOpen} onClose={() => setIsSettingsModalOpen(false)} />\n            <AboutModal isOpen={isAboutModalOpen} onClose={() => setIsAboutModalOpen(false)} />\n        </RmgWindowHeader>\n    );\n}\n","import { Alert, AlertIcon, AlertStatus, CloseButton, Link } from '@chakra-ui/react';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { closeGlobalAlert } from '../../redux/runtime/runtime-slice';\n\nexport default function GlobalAlerts() {\n    const dispatch = useRootDispatch();\n\n    const globalAlerts = useRootSelector(state => state.runtime.globalAlerts);\n\n    const handleAppOpen = (linkedApp: string) => {\n        if (rmgRuntime.isStandaloneWindow()) {\n            window.open(`/${linkedApp}`, '_blank');\n        } else {\n            rmgRuntime.openApp(linkedApp);\n        }\n    };\n\n    return (\n        <>\n            {Object.entries(globalAlerts).map(([status, { message, url, linkedApp }]) => (\n                <Alert\n                    key={status}\n                    status={status as AlertStatus}\n                    variant=\"solid\"\n                    size=\"xs\"\n                    pl={3}\n                    pr={1}\n                    py={0}\n                    zIndex=\"1\"\n                >\n                    <AlertIcon />\n                    {linkedApp ? (\n                        <Link onClick={() => handleAppOpen(linkedApp)}>{message}</Link>\n                    ) : url ? (\n                        <Link href={url} target=\"_blank\">\n                            {message}\n                        </Link>\n                    ) : (\n                        message\n                    )}\n                    <CloseButton ml=\"auto\" onClick={() => dispatch(closeGlobalAlert(status as AlertStatus))} />\n                </Alert>\n            ))}\n        </>\n    );\n}\n","import WindowHeader from './window-header';\nimport GlobalAlerts from './global-alerts';\n\n// A simple wrapper that load the following two into a single chunk.\nexport default function PageHeader() {\n    return (\n        <>\n            <WindowHeader />\n            <GlobalAlerts />\n        </>\n    );\n}\n","import { MultiDirectedGraph } from 'graphology';\nimport { EdgeAttributes, GraphAttributes, NodeAttributes, Theme } from '../constants/constants';\nimport { ExternalStationAttributes, StationType } from '../constants/stations';\nimport { LinePathType, LineStyleType } from '../constants/lines';\nimport stations from '../components/svgs/stations/stations';\nimport { linePaths, lineStyles } from '../components/svgs/lines/lines';\nimport { SingleColorAttributes } from '../components/svgs/lines/styles/single-color';\nimport { ShmetroBasic2020StationAttributes } from '../components/svgs/stations/shmetro-basic-2020';\n\nconst StationsWithoutNameOffset = [StationType.ShmetroBasic2020];\n\n/**\n * Change a station's type.\n * @param graph Graph.\n * @param selectedFirst Current station's id.\n * @param newType New station's type.\n */\nexport const changeStationType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newStnType: StationType\n) => {\n    const currentStnType = graph.getNodeAttribute(selectedFirst, 'type') as StationType;\n    const names = graph.getNodeAttribute(selectedFirst, currentStnType)!.names;\n    const newAttrs = { ...stations[newStnType].defaultAttrs, names };\n    if (\n        !Object.values(StationsWithoutNameOffset).includes(currentStnType) ||\n        !Object.values(StationsWithoutNameOffset).includes(newStnType)\n    ) {\n        (\n            newAttrs as Exclude<\n                ExternalStationAttributes[keyof ExternalStationAttributes],\n                ShmetroBasic2020StationAttributes | undefined\n            >\n        ).nameOffsetX = graph.getNodeAttribute(\n            selectedFirst,\n            currentStnType as Exclude<StationType, StationType.ShmetroBasic2020>\n        )!.nameOffsetX;\n        (\n            newAttrs as Exclude<\n                ExternalStationAttributes[keyof ExternalStationAttributes],\n                ShmetroBasic2020StationAttributes | undefined\n            >\n        ).nameOffsetY = graph.getNodeAttribute(\n            selectedFirst,\n            currentStnType as Exclude<StationType, StationType.ShmetroBasic2020>\n        )!.nameOffsetY;\n    }\n    graph.removeNodeAttribute(selectedFirst, currentStnType);\n    graph.mergeNodeAttributes(selectedFirst, { type: newStnType, [newStnType]: newAttrs });\n};\n\n/**\n * Change all the stations' type of currentStnType to newStnType in batch.\n * @param graph Graph.\n * @param currentStnType Current station's type.\n * @param newStnType New station's type.\n * @returns Nothing.\n */\nexport const changeStationsTypeInBatch = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    currentStnType: StationType,\n    newStnType: StationType\n) =>\n    graph\n        .filterNodes((node, attr) => node.startsWith('stn') && attr.type === currentStnType)\n        .forEach(stnId => {\n            changeStationType(graph, stnId, newStnType);\n        });\n\n/**\n * Change a line's path type.\n * @param graph Graph.\n * @param selectedFirst Current line's id.\n * @param newType New line's path type.\n */\nexport const changeLinePathType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newLinePathType: LinePathType\n) => {\n    const currentLinePathType = graph.getEdgeAttribute(selectedFirst, 'type') as LinePathType;\n    graph.removeEdgeAttribute(selectedFirst, currentLinePathType);\n    const newAttrs = JSON.parse(JSON.stringify(linePaths[newLinePathType].defaultAttrs));\n    graph.mergeEdgeAttributes(selectedFirst, { type: newLinePathType, [newLinePathType]: newAttrs });\n};\n\n/**\n * Change a line's style type.\n * @param graph Graph.\n * @param selectedFirst Current line's id.\n * @param newType New line's style type.\n * @param theme A handy helper to override color to current theme.\n */\nexport const changeLineStyleType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newLineStyleType: LineStyleType,\n    theme?: Theme\n) => {\n    const currentLineStyleType = graph.getEdgeAttribute(selectedFirst, 'style') as LineStyleType;\n    graph.removeEdgeAttribute(selectedFirst, currentLineStyleType);\n    const newAttrs = JSON.parse(JSON.stringify(lineStyles[newLineStyleType].defaultAttrs));\n    if (newLineStyleType === LineStyleType.SingleColor && theme) (newAttrs as SingleColorAttributes).color = theme;\n    graph.mergeEdgeAttributes(selectedFirst, { style: newLineStyleType, [newLineStyleType]: newAttrs });\n    if (newLineStyleType === LineStyleType.River) graph.setEdgeAttribute(selectedFirst, 'zIndex', -5);\n    else graph.setEdgeAttribute(selectedFirst, 'zIndex', 0);\n};\n","import { MultiDirectedGraph } from 'graphology';\nimport { NodeAttributes, EdgeAttributes, GraphAttributes } from '../constants/constants';\n\nexport const getMousePosition = (e: React.MouseEvent) => {\n    const bbox = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - bbox.left;\n    const y = e.clientY - bbox.top;\n    // console.log(e.clientX, bbox.left, e.clientY, bbox.top, x, y);\n    return { x, y };\n};\n\nexport const roundToNearestN = (x: number, n: number) => Math.round(x / n) * n;\n\nexport const calculateCanvasSize = (graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>) => {\n    let [xMin, yMin, xMax, yMax] = [Number.MAX_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MIN_VALUE];\n\n    graph.forEachNode((node, attr) => {\n        xMin = Math.min(attr.x, xMin);\n        yMin = Math.min(attr.y, yMin);\n        xMax = Math.max(attr.x, xMax);\n        yMax = Math.max(attr.y, yMax);\n    });\n\n    xMin -= 100;\n    yMin -= 100;\n    xMax += 150;\n    yMax += 150;\n\n    return { xMin, yMin, xMax, yMax };\n};\n\nexport const isMacClient = navigator.platform.startsWith('Mac');\n"],"names":["styles","h","maxH","w","RmgParamAppClip","props","isOpen","onClose","onImport","useState","crypto","randomUUID","appClipId","frameUrl","URLSearchParams","parentComponent","rmgRuntime","parentId","useEffect","channel","BroadcastChannel","onmessage","ev","data","event","console","log","close","sx","src","loading","CHN","RmpGalleryAppClip","toast","useToast","t","useTranslation","dispatch","useRootDispatch","graph","React","window","refreshAndSave","setRefreshNodes","setRefreshEdges","saveGraph","current","export","handleOpenTemplate","rmpSave","JSON","upgrade","stringify","parse","version","save","clearSelected","clear","import","fetchAndApplyTemplate","id","Promise","allSettled","fetch","filter","res","status","find","value","json","template","title","duration","isClosable","url","location","href","includes","history","replaceState","substring","indexOf","lastIndexOf","e","size","onClick","position","top","right","OpenActions","fileInputRef","isRmgParamAppClipOpen","setIsRmgParamAppClipOpen","isOpenGallery","setIsOpenGallery","handleUpload","file","target","files","type","setGlobalAlert","message","error","readFileAsText","paramStr","as","IconButton","variant","icon","setSvgViewBoxZoom","setSvgViewBoxMin","x","y","ref","accept","hidden","onChange","click","ml","colorScheme","param","info_panel_type","line_num","stnList","stn_list","style","theme","stnIdMap","Object","fromEntries","keys","map","nanoid","entries","forEach","stnInfo","nodes","filterNodes","node","attr","values","StationType","names","name","length","i","interchangeGroups","transfer","groups","interchangeLines","group","lines","flat","stations","defaultAttrs","color","lineCode","stationCode","num","interchangeInfos","line","addNode","visible","zIndex","children","child","addDirectedEdgeWithKey","LinePathType","linePaths","LineStyleType","parseRmgParam","err","resolve","reader","FileReader","onloadend","result","readAsText","readBlobAsDataURL","blob","readAsDataURL","getBase64FontFace","svgEl","uniqueCharacters","Array","from","Set","querySelectorAll","el","innerHTML","join","replace","document","fonts","load","fontFaceList","cssRules","querySelector","sheet","reject","Error","cssFontFaceRules","rule","CSSFontFaceRule","distinctCssRules","reduce","acc","cur","font","matchedRule","cssStyle","getPropertyValue","family","unicodeRange","ruleStyle","matchedStyle","concat","all","cssRule","getAbsoluteUrl","fontResp","fontDataUri","cssText","ruleStyleSrc","navigator","userAgent","process","match","scrollBehavior","isExternal","MdOpenInNew","visStn","colorList","colorSet","colorStart","Map","headGraph","edgeGraph","countGraph","outDegree","nodeIndex","defRMGLeft","secondaryName","services","parents","branch","left","tick_direc","paid_area","facility","loop_pivot","one_line","int_padding","defRMGRight","newParamTemple","svgWidth","destination","runin","railmap","indoor","svg_height","y_pc","padding","branchSpacingPct","direction","platform_num","line_name","current_stn_idx","namePosMTR","isStagger","isFlip","customiseMTRDest","isLegacy","terminal","psd_num","notesGZMTR","direction_gz_x","direction_gz_y","coline","loop","loop_info","bank","left_and_right_factor","bottom_factor","newRMGStn","colorToString","String","reverse","a","p","push","isColorLine","addEdge","lineId","u","extremities","v","now","getEdgeAttributes","nowStyle","nowColor","structuredClone","getColor","has","add","set","next","get","edgeDfs","f","countDegree","visNext","col","editLineend","newParam","newParent","swapBranchAsIndex","newChild","generateNewStn","counter","undefined","startsWith","ch","endParent","newEndParent","newInterchange","newInterchangeSet","r","tmpInterchange","splice","uType","getNodeAttributes","uAttr","gzAttr","secondaryNames","tmpTransfer","downloadAs","filename","URL","createObjectURL","createElement","download","body","appendChild","removeChild","revokeObjectURL","downloadBlobAs","Blob","ToRmgModal","toRmgRes","filterEdges","edge","edgeId","index","forEachNode","resultList","newStart","minStartNum","branchFlag","typeInfo","deg","newType","resStart","toRmg","outputLineName","outputLineType","bg","fg","MonoColour","outputForm","I","placeholder","mr","chName","getElementById","enName","lineNum","lineName","exportToRmg","fontSize","label","background","mt","lineHeight","DownloadActions","isAllowProjectTelemetry","useRootSelector","state","app","telemetry","project","nodeExists","runtime","bgColor","useColorModeValue","format","setFormat","formatOptions","png","svg","scale","setScale","scaleOptions","isTransparent","setIsTransparent","fields","options","pngFields","isChecked","isDownloadModalOpen","setIsDownloadModalOpen","isTermsAndConditionsModalOpen","setIsTermsAndConditionsModalOpen","isAttachSelected","setIsAttachSelected","isTermsAndConditionsSelected","setIsTermsAndConditionsSelected","isToRmgOpen","setIsToRmgOpen","handleDownload","Events","numberOfNodes","order","numberOfEdges","calculateCanvasSize","xMin","yMin","xMax","yMax","width","height","elem","cloneNode","hasNode","getNodeAttribute","MiscNodeType","generateRmpInfo","setAttribute","toString","className","styleSet","getComputedStyle","styleName","classList","remove","uris","s","textContent","prepend","alert","Date","valueOf","outerHTML","btoa","unescape","encodeURIComponent","canvas","canvasWidth","canvasHeight","ctx","getContext","fillStyle","fillRect","img","Image","onload","drawImage","toBlob","stringifyParam","store","checked","open","disabled","info","createElementNS","logo","rmp","createTextNode","link","appVersion","paddingBottom","boxSize","alignItems","justifyContent","margin","mb","my","cursor","display","fontWeight","align","GithubIcon","SlackIcon","setOpenGuidaoTransitQECode","ZoomPopover","setIsOpen","svgViewBoxZoom","min","max","step","leftIcon","rightIcon","minW","onOpen","noLabel","TranslateNodesModal","setX","setY","val","Number","updateNodeAttribute","ScaleNodesModal","ChangeTypeModal","availableStationOptions","key","metadata","displayName","at","oldStnType","setOldStnType","newStnType","setNewStnType","disabledOptions","changeStationsTypeInBatch","RemoveLinesWithSingleColorModal","runtimeTheme","setTheme","isColourModalOpen","setIsColourModalOpen","defaultTheme","onUpdate","nextTheme","source","sourceAttr","targetAttr","undirected","dropEdge","procedureButtonStyle","macKeyStyle","fontFamily","keepLastPath","linkColour","isTranslateNodesOpen","setIsTranslateNodesOpen","isScaleNodesOpen","setIsScaleNodesOpen","isChangeTypeOpen","setIsChangeTypeOpen","isRemoveLinesWithSingleColorOpen","setIsRemoveLinesWithSingleColorOpen","isAllowAnalytics","isAllowAppTelemetry","divider","borderColor","flex","setKeepLastPath","Tr","Th","Td","isMacClient","isDisabled","allowAppTelemetry","setTelemetryApp","WindowHeader","past","future","isSettingsModalOpen","setIsSettingsModalOpen","isAboutModalOpen","setIsAboutModalOpen","environment","useReadyConfig","RmgEnv","isStandaloneWindow","handleChangeLanguage","language","changeLanguage","whiteSpace","overflow","textOverflow","popoverHeader","i18nKey","popoverBody","undoAction","redoAction","lang","LANGUAGE_NAMES","GlobalAlerts","globalAlerts","linkedApp","pl","pr","py","handleAppOpen","closeGlobalAlert","PageHeader","StationsWithoutNameOffset","changeStationType","selectedFirst","currentStnType","newAttrs","nameOffsetX","nameOffsetY","removeNodeAttribute","mergeNodeAttributes","stnId","changeLinePathType","newLinePathType","currentLinePathType","getEdgeAttribute","removeEdgeAttribute","mergeEdgeAttributes","changeLineStyleType","newLineStyleType","currentLineStyleType","lineStyles","setEdgeAttribute","getMousePosition","bbox","currentTarget","getBoundingClientRect","clientX","clientY","roundToNearestN","n","Math","round","MAX_VALUE","MIN_VALUE","platform"],"sourceRoot":""}