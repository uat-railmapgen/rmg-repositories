{"version":3,"file":"static/js/ToolsPanel.aba3b06d.chunk.js","mappings":"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","sources":["components/panels/tools/tools.tsx"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MdCircle, MdExpandLess, MdExpandMore } from 'react-icons/md';\nimport {\n    Accordion,\n    AccordionButton,\n    AccordionIcon,\n    AccordionItem,\n    AccordionPanel,\n    Box,\n    Button,\n    Flex,\n    SystemStyleObject,\n} from '@chakra-ui/react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { setMode, setTheme } from '../../../redux/runtime/runtime-slice';\nimport { StationType } from '../../../constants/stations';\nimport { MiscNodeType } from '../../../constants/nodes';\nimport { LinePathType } from '../../../constants/lines';\nimport stations from '../../svgs/stations/stations';\nimport miscNodes from '../../svgs/nodes/misc-nodes';\nimport { linePaths } from '../../svgs/lines/lines';\nimport ColourModal from '../colour-modal/colour-modal';\nimport ColourUtil from '../colour-util';\nimport ThemeButton from '../theme-button';\n\nconst buttonStyle: SystemStyleObject = {\n    justifyContent: 'flex-start',\n    p: 0,\n    pl: '5px',\n    pr: '5px',\n    maxH: 50,\n    minH: 50,\n};\n\nconst accordionPanelStyle: SystemStyleObject = {\n    p: '0',\n    display: 'flex',\n    flexDirection: 'column',\n};\n\nconst ToolsPanel = () => {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const { mode, theme } = useRootSelector(state => state.runtime);\n\n    const [isModalOpen, setIsModalOpen] = React.useState(false);\n\n    const handleStation = (type: StationType) => dispatch(setMode(`station-${type}`));\n    const handleLine = (type: LinePathType) => dispatch(setMode(`line-${type}`));\n    const handleMiscNode = (type: MiscNodeType) => dispatch(setMode(`misc-node-${type}`));\n\n    const [isOpen, setIsOpen] = React.useState(true);\n\n    return (\n        <Flex\n            flexShrink=\"0\"\n            direction=\"column\"\n            width={isOpen ? 400 : 50}\n            maxWidth=\"100%\"\n            height=\"100%\"\n            zIndex=\"5\"\n            transition=\"width 0.3s ease-in-out\"\n        >\n            <Button\n                aria-label=\"Menu\"\n                leftIcon={\n                    isOpen ? (\n                        <MdExpandMore size={40} transform=\"rotate(90)\" />\n                    ) : (\n                        <MdExpandLess size={40} transform=\"rotate(90)\" />\n                    )\n                }\n                onClick={() => setIsOpen(!isOpen)}\n                sx={buttonStyle}\n            >\n                {isOpen ? t('panel.tools.showLess') : undefined}\n            </Button>\n\n            <Flex className=\"tools\" overflow=\"auto\">\n                <Accordion width=\"100%\" allowMultiple defaultIndex={[0, 1, 2]}>\n                    <AccordionItem>\n                        <AccordionButton sx={{ minH: 50, maxH: 50 }}>\n                            <Box as=\"span\" flex=\"1\" textAlign=\"left\">\n                                {isOpen ? t('panel.tools.section.lineDrawing') : undefined}\n                            </Box>\n                            <AccordionIcon />\n                        </AccordionButton>\n                        <AccordionPanel sx={accordionPanelStyle}>\n                            {/* <Button\n                                aria-label=\"Color\"\n                                leftIcon={<MdCircle />}\n                                color={theme[3]}\n                                bg={theme[2]}\n                                size=\"lg\"\n                                style={{ minHeight: 50, minWidth: 50 }}\n                                _hover={{ bg: ColourUtil.fade(theme[2], 0.7) }}\n                                onClick={() => setIsModalOpen(true)}\n                                sx={buttonStyle}\n                            >\n                                {isOpen ? t('Color') : undefined}\n                            </Button> */}\n                            <ThemeButton theme={theme} onClick={() => setIsModalOpen(true)} />\n                            <ColourModal\n                                isOpen={isModalOpen}\n                                defaultTheme={theme}\n                                onClose={() => setIsModalOpen(false)}\n                                onUpdate={nextTheme => dispatch(setTheme(nextTheme))}\n                            />\n\n                            {Object.values(LinePathType).map(type => (\n                                <Button\n                                    key={type}\n                                    aria-label={type}\n                                    leftIcon={linePaths[type].icon}\n                                    onClick={() => handleLine(type)}\n                                    variant={mode === `line-${type}` ? 'solid' : 'outline'}\n                                    sx={buttonStyle}\n                                >\n                                    {isOpen ? t(linePaths[type].metadata.displayName) : undefined}\n                                </Button>\n                            ))}\n                            <Button\n                                aria-label={MiscNodeType.Virtual}\n                                leftIcon={miscNodes[MiscNodeType.Virtual].icon}\n                                onClick={() => handleMiscNode(MiscNodeType.Virtual)}\n                                variant={mode === `misc-node-${MiscNodeType.Virtual}` ? 'solid' : 'outline'}\n                                sx={buttonStyle}\n                            >\n                                {isOpen ? t(miscNodes[MiscNodeType.Virtual].metadata.displayName) : undefined}\n                            </Button>\n                        </AccordionPanel>\n                    </AccordionItem>\n\n                    <AccordionItem>\n                        <AccordionButton sx={{ minH: 50, maxH: 50 }}>\n                            <Box as=\"span\" flex=\"1\" textAlign=\"left\">\n                                {isOpen ? t('panel.tools.section.stations') : undefined}\n                            </Box>\n                            <AccordionIcon />\n                        </AccordionButton>\n                        <AccordionPanel sx={accordionPanelStyle}>\n                            {Object.values(StationType).map(type => (\n                                <Button\n                                    key={type}\n                                    aria-label={type}\n                                    leftIcon={stations[type].icon}\n                                    onClick={() => handleStation(type)}\n                                    variant={mode === `station-${type}` ? 'solid' : 'outline'}\n                                    sx={buttonStyle}\n                                >\n                                    {isOpen ? t(stations[type].metadata.displayName) : undefined}\n                                </Button>\n                            ))}\n                        </AccordionPanel>\n                    </AccordionItem>\n\n                    <AccordionItem>\n                        <AccordionButton sx={{ minH: 50, maxH: 50 }}>\n                            <Box as=\"span\" flex=\"1\" textAlign=\"left\">\n                                {isOpen ? t('panel.tools.section.miscellaneousNodes') : undefined}\n                            </Box>\n                            <AccordionIcon />\n                        </AccordionButton>\n                        <AccordionPanel sx={accordionPanelStyle}>\n                            {Object.values(MiscNodeType)\n                                .filter(type => type !== MiscNodeType.Virtual)\n                                .map(type => (\n                                    <Button\n                                        key={type}\n                                        aria-label={type}\n                                        leftIcon={miscNodes[type].icon}\n                                        onClick={() => handleMiscNode(type)}\n                                        variant={mode === `misc-node-${type}` ? 'solid' : 'outline'}\n                                        sx={buttonStyle}\n                                    >\n                                        {isOpen ? t(miscNodes[type].metadata.displayName) : undefined}\n                                    </Button>\n                                ))}\n                        </AccordionPanel>\n                    </AccordionItem>\n                </Accordion>\n            </Flex>\n        </Flex>\n    );\n};\n\nexport default ToolsPanel;\n"],"names":["buttonStyle","justifyContent","p","pl","pr","maxH","minH","accordionPanelStyle","display","flexDirection","t","useTranslation","dispatch","useRootDispatch","useRootSelector","state","runtime","mode","theme","React","isModalOpen","setIsModalOpen","handleMiscNode","type","setMode","isOpen","setIsOpen","flexShrink","direction","width","maxWidth","height","zIndex","transition","leftIcon","size","transform","onClick","sx","undefined","className","overflow","allowMultiple","defaultIndex","as","flex","textAlign","defaultTheme","onClose","onUpdate","nextTheme","setTheme","Object","values","LinePathType","map","linePaths","icon","handleLine","variant","metadata","displayName","MiscNodeType","miscNodes","StationType","stations","handleStation","filter"],"sourceRoot":""}