{"version":3,"file":"static/js/6882.719c92a3.chunk.js","mappings":"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","sources":["components/svgs/nodes/virtual.tsx","components/svgs/nodes/shmetro-num-line-badge.tsx","components/svgs/nodes/shmetro-text-line-badge.tsx","components/svgs/nodes/gzmtr-line-badge/line-icon-type2.tsx","components/svgs/nodes/gzmtr-line-badge/interchange-box.tsx","components/svgs/nodes/gzmtr-line-badge/line-icon.tsx","components/svgs/nodes/gzmtr-line-badge/gzmtr-line-badge.tsx","components/svgs/nodes/bjsubway-num-line-badge.tsx","components/svgs/nodes/bjsubway-text-line-badge.tsx","components/svgs/nodes/facilities.tsx","components/svgs/nodes/text.tsx","components/svgs/nodes/misc-nodes.ts"],"sourcesContent":["import React from 'react';\nimport { Node, NodeComponentProps } from '../../../constants/nodes';\n\nconst Virtual = (props: NodeComponentProps<VirtualAttributes>) => {\n    const { id, x, y, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})rotate(45)`}>\n                <line x1=\"-5\" y1=\"0\" x2=\"5\" y2=\"0\" stroke=\"black\" />\n                <line x1=\"0\" y1=\"-5\" x2=\"0\" y2=\"5\" stroke=\"black\" />\n                <circle\n                    id={`virtual_circle_${id}`}\n                    r={5}\n                    stroke=\"black\"\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n            </g>\n        ),\n        [id, x, y, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * Virtual specific props.\n */\nexport interface VirtualAttributes {}\n\nconst defaultVirtualAttributes: VirtualAttributes = {};\n\nconst virtualIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} transform=\"rotate(45)\" focusable={false}>\n        <circle cx=\"12\" cy=\"12\" r=\"6\" stroke=\"currentColor\" fill=\"none\" />\n        <line x1=\"6\" y1=\"12\" x2=\"18\" y2=\"12\" stroke=\"currentColor\" />\n        <line x1=\"12\" y1=\"6\" x2=\"12\" y2=\"18\" stroke=\"currentColor\" />\n    </svg>\n);\n\nconst virtual: Node<VirtualAttributes> = {\n    component: Virtual,\n    icon: virtualIcon,\n    defaultAttrs: defaultVirtualAttributes,\n    fields: [],\n    metadata: {\n        displayName: 'panel.details.node.virtual.displayName',\n        tags: [],\n    },\n};\n\nexport default virtual;\n","import React from 'react';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { MiscNodeType, Node, NodeComponentProps } from '../../../constants/nodes';\nimport { AttributesWithColor, ColorField } from '../../panels/details/color-field';\n\nconst ShmetroNumLineBadge = (props: NodeComponentProps<ShmetroNumLineBadgeAttributes>) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const { num = defaultShmetroNumLineBadgeAttributes.num, color = defaultShmetroNumLineBadgeAttributes.color } =\n        attrs ?? defaultShmetroNumLineBadgeAttributes;\n\n    const width = num >= 10 ? 22.67 : 21;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                <rect fill={color[2]} width={width} height=\"22.67\" />\n                <text\n                    className=\"rmp-name__zh\"\n                    textAnchor=\"middle\"\n                    x=\"10.75\"\n                    y=\"18.5\"\n                    fill={color[3]}\n                    fontSize=\"21.33\"\n                    letterSpacing=\"-1.75\"\n                >\n                    {num}\n                </text>\n                <text className=\"rmp-name__zh\" x={width + 2} y=\"12\" fontSize=\"14.67\">\n                    号线\n                </text>\n                <text className=\"rmp-name__en\" x={width + 4} y=\"21.5\" fontSize=\"8\">\n                    Line {num}\n                </text>\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <rect\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    width={width}\n                    height=\"22.67\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n            </g>\n        ),\n        [id, x, y, num, ...color, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * ShmetroNumLineBadge specific props.\n */\nexport interface ShmetroNumLineBadgeAttributes extends AttributesWithColor {\n    num: number;\n}\n\nconst defaultShmetroNumLineBadgeAttributes: ShmetroNumLineBadgeAttributes = {\n    num: 1,\n    color: [CityCode.Shanghai, 'sh1', '#E4002B', MonoColour.white],\n};\n\nconst ShmetroNumLineBadgeFields = [\n    {\n        type: 'input',\n        label: 'panel.details.node.shmetroNumLineBadge.num',\n        value: (attrs?: ShmetroNumLineBadgeAttributes) => (attrs ?? defaultShmetroNumLineBadgeAttributes).num,\n        validator: (val: string) => !Number.isNaN(val),\n        onChange: (val: string | number, attrs_: ShmetroNumLineBadgeAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroNumLineBadgeAttributes;\n            // return if invalid\n            if (Number.isNaN(val)) return attrs;\n            // set value\n            attrs.num = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: (\n            <ColorField type={MiscNodeType.ShmetroNumLineBadge} defaultAttrs={defaultShmetroNumLineBadgeAttributes} />\n        ),\n    },\n];\n\nconst ShmetroNumLineBadgeIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <rect fill=\"currentColor\" x=\"2\" y=\"4\" width=\"10\" height=\"16\" />\n        <text x=\"4\" y=\"18\" fill=\"white\">\n            1\n        </text>\n        <text x=\"14\" y=\"10\" fontSize=\"5\">\n            号线\n        </text>\n        <text x=\"14\" y=\"18\" fontSize=\"4\">\n            Line 1\n        </text>\n    </svg>\n);\n\nconst shmetroNumLineBadge: Node<ShmetroNumLineBadgeAttributes> = {\n    component: ShmetroNumLineBadge,\n    icon: ShmetroNumLineBadgeIcon,\n    defaultAttrs: defaultShmetroNumLineBadgeAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: ShmetroNumLineBadgeFields,\n    metadata: {\n        displayName: 'panel.details.node.shmetroNumLineBadge.displayName',\n        tags: [],\n    },\n};\n\nexport default shmetroNumLineBadge;\n","import React from 'react';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { MiscNodeType, Node, NodeComponentProps } from '../../../constants/nodes';\nimport { AttributesWithColor, ColorField } from '../../panels/details/color-field';\n\nconst ShmetroTextLineBadge = (props: NodeComponentProps<ShmetroTextLineBadgeAttributes>) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const { names = defaultShmetroTextLineBadgeAttributes.names, color = defaultShmetroTextLineBadgeAttributes.color } =\n        attrs ?? defaultShmetroTextLineBadgeAttributes;\n\n    const textLineEl = React.useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: 12 } as DOMRect);\n    React.useEffect(() => setBBox(textLineEl.current!.getBBox()), [...names, setBBox, textLineEl]);\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                <rect fill={color[2]} x=\"0\" width={bBox.width + 3} height=\"21\" />\n                <g ref={textLineEl}>\n                    <text\n                        className=\"rmp-name__zh\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"hanging\"\n                        x={(bBox.width + 3) / 2}\n                        y=\"3\"\n                        fontSize=\"10\"\n                        fill={color[3]}\n                    >\n                        {names[0]}\n                    </text>\n                    <text\n                        className=\"rmp-name__en\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"hanging\"\n                        x={(bBox.width + 3) / 2}\n                        y=\"13\"\n                        fontSize=\"5\"\n                        fill={color[3]}\n                        letterSpacing=\"-0.25\"\n                    >\n                        {names[1]}\n                    </text>\n                </g>\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <rect\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    x=\"0\"\n                    width={bBox.width + 3}\n                    height=\"16\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n            </g>\n        ),\n        [id, x, y, ...names, bBox, ...color, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * ShmetroTextLineBadge specific props.\n */\nexport interface ShmetroTextLineBadgeAttributes extends AttributesWithColor {\n    names: [string, string];\n}\n\nconst defaultShmetroTextLineBadgeAttributes: ShmetroTextLineBadgeAttributes = {\n    names: ['浦江线', 'Pujiang Line'],\n    color: [CityCode.Shanghai, 'pjl', '#999999', MonoColour.white],\n};\n\nconst ShmetroTextLineBadgeFields = [\n    {\n        type: 'input',\n        label: 'panel.details.node.shmetroTextLineBadge.nameZh',\n        value: (attrs?: ShmetroTextLineBadgeAttributes) => (attrs ?? defaultShmetroTextLineBadgeAttributes).names[0],\n        onChange: (val: string | number, attrs_: ShmetroTextLineBadgeAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroTextLineBadgeAttributes;\n            // set value\n            attrs.names[0] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.node.shmetroTextLineBadge.nameEn',\n        value: (attrs?: ShmetroTextLineBadgeAttributes) => (attrs ?? defaultShmetroTextLineBadgeAttributes).names[1],\n        onChange: (val: string | number, attrs_: ShmetroTextLineBadgeAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroTextLineBadgeAttributes;\n            // return if invalid\n            // set value\n            attrs.names[1] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: (\n            <ColorField type={MiscNodeType.ShmetroTextLineBadge} defaultAttrs={defaultShmetroTextLineBadgeAttributes} />\n        ),\n    },\n];\n\nconst ShmetroTextLineBadgeIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <rect fill=\"currentColor\" x=\"2\" y=\"6\" width=\"20\" height=\"12\" />\n        <text x=\"5\" y=\"11\" fontSize=\"5\" fill=\"white\">\n            浦江线\n        </text>\n        <text x=\"3\" y=\"16\" fontSize=\"4\" fill=\"white\">\n            Pujiang Line\n        </text>\n    </svg>\n);\n\nconst shmetroTextLineBadge: Node<ShmetroTextLineBadgeAttributes> = {\n    component: ShmetroTextLineBadge,\n    icon: ShmetroTextLineBadgeIcon,\n    defaultAttrs: defaultShmetroTextLineBadgeAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: ShmetroTextLineBadgeFields,\n    metadata: {\n        displayName: 'panel.details.node.shmetroTextLineBadge.displayName',\n        tags: [],\n    },\n};\n\nexport default shmetroTextLineBadge;\n","import React from 'react';\nimport { MAX_WIDTH } from './line-icon';\n\ninterface LineIconType2Props {\n    lineName: string[];\n    commonPart: string;\n}\n\nexport const LineIconType2 = (props: LineIconType2Props) => {\n    const { lineName, commonPart } = props;\n\n    const wrapperEl = React.useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = React.useState({ x: 0, height: 0, width: 0 } as DOMRect);\n    React.useEffect(() => {\n        wrapperEl.current && setBBox(wrapperEl.current.getBBox());\n    }, [lineName.toString()]);\n\n    const scale = MAX_WIDTH / Math.max(MAX_WIDTH, bBox.width);\n    const dx = (-bBox.x - bBox.width / 2) * scale;\n    const dy = (bBox.height * (1 - scale) * 1.2) / 2;\n\n    return (\n        <g ref={wrapperEl} transform={`translate(${dx},${dy})scale(${scale})`}>\n            <text className=\"rmp-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                {commonPart}\n                <tspan className=\"rmp-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                    {lineName[0].slice(commonPart.length).trim()}\n                </tspan>\n                <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                    {lineName[1].slice(commonPart.length).trim()}\n                </tspan>\n            </text>\n        </g>\n    );\n};\n","import React from 'react';\n\nexport const InterchangeBox = (props: React.SVGProps<SVGRectElement>) => (\n    <rect x={-22.5} height={24} width={45} rx={4.5} {...props} />\n);\n","import React from 'react';\nimport { ColourHex, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { LineIconType2 } from './line-icon-type2';\nimport { InterchangeBox } from './interchange-box';\n\nexport const MAX_WIDTH = 42;\n\ninterface LineIconProps {\n    lineName: string[];\n    foregroundColour: MonoColour;\n    backgroundColour: ColourHex;\n    passed?: boolean;\n}\n\nexport const LineIcon = (props: LineIconProps) => {\n    const { lineName, foregroundColour, backgroundColour, passed } = props;\n\n    const [type, commonPart] = getType(lineName);\n\n    const nameZhEl = React.useRef<SVGTextElement | null>(null);\n    const nameEnEl = React.useRef<SVGTextElement | null>(null);\n\n    const [nameZhBBox, setNameZhBBox] = React.useState({ width: 0 } as DOMRect);\n    const [nameEnBBox, setNameEnBBox] = React.useState({ width: 0 } as DOMRect);\n\n    React.useEffect(() => {\n        nameZhEl.current && setNameZhBBox(nameZhEl.current.getBBox());\n        nameEnEl.current && setNameEnBBox(nameEnEl.current.getBBox());\n    }, [lineName.toString()]);\n\n    const nameZhScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameZhBBox.width);\n    const nameEnScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameEnBBox.width);\n\n    const transforms = {\n        nameZh: {\n            // 7.3 -- original y\n            // 13.5 -- text height\n            // (1 - scale) -- offset multiplier\n            // scale -- visualisation offset\n            // 2 -- divide into halves (top and bottom)\n            y: 7.3 + (13.5 * (1 - nameZhScale) * nameZhScale) / 2,\n        },\n        nameEn: {\n            y: 19.5 - (9 * (1 - nameEnScale) * nameEnScale) / 2,\n        },\n    };\n\n    return (\n        <g textAnchor=\"middle\" fill={passed ? MonoColour.white : foregroundColour}>\n            <InterchangeBox fill={passed ? '#aaa' : backgroundColour} />\n            {type === 2 ? (\n                <LineIconType2 lineName={lineName} commonPart={commonPart} />\n            ) : (\n                <>\n                    <text\n                        ref={nameZhEl}\n                        className=\"rmp-name__zh\"\n                        fontSize={12}\n                        transform={`translate(0,${transforms.nameZh.y})scale(${nameZhScale})`}\n                        // dominantBaseline is specified in rmg-name__zh but missing in rmp-name__zh\n                        dominantBaseline=\"central\"\n                    >\n                        {type === 1 ? (\n                            <>\n                                <tspan\n                                    fontSize={16}\n                                    dy={0.7}\n                                    className=\"rmp-name__zh\"\n                                    // dominantBaseline is specified in rmg-name__zh but missing in rmp-name__zh\n                                    dominantBaseline=\"central\"\n                                >\n                                    {commonPart}\n                                </tspan>\n                                <tspan\n                                    dy={-0.7}\n                                    className=\"rmp-name__zh\"\n                                    // dominantBaseline is specified in rmg-name__zh but missing in rmp-name__zh\n                                    dominantBaseline=\"central\"\n                                >\n                                    {lineName[0].slice(commonPart.length)}\n                                </tspan>\n                            </>\n                        ) : (\n                            lineName[0]\n                        )}\n                    </text>\n                    <text\n                        ref={nameEnEl}\n                        className=\"rmp-name__en\"\n                        fontSize={8}\n                        transform={`translate(0,${transforms.nameEn.y})scale(${nameEnScale})`}\n                        // dominantBaseline is specified in rmg-name__en but missing in rmp-name__en\n                        dominantBaseline=\"middle\"\n                    >\n                        {lineName[1]}\n                    </text>\n                </>\n            )}\n        </g>\n    );\n};\n\n/**\n * type 1: 2号线\n * type 2: APM线\n * type 3: 佛山2号线\n */\nconst getType = (name: string[]): [1 | 2 | 3, string] => {\n    const matchResultForType1 = name[0].match(/^(\\d+)\\D+$/);\n    if (matchResultForType1) return [1, matchResultForType1[1]];\n\n    const matchResultForType2 = name.map(text => text.match(/^(\\w+).+$/));\n    if (matchResultForType2[0] && matchResultForType2[1] && matchResultForType2[0][1] === matchResultForType2[1][1]) {\n        return [2, matchResultForType2[0][1]];\n    }\n\n    return [3, ''];\n};\n","import React from 'react';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { Theme } from '../../../../constants/constants';\nimport { MiscNodeType, Node, NodeComponentProps } from '../../../../constants/nodes';\nimport { ColorField } from '../../../panels/details/color-field';\nimport { LineIcon } from './line-icon';\n\nconst GzmtrLineBadge = (props: NodeComponentProps<GzmtrLineBadgeAttributes>) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const { names = defaultGzmtrLineBadgeAttributes.names, color = defaultGzmtrLineBadgeAttributes.color } =\n        attrs ?? defaultGzmtrLineBadgeAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                <LineIcon lineName={names} foregroundColour={color[3]} backgroundColour={color[2]} />\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <rect\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    x=\"-22.5\"\n                    width=\"45\"\n                    height=\"24\"\n                    rx=\"4.5\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n            </g>\n        ),\n        [id, x, y, ...names, ...color, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * <GzmtrLineBadge /> specific props.\n */\nexport interface GzmtrLineBadgeAttributes {\n    names: [string, string];\n    color: Theme;\n}\n\nconst defaultGzmtrLineBadgeAttributes: GzmtrLineBadgeAttributes = {\n    names: ['1号线', 'Line 1'],\n    color: [CityCode.Guangzhou, 'gz1', '#F3D03E', MonoColour.black],\n};\n\nconst GzmtrLineBadgeFields = [\n    {\n        type: 'input',\n        label: 'panel.details.node.gzmtrLineBadge.nameZh',\n        value: (attrs?: GzmtrLineBadgeAttributes) => (attrs ?? defaultGzmtrLineBadgeAttributes).names[0],\n        onChange: (val: string | number, attrs_: GzmtrLineBadgeAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrLineBadgeAttributes;\n            // set value\n            attrs.names[0] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.node.gzmtrLineBadge.nameEn',\n        value: (attrs?: GzmtrLineBadgeAttributes) => (attrs ?? defaultGzmtrLineBadgeAttributes).names[1],\n        onChange: (val: string | number, attrs_: GzmtrLineBadgeAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrLineBadgeAttributes;\n            // return if invalid\n            // set value\n            attrs.names[1] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: <ColorField type={MiscNodeType.GzmtrLineBadge} defaultAttrs={defaultGzmtrLineBadgeAttributes} />,\n    },\n];\n\nconst GzmtrLineBadgeIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <rect fill=\"currentColor\" x=\"2\" y=\"5\" width=\"20\" height=\"14\" rx=\"1\" />\n        <text x=\"12\" y=\"12\" textAnchor=\"middle\" fontSize=\"6\" fill=\"white\">\n            1号线\n        </text>\n        <text x=\"12\" y=\"17\" textAnchor=\"middle\" fontSize=\"5\" fill=\"white\">\n            Line 1\n        </text>\n    </svg>\n);\n\nconst gzmtrLineBadge: Node<GzmtrLineBadgeAttributes> = {\n    component: GzmtrLineBadge,\n    icon: GzmtrLineBadgeIcon,\n    defaultAttrs: defaultGzmtrLineBadgeAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: GzmtrLineBadgeFields,\n    metadata: {\n        displayName: 'panel.details.node.gzmtrLineBadge.displayName',\n        tags: [],\n    },\n};\n\nexport default gzmtrLineBadge;\n","import React from 'react';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { MiscNodeType, Node, NodeComponentProps } from '../../../constants/nodes';\nimport { AttributesWithColor, ColorField } from '../../panels/details/color-field';\n\nconst BjsubwayNumLineBadge = (props: NodeComponentProps<BjsubwayNumLineBadgeAttributes>) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const { num = defaultBjsubwayNumLineBadgeAttributes.num, color = defaultBjsubwayNumLineBadgeAttributes.color } =\n        attrs ?? defaultBjsubwayNumLineBadgeAttributes;\n\n    const numEl = React.useRef<SVGTextElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: 12 } as DOMRect);\n    React.useEffect(() => setBBox(numEl.current!.getBBox()), [num, setBBox, numEl]);\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const fgColor = color[3] === MonoColour.black ? '#003670' : MonoColour.white;\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})scale(1.5)`}>\n                <rect fill={color[2]} x=\"0\" width={bBox.width + 23} height=\"16\" rx=\"2\" />\n                <text\n                    ref={numEl}\n                    className=\"rmp-name__zh\"\n                    textAnchor=\"middle\"\n                    x={bBox.width / 2 + 3}\n                    y=\"13.5\"\n                    fill={fgColor}\n                >\n                    {num}\n                </text>\n                <text className=\"rmp-name__zh\" x={bBox.width + 4} y=\"8.5\" fontSize=\"8\" fill={fgColor}>\n                    号线\n                </text>\n                <text className=\"rmp-name__en\" x={bBox.width + 6} y=\"13.5\" fontSize=\"4\" fill={fgColor}>\n                    Line {num}\n                </text>\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <rect\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    x=\"0\"\n                    width={bBox.width + 24}\n                    height=\"16\"\n                    rx=\"2\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n            </g>\n        ),\n        [id, x, y, num, ...color, bBox, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * BjsubwayNumLineBadge specific props.\n */\nexport interface BjsubwayNumLineBadgeAttributes extends AttributesWithColor {\n    num: number;\n}\n\nconst defaultBjsubwayNumLineBadgeAttributes: BjsubwayNumLineBadgeAttributes = {\n    num: 1,\n    color: [CityCode.Beijing, 'bj1', '#c23a30', MonoColour.white],\n};\n\nconst BjsubwayNumLineBadgeFields = [\n    {\n        type: 'input',\n        label: 'panel.details.node.bjsubwayNumLineBadge.num',\n        value: (attrs?: BjsubwayNumLineBadgeAttributes) => (attrs ?? defaultBjsubwayNumLineBadgeAttributes).num,\n        validator: (val: string) => !Number.isNaN(val),\n        onChange: (val: string | number, attrs_: BjsubwayNumLineBadgeAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayNumLineBadgeAttributes;\n            // return if invalid\n            if (Number.isNaN(val)) return attrs;\n            // set value\n            attrs.num = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: (\n            <ColorField type={MiscNodeType.BjsubwayNumLineBadge} defaultAttrs={defaultBjsubwayNumLineBadgeAttributes} />\n        ),\n    },\n];\n\nconst BjsubwayNumLineBadgeIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <rect fill=\"currentColor\" x=\"2\" y=\"4\" width=\"20\" height=\"16\" rx=\"2\" />\n        <text x=\"4\" y=\"17\" fill=\"white\" fontSize=\"14\">\n            1\n        </text>\n        <text x=\"11\" y=\"11\" fill=\"white\" fontSize=\"5\">\n            号线\n        </text>\n        <text x=\"11\" y=\"17\" fill=\"white\" fontSize=\"4\">\n            Line 1\n        </text>\n    </svg>\n);\n\nconst bjsubwayNumLineBadge: Node<BjsubwayNumLineBadgeAttributes> = {\n    component: BjsubwayNumLineBadge,\n    icon: BjsubwayNumLineBadgeIcon,\n    defaultAttrs: defaultBjsubwayNumLineBadgeAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: BjsubwayNumLineBadgeFields,\n    metadata: {\n        displayName: 'panel.details.node.bjsubwayNumLineBadge.displayName',\n        tags: [],\n    },\n};\n\nexport default bjsubwayNumLineBadge;\n","import React from 'react';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { MiscNodeType, Node, NodeComponentProps } from '../../../constants/nodes';\nimport { AttributesWithColor, ColorField } from '../../panels/details/color-field';\n\nconst BjsubwayTextLineBadge = (props: NodeComponentProps<BjsubwayTextLineBadgeAttributes>) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultBjsubwayTextLineBadgeAttributes.names,\n        color = defaultBjsubwayTextLineBadgeAttributes.color,\n    } = attrs ?? defaultBjsubwayTextLineBadgeAttributes;\n\n    const textLineEl = React.useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: 12 } as DOMRect);\n    React.useEffect(() => setBBox(textLineEl.current!.getBBox()), [...names, setBBox, textLineEl]);\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const fgColor = color[3] === MonoColour.black ? '#003670' : MonoColour.white;\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})scale(1.5)`}>\n                <rect fill={color[2]} x=\"0\" width={bBox.width + 6} height=\"16\" rx=\"2\" />\n                <g ref={textLineEl}>\n                    <text\n                        className=\"rmp-name__zh\"\n                        textAnchor=\"middle\"\n                        x={(bBox.width + 6) / 2}\n                        y=\"8\"\n                        fontSize=\"7\"\n                        fill={fgColor}\n                    >\n                        {names[0]}\n                    </text>\n                    <text\n                        className=\"rmp-name__en\"\n                        textAnchor=\"middle\"\n                        x={(bBox.width + 6) / 2}\n                        y=\"13.5\"\n                        fontSize=\"4\"\n                        fill={fgColor}\n                    >\n                        {names[1]}\n                    </text>\n                </g>\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <rect\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    x=\"0\"\n                    width={bBox.width + 3}\n                    height=\"16\"\n                    rx=\"2\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n            </g>\n        ),\n        [id, x, y, ...names, bBox, ...color, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * BjsubwayTextLineBadge specific props.\n */\nexport interface BjsubwayTextLineBadgeAttributes extends AttributesWithColor {\n    names: [string, string];\n}\n\nconst defaultBjsubwayTextLineBadgeAttributes: BjsubwayTextLineBadgeAttributes = {\n    names: ['八通线', 'Batong Line'],\n    color: [CityCode.Beijing, 'bj1', '#c23a30', MonoColour.white],\n};\n\nconst BjsubwayTextLineBadgeFields = [\n    {\n        type: 'input',\n        label: 'panel.details.node.bjsubwayTextLineBadge.nameZh',\n        value: (attrs?: BjsubwayTextLineBadgeAttributes) => (attrs ?? defaultBjsubwayTextLineBadgeAttributes).names[0],\n        onChange: (val: string | number, attrs_: BjsubwayTextLineBadgeAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayTextLineBadgeAttributes;\n            // set value\n            attrs.names[0] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.node.bjsubwayTextLineBadge.nameEn',\n        value: (attrs?: BjsubwayTextLineBadgeAttributes) => (attrs ?? defaultBjsubwayTextLineBadgeAttributes).names[1],\n        onChange: (val: string | number, attrs_: BjsubwayTextLineBadgeAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayTextLineBadgeAttributes;\n            // return if invalid\n            // set value\n            attrs.names[1] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: (\n            <ColorField\n                type={MiscNodeType.BjsubwayTextLineBadge}\n                defaultAttrs={defaultBjsubwayTextLineBadgeAttributes}\n            />\n        ),\n    },\n];\n\nconst BjsubwayTextLineBadgeIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <rect fill=\"currentColor\" x=\"2\" y=\"6\" width=\"20\" height=\"12\" rx=\"2\" />\n        <text x=\"3\" y=\"12\" fontSize=\"6\" fill=\"white\">\n            八通线\n        </text>\n        <text x=\"3\" y=\"16\" fontSize=\"3.2\" fill=\"white\">\n            Batong Line\n        </text>\n    </svg>\n);\n\nconst bjsubwayTextLineBadge: Node<BjsubwayTextLineBadgeAttributes> = {\n    component: BjsubwayTextLineBadge,\n    icon: BjsubwayTextLineBadgeIcon,\n    defaultAttrs: defaultBjsubwayTextLineBadgeAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: BjsubwayTextLineBadgeFields,\n    metadata: {\n        displayName: 'panel.details.node.bjsubwayTextLineBadge.displayName',\n        tags: [],\n    },\n};\n\nexport default bjsubwayTextLineBadge;\n","import React from 'react';\nimport { Node, NodeComponentProps } from '../../../constants/nodes';\n\nconst Facilities = (props: NodeComponentProps<FacilitiesAttributes>) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const { type = defaultFacilitiesAttributes.type } = attrs ?? defaultFacilitiesAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                {type === 'airport' && (\n                    <g id=\"airport\" transform=\"scale(0.5)\">\n                        <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"grey\" />\n                        <path\n                            id=\"airport\"\n                            d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                            transform=\"translate(-28.9697,0.14347)\"\n                            fill=\"white\"\n                        />\n                        <circle\n                            cx=\"0\"\n                            cy=\"29.33899\"\n                            r=\"29.33899\"\n                            fill=\"grey\"\n                            fillOpacity=\"0\"\n                            onPointerDown={onPointerDown}\n                            onPointerMove={onPointerMove}\n                            onPointerUp={onPointerUp}\n                            style={{ cursor: 'move' }}\n                        />\n                    </g>\n                )}\n                {type === 'maglev' && (\n                    <g id=\"intbox_maglev\" transform=\"translate(-20,0)scale(0.2)\">\n                        <rect id=\"maglev_5\" fill=\"#0E7572\" height=\"144\" width=\"130\" y=\"40\" x=\"30\" />\n                        <path\n                            id=\"maglev_3\"\n                            fill=\"white\"\n                            d=\"m90,55a40,5 0 0 0 -40,3a5,5 0 0 0 -5,5a5,60 0 0 0 -3,60a5,5 0 0 0 5,5l96,0a5,5 0 0 0 5,-5a5,60 0 0 0 -3,-60a5,5 0 0 0 -5,-5a40,5 0 0 0 -40,-3l-5,-10l-5,10\"\n                        />\n                        <path\n                            id=\"maglev_4\"\n                            fill=\"white\"\n                            d=\"m90,140l-40,0a10,5 0 0 1 -10,-5l0,25a10,15 0 0 0 10,15l15,0l0,-10l-15,0l0,-15l90,0l0,15l-15,0l0,10l15,0a10,15 0 0 0 10,-15l0,-25a10,5 0 0 1 -10,5l-50,0\"\n                        />\n                        <rect id=\"maglev_1\" fill=\"#0E7572\" height=\"25\" width=\"40\" y=\"80\" x=\"50\" />\n                        <rect id=\"maglev_2\" fill=\"#0E7572\" height=\"25\" width=\"40\" y=\"80\" x=\"100\" />\n                        {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                        <rect\n                            id=\"maglev_overlay\"\n                            height=\"144\"\n                            width=\"130\"\n                            y=\"40\"\n                            x=\"30\"\n                            fillOpacity=\"0\"\n                            onPointerDown={onPointerDown}\n                            onPointerMove={onPointerMove}\n                            onPointerUp={onPointerUp}\n                            style={{ cursor: 'move' }}\n                        />\n                    </g>\n                )}\n                {type === 'disney' && (\n                    <g id=\"disney\" transform=\"scale(0.5)\">\n                        <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"grey\" />\n                        <path\n                            fill=\"white\"\n                            d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                            transform=\"translate(-28.9697 0.13398)\"\n                        />\n                        <circle\n                            cx=\"0\"\n                            cy=\"29.33899\"\n                            r=\"29.33899\"\n                            fill=\"grey\"\n                            fillOpacity=\"0\"\n                            onPointerDown={onPointerDown}\n                            onPointerMove={onPointerMove}\n                            onPointerUp={onPointerUp}\n                            style={{ cursor: 'move' }}\n                        />\n                    </g>\n                )}\n                {type === 'railway' && (\n                    // Special thanks to Wikimedia Commons, see https://commons.wikimedia.org/wiki/File:China_Railways.svg\n                    <g id=\"railway\">\n                        <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"grey\" transform=\"translate(0,-2)scale(0.5)\" />\n                        <path\n                            fill=\"white\"\n                            d=\"M169,273.5c0-19,14.7-34.8,33.7-36.3c18.9-1.5,38.1-2.2,57.4-2.2c19.3,0,38.4,0.8,57.3,2.2  c19,1.5,33.7,17.3,33.7,36.3v47.3l-51.3,14.7c-11.2,3.2-18.9,13.4-18.9,25v147.8c0,17.4,12.2,32.3,29.3,35.7l110.6,22.1  c4.9,1,8.4,5.2,8.4,10.2V599H91v-22.7c0-5,3.5-9.2,8.4-10.2L209.9,544c17-3.4,29.3-18.3,29.3-35.7V360.5c0-11.6-7.7-21.8-18.9-25  L169,320.8V273.5z M309.4,31.7c0.2-1.2,0.3-2.4,0.3-3.6c0-14-11.1-25.4-24.9-26C276.6,1.4,268.3,1,260,1c-8.3,0-16.6,0.4-24.7,1.1  c-13.9,0.6-24.9,12-24.9,26c0,1.2,0.1,2.5,0.3,3.6C90.6,54.8,0,160.3,0,287c0,97.2,53.4,182,132.4,226.6l36.8-48.1  C104.3,432.4,59.8,364.9,59.8,287c0-110.6,89.6-200.2,200.2-200.2S460.2,176.4,460.2,287c0,77.9-44.5,145.4-109.4,178.5  c15,19.6,25.6,33.5,36.8,48.1C466.6,469,520,384.2,520,287C520,160.3,429.4,54.8,309.4,31.7z\"\n                            transform=\"translate(-10,0)scale(0.04)\"\n                        />\n                        <circle\n                            cx=\"0\"\n                            cy=\"29.33899\"\n                            r=\"29.33899\"\n                            fill=\"grey\"\n                            transform=\"translate(0,-2)scale(0.5)\"\n                            fillOpacity=\"0\"\n                            onPointerDown={onPointerDown}\n                            onPointerMove={onPointerMove}\n                            onPointerUp={onPointerUp}\n                            style={{ cursor: 'move' }}\n                        />\n                    </g>\n                )}\n                {type === 'hsr' && (\n                    <>\n                        <clipPath id=\"hsr-clip-path\" transform=\"translate(-0.00057 0.01643)\">\n                            <path\n                                fill=\"none\"\n                                d=\"M5.1606.89861a3.67176,3.67176,0,0,0-3.676,3.667v48.966a3.67842,3.67842,0,0,0,3.676,3.692h48.443a3.67892,3.67892,0,0,0,3.678-3.692V4.5656a3.67227,3.67227,0,0,0-3.678-3.667Z\"\n                            />\n                        </clipPath>\n                        <g id=\"hsr\" transform=\"scale(0.5970084519)\">\n                            <rect x={-29.33899} width={58.67798} height={58.67798} />\n                            <g clipPath=\"url(#hsr-clip-path)\" transform=\"translate(-29.33899,0)\">\n                                <rect\n                                    x={-3.25242}\n                                    y={24.74141}\n                                    width={61.75879}\n                                    height={0.98008}\n                                    transform=\"translate(-8.93747 17.31321) rotate(-30.16134)\"\n                                    fill=\"white\"\n                                />\n                                <path\n                                    d=\"M5.77169,48.97289c-2.17407-3.89294,2.56994-10.525,4.85-13.724l.173-.248a83.00826,83.00826,0,0,1,7.39294-9.285,97.384,97.384,0,0,1,11.082-9.958c7.051-6.045,15.832-5.876,16.447-5.894l11.785-.957.276,17.42-11.5271,10.586c-.36.39405-5.553,5.863-18.10193,11.035-6.752,2.783-11.877,4.146-15.66,4.146-3.301,0-5.561-1.049-6.71692-3.121\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                    fill=\"white\"\n                                />\n                                <polygon\n                                    points=\"57.453 29.614 32.426 58.31 35.582 58.509 57.584 30.433 57.453 29.614\"\n                                    fill=\"white\"\n                                />\n                                <path\n                                    d=\"M49.04708,11.61364a.94277.94277,0,0,0-.17407-.227c-.752-.93695-2.988-1.259-5.933-.793a25.98382,25.98382,0,0,0-9.99695,3.032A98.52916,98.52916,0,0,0,20.723,23.69768c-3.1759,3.487-4.645,6.388-3.62292,7.584,1.84,2.166,13.7539.716,22.00793-6.066,9.035-7.42,10.718-11.577,9.93909-13.602\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                />\n                                <path\n                                    d=\"M34.65255,13.81182c5.65991-2.842,11.28088-2.856,12.1499-1.213.88306,1.652-2.99792,5.303-8.656,8.128-5.648,2.837-10.9469,3.805-11.81994,2.15-.873-1.641,2.668-6.237,8.326-9.065\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                    fill=\"white\"\n                                />\n                                <path\n                                    d=\"M58.10958,25.03454c-16.832,20.708-40.7301,26.038-40.7301,26.038,11-6.73,12.769-8.111,18.968-18.01,8.364-13.351,21.77808-21.549,21.912-21.63,0,0-.068,13.5-.1499,13.602\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                />\n                                <path\n                                    d=\"M27.1877,26.69561l9.705-2.814a6.22768,6.22768,0,0,1-1.994,2.759,25.57277,25.57277,0,0,1-6.697,3.405,11.78221,11.78221,0,0,1-5.5.783Z\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                    fill=\"white\"\n                                />\n                                <path\n                                    d=\"M19.59005,25.97692a18.37656,18.37656,0,0,1,3.891-3.976,6.66452,6.66452,0,0,0-.30908,2.213l-4.391,4.829a6.18212,6.18212,0,0,1,.80908-3.066\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                    fill=\"white\"\n                                />\n                                <polygon\n                                    points=\"23.156 58.311 57.463 26.746 57.396 25.857 21.582 58.607 23.156 58.311\"\n                                    fill=\"white\"\n                                />\n                                <path\n                                    d=\"M60.15645,12.35973a68.6782,68.6782,0,0,0-12.602,9.542c-8.15,7.745-12.109,15.259-9.855,16.091,2.24793.816,10.678-4.782,18.83594-12.543,1.828-1.74,3.48-3.424,4.926-5.024Z\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                    fill=\"white\"\n                                />\n                                <path\n                                    d=\"M63.07638,11.82653a40.86955,40.86955,0,0,0-10,7.096c-5.90406,5.437-9.48609,11.105-7.848,11.742,1.657.631,8.28894-3.955,14.188-9.401a61.76591,61.76591,0,0,0,4.61694-4.705Z\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                />\n                                <path\n                                    d=\"M12.67989,42.93969a9.87,9.87,0,0,0-5.754-1.895c-.113.22-.223.439-.33008.662a9.45046,9.45046,0,0,1,5.69507,1.749,6.27885,6.27885,0,0,1,2.61,6.305,10.16524,10.16524,0,0,1-.598,2.228c.238-.023.481-.053.725-.087.78308-2.249,1.394-6.184-2.3479-8.962\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                />\n                            </g>\n                            <rect\n                                x={-29.33899}\n                                width={58.67798}\n                                height={58.67798}\n                                fillOpacity=\"0\"\n                                onPointerDown={onPointerDown}\n                                onPointerMove={onPointerMove}\n                                onPointerUp={onPointerUp}\n                                style={{ cursor: 'move' }}\n                            />\n                        </g>\n                    </>\n                )}\n            </g>\n        ),\n        [id, x, y, type, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * Facilities specific props.\n */\nexport interface FacilitiesAttributes {\n    type: 'airport' | 'maglev' | 'disney' | 'railway' | 'hsr';\n}\n\nconst defaultFacilitiesAttributes: FacilitiesAttributes = {\n    type: 'airport',\n};\n\nconst FacilitiesFields = [\n    {\n        type: 'select',\n        label: 'panel.details.node.FacilitiesAttributes.type',\n        value: (attrs?: FacilitiesAttributes) => (attrs ?? defaultFacilitiesAttributes).type,\n        options: { airport: 'airport', maglev: 'maglev', disney: 'disney', railway: 'railway', hsr: 'hsr' },\n        onChange: (val: string | number, attrs_: FacilitiesAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultFacilitiesAttributes;\n            // set value\n            attrs.type = val as 'airport' | 'maglev' | 'disney' | 'railway' | 'hsr';\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst FacilitiesIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <g transform=\"translate(12, 0)scale(0.4)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"currentColor\" />\n            <path\n                id=\"airport\"\n                d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                transform=\"translate(-28.9697,0.14347)\"\n                fill=\"white\"\n            />\n        </g>\n    </svg>\n);\n\nconst facilities: Node<FacilitiesAttributes> = {\n    component: Facilities,\n    icon: FacilitiesIcon,\n    defaultAttrs: defaultFacilitiesAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: FacilitiesFields,\n    metadata: {\n        displayName: 'panel.details.node.facilities.displayName',\n        tags: [],\n    },\n};\n\nexport default facilities;\n","import { LanguageCode } from '@railmapgen/rmg-translate';\nimport React from 'react';\nimport { Node, NodeComponentProps } from '../../../constants/nodes';\nimport { MultilineText } from '../common/multiline-text';\n\nconst Text = (props: NodeComponentProps<TextAttributes>) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        content = defaultTextAttributes.content,\n        fontSize = defaultTextAttributes.fontSize,\n        lineHeight = defaultTextAttributes.lineHeight,\n        textAnchor = defaultTextAttributes.textAnchor,\n        dominantBaseline = defaultTextAttributes.dominantBaseline,\n        language = defaultTextAttributes.language,\n    } = attrs ?? defaultTextAttributes;\n\n    const textLineEl = React.useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: 12 } as DOMRect);\n    React.useEffect(() => setBBox(textLineEl.current!.getBBox()), [content, setBBox, textLineEl]);\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                {/* This hint rect is hard to remove in exporting. */}\n                {/* <rect\n                    fill=\"gray\"\n                    fillOpacity=\"0.1\"\n                    x={bBox.x - 1.5}\n                    y={bBox.y - 1.5}\n                    width={bBox.width + 3}\n                    height={bBox.height + 3}\n                /> */}\n                <MultilineText\n                    ref={textLineEl}\n                    text={content.split('\\n')}\n                    className={`rmp-name-station rmp-name__${language}`}\n                    fontSize={fontSize}\n                    lineHeight={lineHeight}\n                    textAnchor={textAnchor}\n                    dominantBaseline={dominantBaseline}\n                    grow=\"down\" // this will be ignored\n                />\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <rect\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    x={bBox.x - 1.5}\n                    y={bBox.y - 1.5}\n                    width={bBox.width + 3}\n                    height={bBox.height + 3}\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n            </g>\n        ),\n        [\n            id,\n            x,\n            y,\n            content,\n            fontSize,\n            lineHeight,\n            textAnchor,\n            dominantBaseline,\n            language,\n            bBox,\n            onPointerDown,\n            onPointerMove,\n            onPointerUp,\n        ]\n    );\n};\n\n/**\n * Text specific props.\n */\nexport interface TextAttributes {\n    content: string;\n    fontSize: number;\n    lineHeight: number;\n    textAnchor: React.SVGProps<SVGTextElement>['textAnchor'];\n    dominantBaseline: React.SVGProps<SVGTextElement>['dominantBaseline'];\n    language: LanguageCode;\n}\n\nconst defaultTextAttributes: TextAttributes = {\n    content: 'Enter your text here',\n    fontSize: 16,\n    lineHeight: 16,\n    textAnchor: 'middle',\n    dominantBaseline: 'middle',\n    language: 'en',\n};\n\nconst TextFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.node.text.content',\n        value: (attrs?: TextAttributes) => (attrs ?? defaultTextAttributes).content,\n        onChange: (val: string | number, attrs_: TextAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultTextAttributes;\n            // set value\n            attrs.content = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.node.text.fontSize',\n        value: (attrs?: TextAttributes) => (attrs ?? defaultTextAttributes).fontSize,\n        validator: (val: string) => Number.isInteger(val) && Number(val) > 0,\n        onChange: (val: string | number, attrs_: TextAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultTextAttributes;\n            // set value\n            attrs.fontSize = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.node.text.lineHeight',\n        value: (attrs?: TextAttributes) => (attrs ?? defaultTextAttributes).lineHeight,\n        validator: (val: string) => Number.isInteger(val) && Number(val) > 0,\n        onChange: (val: string | number, attrs_: TextAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultTextAttributes;\n            // set value\n            attrs.lineHeight = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.node.text.textAnchor',\n        value: (attrs?: TextAttributes) => (attrs ?? defaultTextAttributes).textAnchor,\n        options: { start: 'start', middle: 'middle', end: 'end' },\n        onChange: (val: string | number, attrs_: TextAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultTextAttributes;\n            // set value\n            attrs.textAnchor = val as React.SVGProps<SVGTextElement>['textAnchor'];\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.node.text.dominantBaseline',\n        value: (attrs?: TextAttributes) => (attrs ?? defaultTextAttributes).dominantBaseline,\n        options: { auto: 'auto', middle: 'middle', hanging: 'hanging' },\n        onChange: (val: string | number, attrs_: TextAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultTextAttributes;\n            // set value\n            attrs.dominantBaseline = val as React.SVGProps<SVGTextElement>['dominantBaseline'];\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.node.text.language',\n        value: (attrs?: TextAttributes) => (attrs ?? defaultTextAttributes).language,\n        options: { zh: 'Chinese', en: 'English' },\n        onChange: (val: string | number, attrs_: TextAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultTextAttributes;\n            // set value\n            attrs.language = val as LanguageCode;\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst TextIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <text x=\"12\" y=\"12\" textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize=\"10\">\n            Text\n        </text>\n    </svg>\n);\n\nconst text: Node<TextAttributes> = {\n    component: Text,\n    icon: TextIcon,\n    defaultAttrs: defaultTextAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: TextFields,\n    metadata: {\n        displayName: 'panel.details.node.text.displayName',\n        tags: [],\n    },\n};\n\nexport default text;\n","import { MiscNodeType } from '../../../constants/nodes';\nimport virtual from './virtual';\nimport shmetroNumLineBadge from './shmetro-num-line-badge';\nimport shmetroTextLineBadge from './shmetro-text-line-badge';\nimport gzmtrLineBadge from './gzmtr-line-badge/gzmtr-line-badge';\nimport bjsubwayNumLineBadge from './bjsubway-num-line-badge';\nimport bjsubwayTextLineBadge from './bjsubway-text-line-badge';\nimport facilities from './facilities';\nimport text from './text';\n\nconst miscNodes = {\n    [MiscNodeType.Virtual]: virtual,\n    [MiscNodeType.ShmetroNumLineBadge]: shmetroNumLineBadge,\n    [MiscNodeType.ShmetroTextLineBadge]: shmetroTextLineBadge,\n    [MiscNodeType.GzmtrLineBadge]: gzmtrLineBadge,\n    [MiscNodeType.BjsubwayNumLineBadge]: bjsubwayNumLineBadge,\n    [MiscNodeType.BjsubwayTextLineBadge]: bjsubwayTextLineBadge,\n    [MiscNodeType.Facilities]: facilities,\n    [MiscNodeType.Text]: text,\n};\n\nexport default miscNodes;\n"],"names":["component","props","id","x","y","handlePointerDown","handlePointerMove","handlePointerUp","onPointerDown","React","e","onPointerMove","onPointerUp","transform","x1","y1","x2","y2","stroke","r","fill","fillOpacity","style","cursor","icon","viewBox","height","width","focusable","cx","cy","defaultAttrs","fields","metadata","displayName","tags","defaultShmetroNumLineBadgeAttributes","num","color","CityCode","MonoColour","ShmetroNumLineBadgeFields","type","label","value","attrs","validator","val","Number","isNaN","onChange","attrs_","MiscNodeType","className","textAnchor","fontSize","letterSpacing","defaultShmetroTextLineBadgeAttributes","names","ShmetroTextLineBadgeFields","toString","textLineEl","bBox","setBBox","current","getBBox","ref","dominantBaseline","LineIconType2","lineName","commonPart","wrapperEl","scale","MAX_WIDTH","Math","max","dx","dy","slice","length","trim","InterchangeBox","rx","LineIcon","foregroundColour","backgroundColour","passed","getType","nameZhEl","nameEnEl","nameZhBBox","setNameZhBBox","nameEnBBox","setNameEnBBox","nameZhScale","nameEnScale","transforms","nameZh","nameEn","name","matchResultForType1","match","matchResultForType2","map","text","defaultGzmtrLineBadgeAttributes","GzmtrLineBadgeFields","defaultBjsubwayNumLineBadgeAttributes","BjsubwayNumLineBadgeFields","numEl","fgColor","defaultBjsubwayTextLineBadgeAttributes","BjsubwayTextLineBadgeFields","defaultFacilitiesAttributes","FacilitiesFields","options","airport","maglev","disney","railway","hsr","d","clipPath","points","defaultTextAttributes","content","lineHeight","language","TextFields","isInteger","start","middle","end","auto","hanging","zh","en","split","grow","virtual","shmetroNumLineBadge","shmetroTextLineBadge","gzmtrLineBadge","bjsubwayNumLineBadge","bjsubwayTextLineBadge","facilities"],"sourceRoot":""}