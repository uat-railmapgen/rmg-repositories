{"version":3,"file":"static/js/DetailsPanel.bf149389.chunk.js","mappings":"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","sources":["components/panels/details/station-type-section.tsx","components/panels/details/line-type-section.tsx","components/panels/details/info-section.tsx","components/panels/details/node-position-section.tsx","components/panels/details/line-extremities-section.tsx","components/panels/details/details.tsx","util/change-types.ts","../node_modules/react-use-event-hook/src/useEvent.ts","../node_modules/@chakra-ui/layout/dist/chunk-B2MGPQRJ.mjs","../node_modules/@chakra-ui/layout/dist/chunk-HUQHYERK.mjs"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    AlertDialog,\n    AlertDialogOverlay,\n    AlertDialogContent,\n    AlertDialogHeader,\n    AlertDialogBody,\n    AlertDialogFooter,\n    Button,\n} from '@chakra-ui/react';\nimport { RmgLabel, RmgSelect } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { setRefreshNodes } from '../../../redux/runtime/runtime-slice';\nimport { StationType } from '../../../constants/stations';\nimport stations from '../../svgs/stations/stations';\nimport { changeStationType } from '../../../util/change-types';\n\nexport default function StationTypeSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefreshNodes());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefreshNodes, saveGraph]);\n\n    const { selected } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [isChangeTypeWarningOpen, setIsChangeTypeWarningOpen] = React.useState(false);\n    const cancelRef = React.useRef(null);\n    const [newType, setNewType] = React.useState<StationType | undefined>(undefined);\n\n    const currentStationType = graph.current.getNodeAttribute(selectedFirst, 'type') as StationType;\n    // type options for stations and others\n    const availableStationOptions = Object.fromEntries(\n        Object.entries(stations).map(([key, val]) => [key, t(val.metadata.displayName).toString()])\n    ) as { [k in StationType]: string };\n\n    const handleChangeStationType = () => {\n        if (newType) {\n            changeStationType(graph.current, selectedFirst!, newType);\n            hardRefresh();\n        }\n    };\n    const handleClose = (proceed: boolean) => {\n        if (proceed) handleChangeStationType();\n        setNewType(undefined);\n        setIsChangeTypeWarningOpen(false);\n    };\n\n    return (\n        <>\n            <RmgLabel label={t('panel.details.info.stationType')} minW=\"276\">\n                <RmgSelect\n                    options={availableStationOptions}\n                    disabledOptions={[currentStationType]}\n                    value={currentStationType}\n                    onChange={({ target: { value } }) => {\n                        setNewType(value as StationType);\n                        setIsChangeTypeWarningOpen(true);\n                    }}\n                />\n            </RmgLabel>\n\n            <AlertDialog\n                isOpen={isChangeTypeWarningOpen}\n                leastDestructiveRef={cancelRef}\n                onClose={() => handleClose(false)}\n            >\n                <AlertDialogOverlay>\n                    <AlertDialogContent>\n                        <AlertDialogHeader>{t('warning')}</AlertDialogHeader>\n                        <AlertDialogBody>{t('panel.details.changeStationTypeContent')}</AlertDialogBody>\n                        <AlertDialogFooter>\n                            <Button ref={cancelRef} onClick={() => handleClose(false)}>\n                                {t('cancel')}\n                            </Button>\n                            <Button ml=\"2\" colorScheme=\"red\" onClick={() => handleClose(true)}>\n                                {t('panel.details.changeType')}\n                            </Button>\n                        </AlertDialogFooter>\n                    </AlertDialogContent>\n                </AlertDialogOverlay>\n            </AlertDialog>\n        </>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    AlertDialog,\n    AlertDialogOverlay,\n    AlertDialogContent,\n    AlertDialogHeader,\n    AlertDialogBody,\n    AlertDialogFooter,\n    Button,\n} from '@chakra-ui/react';\nimport { RmgLabel, RmgSelect } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { setRefreshEdges } from '../../../redux/runtime/runtime-slice';\nimport { linePaths, lineStyles } from '../../svgs/lines/lines';\nimport { changeLinePathType, changeLineStyleType } from '../../../util/change-types';\nimport { LinePathType, LineStyleType } from '../../../constants/lines';\n\nexport default function LineTypeSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefreshEdges, saveGraph]);\n\n    const { selected, theme } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [isChangeTypeWarningOpen, setIsChangeTypeWarningOpen] = React.useState(false);\n    const cancelRef = React.useRef(null);\n\n    const availableLinePathOptions = Object.fromEntries(\n        Object.entries(linePaths).map(([key, val]) => [key, t(val.metadata.displayName).toString()])\n    ) as { [k in LinePathType]: string };\n    const [currentLinePathType, setCurrentLinePathType] = React.useState(\n        graph.current.getEdgeAttribute(selectedFirst, 'type')\n    );\n    const [newLinePathType, setNewLinePathType] = React.useState<LinePathType | undefined>(undefined);\n\n    const availableLineStyleOptions = Object.fromEntries(\n        Object.entries(lineStyles).map(([key, val]) => [key, t(val.metadata.displayName).toString()])\n    ) as { [k in LineStyleType]: string };\n    const [currentLineStyleType, setCurrentLineStyleType] = React.useState(\n        graph.current.getEdgeAttribute(selectedFirst, 'style')\n    );\n    const [newLineStyleType, setNewLineStyleType] = React.useState<LineStyleType | undefined>(undefined);\n\n    const disabledLinePathOptions = Object.values(LinePathType).filter(\n        linePathType => !lineStyles[currentLineStyleType].metadata.supportLinePathType.includes(linePathType)\n    );\n    const disabledLineStyleOptions = Object.values(LineStyleType).filter(\n        lineStyleType => !lineStyles[lineStyleType].metadata.supportLinePathType.includes(currentLinePathType)\n    );\n\n    const handleChangeLinePathType = () => {\n        if (newLinePathType) {\n            changeLinePathType(graph.current, selectedFirst!, newLinePathType);\n            setCurrentLinePathType(graph.current.getEdgeAttribute(selectedFirst, 'type'));\n            hardRefresh();\n        }\n    };\n    const handleChangeLineStyleType = () => {\n        if (newLineStyleType) {\n            changeLineStyleType(graph.current, selectedFirst!, newLineStyleType, theme);\n            setCurrentLineStyleType(graph.current.getEdgeAttribute(selectedFirst, 'style'));\n            hardRefresh();\n        }\n    };\n    const handleClose = (proceed: boolean) => {\n        if (proceed) {\n            if (newLinePathType) {\n                handleChangeLinePathType();\n                setNewLinePathType(undefined);\n            } else if (newLineStyleType) {\n                handleChangeLineStyleType();\n                setNewLineStyleType(undefined);\n            }\n        }\n        setIsChangeTypeWarningOpen(false);\n    };\n\n    return (\n        <>\n            <RmgLabel label={t('panel.details.info.linePathType')} minW=\"276\">\n                <RmgSelect\n                    options={availableLinePathOptions}\n                    disabledOptions={disabledLinePathOptions}\n                    value={currentLinePathType}\n                    onChange={({ target: { value } }) => {\n                        setNewLinePathType(value as LinePathType);\n                        setIsChangeTypeWarningOpen(true);\n                    }}\n                />\n            </RmgLabel>\n            <RmgLabel label={t('panel.details.info.lineStyleType')} minW=\"276\">\n                <RmgSelect\n                    options={availableLineStyleOptions}\n                    disabledOptions={disabledLineStyleOptions}\n                    value={currentLineStyleType}\n                    onChange={({ target: { value } }) => {\n                        setNewLineStyleType(value as LineStyleType);\n                        setIsChangeTypeWarningOpen(true);\n                    }}\n                />\n            </RmgLabel>\n\n            <AlertDialog\n                isOpen={isChangeTypeWarningOpen}\n                leastDestructiveRef={cancelRef}\n                onClose={() => handleClose(false)}\n            >\n                <AlertDialogOverlay>\n                    <AlertDialogContent>\n                        <AlertDialogHeader>{t('warning')}</AlertDialogHeader>\n                        <AlertDialogBody>{t('panel.details.changeLineTypeContent')}</AlertDialogBody>\n                        <AlertDialogFooter>\n                            <Button ref={cancelRef} onClick={() => handleClose(false)}>\n                                {t('cancel')}\n                            </Button>\n                            <Button ml=\"2\" colorScheme=\"red\" onClick={() => handleClose(true)}>\n                                {t('panel.details.changeType')}\n                            </Button>\n                        </AlertDialogFooter>\n                    </AlertDialogContent>\n                </AlertDialogOverlay>\n            </AlertDialog>\n        </>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootSelector } from '../../../redux';\nimport StationTypeSection from './station-type-section';\nimport LineTypeSection from './line-type-section';\n\nexport default function InfoSection() {\n    const { t } = useTranslation();\n\n    const { selected } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('panel.details.info.id'),\n            value: selected.length > 0 ? selected.join(', ') : 'undefined',\n            minW: 276,\n        },\n    ];\n\n    // deal with undefined and multiple selection\n    if (selected.length === 0) {\n        // do nothing as the details panel will be closed\n    } else if (selected.length > 1) {\n        fields.push({\n            type: 'input',\n            label: t('panel.details.info.type'),\n            value: 'multiple selection',\n            minW: 276,\n        });\n    }\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('panel.details.info.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n\n            {selected.length === 1 && selectedFirst!.startsWith('stn') && graph.current.hasNode(selectedFirst) && (\n                <StationTypeSection />\n            )}\n\n            {selected.length === 1 && selectedFirst!.startsWith('line') && graph.current.hasEdge(selectedFirst) && (\n                <LineTypeSection />\n            )}\n        </Box>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { setRefreshNodes, setRefreshEdges } from '../../../redux/runtime/runtime-slice';\n\nexport default function NodePositionSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefreshNodes());\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefreshNodes, setRefreshEdges, saveGraph]);\n    const {\n        selected,\n        refresh: { nodes: refreshNodes },\n    } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [pos, setPos] = React.useState({ x: 0, y: 0 });\n    React.useEffect(() => {\n        if (selectedFirst?.startsWith('stn') || selectedFirst?.startsWith('misc_node_')) {\n            const x = graph.current.getNodeAttribute(selectedFirst, 'x');\n            const y = graph.current.getNodeAttribute(selectedFirst, 'y');\n            setPos({ x, y });\n        }\n    }, [refreshNodes, selected]);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('panel.details.nodePosition.pos.x'),\n            value: pos.x.toString(),\n            validator: val => !Number.isNaN(val),\n            onChange: val => {\n                graph.current.mergeNodeAttributes(selectedFirst, { x: Number(val) });\n                hardRefresh();\n            },\n        },\n        {\n            type: 'input',\n            label: t('panel.details.nodePosition.pos.y'),\n            value: pos.y.toString(),\n            validator: val => !Number.isNaN(val),\n            onChange: val => {\n                graph.current.mergeNodeAttributes(selectedFirst, { y: Number(val) });\n                hardRefresh();\n            },\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('panel.details.nodePosition.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport useEvent from 'react-use-event-hook';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Button, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { ExternalStationAttributes } from '../../../constants/stations';\nimport { addSelected, clearSelected } from '../../../redux/runtime/runtime-slice';\n\nexport default function LineExtremitiesSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const { selected } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [source, setSource] = React.useState('undefined');\n    const [target, setTarget] = React.useState('undefined');\n    const [sourceName, setSourceName] = React.useState('undefined');\n    const [targetName, setTargetName] = React.useState('undefined');\n    React.useEffect(() => {\n        if (selectedFirst?.startsWith('line')) {\n            const [s, t] = graph.current.extremities(selectedFirst);\n            setSource(s);\n            setTarget(t);\n\n            // Extract name[0] from nodes if this node is a station.\n            if (s.startsWith('stn')) {\n                const type = graph.current.getNodeAttribute(s, 'type');\n                setSourceName(\n                    (\n                        graph.current.getNodeAttribute(\n                            s,\n                            type\n                        ) as ExternalStationAttributes[keyof ExternalStationAttributes]\n                    )?.names.at(0) ?? 'undefined'\n                );\n            }\n            if (t.startsWith('stn')) {\n                const type = graph.current.getNodeAttribute(t, 'type');\n                setTargetName(\n                    (\n                        graph.current.getNodeAttribute(\n                            t,\n                            type\n                        ) as ExternalStationAttributes[keyof ExternalStationAttributes]\n                    )?.names.at(0) ?? 'undefined'\n                );\n            }\n        }\n    }, [selected]);\n\n    const handleSource = useEvent(() => {\n        dispatch(clearSelected());\n        dispatch(addSelected(source));\n    });\n    const handleTarget = useEvent(() => {\n        dispatch(clearSelected());\n        dispatch(addSelected(target));\n    });\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'custom',\n            label: t('panel.details.lineExtremities.source'),\n            component: (\n                <Button flex={1} size=\"sm\" variant=\"link\" onClick={handleSource}>\n                    {source}\n                </Button>\n            ),\n        },\n        {\n            type: 'custom',\n            label: t('panel.details.lineExtremities.target'),\n            component: (\n                <Button flex={1} size=\"sm\" variant=\"link\" onClick={handleTarget}>\n                    {target}\n                </Button>\n            ),\n        },\n        {\n            type: 'input',\n            label: t('panel.details.lineExtremities.sourceName'),\n            value: sourceName,\n        },\n        {\n            type: 'input',\n            label: t('panel.details.lineExtremities.targetName'),\n            value: targetName,\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('panel.details.lineExtremities.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Button, Heading, HStack } from '@chakra-ui/react';\nimport { nanoid } from 'nanoid';\nimport {\n    RmgFields,\n    RmgFieldsField,\n    RmgSidePanel,\n    RmgSidePanelHeader,\n    RmgSidePanelBody,\n    RmgSidePanelFooter,\n} from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { clearSelected, setGlobalAlert, setRefreshNodes, setRefreshEdges } from '../../../redux/runtime/runtime-slice';\nimport { NodeAttributes } from '../../../constants/constants';\nimport stations from '../../svgs/stations/stations';\nimport miscNodes from '../../svgs/nodes/misc-nodes';\nimport { linePaths, lineStyles } from '../../svgs/lines/lines';\nimport InfoSection from './info-section';\nimport NodePositionSection from './node-position-section';\nimport LineExtremitiesSection from './line-extremities-section';\n\nconst nodes = { ...stations, ...miscNodes };\n\nconst DetailsPanel = () => {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefreshNodes());\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefreshNodes, setRefreshEdges, saveGraph]);\n    const { selected, mode } = useRootSelector(state => state.runtime);\n    const graph = React.useRef(window.graph);\n\n    const handleClose = () => dispatch(clearSelected());\n    const handleDuplicate = (selectedFirst: string) => {\n        const allAttr = JSON.parse(JSON.stringify(graph.current.getNodeAttributes(selectedFirst))) as NodeAttributes;\n        allAttr.x += 50;\n        allAttr.y += 50;\n        const id = selectedFirst.startsWith('stn') ? `stn_${nanoid(10)}` : `misc_node_${nanoid(10)}`;\n        graph.current.addNode(id, allAttr);\n        dispatch(setRefreshNodes());\n        dispatch(saveGraph(graph.current.export()));\n    };\n    const handleRemove = (selected: string[]) => {\n        dispatch(clearSelected());\n        selected.forEach(s => {\n            if (graph.current.hasNode(s)) {\n                graph.current.dropNode(s);\n                hardRefresh();\n            } else if (graph.current.hasEdge(s)) {\n                graph.current.dropEdge(s);\n                dispatch(setRefreshEdges());\n                dispatch(saveGraph(graph.current.export()));\n            }\n        });\n    };\n    // A helper method to remove all lines with the same color\n    // const handleRemoveEntireLine = (selectedFirst: string) => {\n    //     dispatch(clearSelected());\n    //     const theme = graph.current.getEdgeAttribute(selectedFirst, 'color');\n    //     const lines = graph.current.filterEdges((edge, attr, source, target, sourceAttr, targetAttr, undirected) =>\n    //         attr.color.every((v, i) => v === theme[i])\n    //     );\n    //     lines.forEach(line => {\n    //         graph.current.dropEdge(line);\n    //     });\n    //     hardRefresh();\n    // };\n\n    // hide reconcile for now\n    const [reconcileId, setReconcileId] = React.useState('');\n    React.useEffect(() => {\n        const selectedFirst = selected.at(0);\n        if (graph.current.hasEdge(selectedFirst))\n            setReconcileId(graph.current.getEdgeAttribute(selectedFirst, 'reconcileId') ?? 'undefined');\n    }, [selected]);\n\n    const fields: RmgFieldsField[] = [];\n    const selectedFirst = selected.at(0);\n\n    if (selected.length === 1 && graph.current.hasNode(selectedFirst)) {\n        const type = graph.current.getNodeAttribute(selectedFirst, 'type');\n        const attrs = graph.current.getNodeAttribute(selectedFirst, type);\n        fields.push(\n            ...nodes[type].fields\n                // TODO: filter will complain the type\n                // @ts-expect-error\n                .filter(field => field.type !== 'custom')\n                .map(\n                    // @ts-expect-error\n                    field =>\n                        ({\n                            type: field.type,\n                            label: t(field.label),\n                            value: field.value?.(attrs),\n                            isChecked: field.isChecked?.(attrs),\n                            options: field.options,\n                            disabledOptions: field.disabledOptions && field.disabledOptions(attrs),\n                            validator: field.validator,\n                            oneLine: field.oneLine,\n                            // TODO: val could be string | number | boolean or others in different types.\n                            onChange: (val: any) => {\n                                let updatedAttrs: NodeAttributes;\n                                try {\n                                    updatedAttrs = field.onChange(val, attrs);\n                                } catch (error) {\n                                    dispatch(\n                                        setGlobalAlert({\n                                            status: 'error',\n                                            message: t(`err-code.${error as string}`),\n                                        })\n                                    );\n                                    return;\n                                }\n\n                                graph.current.mergeNodeAttributes(selectedFirst, {\n                                    [type]: updatedAttrs,\n                                });\n                                dispatch(setRefreshNodes());\n                                dispatch(saveGraph(graph.current.export()));\n                            },\n                        } as RmgFieldsField)\n                ),\n            // TODO: filter will complain the type\n            // @ts-expect-error\n            ...nodes[type].fields.filter(field => field.type === 'custom')\n        );\n    }\n\n    if (selected.length === 1 && graph.current.hasEdge(selectedFirst)) {\n        // fields.push({\n        //     type: 'input',\n        //     label: t('panel.details.line.reconcileId'),\n        //     value: reconcileId,\n        //     onChange: val => {\n        //         setReconcileId(val);\n        //         graph.current.mergeEdgeAttributes(selectedFirst, { reconcileId: val });\n        //         dispatch(setRefreshEdges());\n        //         dispatch(saveGraph(graph.current.export()));\n        //     },\n        // });\n        const type = graph.current.getEdgeAttribute(selectedFirst, 'type');\n        const attrs = graph.current.getEdgeAttribute(selectedFirst, type);\n        fields.push(\n            ...linePaths[type].fields.map(\n                field =>\n                    ({\n                        // TODO: fix this\n                        type: field.type,\n                        label: t(field.label),\n                        // @ts-ignore-error\n                        value: field.value(attrs),\n                        // @ts-ignore-error\n                        options: field.options,\n                        // @ts-ignore-error\n                        disabledOptions: field.disabledOptions && field.disabledOptions(attrs),\n                        // @ts-ignore-error\n                        validator: field.validator,\n                        onChange: (val: string | number) => {\n                            graph.current.mergeEdgeAttributes(selectedFirst, {\n                                // @ts-ignore-error\n                                [type]: field.onChange(val, attrs),\n                            });\n                            // console.log(graph.current.getEdgeAttributes(selectedFirst));\n                            dispatch(setRefreshEdges());\n                            dispatch(saveGraph(graph.current.export()));\n                        },\n                    } as RmgFieldsField)\n            )\n        );\n        const style = graph.current.getEdgeAttribute(selectedFirst, 'style');\n        // TODO: filter will complain the type\n        // @ts-expect-error\n        fields.push(...lineStyles[style].fields.filter(field => field.type === 'custom'));\n    }\n\n    return (\n        <RmgSidePanel\n            isOpen={selected.length > 0 && !mode.startsWith('line') && !mode.startsWith('misc-edge')}\n            width={300}\n            header=\"Dummy header\"\n            alwaysOverlay\n        >\n            <RmgSidePanelHeader onClose={handleClose}>{t('panel.details.header')}</RmgSidePanelHeader>\n            <RmgSidePanelBody>\n                <InfoSection />\n\n                {selected.length === 1 && graph.current.hasNode(selectedFirst) && <NodePositionSection />}\n\n                {selected.length === 1 && graph.current.hasEdge(selectedFirst) && <LineExtremitiesSection />}\n\n                {selected.length === 1 && (\n                    <Box p={1}>\n                        <Heading as=\"h5\" size=\"sm\">\n                            {t('panel.details.specificAttrsTitle')}\n                        </Heading>\n\n                        <RmgFields fields={fields} minW={276} />\n                    </Box>\n                )}\n            </RmgSidePanelBody>\n            <RmgSidePanelFooter>\n                <HStack>\n                    {selected.length === 1 && graph.current.hasNode(selected.at(0)) && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => handleDuplicate(selected.at(0)!)}>\n                            {t('panel.details.footer.duplicate')}\n                        </Button>\n                    )}\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleRemove(selected)}>\n                        {t('panel.details.footer.remove')}\n                    </Button>\n                    {/* {selected.length === 1 && selectedFirst?.startsWith('line-') && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => handleRemoveEntireLine(selected.at(0)!)}>\n                            {t('panel.details.footer.removeEntireLine')}\n                        </Button>\n                    )} */}\n                </HStack>\n            </RmgSidePanelFooter>\n        </RmgSidePanel>\n    );\n};\n\nexport default DetailsPanel;\n","import { MultiDirectedGraph } from 'graphology';\nimport { EdgeAttributes, GraphAttributes, NodeAttributes, Theme } from '../constants/constants';\nimport { StationType } from '../constants/stations';\nimport { LinePathType, LineStyleType } from '../constants/lines';\nimport stations from '../components/svgs/stations/stations';\nimport { linePaths, lineStyles } from '../components/svgs/lines/lines';\nimport { SingleColorAttributes } from '../components/svgs/lines/styles/single-color';\n\n/**\n * Change a station's type.\n * @param graph Graph.\n * @param selectedFirst Current station's id.\n * @param newType New station's type.\n */\nexport const changeStationType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newStnType: StationType\n) => {\n    const currentStnType = graph.getNodeAttribute(selectedFirst, 'type') as StationType;\n    const names = graph.getNodeAttribute(selectedFirst, currentStnType)!.names;\n    graph.removeNodeAttribute(selectedFirst, currentStnType);\n    const newAttrs = { ...stations[newStnType].defaultAttrs, names };\n    graph.mergeNodeAttributes(selectedFirst, { type: newStnType, [newStnType]: newAttrs });\n};\n\n/**\n * Change all the stations' type of currentStnType to newStnType in batch.\n * @param graph Graph.\n * @param currentStnType Current station's type.\n * @param newStnType New station's type.\n * @returns Nothing.\n */\nexport const changeStationsTypeInBatch = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    currentStnType: StationType,\n    newStnType: StationType\n) =>\n    graph\n        .filterNodes((node, attr) => node.startsWith('stn') && attr.type === currentStnType)\n        .forEach(stnId => {\n            changeStationType(graph, stnId, newStnType);\n        });\n\n/**\n * Change a line's path type.\n * @param graph Graph.\n * @param selectedFirst Current line's id.\n * @param newType New line's path type.\n */\nexport const changeLinePathType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newLinePathType: LinePathType\n) => {\n    const currentLinePathType = graph.getEdgeAttribute(selectedFirst, 'type') as LinePathType;\n    graph.removeEdgeAttribute(selectedFirst, currentLinePathType);\n    const newAttrs = JSON.parse(JSON.stringify(linePaths[newLinePathType].defaultAttrs));\n    graph.mergeEdgeAttributes(selectedFirst, { type: newLinePathType, [newLinePathType]: newAttrs });\n};\n\n/**\n * Change a line's style type.\n * @param graph Graph.\n * @param selectedFirst Current line's id.\n * @param newType New line's style type.\n * @param theme A handy helper to override color to current theme.\n */\nexport const changeLineStyleType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newLineStyleType: LineStyleType,\n    theme?: Theme\n) => {\n    const currentLineStyleType = graph.getEdgeAttribute(selectedFirst, 'style') as LineStyleType;\n    graph.removeEdgeAttribute(selectedFirst, currentLineStyleType);\n    const newAttrs = JSON.parse(JSON.stringify(lineStyles[newLineStyleType].defaultAttrs));\n    if (newLineStyleType === LineStyleType.SingleColor && theme) (newAttrs as SingleColorAttributes).color = theme;\n    graph.mergeEdgeAttributes(selectedFirst, { style: newLineStyleType, [newLineStyleType]: newAttrs });\n};\n","import {\n  useLayoutEffect,\n  useRef,\n  useInsertionEffect, // Only available in React 18+\n} from \"react\";\n\ntype AnyFunction = (...args: any[]) => any;\n\n/**\n * Suppress the warning when using useLayoutEffect with SSR. (https://reactjs.org/link/uselayouteffect-ssr)\n * Make use of useInsertionEffect if available.\n */\nconst useBrowserEffect = typeof window !== \"undefined\" ? useInsertionEffect ?? useLayoutEffect : () => {};\n\n/**\n * Similar to useCallback, with a few subtle differences:\n * - The returned function is a stable reference, and will always be the same between renders\n * - No dependency lists required\n * - Properties or state accessed within the callback will always be \"current\"\n */\nexport function useEvent<TCallback extends AnyFunction>(callback: TCallback): TCallback {\n  // Keep track of the latest callback:\n  const latestRef = useRef<TCallback>(useEvent_shouldNotBeInvokedBeforeMount as any);\n  useBrowserEffect(() => {\n    latestRef.current = callback;\n  }, [callback]);\n\n  // Create a stable callback that always calls the latest callback:\n  // using useRef instead of useCallback avoids creating and empty array on every render\n  const stableRef = useRef<TCallback>(null as any);\n  if (!stableRef.current) {\n    stableRef.current = function (this: any) {\n      return latestRef.current.apply(this, arguments as any);\n    } as TCallback;\n  }\n\n  return stableRef.current;\n}\n\n/**\n * Render methods should be pure, especially when concurrency is used,\n * so we will throw this error if the callback is called while rendering.\n */\nfunction useEvent_shouldNotBeInvokedBeforeMount() {\n  throw new Error(\n    \"INVALID_USEEVENT_INVOCATION: the callback from useEvent cannot be invoked before the component has mounted.\"\n  );\n}\n\nexport default useEvent;\n","// src/heading.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = forwardRef(function Heading2(props, ref) {\n  const styles = useStyleConfig(\"Heading\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.h2,\n    {\n      ref,\n      className: cx(\"chakra-heading\", props.className),\n      ...rest,\n      __css: styles\n    }\n  );\n});\nHeading.displayName = \"Heading\";\n\nexport {\n  Heading\n};\n","import {\n  Stack\n} from \"./chunk-O5CRURSQ.mjs\";\n\n// src/stack/h-stack.tsx\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar HStack = forwardRef((props, ref) => /* @__PURE__ */ jsx(Stack, { align: \"center\", ...props, direction: \"row\", ref }));\nHStack.displayName = \"HStack\";\n\nexport {\n  HStack\n};\n"],"names":["StationTypeSection","t","useTranslation","dispatch","useRootDispatch","hardRefresh","React","setRefreshNodes","saveGraph","graph","current","export","selectedFirst","useRootSelector","state","runtime","selected","at","window","isChangeTypeWarningOpen","setIsChangeTypeWarningOpen","cancelRef","undefined","newType","setNewType","currentStationType","getNodeAttribute","availableStationOptions","Object","fromEntries","entries","stations","map","key","val","metadata","displayName","toString","handleClose","proceed","changeStationType","label","minW","options","disabledOptions","value","onChange","target","isOpen","leastDestructiveRef","onClose","ref","onClick","ml","colorScheme","LineTypeSection","setRefreshEdges","theme","availableLinePathOptions","linePaths","getEdgeAttribute","currentLinePathType","setCurrentLinePathType","newLinePathType","setNewLinePathType","availableLineStyleOptions","lineStyles","currentLineStyleType","setCurrentLineStyleType","newLineStyleType","setNewLineStyleType","disabledLinePathOptions","values","LinePathType","filter","linePathType","supportLinePathType","includes","disabledLineStyleOptions","LineStyleType","lineStyleType","changeLinePathType","changeLineStyleType","InfoSection","fields","type","length","join","push","p","as","size","startsWith","hasNode","hasEdge","NodePositionSection","refreshNodes","refresh","nodes","x","y","pos","setPos","validator","Number","isNaN","mergeNodeAttributes","LineExtremitiesSection","source","setSource","setTarget","sourceName","setSourceName","targetName","setTargetName","extremities","s","names","handleSource","useEvent","clearSelected","addSelected","handleTarget","component","flex","variant","miscNodes","mode","setReconcileId","attrs","field","isChecked","oneLine","updatedAttrs","error","setGlobalAlert","status","message","mergeEdgeAttributes","style","width","header","alwaysOverlay","allAttr","JSON","parse","stringify","getNodeAttributes","id","nanoid","addNode","handleDuplicate","forEach","dropNode","dropEdge","handleRemove","newStnType","currentStnType","removeNodeAttribute","newAttrs","defaultAttrs","changeStationsTypeInBatch","filterNodes","node","attr","stnId","removeEdgeAttribute","color","useBrowserEffect","react_1","useInsertionEffect","callback","latestRef","useRef","useEvent_shouldNotBeInvokedBeforeMount","stableRef","apply","this","arguments","Error","exports","Heading","forwardRef","props","styles","useStyleConfig","omitThemingProps","rest","className","jsx","chakra","cx","__css","HStack","Stack","align","direction"],"sourceRoot":""}