{"version":3,"file":"static/js/3649.0490e6d0.chunk.js","mappings":"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","sources":["components/svgs/common/multiline-text.tsx","components/svgs/stations/shmetro-basic.tsx","components/svgs/stations/shmetro-basic-2020.tsx","components/svgs/stations/shmetro-int.tsx","components/svgs/stations/gzmtr-basic.tsx","components/panels/details/interchange-card.tsx","components/panels/details/interchange-field.tsx","components/svgs/stations/gzmtr-int.tsx","components/svgs/stations/bjsubway-basic.tsx","components/svgs/stations/bjsubway-int.tsx","components/svgs/stations/mtr.tsx","components/svgs/stations/stations.ts","constants/constants.ts"],"sourcesContent":["import React from 'react';\nimport { NameOffsetY } from '../../../constants/stations';\n\ninterface MultilineTextProps extends React.SVGProps<SVGTextElement> {\n    text: string[];\n    lineHeight: number;\n    grow: 'up' | 'down';\n    baseOffset?: number;\n}\n\nexport const MultilineText = React.forwardRef((props: MultilineTextProps, ref: React.Ref<SVGGElement>) => {\n    const {\n        text,\n        lineHeight,\n        grow,\n        // if dominantBaseline is defined, use it, or we calculate the dominantBaseline for you\n        dominantBaseline = grow === 'up' ? 'auto' : 'hanging',\n        baseOffset = 2, // default dy offset\n        ...otherSvgTextProps\n    } = props;\n\n    return React.useMemo(\n        () => (\n            <g ref={ref}>\n                {(grow === 'up' ? [...text].reverse() : text).map((t, i) => (\n                    <text\n                        key={t}\n                        dy={(i * lineHeight + baseOffset) * (grow === 'up' ? -1 : 1)}\n                        dominantBaseline={dominantBaseline}\n                        {...otherSvgTextProps}\n                    >\n                        {t}\n                    </text>\n                ))}\n            </g>\n        ),\n        [text.join('+'), lineHeight, grow, dominantBaseline, JSON.stringify(otherSvgTextProps)]\n    );\n});\n\n// Display component name in debugging.\n// Required by eslint react/display-name.\nMultilineText.displayName = 'MultilineText';\n\n/**\n * This is the default const of name height in different languages.\n */\nexport const LINE_HEIGHT = {\n    zh: 16,\n    en: 10,\n};\n\n/**\n * This is the default const of name dy calculation.\n * It is suitable for names that has 2 elements with 16px/10px font size.\n */\nexport const NAME_DY: {\n    [key in NameOffsetY]: {\n        namesPos: number; // index of the names we need to calculate dy\n        lineHeight: number;\n        polarity: -1 | 0 | 1; // in which direction\n    };\n} = {\n    top: {\n        namesPos: 1,\n        lineHeight: LINE_HEIGHT.en,\n        polarity: -1,\n    },\n    middle: {\n        namesPos: 0,\n        lineHeight: 0,\n        polarity: 0,\n    },\n    bottom: {\n        namesPos: 0,\n        lineHeight: LINE_HEIGHT.zh,\n        polarity: 1,\n    },\n};\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    NameOffsetX,\n    NameOffsetY,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst ShmetroBasicStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultShmetroBasicStationAttributes.nameOffsetX,\n        nameOffsetY = defaultShmetroBasicStationAttributes.nameOffsetY,\n    } = attrs[StationType.ShmetroBasic] ?? defaultShmetroBasicStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -12 : nameOffsetX === 'right' ? 12 : 0;\n    const textY =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length * NAME_DY[nameOffsetY].lineHeight + 8) *\n        NAME_DY[nameOffsetY].polarity;\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                <circle\n                    id={`stn_core_${id}`}\n                    r={5}\n                    stroke=\"black\"\n                    strokeWidth=\"1.33\"\n                    fill=\"white\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n                <g transform={`translate(${textX}, ${textY})`} textAnchor={textAnchor} className=\"rmp-name-station\">\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={12.67}\n                        lineHeight={12.67}\n                        grow=\"up\"\n                        baseOffset={1}\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={6.67}\n                        lineHeight={6.67}\n                        grow=\"down\"\n                        baseOffset={1.5}\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, nameOffsetX, nameOffsetY, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * ShmetroBasicStation specific props.\n */\nexport interface ShmetroBasicStationAttributes extends StationAttributes {\n    nameOffsetX: NameOffsetX;\n    nameOffsetY: NameOffsetY;\n}\n\nconst defaultShmetroBasicStationAttributes: ShmetroBasicStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'top',\n};\n\nconst shmetroBasicStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroBasic.nameZh',\n        value: (attrs?: ShmetroBasicStationAttributes) =>\n            (attrs ?? defaultShmetroBasicStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: ShmetroBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasicStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroBasic.nameEn',\n        value: (attrs?: ShmetroBasicStationAttributes) =>\n            (attrs ?? defaultShmetroBasicStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: ShmetroBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasicStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroBasic.nameOffsetX',\n        value: (attrs?: ShmetroBasicStationAttributes) => (attrs ?? defaultShmetroBasicStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: ShmetroBasicStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: ShmetroBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasicStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as NameOffsetX;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroBasic.nameOffsetY',\n        value: (attrs?: ShmetroBasicStationAttributes) => (attrs ?? defaultShmetroBasicStationAttributes).nameOffsetY,\n        options: { top: 'top', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: ShmetroBasicStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: ShmetroBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasicStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as NameOffsetY;\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst shmetroBasicStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height=\"40\" width=\"40\" focusable={false}>\n        <circle cx=\"12\" cy=\"12\" r=\"5\" stroke=\"currentColor\" fill=\"none\" />\n    </svg>\n);\n\nconst shmetroBasicStation: Station<ShmetroBasicStationAttributes> = {\n    component: ShmetroBasicStation,\n    icon: shmetroBasicStationIcon,\n    defaultAttrs: defaultShmetroBasicStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: shmetroBasicStationFields,\n    metadata: {\n        displayName: 'panel.details.station.shmetroBasic.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default shmetroBasicStation;\n","import React from 'react';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    Rotate,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { ColorField, AttributesWithColor } from '../../panels/details/color-field';\nimport { MultilineText } from '../common/multiline-text';\n\nconst ROTATE_CONST: {\n    [rotate: number]: {\n        textDx: number;\n        textDy: number;\n        textAnchor: 'start' | 'middle' | 'end';\n        namesPos: 0 | 1;\n        lineHeight: 0 | 10 | 16;\n        polarity: -1 | 0 | 1;\n    };\n} = {\n    0: {\n        textDx: 0,\n        textDy: -27,\n        textAnchor: 'middle',\n        namesPos: 1,\n        lineHeight: 10,\n        polarity: -1,\n    },\n    45: {\n        textDx: 12,\n        textDy: -15,\n        textAnchor: 'start',\n        namesPos: 1,\n        lineHeight: 10,\n        polarity: -1,\n    },\n    90: {\n        textDx: 12,\n        textDy: 0,\n        textAnchor: 'start',\n        namesPos: 0,\n        lineHeight: 0,\n        polarity: 0,\n    },\n    135: {\n        textDx: 12,\n        textDy: 15,\n        textAnchor: 'start',\n        namesPos: 0,\n        lineHeight: 16,\n        polarity: 1,\n    },\n    180: {\n        textDx: 0,\n        textDy: 27,\n        textAnchor: 'middle',\n        namesPos: 0,\n        lineHeight: 16,\n        polarity: 1,\n    },\n    225: {\n        textDx: -12,\n        textDy: 15,\n        textAnchor: 'end',\n        namesPos: 0,\n        lineHeight: 16,\n        polarity: 1,\n    },\n    270: {\n        textDx: -12,\n        textDy: 0,\n        textAnchor: 'end',\n        namesPos: 0,\n        lineHeight: 0,\n        polarity: 0,\n    },\n    315: {\n        textDx: -12,\n        textDy: -15,\n        textAnchor: 'end',\n        namesPos: 1,\n        lineHeight: 10,\n        polarity: -1,\n    },\n};\n\nconst ShmetroBasic2020Station = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        color = defaultShmetroBasic2020StationAttributes.color,\n        rotate = defaultShmetroBasic2020StationAttributes.rotate,\n    } = attrs[StationType.ShmetroBasic2020] ?? defaultShmetroBasic2020StationAttributes;\n\n    const textDy =\n        ROTATE_CONST[rotate].textDy + // fixed dy for each rotation\n        (names[ROTATE_CONST[rotate].namesPos].split('\\\\').length - 1) *\n            ROTATE_CONST[rotate].lineHeight *\n            ROTATE_CONST[rotate].polarity; // dynamic dy of n lines (either zh or en)\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id}>\n                <g transform={`translate(${x}, ${y})rotate(${rotate})`}>\n                    <rect\n                        id={`stn_core_${id}`}\n                        x=\"-2.33\"\n                        y=\"-7.83\"\n                        width=\"4.67\"\n                        height=\"7.83\"\n                        stroke=\"none\"\n                        fill={color[2]}\n                        onPointerDown={onPointerDown}\n                        onPointerMove={onPointerMove}\n                        onPointerUp={onPointerUp}\n                        style={{ cursor: 'move' }}\n                    />\n                </g>\n                <g\n                    transform={`translate(${x + ROTATE_CONST[rotate].textDx}, ${y + textDy})`}\n                    textAnchor={ROTATE_CONST[rotate].textAnchor}\n                    className=\"rmp-name-station\"\n                >\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={12.67}\n                        lineHeight={12.67}\n                        grow=\"up\"\n                        baseOffset={1}\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={6.67}\n                        lineHeight={6.67}\n                        grow=\"down\"\n                        baseOffset={1.5}\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, rotate, color, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * ShmetroBasic2020Station specific props.\n */\nexport interface ShmetroBasic2020StationAttributes extends StationAttributes, AttributesWithColor {\n    rotate: Rotate;\n}\n\nconst defaultShmetroBasic2020StationAttributes: ShmetroBasic2020StationAttributes = {\n    ...defaultStationAttributes,\n    rotate: 0,\n    color: [CityCode.Shanghai, 'sh1', '#E4002B', MonoColour.white],\n};\n\nconst shmetroBasic2020StationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroBasic2020.nameZh',\n        value: (attrs?: ShmetroBasic2020StationAttributes) =>\n            (attrs ?? defaultShmetroBasic2020StationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        onChange: (val: string | number, attrs_: ShmetroBasic2020StationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasic2020StationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroBasic2020.nameEn',\n        value: (attrs?: ShmetroBasic2020StationAttributes) =>\n            (attrs ?? defaultShmetroBasic2020StationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        onChange: (val: string | number, attrs_: ShmetroBasic2020StationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasic2020StationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroBasic2020.rotate',\n        value: (attrs?: ShmetroBasic2020StationAttributes) =>\n            (attrs ?? defaultShmetroBasic2020StationAttributes).rotate,\n        options: { 0: '0', 45: '45', 90: '90', 135: '135', 180: '180', 225: '225', 270: '270', 315: '315' },\n        onChange: (val: string | number, attrs_: ShmetroBasic2020StationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasic2020StationAttributes;\n            // set value\n            attrs.rotate = Number(val) as Rotate;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: (\n            <ColorField type={StationType.ShmetroBasic2020} defaultAttrs={defaultShmetroBasic2020StationAttributes} />\n        ),\n    },\n];\n\nconst shmetroBasic2020StationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <rect x=\"6\" y=\"9\" width=\"12\" height=\"6\" stroke=\"currentColor\" fill=\"currentColor\" />\n    </svg>\n);\n\nconst shmetroBasic2020Station: Station<ShmetroBasic2020StationAttributes> = {\n    component: ShmetroBasic2020Station,\n    icon: shmetroBasic2020StationIcon,\n    defaultAttrs: defaultShmetroBasic2020StationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: shmetroBasic2020StationFields,\n    metadata: {\n        displayName: 'panel.details.station.shmetroBasic2020.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default shmetroBasic2020Station;\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    NameOffsetX,\n    NameOffsetY,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst ShmetroIntStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultShmetroIntStationAttributes.nameOffsetX,\n        nameOffsetY = defaultShmetroIntStationAttributes.nameOffsetY,\n        rotate = defaultShmetroIntStationAttributes.rotate,\n        width = defaultShmetroIntStationAttributes.width,\n        height = defaultShmetroIntStationAttributes.height,\n    } = attrs[StationType.ShmetroInt] ?? defaultShmetroIntStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -12 : nameOffsetX === 'right' ? 12 : 0;\n    const textY =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length * NAME_DY[nameOffsetY].lineHeight + 8) *\n        NAME_DY[nameOffsetY].polarity;\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    return React.useMemo(\n        () => (\n            <g id={id}>\n                <g transform={`translate(${x}, ${y})rotate(${rotate})`}>\n                    <rect\n                        id={`stn_core_${id}`}\n                        x={-width / 2}\n                        y={-height / 2}\n                        height={height}\n                        width={width}\n                        ry={height / 2}\n                        stroke=\"black\"\n                        strokeWidth=\"1.33\"\n                        fill=\"white\"\n                        onPointerDown={onPointerDown}\n                        onPointerMove={onPointerMove}\n                        onPointerUp={onPointerUp}\n                        style={{ cursor: 'move' }}\n                    />\n                </g>\n                <g\n                    transform={`translate(${x + textX}, ${y + textY})`}\n                    textAnchor={textAnchor}\n                    className=\"rmp-name-station\"\n                >\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={12.67}\n                        lineHeight={12.67}\n                        grow=\"up\"\n                        baseOffset={1}\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\').map(s => (nameOffsetX === 'right' ? '\\u00A0' : '') + s)}\n                        fontSize={6.67}\n                        lineHeight={6.67}\n                        grow=\"down\"\n                        baseOffset={1.5}\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, nameOffsetX, nameOffsetY, rotate, width, height, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * ShmetroIntStation specific props.\n */\nexport interface ShmetroIntStationAttributes extends StationAttributes {\n    nameOffsetX: NameOffsetX;\n    nameOffsetY: NameOffsetY;\n    /**\n     * 0 <= rotate < 180\n     */\n    rotate: number;\n    width: number;\n    height: number;\n}\n\nconst defaultShmetroIntStationAttributes: ShmetroIntStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'top',\n    rotate: 0,\n    height: 10,\n    width: 13,\n};\n\nconst shmetroIntStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroInt.nameZh',\n        value: (attrs?: ShmetroIntStationAttributes) =>\n            (attrs ?? defaultShmetroIntStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroInt.nameEn',\n        value: (attrs?: ShmetroIntStationAttributes) =>\n            (attrs ?? defaultShmetroIntStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroInt.nameOffsetX',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: ShmetroIntStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as NameOffsetX;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroInt.nameOffsetY',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).nameOffsetY,\n        options: { top: 'top', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: ShmetroIntStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as NameOffsetY;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.shmetroInt.height',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).height,\n        validator: (val: string) => Number.isInteger(val),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.height = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.shmetroInt.width',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).width,\n        validator: (val: string) => Number.isInteger(val),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.width = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.shmetroInt.rotate',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).rotate,\n        validator: (val: string) => Number.isInteger(val) && Number(val) >= 0 && Number(val) < 180,\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.rotate = Math.abs(Number(val)) % 180;\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst shmetroIntStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <rect x=\"4.5\" y=\"7\" height=\"10\" width=\"15\" ry=\"5\" stroke=\"currentColor\" fill=\"none\" />\n    </svg>\n);\n\nconst shmetroIntStation: Station<ShmetroIntStationAttributes> = {\n    component: ShmetroIntStation,\n    icon: shmetroIntStationIcon,\n    defaultAttrs: defaultShmetroIntStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: shmetroIntStationFields,\n    metadata: {\n        displayName: 'panel.details.station.shmetroInt.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: ['interchange'],\n    },\n};\n\nexport default shmetroIntStation;\n","import React from 'react';\nimport { CityCode, ColourHex, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    NameOffsetX,\n    NameOffsetY,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { AttributesWithColor, ColorField } from '../../panels/details/color-field';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst PATH = 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\nconst TEXT_MAX_WIDTH = 12.5;\n\n/**\n * A StationNumber sub component for both gzmtr-basic and gzmtr-int station.\n * It draws the code of the line and the station with a capsule icon outside it.\n */\nexport const StationNumber = (props: { strokeColor: ColourHex; lineCode: string; stationCode: string }) => {\n    const { strokeColor, lineCode, stationCode } = props;\n\n    const lineCodeEl = React.useRef<SVGTextElement | null>(null);\n    const stnCodeEl = React.useRef<SVGTextElement | null>(null);\n\n    const [lineCodeBBox, setlineCodeBBox] = React.useState({ width: 0 } as DOMRect);\n    const [stnCodeBBox, setstnCodeBBox] = React.useState({ width: 0 } as DOMRect);\n\n    React.useEffect(() => {\n        setlineCodeBBox(lineCodeEl.current!.getBBox());\n        setstnCodeBBox(stnCodeEl.current!.getBBox());\n    }, [lineCode, stationCode]);\n\n    const lineCodeScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineCodeBBox.width);\n    const stnCodeScale =\n        lineCode.length === 2 && stationCode.length === 2\n            ? lineCodeScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnCodeBBox.width);\n\n    return (\n        <g>\n            <path d={PATH} strokeWidth=\"2\" stroke={strokeColor} fill=\"white\" transform=\"scale(0.75)\" />\n            <g textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize=\"8\">\n                <g transform={`translate(-6,0)scale(${lineCodeScale})`}>\n                    <text\n                        ref={lineCodeEl}\n                        className=\"rmp-name__zh\"\n                        // dominantBaseline is specified in rmg-name__zh but missing in rmp-name__zh\n                        dominantBaseline=\"central\"\n                    >\n                        {lineCode}\n                    </text>\n                </g>\n                <g transform={`translate(6,0)scale(${stnCodeScale})`}>\n                    <text\n                        ref={stnCodeEl}\n                        className=\"rmp-name__zh\"\n                        // dominantBaseline is specified in rmg-name__zh but missing in rmp-name__zh\n                        dominantBaseline=\"central\"\n                    >\n                        {stationCode}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n};\n\nconst GzmtrBasicStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultGzmtrBasicStationAttributes.nameOffsetX,\n        nameOffsetY = defaultGzmtrBasicStationAttributes.nameOffsetY,\n        color = defaultGzmtrBasicStationAttributes.color,\n        lineCode = defaultGzmtrBasicStationAttributes.lineCode,\n        stationCode = defaultGzmtrBasicStationAttributes.stationCode,\n        open = defaultGzmtrBasicStationAttributes.open,\n        secondaryNames = defaultGzmtrBasicStationAttributes.secondaryNames,\n        tram = defaultGzmtrBasicStationAttributes.tram,\n    } = attrs[StationType.GzmtrBasic] ?? defaultGzmtrBasicStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -18 : nameOffsetX === 'right' ? 18 : 0;\n    const textY =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length * NAME_DY[nameOffsetY].lineHeight + 11) *\n        NAME_DY[nameOffsetY].polarity;\n    const textAnchor =\n        nameOffsetX === 'left'\n            ? 'end'\n            : nameOffsetX === 'right'\n            ? 'start'\n            : !open && nameOffsetX === 'middle' && secondaryNames.join('') === ''\n            ? // Special hook to align station name and (Under Construction) when there are no secondaryNames.\n              'end'\n            : // Default to middle when nameOffsetX === 'middle'.\n              'middle';\n\n    const secondaryTextRef = React.useRef<SVGGElement | null>(null);\n    const [secondaryTextWidth, setSecondaryTextWidth] = React.useState(0);\n    React.useEffect(() => setSecondaryTextWidth(secondaryTextRef.current?.getBBox().width ?? 0), [...secondaryNames]);\n\n    const textRef = React.useRef<SVGGElement | null>(null);\n    const [textWidth, setTextWidth] = React.useState(0);\n    React.useEffect(() => setTextWidth(textRef.current?.getBBox().width ?? 0), [...names]);\n\n    const secondaryDx =\n        nameOffsetX === 'middle'\n            ? textWidth / 2 + (secondaryTextWidth + 12 * 2) / 2\n            : (textWidth + (secondaryTextWidth + 12 * 2) / 2) * (nameOffsetX === 'left' ? -1 : 1);\n    const underConstructionDx =\n        nameOffsetX === 'middle' && secondaryNames.join('') !== ''\n            ? textWidth / 2 + (secondaryTextWidth + 12 * 2)\n            : (textWidth + secondaryTextWidth + (secondaryTextWidth !== 0 ? 12 * 2 : 0)) *\n              (nameOffsetX === 'left' ? -1 : nameOffsetX === 'right' ? 1 : 0);\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})scale(${tram ? 0.5 : 1})`}>\n                <StationNumber strokeColor={color[2]} lineCode={lineCode} stationCode={stationCode} />\n                <g\n                    ref={textRef}\n                    transform={`translate(${textX}, ${textY})`}\n                    textAnchor={textAnchor}\n                    className=\"rmp-name-station\"\n                >\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n                {secondaryNames.join('') !== '' && (\n                    <g\n                        transform={`translate(${textX + secondaryDx}, ${textY})`}\n                        textAnchor=\"middle\"\n                        className=\"rmp-name-station\"\n                    >\n                        <text\n                            fontSize=\"20\"\n                            dx={-(secondaryTextWidth + 5) / 2}\n                            textAnchor=\"end\"\n                            dominantBaseline=\"middle\"\n                            className=\"rmp-name__zh\"\n                        >\n                            （\n                        </text>\n                        <text\n                            fontSize=\"20\"\n                            dx={(secondaryTextWidth + 5) / 2}\n                            textAnchor=\"start\"\n                            dominantBaseline=\"middle\"\n                            className=\"rmp-name__zh\"\n                        >\n                            ）\n                        </text>\n                        <g ref={secondaryTextRef}>\n                            <text fontSize=\"14\" dy=\"-2\" dominantBaseline=\"auto\" className=\"rmp-name__zh\">\n                                {secondaryNames[0]}\n                            </text>\n                            <text fontSize=\"8\" dy=\"2\" dominantBaseline=\"hanging\" className=\"rmp-name__en\">\n                                {secondaryNames[1]}\n                            </text>\n                        </g>\n                    </g>\n                )}\n                {!open && (\n                    <g\n                        transform={`translate(${textX + underConstructionDx}, ${textY})`}\n                        textAnchor={nameOffsetX === 'middle' ? 'start' : textAnchor}\n                        fill=\"red\"\n                        className=\"rmp-name-station\"\n                    >\n                        <text fontSize=\"8\" dy=\"-2\" dominantBaseline=\"auto\" className=\"rmp-name__zh\">\n                            （未开通）\n                        </text>\n                        <text fontSize=\"6\" dy=\"4\" dominantBaseline=\"hanging\" className=\"rmp-name__en\">\n                            (Under Construction)\n                        </text>\n                    </g>\n                )}\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <path\n                    id={`stn_core_${id}`}\n                    d={PATH}\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                    transform=\"scale(0.75)\"\n                />\n            </g>\n        ),\n        [\n            id,\n            x,\n            y,\n            ...names,\n            nameOffsetX,\n            nameOffsetY,\n            color,\n            lineCode,\n            stationCode,\n            open,\n            ...secondaryNames,\n            tram,\n            // bbox will only be computed after first render and won't cause this to update another time\n            textWidth,\n            secondaryTextWidth,\n            onPointerDown,\n            onPointerMove,\n            onPointerUp,\n        ]\n    );\n};\n\n/**\n * GzmtrStation specific props.\n */\nexport interface GzmtrBasicStationAttributes extends StationAttributes, AttributesWithColor {\n    nameOffsetX: NameOffsetX;\n    nameOffsetY: NameOffsetY;\n    lineCode: string;\n    stationCode: string;\n    /**\n     * Whether to show a Under Construction hint.\n     */\n    open: boolean;\n    secondaryNames: [string, string];\n    tram: boolean;\n}\n\nconst defaultGzmtrBasicStationAttributes: GzmtrBasicStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'top',\n    color: [CityCode.Guangzhou, 'gz1', '#F3D03E', MonoColour.black],\n    lineCode: '1',\n    stationCode: '01',\n    open: true,\n    secondaryNames: ['', ''],\n    tram: false,\n};\n\nconst gzmtrBasicStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.gzmtrBasic.nameZh',\n        value: (attrs?: GzmtrBasicStationAttributes) =>\n            (attrs ?? defaultGzmtrBasicStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.gzmtrBasic.nameEn',\n        value: (attrs?: GzmtrBasicStationAttributes) =>\n            (attrs ?? defaultGzmtrBasicStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.gzmtrBasic.nameOffsetX',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: GzmtrBasicStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as NameOffsetX;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.gzmtrBasic.nameOffsetY',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).nameOffsetY,\n        options: { top: 'top', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: GzmtrBasicStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as NameOffsetY;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: <ColorField type={StationType.GzmtrBasic} defaultAttrs={defaultGzmtrBasicStationAttributes} />,\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrBasic.lineCode',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).lineCode,\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.lineCode = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrBasic.stationCode',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).stationCode,\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.stationCode = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'switch',\n        label: 'panel.details.station.gzmtrBasic.open',\n        oneLine: true,\n        isChecked: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).open,\n        onChange: (val: boolean, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.open = val;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrBasic.secondaryNameZh',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).secondaryNames[0],\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.secondaryNames[0] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrBasic.secondaryNameEn',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).secondaryNames[1],\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.secondaryNames[1] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'switch',\n        label: 'panel.details.station.gzmtrBasic.tram',\n        oneLine: true,\n        isChecked: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).tram,\n        onChange: (val: boolean, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.tram = val;\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst gzmtrBasicStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <g transform=\"translate(12,12)scale(0.6)\">\n            <StationNumber strokeColor=\"#000\" lineCode=\"1\" stationCode=\"01\" />\n        </g>\n    </svg>\n);\n\nconst gzmtrBasicStation: Station<GzmtrBasicStationAttributes> = {\n    component: GzmtrBasicStation,\n    icon: gzmtrBasicStationIcon,\n    defaultAttrs: defaultGzmtrBasicStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: gzmtrBasicStationFields,\n    metadata: {\n        displayName: 'panel.details.station.gzmtrBasic.displayName',\n        cities: [CityCode.Guangzhou],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default gzmtrBasicStation;\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, HStack, IconButton, Text } from '@chakra-ui/react';\nimport { RmgCard, RmgFields, RmgFieldsField, RmgLabel } from '@railmapgen/rmg-components';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { Theme } from '../../../constants/constants';\nimport { InterchangeInfo } from './interchange-field';\nimport { MdAdd, MdContentCopy, MdDelete } from 'react-icons/md';\nimport ColourModal from '../colour-modal/colour-modal';\nimport ThemeButton from '../theme-button';\n\ninterface InterchangeCardProps {\n    interchangeList: InterchangeInfo[];\n    onAdd?: (info: InterchangeInfo) => void;\n    onDelete?: (index: number) => void;\n    onUpdate?: (index: number, info: InterchangeInfo) => void;\n}\n\nexport default function InterchangeCard(props: InterchangeCardProps) {\n    const { interchangeList, onAdd, onDelete, onUpdate } = props;\n\n    const { t } = useTranslation();\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedIndex, setSelectedIndex] = useState(0);\n\n    const interchangeFields: RmgFieldsField[][] = interchangeList.map((it, i) => [\n        {\n            type: 'input',\n            label: t('panel.details.station.gzmtrInt.lineCode'),\n            value: it[4],\n            minW: '80px',\n            onChange: val => onUpdate?.(i, [it[0], it[1], it[2], it[3], val, it[5]]),\n        },\n        {\n            type: 'input',\n            label: t('panel.details.station.gzmtrInt.stationCode'),\n            value: it[5],\n            minW: '80px',\n            onChange: val => onUpdate?.(i, [it[0], it[1], it[2], it[3], it[4], val]),\n        },\n    ]);\n\n    return (\n        <RmgCard direction=\"column\">\n            {interchangeList.length === 0 && (\n                <HStack spacing={0.5} data-testid={`interchange-card-stack`}>\n                    <Text as=\"i\" flex={1} align=\"center\" fontSize=\"md\" colorScheme=\"gray\">\n                        {t('panel.details.station.interchange.noInterchanges')}\n                    </Text>\n\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label={t('panel.details.station.interchange.add')}\n                        onClick={() => onAdd?.([CityCode.Shanghai, '', '#aaaaaa', MonoColour.white, '', ''])}\n                        icon={<MdAdd />}\n                    />\n                </HStack>\n            )}\n\n            {interchangeList.map((it, i) => (\n                <HStack key={i} spacing={0.5} data-testid={`interchange-card-stack-${i}`}>\n                    <RmgLabel label={t('color')} minW=\"40px\" noLabel={i !== 0}>\n                        <ThemeButton\n                            theme={[it[0], it[1], it[2], it[3]]}\n                            onClick={() => {\n                                setIsModalOpen(true);\n                                setSelectedIndex(i);\n                            }}\n                        />\n                    </RmgLabel>\n\n                    <RmgFields fields={interchangeFields[i]} noLabel={i !== 0} />\n\n                    {onAdd && i === interchangeFields.length - 1 ? (\n                        <IconButton\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            aria-label={t('panel.details.station.interchange.copy')}\n                            onClick={() => onAdd?.(interchangeList.slice(-1)[0])} // duplicate last leg\n                            icon={<MdContentCopy />}\n                        />\n                    ) : (\n                        <Box minW={8} />\n                    )}\n\n                    {onDelete && (\n                        <IconButton\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            aria-label={t('panel.details.station.interchange.remove')}\n                            onClick={() => onDelete?.(i)}\n                            icon={<MdDelete />}\n                        />\n                    )}\n                </HStack>\n            ))}\n\n            <ColourModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                defaultTheme={interchangeList[selectedIndex]?.slice(0, 4) as Theme}\n                onUpdate={theme =>\n                    onUpdate?.(selectedIndex, [\n                        ...theme,\n                        interchangeList[selectedIndex][4],\n                        interchangeList[selectedIndex][5],\n                    ])\n                }\n            />\n        </RmgCard>\n    );\n}\n","import React, { Fragment } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MdAdd } from 'react-icons/md';\nimport { Button, FormLabel, VStack } from '@chakra-ui/react';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { Theme } from '../../../constants/constants';\nimport { StationAttributes, StationType } from '../../../constants/stations';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { setRefreshNodes } from '../../../redux/runtime/runtime-slice';\nimport InterchangeCard from './interchange-card';\n\n/**\n * InterchangeInfo with theme, line code, station code.\n */\nexport type InterchangeInfo = [...Theme, ...string[]];\n\n/**\n * A StationAttributes that have a transfer field.\n * Extend this interface if you want to use <InterchangeField />.\n */\nexport interface StationAttributesWithInterchange extends StationAttributes {\n    transfer: InterchangeInfo[][];\n}\n\n/**\n * This component provides an easy way to modify interchanges in the details panel.\n * It will read the first id in `selected` and change the `transfer` field in the related attrs.\n *\n * Make sure your station has a transfer field in the extended StationAttributes. (a.k.a extends StationAttributesWithInterchange)\n * Fail to do this will result in a redundant transfer field in your StationAttributes.\n *\n * @param stationType The station type of this station.\n * @param defaultAttrs The default attributes of this type of station.\n * @param maximumTransfers The maximum transfers limit for each kind of transfer. (within, outStation, outSystem)\n */\nexport const InterchangeField = (props: {\n    stationType: StationType;\n    defaultAttrs: StationAttributesWithInterchange;\n    maximumTransfers: [number, number, number];\n}) => {\n    const { stationType, defaultAttrs, maximumTransfers } = props;\n\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefreshNodes());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefreshNodes, saveGraph]);\n    const { selected } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const attr =\n        selectedFirst &&\n        graph.current.hasNode(selectedFirst) &&\n        graph.current.getNodeAttribute(selectedFirst, 'type') === stationType\n            ? (graph.current.getNodeAttribute(selectedFirst, stationType) as StationAttributesWithInterchange)\n            : defaultAttrs;\n    const transfer = attr.transfer ?? defaultAttrs.transfer;\n\n    const handleAdd = (setIndex: number) => (interchangeInfo: InterchangeInfo) => {\n        const newTransferInfo: InterchangeInfo[][] = JSON.parse(JSON.stringify(transfer));\n        if (newTransferInfo.length <= setIndex) {\n            for (let i = newTransferInfo.length; i <= setIndex; i++) {\n                newTransferInfo[i] = [];\n            }\n        }\n        newTransferInfo[setIndex].push(interchangeInfo);\n\n        attr.transfer = newTransferInfo;\n        graph.current.mergeNodeAttributes(selected, { [stationType]: attr });\n        hardRefresh();\n    };\n\n    const handleDelete = (setIndex: number) => (interchangeIndex: number) => {\n        if (transfer.length > setIndex && transfer[setIndex].length > interchangeIndex) {\n            const newTransferInfo = transfer.map((set, setIdx) =>\n                setIdx === setIndex ? set.filter((_, intIdx) => intIdx !== interchangeIndex) : set\n            );\n\n            attr.transfer = newTransferInfo;\n            graph.current.mergeNodeAttributes(selected, { [stationType]: attr });\n            hardRefresh();\n        }\n    };\n\n    const handleUpdate = (setIndex: number) => (interchangeIndex: number, interchangeInfo: InterchangeInfo) => {\n        if (transfer.length > setIndex && transfer[setIndex].length > interchangeIndex) {\n            const newTransferInfo = transfer.map((set, setIdx) =>\n                setIdx === setIndex\n                    ? set.map((int, intIdx) =>\n                          intIdx === interchangeIndex\n                              ? ([0, 1, 2, 3, 4, 5].map(i =>\n                                    interchangeInfo[i] === undefined ? int[i] : interchangeInfo[i]\n                                ) as InterchangeInfo)\n                              : int\n                      )\n                    : set\n            );\n\n            attr.transfer = newTransferInfo;\n            graph.current.mergeNodeAttributes(selected, { [stationType]: attr });\n            hardRefresh();\n        }\n    };\n\n    const handleAddInterchangeGroup = () =>\n        handleAdd(attr.transfer.length)([CityCode.Guangzhou, '', '#AAAAAA', MonoColour.white, '', '']);\n\n    return (\n        <VStack align=\"flex-start\">\n            {attr.transfer.map((infoList, i) => (\n                <Fragment key={i}>\n                    <FormLabel size=\"xs\">\n                        {i === 0\n                            ? t('panel.details.station.interchange.within')\n                            : i === 1\n                            ? t('panel.details.station.interchange.outStation')\n                            : t('panel.details.station.interchange.outSystem')}\n                    </FormLabel>\n\n                    <InterchangeCard\n                        interchangeList={infoList}\n                        onAdd={maximumTransfers[i] > infoList.length ? handleAdd(i) : undefined}\n                        onDelete={handleDelete(i)}\n                        onUpdate={handleUpdate(i)}\n                    />\n                </Fragment>\n            ))}\n\n            {maximumTransfers[attr.transfer.length] > 0 && (\n                <Button\n                    size=\"xs\"\n                    variant=\"ghost\"\n                    alignSelf=\"flex-end\"\n                    leftIcon={<MdAdd />}\n                    onClick={handleAddInterchangeGroup}\n                >\n                    {t('panel.details.station.interchange.addGroup')}\n                </Button>\n            )}\n        </VStack>\n    );\n};\n","import React from 'react';\nimport { useColorMode, useColorModeValue } from '@chakra-ui/react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    NameOffsetX,\n    NameOffsetY,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { StationNumber } from './gzmtr-basic';\nimport { InterchangeField, StationAttributesWithInterchange } from '../../panels/details/interchange-field';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst CODE_POS = [\n    [[0, 0]],\n    [[0, 0]],\n    [\n        [-18, 0],\n        [18, 0],\n    ],\n    [\n        [-15.588, -9],\n        [15.588, -9],\n        [0, 18],\n    ],\n];\n\nconst GzmtrIntStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultGzmtrIntStationAttributes.nameOffsetX,\n        nameOffsetY = defaultGzmtrIntStationAttributes.nameOffsetY,\n        transfer = defaultGzmtrIntStationAttributes.transfer,\n        open = defaultGzmtrIntStationAttributes.open,\n        secondaryNames = defaultGzmtrIntStationAttributes.secondaryNames,\n    } = attrs[StationType.GzmtrInt] ?? defaultGzmtrIntStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const { colorMode } = useColorMode();\n    const bgColor = useColorModeValue('white', 'gray.800');\n\n    const textX =\n        (nameOffsetX === 'left' ? -20 : nameOffsetX === 'right' ? 20 : 0) * (nameOffsetY === 'middle' ? 1.8 : 1);\n    const textY =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length * NAME_DY[nameOffsetY].lineHeight +\n            20 * (nameOffsetX === 'middle' ? 1.8 : 1)) *\n        NAME_DY[nameOffsetY].polarity;\n    const textAnchor =\n        nameOffsetX === 'left'\n            ? 'end'\n            : nameOffsetX === 'right'\n            ? 'start'\n            : !open && nameOffsetX === 'middle' && secondaryNames.join('') === ''\n            ? // Special hook to align station name and (Under Construction) when there are no secondaryNames.\n              'end'\n            : // Default to middle when nameOffsetX === 'middle'.\n              'middle';\n\n    const transferAll = transfer.flat().slice(0, 3); // slice to make sure at most 3 transfers\n    const arrowColor = [\n        ['black', 'black'],\n        [transferAll.at(0)?.at(2) ?? 'black', transferAll.at(0)?.at(2) ?? 'black'],\n        [transferAll.at(0)?.at(2) ?? 'black', transferAll.at(1)?.at(2) ?? 'black'],\n        [transferAll.at(0)?.at(2) ?? 'black', transferAll.at(1)?.at(2) ?? 'black', transferAll.at(2)?.at(2) ?? 'black'],\n    ];\n\n    const secondaryTextRef = React.useRef<SVGGElement | null>(null);\n    const [secondaryTextWidth, setSecondaryTextWidth] = React.useState(0);\n    React.useEffect(() => setSecondaryTextWidth(secondaryTextRef.current?.getBBox().width ?? 0), [...secondaryNames]);\n\n    const textRef = React.useRef<SVGGElement | null>(null);\n    const [textWidth, setTextWidth] = React.useState(0);\n    React.useEffect(() => setTextWidth(textRef.current?.getBBox().width ?? 0), [...names]);\n\n    const secondaryDx = (textWidth + (secondaryTextWidth + 12 * 2) / 2) * (nameOffsetX === 'left' ? -1 : 1);\n    const underConstructionDx =\n        (textWidth + secondaryTextWidth + (secondaryTextWidth !== 0 ? 12 * 2 : 0)) * (nameOffsetX === 'left' ? -1 : 1);\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                {transferAll\n                    .map(info => info[2])\n                    .filter((color, i, arr) => arr.indexOf(color) === i)\n                    .map(color => (\n                        <marker\n                            key={`gzmtr_int_arrow_${color}`}\n                            id={`gzmtr_int_arrow_${color}`}\n                            markerWidth=\"5\"\n                            markerHeight=\"5\"\n                            refX=\"1\"\n                            refY=\"1.25\"\n                            orient=\"auto\"\n                        >\n                            <polygon points=\"0,0 0,3 2,1.5\" fill={color} />\n                        </marker>\n                    ))}\n                {transferAll.length <= 2 && (\n                    <g>\n                        {/* A simple mask to hide all underlying lines. */}\n                        <path d=\"M -18,-12 A 24 24 0 0 1 18,-12 L 18,12 A 24 24 0 0 1 -18,12 Z\" fill={bgColor} />\n                        <path\n                            d=\"M -18,-12 A 24 24 0 0 1 18,-12\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][0]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][0]})`}\n                        />\n                        <path\n                            d=\"M 18,12 A 24 24 0 0 1 -18,12\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][1]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][1]})`}\n                        />\n                    </g>\n                )}\n                {transferAll.length >= 3 && (\n                    <g>\n                        <circle r=\"22.395\" fill={bgColor} />\n                        <path\n                            d=\"M -19.3948,11.1976 A 22.395 22.395 0 0 1 0,-22.395\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][0]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][0]})`}\n                        />\n                        <path\n                            d=\"M 0,-22.395 A 22.395 22.395 0 0 1 19.3948,11.1976\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][1]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][1]})`}\n                        />\n                        <path\n                            d=\"M 19.3948,11.1976 A 22.395 22.395 0 0 1 -19.3948,11.1976\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][2]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][2]})`}\n                        />\n                        {/* Add another 2 transparent arrows with marker to cover bottom arrows */}\n                        <path\n                            d=\"M -19.3948,11.1976 A 22.395 22.395 0 0 1 0,-22.395\"\n                            fill=\"none\"\n                            strokeOpacity=\"0\"\n                            stroke=\"white\"\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][0]})`}\n                        />\n                        <path\n                            d=\"M 0,-22.395 A 22.395 22.395 0 0 1 19.3948,11.1976\"\n                            fill=\"none\"\n                            strokeOpacity=\"0\"\n                            stroke=\"white\"\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][1]})`}\n                        />\n                    </g>\n                )}\n\n                {transfer[0]?.map((info, i, arr) => (\n                    <g\n                        key={`gzmtr_int_${id}_stn_${i}`}\n                        transform={`translate(${CODE_POS[arr.length][i][0]},${CODE_POS[arr.length][i][1]})`}\n                    >\n                        <StationNumber strokeColor={info[2]} lineCode={info[4]} stationCode={info[5]} />\n                    </g>\n                ))}\n\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <circle\n                    id={`stn_core_${id}`}\n                    r={transferAll.length === 3 ? 22.395 : 18}\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n                <g\n                    ref={textRef}\n                    transform={`translate(${textX}, ${textY})`}\n                    textAnchor={textAnchor}\n                    className=\"rmp-name-station\"\n                >\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n                {secondaryNames.join('') !== '' && (\n                    <g\n                        transform={`translate(${textX + secondaryDx}, ${textY})`}\n                        textAnchor=\"middle\"\n                        className=\"rmp-name-station\"\n                    >\n                        <text\n                            fontSize=\"20\"\n                            dx={-(secondaryTextWidth + 5) / 2}\n                            textAnchor=\"end\"\n                            dominantBaseline=\"middle\"\n                            className=\"rmp-name__zh\"\n                        >\n                            （\n                        </text>\n                        <text\n                            fontSize=\"20\"\n                            dx={(secondaryTextWidth + 5) / 2}\n                            textAnchor=\"start\"\n                            dominantBaseline=\"middle\"\n                            className=\"rmp-name__zh\"\n                        >\n                            ）\n                        </text>\n                        <g ref={secondaryTextRef}>\n                            <text fontSize=\"14\" dy=\"-2\" dominantBaseline=\"auto\" className=\"rmp-name__zh\">\n                                {secondaryNames[0]}\n                            </text>\n                            <text fontSize=\"8\" dy=\"2\" dominantBaseline=\"hanging\" className=\"rmp-name__en\">\n                                {secondaryNames[1]}\n                            </text>\n                        </g>\n                    </g>\n                )}\n                {!open && (\n                    <g\n                        transform={`translate(${textX + underConstructionDx}, ${textY})`}\n                        textAnchor={textAnchor}\n                        fill=\"red\"\n                        className=\"rmp-name-station\"\n                    >\n                        <text fontSize=\"8\" dy=\"-2\" dominantBaseline=\"auto\" className=\"rmp-name__zh\">\n                            （未开通）\n                        </text>\n                        <text fontSize=\"6\" dy=\"4\" dominantBaseline=\"hanging\" className=\"rmp-name__en\">\n                            (Under Construction)\n                        </text>\n                    </g>\n                )}\n            </g>\n        ),\n        [\n            id,\n            x,\n            y,\n            ...names,\n            nameOffsetX,\n            nameOffsetY,\n            JSON.stringify(transferAll),\n            open,\n            ...secondaryNames,\n            // Update the mask on dark mode changes.\n            colorMode,\n            // BBox will only be computed after first render and won't cause this to update another time.\n            textWidth,\n            secondaryTextWidth,\n            onPointerDown,\n            onPointerMove,\n            onPointerUp,\n        ]\n    );\n};\n\n/**\n * GzmtrStation specific props.\n */\nexport interface GzmtrIntStationAttributes extends StationAttributes, StationAttributesWithInterchange {\n    nameOffsetX: NameOffsetX;\n    nameOffsetY: NameOffsetY;\n    /**\n     * Whether to show a Under Construction hint.\n     */\n    open: boolean;\n    secondaryNames: [string, string];\n}\n\nconst defaultGzmtrIntStationAttributes: GzmtrIntStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'top',\n    transfer: [[], []],\n    open: true,\n    secondaryNames: ['', ''],\n};\n\nconst gzmtrIntStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.gzmtrInt.nameZh',\n        value: (attrs?: GzmtrIntStationAttributes) =>\n            (attrs ?? defaultGzmtrIntStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.gzmtrInt.nameEn',\n        value: (attrs?: GzmtrIntStationAttributes) =>\n            (attrs ?? defaultGzmtrIntStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.gzmtrInt.nameOffsetX',\n        value: (attrs?: GzmtrIntStationAttributes) => (attrs ?? defaultGzmtrIntStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: GzmtrIntStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as Exclude<NameOffsetX, 'middle'>;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.gzmtrInt.nameOffsetY',\n        value: (attrs?: GzmtrIntStationAttributes) => (attrs ?? defaultGzmtrIntStationAttributes).nameOffsetY,\n        options: { top: 'top', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: GzmtrIntStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as Exclude<NameOffsetY, 'middle'>;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'switch',\n        label: 'panel.details.station.gzmtrInt.open',\n        oneLine: true,\n        isChecked: (attrs?: GzmtrIntStationAttributes) => (attrs ?? defaultGzmtrIntStationAttributes).open,\n        onChange: (val: boolean, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.open = val;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrInt.secondaryNameZh',\n        value: (attrs?: GzmtrIntStationAttributes) => (attrs ?? defaultGzmtrIntStationAttributes).secondaryNames[0],\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.secondaryNames[0] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrInt.secondaryNameEn',\n        value: (attrs?: GzmtrIntStationAttributes) => (attrs ?? defaultGzmtrIntStationAttributes).secondaryNames[1],\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.secondaryNames[1] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: (\n            <InterchangeField\n                stationType={StationType.GzmtrInt}\n                defaultAttrs={defaultGzmtrIntStationAttributes}\n                maximumTransfers={[3, 3, 0]}\n            />\n        ),\n    },\n];\n\nconst gzmtrIntStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <g transform=\"translate(6,12)scale(0.4)\">\n            <StationNumber strokeColor=\"#000\" lineCode=\"1\" stationCode=\"09\" />\n        </g>\n        <g transform=\"translate(18,12)scale(0.4)\">\n            <StationNumber strokeColor=\"#000\" lineCode=\"2\" stationCode=\"13\" />\n        </g>\n        <marker id=\"arrow\" markerWidth=\"5\" markerHeight=\"5\" refX=\"1\" refY=\"1.25\" orient=\"auto\">\n            <polygon points=\"0,0 0,3 2,1.5\" />\n        </marker>\n        <path d=\"M 6,6 A 8 8 0 0 1 18,6\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" markerEnd=\"url(#arrow)\" />\n        <path d=\"M 18,18 A 8 8 0 0 1 6,18\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" markerEnd=\"url(#arrow)\" />\n    </svg>\n);\n\nconst gzmtrIntStation: Station<GzmtrIntStationAttributes> = {\n    component: GzmtrIntStation,\n    icon: gzmtrIntStationIcon,\n    defaultAttrs: defaultGzmtrIntStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: gzmtrIntStationFields,\n    metadata: {\n        displayName: 'panel.details.station.gzmtrInt.displayName',\n        cities: [CityCode.Guangzhou],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default gzmtrIntStation;\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    NameOffsetX,\n    NameOffsetY,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nexport const LINE_HEIGHT = {\n    zh: 10,\n    en: 6.2,\n};\n\nconst BjsubwayBasicStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultBjsubwayBasicStationAttributes.nameOffsetX,\n        nameOffsetY = defaultBjsubwayBasicStationAttributes.nameOffsetY,\n        open = defaultBjsubwayBasicStationAttributes.open,\n    } = attrs[StationType.BjsubwayBasic] ?? defaultBjsubwayBasicStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -12 : nameOffsetX === 'right' ? 12 : 0;\n    const textY =\n        ((names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length + (nameOffsetY === 'top' && !open ? 1 : 0)) *\n            NAME_DY[nameOffsetY].lineHeight +\n            8) *\n        NAME_DY[nameOffsetY].polarity;\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                <circle\n                    id={`stn_core_${id}`}\n                    r=\"6.5\"\n                    stroke=\"black\"\n                    strokeWidth=\"1\"\n                    strokeDasharray={open ? undefined : '2'}\n                    fill=\"white\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n                <g transform={`translate(${textX}, ${textY})`} textAnchor={textAnchor} className=\"rmp-name-station\">\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={LINE_HEIGHT.zh}\n                        lineHeight={LINE_HEIGHT.zh}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={LINE_HEIGHT.en}\n                        lineHeight={LINE_HEIGHT.en}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                    {!open && (\n                        <text\n                            dy={names[1].split('\\\\').length * LINE_HEIGHT.en + 2}\n                            fontSize={LINE_HEIGHT.en}\n                            dominantBaseline=\"hanging\"\n                            className=\"rmp-name__zh\"\n                        >\n                            (暂缓开通)\n                        </text>\n                    )}\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, nameOffsetX, nameOffsetY, open, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * BjsubwayBasicStation specific props.\n */\nexport interface BjsubwayBasicStationAttributes extends StationAttributes {\n    nameOffsetX: NameOffsetX;\n    nameOffsetY: NameOffsetY;\n    /**\n     * Whether to show a (暂缓开通) hint.\n     */\n    open: boolean;\n}\n\nconst defaultBjsubwayBasicStationAttributes: BjsubwayBasicStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'top',\n    open: true,\n};\n\nconst bjsubwayBasicStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.bjsubwayBasic.nameZh',\n        value: (attrs?: BjsubwayBasicStationAttributes) =>\n            (attrs ?? defaultBjsubwayBasicStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: BjsubwayBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayBasicStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.bjsubwayBasic.nameEn',\n        value: (attrs?: BjsubwayBasicStationAttributes) =>\n            (attrs ?? defaultBjsubwayBasicStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: BjsubwayBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayBasicStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.bjsubwayBasic.nameOffsetX',\n        value: (attrs?: BjsubwayBasicStationAttributes) => (attrs ?? defaultBjsubwayBasicStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: BjsubwayBasicStationAttributes) =>\n            attrs?.nameOffsetY === 'middle' ? ['middle'] : [],\n        onChange: (val: string | number, attrs_: BjsubwayBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayBasicStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as NameOffsetX;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.bjsubwayBasic.nameOffsetY',\n        value: (attrs?: BjsubwayBasicStationAttributes) => (attrs ?? defaultBjsubwayBasicStationAttributes).nameOffsetY,\n        options: { top: 'top', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: BjsubwayBasicStationAttributes) =>\n            attrs?.nameOffsetX === 'middle' ? ['middle'] : [],\n        onChange: (val: string | number, attrs_: BjsubwayBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayBasicStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as NameOffsetY;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'switch',\n        label: 'panel.details.station.bjsubwayBasic.open',\n        oneLine: true,\n        isChecked: (attrs?: BjsubwayBasicStationAttributes) => (attrs ?? defaultBjsubwayBasicStationAttributes).open,\n        onChange: (val: boolean, attrs_: BjsubwayBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayBasicStationAttributes;\n            // set value\n            attrs.open = val;\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst bjsubwayBasicStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <circle cx=\"12\" cy=\"12\" r=\"4\" stroke=\"currentColor\" strokeWidth=\"0.5\" fill=\"none\" />\n    </svg>\n);\n\nconst bjsubwayBasicStation: Station<BjsubwayBasicStationAttributes> = {\n    component: BjsubwayBasicStation,\n    icon: bjsubwayBasicStationIcon,\n    defaultAttrs: defaultBjsubwayBasicStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: bjsubwayBasicStationFields,\n    metadata: {\n        displayName: 'panel.details.station.bjsubwayBasic.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default bjsubwayBasicStation;\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    NameOffsetX,\n    NameOffsetY,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\nimport { LINE_HEIGHT } from './bjsubway-basic';\n\nconst PATH_ARROW =\n    'M 11.788437 20 L 11.791121 19.15914 L 11.895754 19.139772 C 11.9533 19.12912 12.046264 19.109642 12.102339 19.096485 C 12.158414 19.083328 12.246507 19.060778 12.298101 19.046371 C 12.349695 19.031967 12.434475 19.006149 12.486499 18.988998 C 12.538524 18.971848 12.630527 18.939106 12.690952 18.916237 C 12.751377 18.893368 12.850254 18.8528 12.910679 18.826088 C 12.971104 18.799376 13.058208 18.758842 13.104247 18.736015 C 13.150285 18.713188 13.235036 18.668476 13.292583 18.636654 C 13.350131 18.604832 13.433705 18.55629 13.478304 18.528782 C 13.522903 18.501274 13.59353 18.4561 13.635252 18.428394 C 13.676973 18.40069 13.766433 18.337029 13.834051 18.286924 C 13.90167 18.23682 13.99644 18.162895 14.044652 18.122643 C 14.092864 18.082394 14.15996 18.02474 14.193752 17.994526 C 14.227545 17.964312 14.290506 17.906025 14.333667 17.865002 C 14.376827 17.823977 14.490118 17.703777 14.585426 17.597889 C 14.680732 17.492002 14.78829 17.367313 14.824441 17.320801 C 14.860593 17.274288 14.916682 17.199615 14.949082 17.154861 C 14.981483 17.110109 15.038663 17.027641 15.07615 16.9716 C 15.113637 16.91556 15.175815 16.817307 15.214323 16.753262 C 15.252832 16.689213 15.309652 16.589651 15.340591 16.532009 C 15.37153 16.474367 15.419693 16.380726 15.447618 16.323917 C 15.475546 16.267109 15.521831 16.16703 15.550475 16.101517 C 15.57912 16.036003 15.618637 15.941 15.638292 15.890395 C 15.657948 15.83979 15.690641 15.751225 15.710945 15.693584 C 15.731248 15.635942 15.763346 15.53815 15.782275 15.476267 C 15.801204 15.414385 15.828565 15.319683 15.843078 15.265819 C 15.857591 15.211955 15.882372 15.111115 15.898148 15.041732 C 15.913921 14.972347 15.938487 14.850893 15.952738 14.771832 C 15.966988 14.692772 15.98686 14.563893 15.996899 14.485436 C 16.006935 14.406981 16.018898 14.300867 16.023479 14.24963 C 16.028061 14.198393 16.034296 14.127651 16.037333 14.092425 C 16.040909 14.050921 16.043657 13.606488 16.045141 12.829731 C 16.047428 11.631083 16.047428 11.631083 16.035446 11.634319 C 16.028858 11.6361 15.792158 11.688778 15.509449 11.751382 C 15.226741 11.813986 14.758569 11.917777 14.469067 11.982028 C 14.179565 12.046279 13.939479 12.09806 13.935543 12.097095 C 13.931356 12.096071 14.065158 11.912199 14.257813 11.654225 C 14.438999 11.41161 14.903947 10.790021 15.291027 10.272918 C 15.678108 9.755814 16.315884 8.904369 16.708305 8.380817 C 17.100729 7.857269 17.432253 7.415405 17.44503 7.398903 C 17.468258 7.368896 17.468258 7.368896 17.788164 7.7948 C 17.964113 8.029047 18.673079 8.975285 19.363646 9.897553 C 20.054213 10.819822 20.706532 11.691617 20.813246 11.834875 C 20.93269 11.995222 21.004395 12.096006 20.99979 12.097068 C 20.995676 12.098017 20.519707 11.993718 19.942076 11.865294 C 19.364447 11.736868 18.891119 11.632599 18.890236 11.633583 C 18.889353 11.634568 18.887291 12.236682 18.885651 12.971614 C 18.883806 13.799305 18.880552 14.349956 18.877102 14.418479 C 18.874037 14.479323 18.868034 14.571026 18.863762 14.622263 C 18.859489 14.6735 18.85132 14.757342 18.84561 14.808579 C 18.839899 14.859818 18.829248 14.94497 18.821943 14.997808 C 18.81464 15.050646 18.799231 15.147589 18.787701 15.213237 C 18.776171 15.278884 18.755297 15.386735 18.741314 15.452906 C 18.727333 15.519076 18.700497 15.63305 18.681681 15.70618 C 18.662865 15.77931 18.629971 15.896786 18.608582 15.967237 C 18.587193 16.037687 18.553858 16.141182 18.534506 16.197222 C 18.515152 16.253262 18.48175 16.344965 18.460283 16.401005 C 18.438814 16.457047 18.39797 16.557655 18.369514 16.624584 C 18.341061 16.691511 18.290279 16.802864 18.256668 16.872036 C 18.223057 16.941206 18.167763 17.04948 18.133797 17.112644 C 18.099831 17.175808 18.04768 17.26882 18.017906 17.31934 C 17.988134 17.369858 17.939444 17.449183 17.909708 17.495615 C 17.879971 17.542049 17.827433 17.621344 17.792957 17.671825 C 17.758482 17.722305 17.697813 17.806976 17.658138 17.859982 C 17.618462 17.912987 17.558319 17.990898 17.524487 18.033117 C 17.490656 18.075336 17.400402 18.179474 17.323925 18.264534 C 17.247446 18.349596 17.150738 18.452837 17.109016 18.493961 C 17.067293 18.535084 17.001707 18.597803 16.963264 18.633335 C 16.924824 18.668869 16.859047 18.727587 16.817095 18.763823 C 16.775143 18.800058 16.701834 18.860661 16.654184 18.898495 C 16.606535 18.936329 16.529881 18.994791 16.483843 19.028412 C 16.437805 19.062033 16.353054 19.120974 16.295507 19.159391 C 16.237959 19.197807 16.157915 19.249382 16.117634 19.274 C 16.077351 19.298616 15.996129 19.345558 15.937144 19.378313 C 15.878159 19.411068 15.796937 19.454401 15.756655 19.474609 C 15.716372 19.49482 15.64454 19.52928 15.597028 19.551189 C 15.549516 19.573101 15.472516 19.606846 15.425918 19.626181 C 15.37932 19.645515 15.299306 19.676884 15.248109 19.695889 C 15.196912 19.714893 15.110293 19.744934 15.055624 19.762646 C 15.000954 19.780359 14.90914 19.807941 14.851592 19.82394 C 14.794045 19.839941 14.699877 19.863762 14.642329 19.876877 C 14.584783 19.889994 14.495724 19.908436 14.444424 19.917858 C 14.393124 19.927282 14.306017 19.941519 14.250855 19.949495 C 14.195694 19.957472 14.110539 19.968031 14.061625 19.97296 C 14.01271 19.977888 13.94326 19.984699 13.907293 19.988096 C 13.865487 19.992044 13.47154 19.995304 12.815168 19.997135 L 11.788437 20 Z M 13.211563 5 L 13.208879 5.841593 L 13.117326 5.857937 C 13.066972 5.866926 12.984574 5.883574 12.93422 5.894934 C 12.883867 5.906292 12.795584 5.928318 12.738037 5.94388 C 12.68049 5.959442 12.588675 5.986631 12.534005 6.004301 C 12.479336 6.021971 12.381636 6.056425 12.316895 6.08087 C 12.252154 6.105312 12.149747 6.147173 12.089322 6.173893 C 12.028896 6.200617 11.941792 6.241146 11.895754 6.263964 C 11.849715 6.286781 11.764964 6.331535 11.707417 6.363419 C 11.64987 6.395302 11.566296 6.443851 11.521696 6.47131 C 11.477097 6.498766 11.40647 6.5439 11.364749 6.571604 C 11.323027 6.59931 11.233567 6.662971 11.165949 6.713076 C 11.09833 6.76318 11.003561 6.837105 10.955348 6.877356 C 10.907136 6.917606 10.840041 6.97526 10.806249 7.005472 C 10.772455 7.035686 10.709495 7.093973 10.666333 7.134998 C 10.623173 7.176022 10.509882 7.296223 10.414575 7.402109 C 10.319268 7.507996 10.211711 7.632687 10.175559 7.679199 C 10.139406 7.725712 10.083319 7.800383 10.050918 7.845137 C 10.018517 7.889891 9.961337 7.972359 9.923851 8.028399 C 9.886364 8.08444 9.824185 8.182693 9.785677 8.246738 C 9.747169 8.310785 9.690349 8.410349 9.659409 8.467991 C 9.628469 8.525631 9.580308 8.619272 9.552382 8.676081 C 9.524455 8.732889 9.478169 8.83297 9.449525 8.898483 C 9.42088 8.963995 9.381362 9.059001 9.361707 9.109604 C 9.342052 9.160209 9.30936 9.248775 9.289056 9.306416 C 9.268753 9.364057 9.236654 9.46185 9.217726 9.523732 C 9.198797 9.585614 9.171435 9.680317 9.156922 9.734181 C 9.142409 9.788045 9.117628 9.888884 9.101853 9.958268 C 9.086079 10.027652 9.061513 10.149106 9.047262 10.228168 C 9.033011 10.307228 9.01314 10.436106 9.003102 10.514563 C 8.993065 10.593019 8.981103 10.699132 8.976521 10.75037 C 8.971939 10.801607 8.965705 10.872349 8.962669 10.907575 C 8.959091 10.949078 8.956343 11.393458 8.95486 12.170093 C 8.952572 13.368566 8.952572 13.368566 8.96717 13.365266 C 8.975198 13.363451 9.448764 13.258283 10.019536 13.131559 C 10.590309 13.004836 11.060532 12.901941 11.064476 12.902905 C 11.068673 12.90393 10.924224 13.102027 10.716059 13.380722 C 10.520485 13.642559 10.049642 14.272002 9.66974 14.779487 C 9.289838 15.286971 8.663752 16.122787 8.278438 16.636852 C 7.893123 17.150921 7.567488 17.584927 7.554804 17.601311 C 7.531743 17.631102 7.531743 17.631102 7.211841 17.205196 C 7.035895 16.970947 6.326927 16.024708 5.636357 15.102443 C 4.945787 14.180178 4.293465 13.308385 4.186752 13.165127 C 4.067309 13.004777 3.995605 12.903994 4.000209 12.902931 C 4.004323 12.901982 4.480295 13.006281 5.057924 13.134706 C 5.635554 13.263132 6.10888 13.367401 6.109759 13.366416 C 6.11064 13.365432 6.112701 12.763317 6.114342 12.028385 C 6.116189 11.200445 6.119443 10.650064 6.122897 10.58152 C 6.125962 10.520677 6.131937 10.428974 6.136174 10.377736 C 6.140412 10.326499 6.148574 10.242657 6.154313 10.19142 C 6.160052 10.140182 6.17073 10.05503 6.178041 10.002192 C 6.185353 9.949354 6.20077 9.85241 6.2123 9.786763 C 6.22383 9.721116 6.244704 9.613264 6.258686 9.547094 C 6.272668 9.480923 6.299503 9.366949 6.318319 9.293819 C 6.337135 9.220689 6.37003 9.103214 6.391419 9.032763 C 6.412808 8.962311 6.446142 8.858818 6.465496 8.802778 C 6.484849 8.746738 6.518249 8.655035 6.539717 8.598995 C 6.561186 8.542953 6.602031 8.442345 6.630485 8.375416 C 6.658939 8.308489 6.70972 8.197136 6.743332 8.127964 C 6.776944 8.058794 6.832236 7.95052 6.866203 7.887356 C 6.90017 7.824192 6.952321 7.731178 6.982093 7.68066 C 7.011866 7.630142 7.060556 7.550817 7.090293 7.504383 C 7.12003 7.457949 7.172568 7.378656 7.207044 7.328175 C 7.241519 7.277695 7.302188 7.193024 7.341863 7.140018 C 7.381538 7.087011 7.441681 7.009102 7.475513 6.966883 C 7.509346 6.924664 7.599599 6.820524 7.676076 6.735464 C 7.752553 6.650404 7.849262 6.547163 7.890984 6.506039 C 7.932705 6.464916 7.998294 6.402197 8.036735 6.366665 C 8.075176 6.331131 8.140952 6.272413 8.182905 6.236177 C 8.224856 6.199942 8.298167 6.139339 8.345817 6.101505 C 8.393466 6.063671 8.470119 6.005207 8.516157 5.971586 C 8.562195 5.937967 8.646946 5.879026 8.704494 5.840609 C 8.762041 5.802191 8.842084 5.750618 8.882367 5.726 C 8.92265 5.701384 9.00387 5.654442 9.062857 5.621687 C 9.121842 5.588932 9.203063 5.545599 9.243345 5.525389 C 9.283628 5.50518 9.355461 5.47072 9.402973 5.448809 C 9.450484 5.426899 9.527484 5.393152 9.574082 5.373819 C 9.620681 5.354485 9.700695 5.323116 9.751891 5.304111 C 9.803088 5.285107 9.889707 5.255066 9.944377 5.237354 C 9.999046 5.219641 10.09086 5.192059 10.148408 5.176058 C 10.205956 5.160059 10.300123 5.136238 10.357671 5.123121 C 10.415218 5.110006 10.504275 5.091564 10.555576 5.08214 C 10.606877 5.072718 10.693983 5.058481 10.749145 5.050505 C 10.804306 5.042528 10.889461 5.031969 10.938375 5.027039 C 10.98729 5.022112 11.05674 5.015299 11.092707 5.011904 C 11.134513 5.007956 11.52846 5.004694 12.184833 5.002863 L 13.211563 5 Z';\n\nconst BjsubwayIntStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultBjsubwayIntStationAttributes.nameOffsetX,\n        nameOffsetY = defaultBjsubwayIntStationAttributes.nameOffsetY,\n        outOfStation = defaultBjsubwayIntStationAttributes.outOfStation,\n    } = attrs[StationType.BjsubwayInt] ?? defaultBjsubwayIntStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -12 : nameOffsetX === 'right' ? 12 : 0;\n    const textY =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length * NAME_DY[nameOffsetY].lineHeight + 8) *\n        NAME_DY[nameOffsetY].polarity;\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    return React.useMemo(\n        () => (\n            <g id={id}>\n                <g transform={`translate(${x - 12.5}, ${y - 12.5})`}>\n                    <circle cx=\"12.5\" cy=\"12.5\" r=\"10.5\" stroke=\"black\" strokeWidth=\"1\" fill=\"white\" />\n                    <path\n                        d={PATH_ARROW}\n                        fill={outOfStation ? '#898989' : 'black'}\n                        stroke={outOfStation ? '#898989' : 'black'}\n                        strokeWidth=\"0.533618\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                    />\n                    <circle\n                        id={`stn_core_${id}`}\n                        cx=\"12.5\"\n                        cy=\"12.5\"\n                        r=\"10.5\"\n                        stroke=\"black\"\n                        strokeWidth=\"1\"\n                        strokeOpacity=\"0\"\n                        fill=\"white\"\n                        fillOpacity=\"0\"\n                        onPointerDown={onPointerDown}\n                        onPointerMove={onPointerMove}\n                        onPointerUp={onPointerUp}\n                        style={{ cursor: 'move' }}\n                    />\n                </g>\n                <g\n                    transform={`translate(${x + textX}, ${y + textY})`}\n                    textAnchor={textAnchor}\n                    className=\"rmp-name-station\"\n                >\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={LINE_HEIGHT.zh}\n                        lineHeight={LINE_HEIGHT.zh}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={LINE_HEIGHT.en}\n                        lineHeight={LINE_HEIGHT.en}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, nameOffsetX, nameOffsetY, outOfStation, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * BjsubwayIntStation specific props.\n */\nexport interface BjsubwayIntStationAttributes extends StationAttributes {\n    nameOffsetX: NameOffsetX;\n    nameOffsetY: NameOffsetY;\n    outOfStation: boolean;\n}\n\nconst defaultBjsubwayIntStationAttributes: BjsubwayIntStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'top',\n    outOfStation: false,\n};\n\nconst bjsubwayIntStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.bjsubwayInt.nameZh',\n        value: (attrs?: BjsubwayIntStationAttributes) =>\n            (attrs ?? defaultBjsubwayIntStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.bjsubwayInt.nameEn',\n        value: (attrs?: BjsubwayIntStationAttributes) =>\n            (attrs ?? defaultBjsubwayIntStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.bjsubwayInt.nameOffsetX',\n        value: (attrs?: BjsubwayIntStationAttributes) => (attrs ?? defaultBjsubwayIntStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: BjsubwayIntStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as NameOffsetX;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.bjsubwayInt.nameOffsetY',\n        value: (attrs?: BjsubwayIntStationAttributes) => (attrs ?? defaultBjsubwayIntStationAttributes).nameOffsetY,\n        options: { top: 'top', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: BjsubwayIntStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as NameOffsetY;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'switch',\n        label: 'panel.details.station.bjsubwayInt.outOfStation',\n        oneLine: true,\n        isChecked: (attrs?: BjsubwayIntStationAttributes) =>\n            (attrs ?? defaultBjsubwayIntStationAttributes).outOfStation,\n        onChange: (val: boolean, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.outOfStation = val;\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst bjsubwayIntStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <g transform=\"translate(6, 6)\">\n            <circle cx=\"6\" cy=\"6\" r=\"6\" stroke=\"black\" strokeWidth=\"1\" fill=\"white\" />\n            <path d={PATH_ARROW} stroke=\"black\" strokeWidth=\"0.533618\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n        </g>\n    </svg>\n);\n\nconst bjsubwayIntStation: Station<BjsubwayIntStationAttributes> = {\n    component: BjsubwayIntStation,\n    icon: bjsubwayIntStationIcon,\n    defaultAttrs: defaultBjsubwayIntStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: bjsubwayIntStationFields,\n    metadata: {\n        displayName: 'panel.details.station.bjsubwayInt.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: ['interchange'],\n    },\n};\n\nexport default bjsubwayIntStation;\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    NameOffsetX,\n    NameOffsetY,\n    Rotate,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\nimport {\n    InterchangeField,\n    InterchangeInfo,\n    StationAttributesWithInterchange,\n} from '../../panels/details/interchange-field';\n\nconst makeStationPath = (r: number, lineWidth: number, transfer: InterchangeInfo[]): `M${string}` => {\n    const y = Math.sqrt(r * r - (lineWidth * lineWidth) / 4);\n    const circleCount = transfer.length < 2 ? transfer.length + 1 : transfer.length;\n    let d = `M ${-r},0 A ${r},${r},0,0,1,${-lineWidth / 2},-${y} `;\n    for (let i = 0; i < circleCount; i = i + 1) {\n        d += `A ${r},${r},0,0,1,${i * lineWidth + lineWidth / 2},-${y} `;\n    }\n    d += `A ${r},${r},0,0,1,${transfer.length * lineWidth - lineWidth / 2},${y} `;\n    for (let i = circleCount - 1; i >= 0; i = i - 1) {\n        d += `A ${r},${r},0,0,1,${i * lineWidth - lineWidth / 2},${y} `;\n    }\n    d += `A ${r},${r},0,0,1,${-r},0 Z`;\n    return d as `M${string}`;\n};\n\nconst MTRStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultMTRStationAttributes.nameOffsetX,\n        nameOffsetY = defaultMTRStationAttributes.nameOffsetY,\n        transfer = defaultMTRStationAttributes.transfer,\n        rotate = defaultMTRStationAttributes.rotate,\n    } = attrs[StationType.MTR] ?? defaultMTRStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const lineWidth = 5;\n    const path = makeStationPath(5, lineWidth, transfer.at(0)!);\n\n    const textX = nameOffsetX === 'left' ? -12 : nameOffsetX === 'right' ? 12 : 0;\n    const textY =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length * NAME_DY[nameOffsetY].lineHeight + 8) *\n        NAME_DY[nameOffsetY].polarity;\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                <path\n                    transform={`rotate(${rotate})`}\n                    d={path}\n                    stroke=\"#132647\"\n                    strokeWidth=\"1.5\"\n                    fill=\"white\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n                {transfer.at(0)!.length > 1 &&\n                    transfer\n                        .at(0)!\n                        .map(info => info[2])\n                        .map((color, i) => (\n                            <line\n                                key={`${i}_${color}`}\n                                transform={`rotate(${rotate})`}\n                                x1={-lineWidth / 2 + i * lineWidth}\n                                x2={lineWidth / 2 + i * lineWidth}\n                                stroke={color}\n                                strokeWidth=\"2\"\n                            />\n                        ))}\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <path\n                    id={`stn_core_${id}`}\n                    transform={`rotate(${rotate})`}\n                    d={path}\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n                <g transform={`translate(${textX}, ${textY})`} textAnchor={textAnchor} className=\"rmp-name-station\">\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                        fill=\"#132647\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                        fill=\"#132647\"\n                    />\n                </g>\n            </g>\n        ),\n        [\n            id,\n            x,\n            y,\n            ...names,\n            rotate,\n            JSON.stringify(transfer),\n            nameOffsetX,\n            nameOffsetY,\n            onPointerDown,\n            onPointerMove,\n            onPointerUp,\n        ]\n    );\n};\n\n/**\n * MTRStation specific props.\n */\nexport interface MTRStationAttributes extends StationAttributes, StationAttributesWithInterchange {\n    nameOffsetX: NameOffsetX;\n    nameOffsetY: NameOffsetY;\n    rotate: Rotate;\n}\n\nconst defaultMTRStationAttributes: MTRStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'top',\n    rotate: 0,\n    transfer: [[]],\n};\n\nconst mtrStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.mtr.nameZh',\n        value: (attrs?: MTRStationAttributes) => (attrs ?? defaultMTRStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: MTRStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultMTRStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.mtr.nameEn',\n        value: (attrs?: MTRStationAttributes) => (attrs ?? defaultMTRStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: MTRStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultMTRStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.mtr.nameOffsetX',\n        value: (attrs?: MTRStationAttributes) => (attrs ?? defaultMTRStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: MTRStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: MTRStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultMTRStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as NameOffsetX;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.mtr.nameOffsetY',\n        value: (attrs?: MTRStationAttributes) => (attrs ?? defaultMTRStationAttributes).nameOffsetY,\n        options: { top: 'top', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: MTRStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: MTRStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultMTRStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as NameOffsetY;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.mtr.rotate',\n        value: (attrs?: MTRStationAttributes) => attrs?.rotate ?? defaultMTRStationAttributes.rotate,\n        options: { 0: '0', 45: '45', 90: '90', 135: '135', 180: '180', 225: '225', 270: '270', 315: '315' },\n        onChange: (val: string | number, attrs_: MTRStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultMTRStationAttributes;\n            // set value\n            attrs.rotate = Number(val) as Rotate;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: (\n            <InterchangeField\n                stationType={StationType.MTR}\n                defaultAttrs={defaultMTRStationAttributes}\n                maximumTransfers={[5, 0, 0]}\n            />\n        ),\n    },\n];\n\nconst mtrStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height=\"40\" width=\"40\" focusable={false}>\n        <circle cx=\"12\" cy=\"12\" r=\"5\" stroke=\"currentColor\" strokeWidth=\"1.5\" fill=\"none\" />\n    </svg>\n);\n\nconst mtrStation: Station<MTRStationAttributes> = {\n    component: MTRStation,\n    icon: mtrStationIcon,\n    defaultAttrs: defaultMTRStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: mtrStationFields,\n    metadata: {\n        displayName: 'panel.details.station.mtr.displayName',\n        cities: [CityCode.Hongkong],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default mtrStation;\n","import { StationType } from '../../../constants/stations';\nimport shmetroBasicStation from './shmetro-basic';\nimport shmetroBasic2020Station from './shmetro-basic-2020';\nimport shmetroIntStation from './shmetro-int';\nimport gzmtrBasicStation from './gzmtr-basic';\nimport gzmtrIntStation from './gzmtr-int';\nimport bjsubwayBasicStation from './bjsubway-basic';\nimport bjsubwayIntStation from './bjsubway-int';\nimport mtrStation from './mtr';\n\nconst stations = {\n    [StationType.ShmetroBasic]: shmetroBasicStation,\n    [StationType.ShmetroBasic2020]: shmetroBasic2020Station,\n    [StationType.ShmetroInt]: shmetroIntStation,\n    [StationType.GzmtrBasic]: gzmtrBasicStation,\n    [StationType.GzmtrInt]: gzmtrIntStation,\n    [StationType.BjsubwayBasic]: bjsubwayBasicStation,\n    [StationType.BjsubwayInt]: bjsubwayIntStation,\n    [StationType.MTR]: mtrStation,\n};\n\nexport default stations;\n","import { CityCode, ColourHex, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { ExternalStationAttributes, StationType } from './stations';\nimport { ExternalLinePathAttributes, ExternalLineStyleAttributes, LinePathType, LineStyleType } from './lines';\nimport { MiscNodeAttributes, MiscNodeType } from './nodes';\nimport { MiscEdgeType } from './edges';\n\n/**\n * Attributes shared both in nodes and edges.\n */\ninterface BaseAttributes {\n    visible: boolean;\n    zIndex: number;\n}\n\nexport type NodeType = StationType | MiscNodeType;\nexport type NodeAttributes = BaseAttributes & {\n    x: number;\n    y: number;\n    type: NodeType;\n} & Partial<ExternalStationAttributes> &\n    Partial<MiscNodeAttributes>;\n\nexport type EdgeType = LinePathType;\nexport type EdgeAttributes = BaseAttributes & {\n    type: EdgeType;\n    style: LineStyleType;\n    /**\n     * Unique ID to reconcile lines.\n     */\n    reconcileId: string;\n} & Partial<ExternalLinePathAttributes> &\n    Partial<ExternalLineStyleAttributes>;\n\nexport type GraphAttributes = {\n    name?: string;\n};\n\n/**\n * Colour theme of line, derived from `LineEntry`.\n * @property 0 - city id\n * @property 1 - line id\n * @property 2 - background colour\n * @property 3 - foreground colour\n */\nexport type Theme = [CityCode, string, ColourHex, MonoColour];\n\nexport type StnId = `stn_${string}`;\nexport type LineId = `line_${string}`;\nexport type MiscNodeId = `misc_node_${string}`;\nexport type MiscEdgeId = `misc_edge_${string}`;\n\n/**\n * Indicate which station/line/node/edge is currently in mouse control. (Runtime only)\n */\nexport type ActiveType = StnId | LineId | MiscNodeId | MiscEdgeId | 'background';\n\n/**\n * Indicate which element will be placed by next click. (Runtime only)\n */\nexport type RuntimeMode =\n    | 'free'\n    | `line-${LinePathType}`\n    | `station-${StationType}`\n    | `misc-node-${MiscNodeType}`\n    | `misc-edge-${MiscEdgeType}`;\n\n/**\n * Stations and lines may be in different displaying format.\n * E.g. Station's icon of Rail map and platform are different in Shanghai metro.\n */\nexport enum CanvasType {\n    RailMap = 'railmap',\n    Platform = 'platform',\n}\n\n/**\n * Categories of different railway class.\n */\nexport enum CategoriesType {\n    Metro = 'metro',\n    NationalRail = 'nationalrail',\n    LightRail = 'lightrail',\n    Footpath = 'footpath',\n}\n\n/**\n * RmgRuntime statistics event.\n */\nexport enum Events {\n    APP_LOAD = 'APP_LOAD',\n    ADD_STATION = 'ADD_STATION',\n    ADD_LINE = 'ADD_LINE',\n    DOWNLOAD_PARAM = 'DOWNLOAD_PARAM',\n    DOWNLOAD_IMAGES = 'DOWNLOAD_IMAGES',\n}\n"],"names":["MultilineText","React","props","ref","text","lineHeight","grow","dominantBaseline","baseOffset","otherSvgTextProps","reverse","map","t","i","dy","join","JSON","stringify","displayName","NAME_DY","top","namesPos","polarity","middle","bottom","defaultShmetroBasicStationAttributes","defaultStationAttributes","nameOffsetX","nameOffsetY","shmetroBasicStationFields","type","label","value","attrs","names","replaceAll","onChange","val","attrs_","toString","options","left","right","disabledOptions","component","id","x","y","handlePointerDown","handlePointerMove","handlePointerUp","StationType","onPointerDown","e","onPointerMove","onPointerUp","textX","textY","split","length","textAnchor","transform","r","stroke","strokeWidth","fill","style","cursor","className","fontSize","icon","viewBox","height","width","focusable","cx","cy","defaultAttrs","fields","metadata","cities","CityCode","canvas","CanvasType","categories","CategoriesType","tags","ROTATE_CONST","textDx","textDy","defaultShmetroBasic2020StationAttributes","rotate","color","MonoColour","shmetroBasic2020StationFields","Number","defaultShmetroIntStationAttributes","shmetroIntStationFields","validator","isInteger","Math","abs","ry","s","PATH","TEXT_MAX_WIDTH","StationNumber","strokeColor","lineCode","stationCode","lineCodeEl","stnCodeEl","lineCodeBBox","setlineCodeBBox","stnCodeBBox","setstnCodeBBox","current","getBBox","lineCodeScale","max","stnCodeScale","d","defaultGzmtrBasicStationAttributes","open","secondaryNames","tram","gzmtrBasicStationFields","oneLine","isChecked","secondaryTextRef","secondaryTextWidth","setSecondaryTextWidth","textRef","textWidth","setTextWidth","secondaryDx","underConstructionDx","dx","fillOpacity","InterchangeCard","interchangeList","onAdd","onDelete","onUpdate","useTranslation","useState","isModalOpen","setIsModalOpen","selectedIndex","setSelectedIndex","interchangeFields","it","minW","direction","spacing","as","flex","align","colorScheme","size","variant","onClick","noLabel","theme","slice","isOpen","onClose","defaultTheme","InterchangeField","stationType","maximumTransfers","dispatch","useRootDispatch","hardRefresh","setRefreshNodes","saveGraph","graph","export","selected","useRootSelector","state","runtime","selectedFirst","at","window","attr","hasNode","getNodeAttribute","transfer","handleAdd","setIndex","interchangeInfo","newTransferInfo","parse","push","mergeNodeAttributes","handleUpdate","interchangeIndex","set","setIdx","int","intIdx","undefined","infoList","Fragment","filter","_","alignSelf","leftIcon","CODE_POS","defaultGzmtrIntStationAttributes","gzmtrIntStationFields","colorMode","useColorMode","bgColor","useColorModeValue","transferAll","flat","arrowColor","info","arr","indexOf","markerWidth","markerHeight","refX","refY","orient","points","markerEnd","strokeOpacity","LINE_HEIGHT","defaultBjsubwayBasicStationAttributes","bjsubwayBasicStationFields","strokeDasharray","PATH_ARROW","defaultBjsubwayIntStationAttributes","outOfStation","bjsubwayIntStationFields","strokeLinecap","strokeLinejoin","defaultMTRStationAttributes","mtrStationFields","path","lineWidth","sqrt","circleCount","makeStationPath","x1","x2","shmetroBasicStation","shmetroBasic2020Station","shmetroIntStation","gzmtrBasicStation","gzmtrIntStation","bjsubwayBasicStation","bjsubwayIntStation","mtrStation","Events"],"sourceRoot":""}