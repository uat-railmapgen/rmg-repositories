{"version":3,"file":"static/js/WindowHeader.c890c06a.chunk.js","mappings":"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","sources":["components/page-header/gallery-modal.tsx","components/page-header/open-actions.tsx","components/page-header/terms-and-conditions.tsx","components/page-header/download-actions.tsx","images/github-mark.svg","images/slack-mark.svg","components/page-header/about-modal.tsx","components/page-header/zoom-popover.tsx","components/page-header/procedures-modal.tsx","components/page-header/settings-modal.tsx","components/page-header/window-header.tsx","components/page-header/global-alerts.tsx","components/page-header/page-header.tsx","util/change-types.ts","util/helpers.ts","saves|lazy|/^/.//.*/.json$/|chunkName: template|groupOptions: {}|namespace object"],"sourcesContent":["import {\n    Button,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    VStack,\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { RMPSave } from '../../util/save';\n\nexport const GalleryModal = (props: {\n    isOpen: boolean;\n    handleOpenTemplates: (rmpSave: RMPSave) => void;\n    onClose: () => void;\n}) => {\n    const { isOpen, handleOpenTemplates, onClose } = props;\n    const { t } = useTranslation();\n\n    const handleSelect = async (name: string) => {\n        const module = await import(/* webpackChunkName: \"template\" */ `../../saves/${name}.json`);\n        handleOpenTemplates(module.default as RMPSave);\n        onClose();\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.open.gallery')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <VStack>\n                        {['shanghai', 'guangzhou', 'beijing', 'santiago'].map(city => (\n                            <Button key={city} minWidth={200} onClick={() => handleSelect(city)}>\n                                {t(`header.open.${city}`)}\n                            </Button>\n                        ))}\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MdInsertDriveFile, MdNoteAdd, MdUpload } from 'react-icons/md';\nimport { Badge, IconButton, Menu, MenuButton, MenuItem, MenuList } from '@chakra-ui/react';\nimport { nanoid } from 'nanoid';\nimport { useRootDispatch } from '../../redux';\nimport { ParamState, saveGraph, setFullState } from '../../redux/param/param-slice';\nimport { clearSelected, setRefreshNodes, setRefreshEdges } from '../../redux/runtime/runtime-slice';\nimport { LinePathType, LineStyleType } from '../../constants/lines';\nimport { StationAttributes, StationType } from '../../constants/stations';\nimport { InterchangeInfo } from '../panels/details/interchange-field';\nimport { linePaths, lineStyles } from '../svgs/lines/lines';\nimport { GzmtrBasicStationAttributes } from '../svgs/stations/gzmtr-basic';\nimport { GzmtrIntStationAttributes } from '../svgs/stations/gzmtr-int';\nimport { ShmetroBasic2020StationAttributes } from '../svgs/stations/shmetro-basic-2020';\nimport stations from '../svgs/stations/stations';\nimport { RMPSave, upgrade } from '../../util/save';\nimport { GalleryModal } from './gallery-modal';\n\nexport default function OpenActions() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const graph = React.useRef(window.graph);\n    const fileRMGInputRef = React.useRef<HTMLInputElement | null>(null);\n    const fileInputRef = React.useRef<HTMLInputElement | null>(null);\n\n    const [isGalleryModalOpen, setIsGalleryModalOpen] = React.useState(false);\n\n    const refreshAndSave = React.useCallback(() => {\n        dispatch(setRefreshNodes());\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefreshNodes, setRefreshEdges, saveGraph, graph]);\n\n    const handleNew = () => {\n        dispatch(clearSelected());\n        graph.current.clear();\n        const state: ParamState = { graph: '{}', svgViewBoxZoom: 100, svgViewBoxMin: { x: 0, y: 0 } };\n        dispatch(setFullState(state));\n        refreshAndSave();\n    };\n\n    const handleUploadRMG = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        console.log('OpenActions.handleUploadRMG():: received file', file);\n\n        if (file?.type !== 'application/json') {\n            // dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.invalidType') }));\n            console.error('OpenActions.handleUploadRMG():: Invalid file type! Only file in JSON format is accepted.');\n        } else {\n            try {\n                const paramStr = await readFileAsText(file);\n                const param = JSON.parse(paramStr);\n                const stnList = param.stn_list;\n                const theme = param.theme;\n\n                // generate stn id\n                const stnIdMap = Object.fromEntries(\n                    Object.keys(stnList)\n                        .filter(id => !['linestart', 'lineend'].includes(id))\n                        .map(id => [id, `stn_${nanoid(10)}`])\n                );\n                // update stnIdMap if stations exist in the graph\n                Object.entries(stnList)\n                    .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n                    .forEach(([id, stnInfo]) => {\n                        const nodes = graph.current.filterNodes(\n                            (node, attr) =>\n                                // @ts-expect-error\n                                Object.values(StationType).includes(attr.type) &&\n                                // @ts-expect-error\n                                (attr[attr.type] as StationAttributes).names[0] === stnInfo.name[0]\n                        );\n                        if (nodes.length !== 0) stnIdMap[id] = nodes[0];\n                    });\n\n                // only import stations that don't appear in the graph\n                Object.entries(stnList)\n                    .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n                    .filter(\n                        ([id, stnInfo]) =>\n                            graph.current.filterNodes(\n                                (node, attr) =>\n                                    // @ts-expect-error\n                                    Object.values(StationType).includes(attr.type) &&\n                                    // @ts-expect-error\n                                    (attr[attr.type] as StationAttributes).names[0] === stnInfo.name[0]\n                            ).length === 0\n                    )\n                    .forEach(([id, stnInfo], i) => {\n                        // determine station type\n                        let type: StationType = StationType.ShmetroBasic;\n                        if (param.style === 'shmetro') {\n                            if ((stnInfo as any).transfer.info.flat().length > 0) type = StationType.ShmetroInt;\n                            else if (param.info_panel_type === 'sh2020') type = StationType.ShmetroBasic2020;\n                            else type = StationType.ShmetroBasic;\n                        } else if (param.style === 'gzmtr' || param.style === 'mtr') {\n                            if ((stnInfo as any).transfer.info.flat().length > 0) type = StationType.GzmtrInt;\n                            else type = StationType.GzmtrBasic;\n                        }\n\n                        // read default attrs\n                        const attr = {\n                            // deep copy to prevent mutual reference\n                            ...JSON.parse(JSON.stringify(stations[type].defaultAttrs)),\n                            names: (stnInfo as any).name,\n                        };\n\n                        // add style specific attrs from RMG save\n                        if (type === StationType.ShmetroBasic2020)\n                            (attr as ShmetroBasic2020StationAttributes).color = theme;\n                        else if (type === StationType.GzmtrBasic) {\n                            (attr as GzmtrBasicStationAttributes).color = param.theme;\n                            (attr as GzmtrBasicStationAttributes).lineCode = param.line_num;\n                            (attr as GzmtrBasicStationAttributes).stationCode = (stnInfo as any).num;\n                        } else if (type === StationType.GzmtrInt) {\n                            const transfer = JSON.parse(\n                                JSON.stringify((stnInfo as any).transfer.info)\n                            ) as InterchangeInfo[][];\n                            // override line code and station code to default as they are not provided in RMG save\n                            transfer.forEach(lv1 =>\n                                lv1.forEach(transferInfo => {\n                                    transferInfo[4] = '1';\n                                    transferInfo[5] = '01';\n                                })\n                            );\n                            // add current line and station code to transfer[0][0]\n                            transfer[0].unshift([\n                                ...param.theme,\n                                param.line_num,\n                                (stnInfo as any).num,\n                            ] as unknown as InterchangeInfo);\n                            (attr as GzmtrIntStationAttributes).transfer = transfer;\n                        }\n\n                        graph.current.addNode(stnIdMap[id], {\n                            visible: true,\n                            zIndex: 0,\n                            x: 100 + i * 50,\n                            y: 1000,\n                            type,\n                            [type]: attr,\n                        });\n                    });\n\n                // import lines\n                Object.entries(stnList)\n                    .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n                    .forEach(([id, stnInfo]) => {\n                        (stnInfo as any).children\n                            .filter((child: string) => !['linestart', 'lineend'].includes(child))\n                            .forEach((child: string) => {\n                                graph.current.addDirectedEdgeWithKey(\n                                    `line_${nanoid(10)}`,\n                                    stnIdMap[id],\n                                    stnIdMap[child],\n                                    {\n                                        visible: true,\n                                        zIndex: 0,\n                                        type: LinePathType.Diagonal,\n                                        // deep copy to prevent mutual reference\n                                        [LinePathType.Diagonal]: JSON.parse(\n                                            JSON.stringify(linePaths[LinePathType.Diagonal].defaultAttrs)\n                                        ),\n                                        style: LineStyleType.SingleColor,\n                                        [LineStyleType.SingleColor]: JSON.parse(\n                                            JSON.stringify(lineStyles[LineStyleType.SingleColor].defaultAttrs)\n                                        ),\n                                        reconcileId: '',\n                                    }\n                                );\n                            });\n                    });\n\n                refreshAndSave();\n            } catch (err) {\n                // dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.unknownError') }));\n                console.error(\n                    'OpenActions.handleUploadRMG():: Unknown error occurred while parsing the uploaded file',\n                    err\n                );\n            }\n        }\n\n        // clear field for next upload\n        event.target.value = '';\n    };\n\n    const handleUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        console.log('OpenActions.handleUpload():: received file', file);\n\n        if (file?.type !== 'application/json') {\n            // dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.invalidType') }));\n            console.error('OpenActions.handleUpload():: Invalid file type! Only file in JSON format is accepted.');\n        } else {\n            try {\n                const paramStr = await readFileAsText(file);\n                const { version, ...save } = JSON.parse(await upgrade(paramStr));\n\n                // details panel will complain unknown nodes or edges if last state is not cleared\n                dispatch(clearSelected());\n                graph.current.clear();\n                graph.current.import(save.graph);\n                const state: ParamState = { ...save, graph: JSON.stringify(save.graph) };\n                dispatch(setFullState(state));\n\n                refreshAndSave();\n            } catch (err) {\n                // dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.unknownError') }));\n                console.error(\n                    'OpenActions.handleUpload():: Unknown error occurred while parsing the uploaded file',\n                    err\n                );\n            }\n        }\n\n        // clear field for next upload\n        event.target.value = '';\n    };\n\n    const handleOpenTemplates = async (rmpSave: RMPSave) => {\n        // templates may be obsolete and require upgrades\n        const { version, ...save } = JSON.parse(await upgrade(JSON.stringify(rmpSave)));\n\n        // details panel will complain unknown nodes or edges if last state is not cleared\n        dispatch(clearSelected());\n        graph.current.clear();\n        graph.current.import(save.graph);\n        const state: ParamState = { ...save, graph: JSON.stringify(save.graph) };\n        dispatch(setFullState(state));\n\n        refreshAndSave();\n    };\n\n    return (\n        <Menu>\n            <MenuButton as={IconButton} size=\"sm\" variant=\"ghost\" icon={<MdUpload />} />\n            <MenuList>\n                <MenuItem icon={<MdNoteAdd />} onClick={handleNew}>\n                    {t('header.open.new')}\n                </MenuItem>\n\n                <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\".json\"\n                    hidden={true}\n                    onChange={handleUpload}\n                    data-testid=\"file-upload\"\n                />\n                <MenuItem icon={<MdUpload />} onClick={() => fileInputRef?.current?.click()}>\n                    {t('header.open.config')}\n                </MenuItem>\n\n                <input\n                    ref={fileRMGInputRef}\n                    type=\"file\"\n                    accept=\".json\"\n                    hidden={true}\n                    onChange={handleUploadRMG}\n                    data-testid=\"file-upload\"\n                />\n                <MenuItem icon={<MdUpload />} onClick={() => fileRMGInputRef?.current?.click()}>\n                    {t('header.open.configRMG')}\n                </MenuItem>\n\n                <MenuItem icon={<MdInsertDriveFile />} onClick={() => setIsGalleryModalOpen(true)}>\n                    {t('header.open.gallery')}\n                    <Badge ml=\"1\" colorScheme=\"green\">\n                        New\n                    </Badge>\n                </MenuItem>\n                <GalleryModal\n                    isOpen={isGalleryModalOpen}\n                    handleOpenTemplates={handleOpenTemplates}\n                    onClose={() => setIsGalleryModalOpen(false)}\n                />\n            </MenuList>\n        </Menu>\n    );\n}\n\nconst readFileAsText = (file: File) => {\n    return new Promise((resolve: (text: string) => void) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.readAsText(file);\n    });\n};\n","import { useTranslation } from 'react-i18next';\nimport {\n    Icon,\n    Link,\n    ListItem,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalCloseButton,\n    ModalBody,\n    OrderedList,\n} from '@chakra-ui/react';\nimport { MdOpenInNew } from 'react-icons/md';\n\nconst TermsAndConditionsModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.download.termsAndConditions')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <OrderedList>\n                        <ListItem>\n                            The layout of the elements on the signage or rail map, is designed by{' '}\n                            <Link color=\"teal.500\" href=\"https://www.shmetro.com/\" isExternal={true}>\n                                Shanghai Shentong Metro Group <Icon as={MdOpenInNew} />\n                            </Link>\n                            {', '}\n                            <Link color=\"teal.500\" href=\"https://www.gzmtr.com/\" isExternal={true}>\n                                Guangzhou Metro Group <Icon as={MdOpenInNew} />\n                            </Link>\n                            {' or '}\n                            <Link color=\"teal.500\" href=\"https://www.mtr.com.hk/\" isExternal={true}>\n                                MTR Corporation <Icon as={MdOpenInNew} />\n                            </Link>\n                            , depending on your selection. You shall grant appropriate permit or license from the\n                            relevant company above before using the generated images for commercial purposes, if it is\n                            required to do so.\n                            <br />\n                            标志版或路线图的元素或布局，基于你所选择的风格，为\n                            <Link color=\"teal.500\" href=\"https://www.shmetro.com/\" isExternal={true}>\n                                上海申通地铁集团 <Icon as={MdOpenInNew} />\n                            </Link>\n                            ，\n                            <Link color=\"teal.500\" href=\"https://www.gzmtr.com/\" isExternal={true}>\n                                广州地铁集团公司 <Icon as={MdOpenInNew} />\n                            </Link>\n                            或\n                            <Link color=\"teal.500\" href=\"https://www.mtr.com.hk/\" isExternal={true}>\n                                港铁公司 <Icon as={MdOpenInNew} />\n                            </Link>\n                            所设计。在产生的图像用作商业用途前，你应向相关公司取得适当之许可证或授权。\n                        </ListItem>\n                        <ListItem>\n                            The elements including shapes and lines on the image are drawn by{' '}\n                            <Link color=\"teal.500\" href=\"https://www.github.com/thekingofcity\" isExternal={true}>\n                                thekingofcity <Icon as={MdOpenInNew} />\n                            </Link>\n                            {' and '}\n                            <Link color=\"teal.500\" href=\"https://www.github.com/wongchito\" isExternal={true}>\n                                Chito Wong <Icon as={MdOpenInNew} />\n                            </Link>\n                            , based on the design standards or rules of the companies listed above. You may use them for\n                            any purposes, but it is recommended to state the name and the link of software alongside.\n                            <br />\n                            图像的元素，包括图形及线条，均由\n                            <Link color=\"teal.500\" href=\"https://www.github.com/thekingofcity\" isExternal={true}>\n                                thekingofcity <Icon as={MdOpenInNew} />\n                            </Link>\n                            及\n                            <Link color=\"teal.500\" href=\"https://www.github.com/wongchito\" isExternal={true}>\n                                Chito Wong <Icon as={MdOpenInNew} />\n                            </Link>\n                            基于上述公司设计标准或准则绘制。你可将其用于任何目的，但我们建议你于使用同时附以我们的名字以及本网站地址。\n                        </ListItem>\n                        <ListItem>\n                            Due to copyright, licensing and other legal restrictions, Rail Map Painter uses{' '}\n                            <Link color=\"teal.500\" href=\"https://github.com/ButTaiwan/genyo-font\" isExternal={true}>\n                                GenYoMin provided by ButTaiwan <Icon as={MdOpenInNew} />\n                            </Link>\n                            , and Vegur instead of MTRSung and Myriad Pro respectively to display and generate MTR-style\n                            signage. You shall grant appropriate permit or license from the manufacturers before using\n                            those generated images for commercial purposes.\n                            <br />\n                            由于著作权及其他法律限制，铁路路线图绘制器使用由\n                            <Link color=\"teal.500\" href=\"https://github.com/ButTaiwan/genyo-font\" isExternal={true}>\n                                ButTaiwan提供的源樣明體 <Icon as={MdOpenInNew} />\n                            </Link>\n                            ，以及Vegur，以代替港铁样式标志牌所使用的地铁宋及Myriad\n                            Pro。在产生之图像用作商业用途前，你应向字型生产厂商取得适当之许可证或授权。\n                        </ListItem>\n                        <ListItem>\n                            The exported images in PNG or SVG format may be modified, published, or used for other\n                            purposes except commercial use, under the conditions above.\n                            <br />\n                            输出的PNG或SVG图像可基于上述条款，在非商业使用时，用于修改、发行或其他用途。\n                        </ListItem>\n                        <ListItem>\n                            All flag emojis shown on Windows platforms are designed by{' '}\n                            <Link color=\"teal.500\" href=\"https://openmoji.org/\" isExternal={true}>\n                                OpenMoji <Icon as={MdOpenInNew} />\n                            </Link>{' '}\n                            – the open-source emoji and icon project. License:\n                            <Link\n                                color=\"teal.500\"\n                                href=\"https://creativecommons.org/licenses/by-sa/4.0/\"\n                                isExternal={true}\n                            >\n                                CC BY-SA 4.0 <Icon as={MdOpenInNew} />\n                            </Link>\n                            <br />\n                            于Windows作业系统上显示的国旗Emoji为\n                            <Link color=\"teal.500\" href=\"https://openmoji.org/\" isExternal={true}>\n                                OpenMoji <Icon as={MdOpenInNew} />\n                            </Link>\n                            所设计。许可证：\n                            <Link\n                                color=\"teal.500\"\n                                href=\"https://creativecommons.org/licenses/by-sa/4.0/\"\n                                isExternal={true}\n                            >\n                                CC BY-SA 4.0 <Icon as={MdOpenInNew} />\n                            </Link>\n                        </ListItem>\n                        <ListItem>\n                            We reserve the rights, without prior notice, to modify, add, or remove these terms. The\n                            Chinese translation is for reference only. In case of any discrepancy between the English\n                            version and the Chinese version, the English version shall prevail.\n                            <br />\n                            我们保留修改、新增或移除上述条款之权利，而无需另行通知。中文译本仅供参考，文义如与英文有歧异，概以英文本为准。\n                        </ListItem>\n                    </OrderedList>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default TermsAndConditionsModal;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Checkbox,\n    HStack,\n    Icon,\n    IconButton,\n    Link,\n    Menu,\n    MenuButton,\n    MenuItem,\n    MenuList,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    Text,\n    useColorModeValue,\n} from '@chakra-ui/react';\nimport { MdDownload, MdImage, MdOpenInNew, MdSave } from 'react-icons/md';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { MiscNodeType } from '../../constants/nodes';\nimport store from '../../redux';\nimport { calculateCanvasSize } from '../../util/helpers';\nimport { stringifyParam } from '../../util/save';\nimport TermsAndConditionsModal from './terms-and-conditions';\n\nexport default function DownloadActions() {\n    const { t } = useTranslation();\n\n    const graph = React.useRef(window.graph);\n    const bgColor = useColorModeValue('white', 'gray.800');\n\n    const [format, setFormat] = React.useState('png' as 'png' | 'svg');\n    const formatOptions = {\n        png: t('header.download.png'),\n        svg: t('header.download.svg'),\n    };\n    const [scale, setScale] = React.useState(100);\n    const scaleOptions = Object.fromEntries(\n        [25, 33, 50, 67, 75, 80, 90, 100, 110, 125, 150, 175, 200, 250, 300, 400, 500].map(v => [v, `${v}%`])\n    );\n    const [isTransparent, setIsTransparent] = React.useState(false);\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('header.download.format'),\n            value: format,\n            options: formatOptions,\n            onChange: value => setFormat(value === 'png' ? 'png' : 'svg'),\n        },\n    ];\n    const pngFields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('header.download.scale'),\n            value: scale,\n            options: scaleOptions,\n            onChange: value => setScale(value as number),\n        },\n        {\n            type: 'switch',\n            label: t('header.download.transparent'),\n            isChecked: isTransparent,\n            onChange: setIsTransparent,\n        },\n    ];\n    const [isDownloadModalOpen, setIsDownloadModalOpen] = React.useState(false);\n    const [isTermsAndConditionsModalOpen, setIsTermsAndConditionsModalOpen] = React.useState(false);\n    const [isAttachSelected, setIsAttachSelected] = React.useState(false);\n    const [isTermsAndConditionsSelected, setIsTermsAndConditionsSelected] = React.useState(false);\n\n    const handleDownloadJson = () => {\n        const param = stringifyParam(store.getState().param);\n        downloadAs(`RMP_${new Date().valueOf()}.json`, 'application/json', param);\n    };\n    // thanks to this article that includes every steps in converting svg to png\n    // https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n    const handleDownload = () => {\n        setIsDownloadModalOpen(false);\n\n        // get the minimum and maximum of the graph\n        const { xMin, yMin, xMax, yMax } = calculateCanvasSize(graph.current);\n        const [width, height] = [xMax - xMin, yMax - yMin];\n\n        const elem = document.getElementById('canvas')!.cloneNode(true) as SVGSVGElement;\n        // remove virtual nodes\n        [...elem.children]\n            .filter(\n                e =>\n                    graph.current.hasNode(e.id) && graph.current.getNodeAttribute(e.id, 'type') === MiscNodeType.Virtual\n            )\n            .forEach(e => elem.removeChild(e));\n        // append rmp info if user does not want to share rmp info\n        if (!isAttachSelected) elem.appendChild(generateRmpInfo(xMax - 400, yMax - 60));\n        // reset svg viewBox to display all the nodes in the graph\n        // otherwise the later drawImage won't be able to show all of them\n        elem.setAttribute('viewBox', `${xMin} ${yMin} ${width} ${height}`);\n        // Chrome will stretch the image if the following width and height are not set\n        elem.setAttribute('width', width.toString());\n        elem.setAttribute('height', height.toString());\n        // copy attributes from css to each elem in the newly cloned svg\n        Object.entries({\n            '.rmp-name__zh': ['font-family'],\n            '.rmp-name__en': ['font-family'],\n            '.rmp-name-station': ['paint-order', 'stroke', 'stroke-width'],\n        }).forEach(([className, styleSet]) => {\n            const e = document.querySelector(className);\n            const style = window.getComputedStyle(e!);\n            elem.querySelectorAll(className).forEach(el => {\n                styleSet.forEach(styleName => {\n                    el.setAttribute(styleName, style.getPropertyValue(styleName));\n                });\n                el.removeAttribute('class');\n            });\n        });\n\n        if (format === 'svg') {\n            downloadAs(`RMP_${new Date().valueOf()}.svg`, 'image/svg+xml', elem.outerHTML);\n            return;\n        }\n\n        // append to document to render the svg\n        document.body.appendChild(elem);\n        // convert it to blob\n        const src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(elem.outerHTML)));\n        // release after use\n        document.body.removeChild(elem);\n\n        // create canvas to be drawn on\n        const canvas = document.createElement('canvas');\n        const [canvasWidth, canvasHeight] = [(width * scale) / 100, (height * scale) / 100];\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n        // set background, respect to dark mode\n        if (!isTransparent) {\n            ctx.fillStyle = bgColor;\n            ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n        }\n\n        const img = new Image();\n        img.onload = () => {\n            ctx.drawImage(img, 0, 0, canvasWidth, canvasHeight);\n            canvas.toBlob(blob => downloadBlobAs(`RMP_${new Date().valueOf()}.png`, blob!), 'image/png');\n        };\n        img.src = src; // draw src on canvas\n    };\n\n    return (\n        <Menu>\n            <MenuButton as={IconButton} size=\"sm\" variant=\"ghost\" icon={<MdDownload />} />\n            <MenuList>\n                <MenuItem icon={<MdSave />} onClick={handleDownloadJson}>\n                    {t('header.download.config')}\n                </MenuItem>\n                <MenuItem icon={<MdImage />} onClick={() => setIsDownloadModalOpen(true)}>\n                    {t('header.download.image')}\n                </MenuItem>\n            </MenuList>\n\n            <Modal size=\"xl\" isOpen={isDownloadModalOpen} onClose={() => setIsDownloadModalOpen(false)}>\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>{t('header.download.image')}</ModalHeader>\n                    <ModalCloseButton />\n\n                    <ModalBody>\n                        <RmgFields fields={fields} />\n                        {format === 'png' && <RmgFields fields={pngFields} />}\n                        <br />\n                        <Checkbox isChecked={isAttachSelected} onChange={e => setIsAttachSelected(e.target.checked)}>\n                            <Text>\n                                {t('header.download.shareInfo1')}\n                                <Link\n                                    color=\"teal.500\"\n                                    onClick={() => window.open('https://railmapgen.github.io/rmp', '_blank')}\n                                >\n                                    {t('header.about.rmp')} <Icon as={MdOpenInNew} />\n                                </Link>\n                                {t('header.download.shareInfo2')}\n                            </Text>\n                        </Checkbox>\n                        <Checkbox\n                            isChecked={isTermsAndConditionsSelected}\n                            onChange={e => setIsTermsAndConditionsSelected(e.target.checked)}\n                        >\n                            <Text>\n                                {t('header.download.termsAndConditionsInfo')}\n                                <Link color=\"teal.500\" onClick={() => setIsTermsAndConditionsModalOpen(true)}>\n                                    {t('header.download.termsAndConditions')} <Icon as={MdOpenInNew} />\n                                </Link>\n                                {t('header.download.period')}\n                            </Text>\n                        </Checkbox>\n                    </ModalBody>\n\n                    <ModalFooter>\n                        <HStack>\n                            <Button\n                                colorScheme=\"teal\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                disabled={!isTermsAndConditionsSelected}\n                                onClick={handleDownload}\n                            >\n                                {t('header.download.confirm')}\n                            </Button>\n                        </HStack>\n                    </ModalFooter>\n\n                    <TermsAndConditionsModal\n                        isOpen={isTermsAndConditionsModalOpen}\n                        onClose={() => setIsTermsAndConditionsModalOpen(false)}\n                    />\n                </ModalContent>\n            </Modal>\n        </Menu>\n    );\n}\n\nconst downloadAs = (filename: string, type: string, data: any) => {\n    const blob = new Blob([data], { type });\n    downloadBlobAs(filename, blob);\n};\n\nconst downloadBlobAs = (filename: string, blob: Blob) => {\n    const url = window.URL.createObjectURL(blob);\n\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n};\n\nconst generateRmpInfo = (x: number, y: number) => {\n    const info = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    info.setAttribute('transform', `translate(${x}, ${y})scale(2)`);\n\n    const logo = document.createElementNS('http://www.w3.org/2000/svg', 'image');\n    // FIXME: return after image is loaded\n    // logo.setAttribute('href', 'https://uat-railmapgen.github.io/rmp/logo192.png');\n    // logo.setAttribute('href', logoImg);\n    logo.setAttribute('width', '40');\n    logo.setAttribute('height', '40');\n    logo.setAttribute('x', '-50');\n    logo.setAttribute('y', '-20');\n\n    const rmp = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    rmp.setAttribute('font-family', 'Arial, sans-serif');\n    rmp.setAttribute('font-size', '16');\n    rmp.appendChild(document.createTextNode('Rail Map Painter'));\n\n    const link = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    link.setAttribute('font-family', 'Arial, sans-serif');\n    link.setAttribute('font-size', '10');\n    link.setAttribute('y', '10');\n    link.appendChild(document.createTextNode('https://railmapgen.github.io/rmp/'));\n\n    info.appendChild(logo);\n    info.appendChild(rmp);\n    info.appendChild(link);\n\n    return info;\n};\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgGithubMark(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 98,\n    height: 96,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z\",\n    fill: \"#24292f\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgGithubMark);\nexport default __webpack_public_path__ + \"static/media/github-mark.6fa18895f6e6c7772cab7049f7e05f59.svg\";\nexport { ForwardRef as ReactComponent };","var _style, _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSlackMark(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 270 270\",\n    style: {\n      enableBackground: \"new 0 0 270 270\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\n\\t.st0{fill:#E01E5A;}\\n\\t.st1{fill:#36C5F0;}\\n\\t.st2{fill:#2EB67D;}\\n\\t.st3{fill:#ECB22E;}\\n\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M99.4,151.2c0,7.1-5.8,12.9-12.9,12.9c-7.1,0-12.9-5.8-12.9-12.9c0-7.1,5.8-12.9,12.9-12.9h12.9V151.2z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M105.9,151.2c0-7.1,5.8-12.9,12.9-12.9s12.9,5.8,12.9,12.9v32.3c0,7.1-5.8,12.9-12.9,12.9 s-12.9-5.8-12.9-12.9V151.2z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M118.8,99.4c-7.1,0-12.9-5.8-12.9-12.9c0-7.1,5.8-12.9,12.9-12.9s12.9,5.8,12.9,12.9v12.9H118.8z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M118.8,105.9c7.1,0,12.9,5.8,12.9,12.9s-5.8,12.9-12.9,12.9H86.5c-7.1,0-12.9-5.8-12.9-12.9 s5.8-12.9,12.9-12.9H118.8z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st2\",\n    d: \"M170.6,118.8c0-7.1,5.8-12.9,12.9-12.9c7.1,0,12.9,5.8,12.9,12.9s-5.8,12.9-12.9,12.9h-12.9V118.8z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st2\",\n    d: \"M164.1,118.8c0,7.1-5.8,12.9-12.9,12.9c-7.1,0-12.9-5.8-12.9-12.9V86.5c0-7.1,5.8-12.9,12.9-12.9 c7.1,0,12.9,5.8,12.9,12.9V118.8z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st3\",\n    d: \"M151.2,170.6c7.1,0,12.9,5.8,12.9,12.9c0,7.1-5.8,12.9-12.9,12.9c-7.1,0-12.9-5.8-12.9-12.9v-12.9H151.2z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st3\",\n    d: \"M151.2,164.1c-7.1,0-12.9-5.8-12.9-12.9c0-7.1,5.8-12.9,12.9-12.9h32.3c7.1,0,12.9,5.8,12.9,12.9 c0,7.1-5.8,12.9-12.9,12.9H151.2z\"\n  })))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSlackMark);\nexport default __webpack_public_path__ + \"static/media/slack-mark.3474c14d58fbbab9cfa2208b01a4ac3a.svg\";\nexport { ForwardRef as ReactComponent };","import rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Avatar,\n    Box,\n    Flex,\n    Heading,\n    Image,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    Tag,\n    TagLabel,\n    Text,\n    VStack,\n} from '@chakra-ui/react';\nimport GithubIcon from '../../images/github-mark.svg';\nimport SlackIcon from '../../images/slack-mark.svg';\n\nconst AboutModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n    const appVersion = rmgRuntime.getAppVersion();\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.about.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody paddingBottom={10}>\n                    <Flex direction=\"row\">\n                        <Image boxSize=\"128px\" src={process.env.PUBLIC_URL + '/logo192.png'} />\n                        <Flex direction=\"column\" width=\"100%\" alignItems=\"center\" justifyContent=\"center\">\n                            <Text fontSize=\"xl\" as=\"b\">\n                                {t('header.about.rmp')}\n                            </Text>\n                            <Text>{appVersion}</Text>\n                            <Text />\n                            <Text fontSize=\"sm\">{t('header.about.railmapgen')}</Text>\n                        </Flex>\n                    </Flex>\n\n                    <Box margin={5}>\n                        <Text fontSize=\"xl\">{t('header.about.desc')}</Text>\n                    </Box>\n\n                    <Heading as=\"h5\" size=\"sm\" mt={3} mb={2}>\n                        {t('header.about.contributors')}\n                    </Heading>\n\n                    <Heading as=\"h6\" size=\"xs\" my={2}>\n                        {t('header.about.coreContributors')}\n                    </Heading>\n\n                    <VStack>\n                        <Tag\n                            size=\"lg\"\n                            w=\"85%\"\n                            onClick={() => window.open('https://github.com/thekingofcity', '_blank')}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src=\"https://github.com/thekingofcity.png\" size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\" width=\"100%\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    thekingofcity\n                                </Text>\n                                <Text fontSize=\"sm\">{t('header.about.content1')}</Text>\n                                <Text fontSize=\"sm\" align=\"right\">\n                                    {t('header.about.content2')}\n                                </Text>\n                            </TagLabel>\n                        </Tag>\n                    </VStack>\n\n                    <Heading as=\"h5\" size=\"sm\" mt={3} mb={2}>\n                        {t('header.about.contactUs')}\n                    </Heading>\n\n                    <VStack>\n                        <Tag\n                            size=\"lg\"\n                            w=\"85%\"\n                            onClick={() => window.open('https://github.com/railmapgen/rmp/issues', '_blank')}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src={GithubIcon} size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\" width=\"100%\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    {t('header.about.github')}\n                                </Text>\n                                <Text fontSize=\"sm\">{t('header.about.githubContent')}</Text>\n                            </TagLabel>\n                        </Tag>\n                        <Tag\n                            size=\"lg\"\n                            w=\"85%\"\n                            onClick={() =>\n                                window.open(\n                                    'https://join.slack.com/t/railmapgenerator/shared_invite/zt-1odhhta3n-DdZF~fnVwo_q0S0RJmgV8A',\n                                    '_blank'\n                                )\n                            }\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src={SlackIcon} size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\" width=\"100%\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    {t('header.about.slack')}\n                                </Text>\n                                <Text fontSize=\"sm\">{t('header.about.slackContent')}</Text>\n                                <Text fontSize=\"sm\" as=\"i\">\n                                    #rmg, #rmp, #palette-and-templates, #random\n                                </Text>\n                            </TagLabel>\n                        </Tag>\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default AboutModal;\n","import React from 'react';\nimport { IconButton, Popover, PopoverBody, PopoverContent, PopoverTrigger } from '@chakra-ui/react';\nimport { MdZoomOut, MdZoomIn } from 'react-icons/md';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootSelector, useRootDispatch } from '../../redux/index';\nimport { setSvgViewBoxZoom } from '../../redux/param/param-slice';\n\n/**\n * A zoom control displayed in popover component.\n * This will greatly decrease the width of the header in mobile device.\n */\nexport const ZoomPopover = () => {\n    const [isOpen, setIsOpen] = React.useState(false);\n\n    const { svgViewBoxZoom } = useRootSelector(state => state.param);\n    const dispatch = useRootDispatch();\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'slider',\n            label: '',\n            value: 400 - svgViewBoxZoom,\n            min: 10,\n            max: 390,\n            step: 1,\n            onChange: value => dispatch(setSvgViewBoxZoom(400 - value)),\n            leftIcon: <MdZoomOut />,\n            rightIcon: <MdZoomIn />,\n            minW: 160,\n        },\n    ];\n\n    return (\n        <Popover isOpen={isOpen} onOpen={() => setIsOpen(true)} onClose={() => setIsOpen(false)}>\n            <PopoverTrigger>\n                <IconButton\n                    aria-label=\"zoom\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    icon={<MdZoomOut />}\n                    onClick={() => setIsOpen(!isOpen)}\n                />\n            </PopoverTrigger>\n            <PopoverContent>\n                <PopoverBody>\n                    <RmgFields fields={fields} noLabel />\n                </PopoverBody>\n            </PopoverContent>\n        </Popover>\n    );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    Text,\n    Badge,\n    Tooltip,\n    ModalFooter,\n    Button,\n} from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { StationType } from '../../constants/stations';\nimport { LineStyleType } from '../../constants/lines';\nimport { useRootSelector, useRootDispatch } from '../../redux';\nimport { setRefreshNodes, setRefreshEdges } from '../../redux/runtime/runtime-slice';\nimport { saveGraph } from '../../redux/param/param-slice';\nimport stations from '../svgs/stations/stations';\nimport { changeStationsTypeInBatch } from '../../util/change-types';\nimport ColourModal from '../panels/colour-modal/colour-modal';\nimport ThemeButton from '../panels/theme-button';\n\nexport const TranslateNodesModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const graph = React.useRef(window.graph);\n\n    const [x, setX] = React.useState(0);\n    const [y, setY] = React.useState(0);\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('header.settings.procedures.translate.x'),\n            value: x.toString(),\n            variant: 'number',\n            onChange: val => setX(Number(val)),\n            minW: 'full',\n        },\n        {\n            type: 'input',\n            label: t('header.settings.procedures.translate.y'),\n            value: y.toString(),\n            variant: 'number',\n            onChange: val => setY(Number(val)),\n            minW: 'full',\n        },\n    ];\n\n    const handleChange = () => {\n        graph.current.forEachNode((node, attr) => {\n            graph.current.updateNodeAttribute(node, 'x', val => (val ?? 0) + x);\n            graph.current.updateNodeAttribute(node, 'y', val => (val ?? 0) + y);\n        });\n        dispatch(setRefreshNodes());\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n        onClose();\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.settings.procedures.translate.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    {t('header.settings.procedures.translate.content')}\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" variant=\"outline\" mr=\"1\">\n                        {t('cancel')}\n                    </Button>\n                    <Button colorScheme=\"red\" onClick={handleChange}>\n                        {t('apply')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport const ScaleNodesModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const graph = React.useRef(window.graph);\n\n    const [scale, setScale] = React.useState(1);\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('header.settings.procedures.scale.factor'),\n            value: scale.toString(),\n            variant: 'number',\n            onChange: val => setScale(Number(val)),\n            minW: 'full',\n        },\n    ];\n\n    const handleChange = () => {\n        graph.current.forEachNode((node, attr) => {\n            graph.current.updateNodeAttribute(node, 'x', val => (val ?? 0) * scale);\n            graph.current.updateNodeAttribute(node, 'y', val => (val ?? 0) * scale);\n        });\n        dispatch(setRefreshNodes());\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n        onClose();\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.settings.procedures.scale.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    {t('header.settings.procedures.scale.content')}\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" variant=\"outline\" mr=\"1\">\n                        {t('cancel')}\n                    </Button>\n                    <Button colorScheme=\"red\" onClick={handleChange}>\n                        {t('apply')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport const ChangeTypeModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const graph = React.useRef(window.graph);\n\n    const availableStationOptions = Object.fromEntries(\n        Object.entries(stations).map(([key, val]) => [key, t(val.metadata.displayName).toString()])\n    ) as { [k in StationType]: string };\n    const [oldStnType, setOldStnType] = React.useState(Object.keys(stations).at(0)! as StationType);\n    const [newStnType, setNewStnType] = React.useState(Object.keys(stations).at(1)! as StationType);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('header.settings.procedures.changeType.changeFrom'),\n            value: oldStnType as StationType,\n            options: availableStationOptions,\n            disabledOptions: [newStnType],\n            onChange: (val: string | number) => setOldStnType(val as StationType),\n            minW: 'full',\n        },\n        {\n            type: 'select',\n            label: t('header.settings.procedures.changeType.changeTo'),\n            value: newStnType as StationType,\n            options: availableStationOptions,\n            disabledOptions: [oldStnType],\n            onChange: (val: string | number) => setNewStnType(val as StationType),\n            minW: 'full',\n        },\n    ];\n\n    const handleChange = () => {\n        changeStationsTypeInBatch(graph.current, oldStnType, newStnType);\n        dispatch(setRefreshNodes());\n        dispatch(saveGraph(graph.current.export()));\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>\n                    <Text as=\"b\" fontSize=\"xl\">\n                        {t('header.settings.procedures.changeType.title')}\n                    </Text>\n                    <Tooltip label={t('header.settings.pro')}>\n                        <Badge ml=\"1\" color=\"gray.50\" background=\"radial-gradient(circle, #3f5efb, #fc466b)\">\n                            PRO\n                        </Badge>\n                    </Tooltip>\n                </ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <RmgFields fields={fields} />\n                    <Text fontSize=\"sm\" mt=\"3\" lineHeight=\"100%\" color=\"red.500\">\n                        {t('header.settings.procedures.changeType.info')}\n                    </Text>\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" variant=\"outline\" mr=\"1\">\n                        {t('cancel')}\n                    </Button>\n                    <Button colorScheme=\"red\" onClick={handleChange}>\n                        {t('apply')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport const RemoveLinesWithSingleColorModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { theme: runtimeTheme } = useRootSelector(state => state.runtime);\n    const { t } = useTranslation();\n    const graph = React.useRef(window.graph);\n\n    const [theme, setTheme] = React.useState(runtimeTheme);\n    const [isColourModalOpen, setIsColourModalOpen] = React.useState(false);\n\n    const handleChange = () => {\n        graph.current\n            .filterEdges(\n                (edge, attr, source, target, sourceAttr, targetAttr, undirected) =>\n                    attr.style === LineStyleType.SingleColor &&\n                    JSON.stringify(attr[LineStyleType.SingleColor]!.color) === JSON.stringify(theme)\n            )\n            .forEach(edge => graph.current.dropEdge(edge));\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n        onClose();\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.settings.procedures.removeLines.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    {t('header.settings.procedures.removeLines.content')}\n                    <ThemeButton theme={theme} onClick={() => setIsColourModalOpen(true)} />\n                    <ColourModal\n                        isOpen={isColourModalOpen}\n                        defaultTheme={theme}\n                        onClose={() => setIsColourModalOpen(false)}\n                        onUpdate={nextTheme => setTheme(nextTheme)}\n                    />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" variant=\"outline\" mr=\"1\">\n                        {t('cancel')}\n                    </Button>\n                    <Button colorScheme=\"red\" onClick={handleChange}>\n                        {t('remove')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n","import React from 'react';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Badge,\n    Box,\n    Button,\n    Icon,\n    Link,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    StackDivider,\n    Switch,\n    SystemStyleObject,\n    Text,\n    Tooltip,\n    useColorModeValue,\n    VStack,\n} from '@chakra-ui/react';\nimport { MdOpenInNew, MdReadMore } from 'react-icons/md';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { setKeepLastPath } from '../../redux/runtime/runtime-slice';\nimport { setTelemetryApp } from '../../redux/app/app-slice';\nimport {\n    ChangeTypeModal,\n    RemoveLinesWithSingleColorModal,\n    ScaleNodesModal,\n    TranslateNodesModal,\n} from './procedures-modal';\n\nconst procedureButtonStyle: SystemStyleObject = {\n    width: '100%',\n    justifyContent: 'space-between',\n};\n\nconst SettingsModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const { keepLastPath } = useRootSelector(state => state.runtime);\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const linkColour = useColorModeValue('primary.500', 'primary.300');\n\n    const [isTranslateNodesOpen, setIsTranslateNodesOpen] = React.useState(false);\n    const [isScaleNodesOpen, setIsScaleNodesOpen] = React.useState(false);\n    const [isChangeTypeOpen, setIsChangeTypeOpen] = React.useState(false);\n    const [isRemoveLinesWithSingleColorOpen, setIsRemoveLinesWithSingleColorOpen] = React.useState(false);\n\n    const isAllowAnalytics = rmgRuntime.isAllowAnalytics();\n    const {\n        telemetry: { app: isAllowAppTelemetry },\n    } = useRootSelector(state => state.app);\n    const handleAdditionalTelemetry = (allowAppTelemetry: boolean) => dispatch(setTelemetryApp(allowAppTelemetry));\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.settings.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <VStack divider={<StackDivider borderColor=\"gray.200\" />}>\n                        <Box width=\"100%\" mb=\"3\">\n                            <Text as=\"b\" fontSize=\"xl\">\n                                {t('header.settings.preference.title')}\n                            </Text>\n                            <Box mt=\"3\">\n                                <Box display=\"flex\" mb=\"1\">\n                                    <Text flex=\"1\">{t('header.settings.preference.keepLastPath')}</Text>\n                                    <Switch\n                                        isChecked={keepLastPath}\n                                        onChange={({ target: { checked } }) => dispatch(setKeepLastPath(checked))}\n                                    />\n                                </Box>\n                            </Box>\n                        </Box>\n\n                        <Box width=\"100%\" mb=\"3\">\n                            <Text as=\"b\" fontSize=\"xl\">\n                                {t('header.settings.procedures.title')}\n                            </Text>\n                            <Box mt=\"3\">\n                                <Button\n                                    sx={procedureButtonStyle}\n                                    rightIcon={<MdReadMore />}\n                                    onClick={() => setIsTranslateNodesOpen(true)}\n                                >\n                                    {t('header.settings.procedures.translate.title')}\n                                </Button>\n                                <TranslateNodesModal\n                                    isOpen={isTranslateNodesOpen}\n                                    onClose={() => setIsTranslateNodesOpen(false)}\n                                />\n\n                                <Button\n                                    sx={procedureButtonStyle}\n                                    rightIcon={<MdReadMore />}\n                                    onClick={() => setIsScaleNodesOpen(true)}\n                                >\n                                    {t('header.settings.procedures.scale.title')}\n                                </Button>\n                                <ScaleNodesModal isOpen={isScaleNodesOpen} onClose={() => setIsScaleNodesOpen(false)} />\n\n                                <Button\n                                    sx={procedureButtonStyle}\n                                    rightIcon={<MdReadMore />}\n                                    onClick={() => setIsChangeTypeOpen(true)}\n                                >\n                                    <Box>\n                                        {t('header.settings.procedures.changeType.title')}\n                                        <Tooltip label={t('header.settings.pro')}>\n                                            <Badge\n                                                ml=\"1\"\n                                                color=\"gray.50\"\n                                                background=\"radial-gradient(circle, #3f5efb, #fc466b)\"\n                                            >\n                                                PRO\n                                            </Badge>\n                                        </Tooltip>\n                                    </Box>\n                                </Button>\n                                <ChangeTypeModal isOpen={isChangeTypeOpen} onClose={() => setIsChangeTypeOpen(false)} />\n\n                                <Button\n                                    sx={procedureButtonStyle}\n                                    rightIcon={<MdReadMore />}\n                                    onClick={() => setIsRemoveLinesWithSingleColorOpen(true)}\n                                >\n                                    {t('header.settings.procedures.removeLines.title')}\n                                </Button>\n                                <RemoveLinesWithSingleColorModal\n                                    isOpen={isRemoveLinesWithSingleColorOpen}\n                                    onClose={() => setIsRemoveLinesWithSingleColorOpen(false)}\n                                />\n                            </Box>\n                        </Box>\n\n                        <Box width=\"100%\" mb=\"3\">\n                            <Text as=\"b\" fontSize=\"xl\">\n                                {t('header.settings.telemetry.title')}\n                            </Text>\n                            <Box mt=\"3\">\n                                <Box display=\"flex\" mb=\"1\">\n                                    <Text flex=\"1\">{t('header.settings.telemetry.essential')}</Text>\n                                    <Switch isChecked={isAllowAnalytics} isDisabled />\n                                </Box>\n                                <Text fontSize=\"sm\" lineHeight=\"100%\" color=\"gray.600\">\n                                    {t('header.settings.telemetry.essentialInfo')}\n                                </Text>\n                                <Link\n                                    color={linkColour}\n                                    fontSize=\"sm\"\n                                    lineHeight=\"100%\"\n                                    href=\"https://support.google.com/analytics/answer/11593727\"\n                                    isExternal={true}\n                                >\n                                    {t('header.settings.telemetry.essentialLink')} <Icon as={MdOpenInNew} />\n                                </Link>\n\n                                <Box display=\"flex\" mb=\"1\">\n                                    <Text flex=\"1\">{t('header.settings.telemetry.additional')}</Text>\n                                    <Switch\n                                        isChecked={isAllowAppTelemetry}\n                                        onChange={({ target: { checked } }) => handleAdditionalTelemetry(checked)}\n                                    />\n                                </Box>\n                                <Text fontSize=\"sm\" lineHeight=\"100%\" color=\"gray.600\">\n                                    {t('header.settings.telemetry.additionalInfo')}\n                                </Text>\n                            </Box>\n                        </Box>\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default SettingsModal;\n","import React from 'react';\nimport { Heading, HStack, IconButton, Menu, MenuButton, MenuItem, MenuList, useColorMode } from '@chakra-ui/react';\nimport { MdDarkMode, MdHelp, MdSettings, MdTranslate } from 'react-icons/md';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { RmgEnvBadge, RmgWindowHeader, useReadyConfig } from '@railmapgen/rmg-components';\nimport { LANGUAGE_NAMES, LanguageCode, SUPPORTED_LANGUAGES } from '@railmapgen/rmg-translate';\nimport rmgRuntime, { RmgEnv } from '@railmapgen/rmg-runtime';\nimport { Events } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport OpenActions from './open-actions';\nimport DownloadActions from './download-actions';\nimport AboutModal from './about-modal';\nimport { ZoomPopover } from './zoom-popover';\nimport SettingsModal from './settings-modal';\n\nexport default function WindowHeader() {\n    const { t } = useTranslation();\n    const {\n        telemetry: { app: isAllowAppTelemetry },\n    } = useRootSelector(state => state.app);\n    const { toggleColorMode } = useColorMode();\n\n    const [isSettingsModalOpen, setIsSettingsModalOpen] = React.useState(false);\n    const [isAboutModalOpen, setIsAboutModalOpen] = React.useState(false);\n\n    const environment = useReadyConfig(rmgRuntime.getEnv);\n    const appVersion = useReadyConfig(rmgRuntime.getAppVersion);\n\n    React.useEffect(() => {\n        // environment !== RmgEnv.DEV -> wait after rmgRuntime.ready() in useReadyConfig\n        if (isAllowAppTelemetry && environment !== RmgEnv.DEV)\n            rmgRuntime.event(Events.APP_LOAD, { isStandaloneWindow: rmgRuntime.isStandaloneWindow() });\n    }, [environment]);\n\n    const handleChangeLanguage = async (language: LanguageCode) => {\n        rmgRuntime.setLanguage(language);\n        rmgRuntime.getI18nInstance().changeLanguage(language);\n    };\n\n    return (\n        <RmgWindowHeader>\n            <Heading as=\"h4\" size=\"md\" whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">\n                {t('header.about.rmp')}\n            </Heading>\n            <RmgEnvBadge\n                environment={environment}\n                version={appVersion}\n                popoverHeader={\n                    environment === RmgEnv.PRD ? undefined : (\n                        <Trans i18nKey=\"header.popoverHeader\" environment={environment}>\n                            You&apos;re on {{ environment }} environment!\n                        </Trans>\n                    )\n                }\n                popoverBody={\n                    environment === RmgEnv.PRD ? undefined : (\n                        <Trans i18nKey=\"header.popoverBody\">\n                            This is a testing environment where we test the latest beta RMP.\n                        </Trans>\n                    )\n                }\n            />\n\n            <HStack ml=\"auto\">\n                <ZoomPopover />\n\n                <OpenActions />\n\n                <DownloadActions />\n\n                <Menu>\n                    <MenuButton as={IconButton} icon={<MdTranslate />} variant=\"ghost\" size=\"sm\" />\n                    <MenuList>\n                        {SUPPORTED_LANGUAGES.map(lang => (\n                            <MenuItem key={lang} onClick={() => handleChangeLanguage(lang)}>\n                                {LANGUAGE_NAMES[lang][lang]}\n                            </MenuItem>\n                        ))}\n                    </MenuList>\n                </Menu>\n\n                <IconButton\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    aria-label=\"Dark Mode\"\n                    icon={<MdDarkMode />}\n                    onClick={toggleColorMode}\n                />\n\n                <IconButton\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    aria-label=\"Settings\"\n                    icon={<MdSettings />}\n                    onClick={() => setIsSettingsModalOpen(true)}\n                />\n\n                <IconButton\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    aria-label=\"Help\"\n                    icon={<MdHelp />}\n                    onClick={() => setIsAboutModalOpen(true)}\n                />\n            </HStack>\n\n            <SettingsModal isOpen={isSettingsModalOpen} onClose={() => setIsSettingsModalOpen(false)} />\n            <AboutModal isOpen={isAboutModalOpen} onClose={() => setIsAboutModalOpen(false)} />\n        </RmgWindowHeader>\n    );\n}\n","import { Alert, AlertIcon, AlertStatus, CloseButton, Link } from '@chakra-ui/react';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { closeGlobalAlert } from '../../redux/runtime/runtime-slice';\n\nexport default function GlobalAlerts() {\n    const dispatch = useRootDispatch();\n\n    const globalAlerts = useRootSelector(state => state.runtime.globalAlerts);\n\n    const handleAppOpen = (linkedApp: string) => {\n        if (rmgRuntime.isStandaloneWindow()) {\n            window.open(`/${linkedApp}`, '_blank');\n        } else {\n            rmgRuntime.openApp(linkedApp);\n        }\n    };\n\n    return (\n        <>\n            {Object.entries(globalAlerts).map(([status, { message, url, linkedApp }]) => (\n                <Alert key={status} status={status as AlertStatus} variant=\"solid\" size=\"xs\" pl={3} pr={1} py={0}>\n                    <AlertIcon />\n                    {linkedApp ? (\n                        <Link onClick={() => handleAppOpen(linkedApp)}>{message}</Link>\n                    ) : url ? (\n                        <Link href={url} target=\"_blank\">\n                            {message}\n                        </Link>\n                    ) : (\n                        message\n                    )}\n                    <CloseButton ml=\"auto\" onClick={() => dispatch(closeGlobalAlert(status as AlertStatus))} />\n                </Alert>\n            ))}\n        </>\n    );\n}\n","import WindowHeader from './window-header';\nimport GlobalAlerts from './global-alerts';\n\n// A simple wrapper that load the following two into a single chunk.\nexport default function PageHeader() {\n    return (\n        <>\n            <WindowHeader />\n            <GlobalAlerts />\n        </>\n    );\n}\n","import { MultiDirectedGraph } from 'graphology';\nimport { EdgeAttributes, GraphAttributes, NodeAttributes, Theme } from '../constants/constants';\nimport { StationType } from '../constants/stations';\nimport { LinePathType, LineStyleType } from '../constants/lines';\nimport stations from '../components/svgs/stations/stations';\nimport { linePaths, lineStyles } from '../components/svgs/lines/lines';\nimport { SingleColorAttributes } from '../components/svgs/lines/styles/single-color';\n\n/**\n * Change a station's type.\n * @param graph Graph.\n * @param selectedFirst Current station's id.\n * @param newType New station's type.\n */\nexport const changeStationType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newStnType: StationType\n) => {\n    const currentStnType = graph.getNodeAttribute(selectedFirst, 'type') as StationType;\n    const names = graph.getNodeAttribute(selectedFirst, currentStnType)!.names;\n    graph.removeNodeAttribute(selectedFirst, currentStnType);\n    const newAttrs = { ...stations[newStnType].defaultAttrs, names };\n    graph.mergeNodeAttributes(selectedFirst, { type: newStnType, [newStnType]: newAttrs });\n};\n\n/**\n * Change all the stations' type of currentStnType to newStnType in batch.\n * @param graph Graph.\n * @param currentStnType Current station's type.\n * @param newStnType New station's type.\n * @returns Nothing.\n */\nexport const changeStationsTypeInBatch = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    currentStnType: StationType,\n    newStnType: StationType\n) =>\n    graph\n        .filterNodes((node, attr) => node.startsWith('stn') && attr.type === currentStnType)\n        .forEach(stnId => {\n            changeStationType(graph, stnId, newStnType);\n        });\n\n/**\n * Change a line's path type.\n * @param graph Graph.\n * @param selectedFirst Current line's id.\n * @param newType New line's path type.\n */\nexport const changeLinePathType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newLinePathType: LinePathType\n) => {\n    const currentLinePathType = graph.getEdgeAttribute(selectedFirst, 'type') as LinePathType;\n    graph.removeEdgeAttribute(selectedFirst, currentLinePathType);\n    const newAttrs = JSON.parse(JSON.stringify(linePaths[newLinePathType].defaultAttrs));\n    graph.mergeEdgeAttributes(selectedFirst, { type: newLinePathType, [newLinePathType]: newAttrs });\n};\n\n/**\n * Change a line's style type.\n * @param graph Graph.\n * @param selectedFirst Current line's id.\n * @param newType New line's style type.\n * @param theme A handy helper to override color to current theme.\n */\nexport const changeLineStyleType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newLineStyleType: LineStyleType,\n    theme?: Theme\n) => {\n    const currentLineStyleType = graph.getEdgeAttribute(selectedFirst, 'style') as LineStyleType;\n    graph.removeEdgeAttribute(selectedFirst, currentLineStyleType);\n    const newAttrs = JSON.parse(JSON.stringify(lineStyles[newLineStyleType].defaultAttrs));\n    if (newLineStyleType === LineStyleType.SingleColor && theme) (newAttrs as SingleColorAttributes).color = theme;\n    graph.mergeEdgeAttributes(selectedFirst, { style: newLineStyleType, [newLineStyleType]: newAttrs });\n};\n","import { MultiDirectedGraph } from 'graphology';\nimport { NodeAttributes, EdgeAttributes, GraphAttributes } from '../constants/constants';\n\nexport const getMousePosition = (e: React.MouseEvent) => {\n    const bbox = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - bbox.left;\n    const y = e.clientY - bbox.top;\n    // console.log(e.clientX, bbox.left, e.clientY, bbox.top, x, y);\n    return { x, y };\n};\n\nexport const roundToNearestN = (x: number, n: number) => Math.round(x / n) * n;\n\nexport const calculateCanvasSize = (graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>) => {\n    let [xMin, yMin, xMax, yMax] = [Number.MAX_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MIN_VALUE];\n\n    graph.forEachNode((node, attr) => {\n        xMin = Math.min(attr.x, xMin);\n        yMin = Math.min(attr.y, yMin);\n        xMax = Math.max(attr.x, xMax);\n        yMax = Math.max(attr.y, yMax);\n    });\n\n    xMin -= 150;\n    yMin -= 150;\n    xMax += 150;\n    yMax += 150;\n\n    return { xMin, yMin, xMax, yMax };\n};\n","var map = {\n\t\"./beijing.json\": [\n\t\t4781,\n\t\t2639\n\t],\n\t\"./guangzhou.json\": [\n\t\t7845,\n\t\t5202\n\t],\n\t\"./santiago.json\": [\n\t\t8470,\n\t\t6398\n\t],\n\t\"./shanghai.json\": [\n\t\t7414,\n\t\t8233\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 9681;\nmodule.exports = webpackAsyncContext;"],"names":["GalleryModal","props","isOpen","handleOpenTemplates","onClose","t","useTranslation","handleSelect","name","module","default","map","city","minWidth","onClick","OpenActions","dispatch","useRootDispatch","graph","React","window","fileRMGInputRef","fileInputRef","isGalleryModalOpen","setIsGalleryModalOpen","refreshAndSave","setRefreshNodes","setRefreshEdges","saveGraph","current","export","handleUploadRMG","event","file","target","files","console","log","type","error","readFileAsText","paramStr","param","JSON","parse","stnList","stn_list","theme","stnIdMap","Object","fromEntries","keys","filter","id","includes","nanoid","entries","forEach","stnInfo","nodes","filterNodes","node","attr","values","StationType","names","length","i","style","transfer","info","flat","info_panel_type","stringify","stations","defaultAttrs","color","lineCode","line_num","stationCode","num","lv1","transferInfo","unshift","addNode","visible","zIndex","x","y","children","child","addDirectedEdgeWithKey","LinePathType","linePaths","LineStyleType","lineStyles","value","handleUpload","upgrade","version","save","clearSelected","clear","import","state","setFullState","rmpSave","as","IconButton","size","variant","icon","svgViewBoxZoom","svgViewBoxMin","ref","accept","hidden","onChange","click","ml","colorScheme","Promise","resolve","reader","FileReader","onloadend","result","readAsText","scrollBehavior","href","isExternal","MdOpenInNew","DownloadActions","bgColor","useColorModeValue","format","setFormat","formatOptions","png","svg","scale","setScale","scaleOptions","v","isTransparent","setIsTransparent","fields","label","options","pngFields","isChecked","isDownloadModalOpen","setIsDownloadModalOpen","isTermsAndConditionsModalOpen","setIsTermsAndConditionsModalOpen","isAttachSelected","setIsAttachSelected","isTermsAndConditionsSelected","setIsTermsAndConditionsSelected","stringifyParam","store","downloadAs","Date","valueOf","e","checked","open","disabled","calculateCanvasSize","xMin","yMin","xMax","yMax","width","height","elem","document","getElementById","cloneNode","hasNode","getNodeAttribute","MiscNodeType","removeChild","appendChild","generateRmpInfo","setAttribute","toString","className","styleSet","querySelector","getComputedStyle","querySelectorAll","el","styleName","getPropertyValue","removeAttribute","body","src","btoa","unescape","encodeURIComponent","outerHTML","canvas","createElement","canvasWidth","canvasHeight","ctx","getContext","fillStyle","fillRect","img","Image","onload","drawImage","toBlob","blob","downloadBlobAs","filename","data","Blob","url","URL","createObjectURL","a","download","revokeObjectURL","createElementNS","logo","rmp","createTextNode","link","appVersion","rmgRuntime","paddingBottom","direction","boxSize","process","alignItems","justifyContent","fontSize","margin","mt","mb","my","w","cursor","mr","display","fontWeight","align","GithubIcon","SlackIcon","ZoomPopover","setIsOpen","useRootSelector","min","max","step","setSvgViewBoxZoom","leftIcon","rightIcon","minW","onOpen","noLabel","TranslateNodesModal","setX","setY","val","Number","forEachNode","updateNodeAttribute","ScaleNodesModal","ChangeTypeModal","availableStationOptions","key","metadata","displayName","at","oldStnType","setOldStnType","newStnType","setNewStnType","disabledOptions","background","lineHeight","changeStationsTypeInBatch","RemoveLinesWithSingleColorModal","runtimeTheme","runtime","setTheme","isColourModalOpen","setIsColourModalOpen","defaultTheme","onUpdate","nextTheme","filterEdges","edge","source","sourceAttr","targetAttr","undirected","dropEdge","procedureButtonStyle","keepLastPath","linkColour","isTranslateNodesOpen","setIsTranslateNodesOpen","isScaleNodesOpen","setIsScaleNodesOpen","isChangeTypeOpen","setIsChangeTypeOpen","isRemoveLinesWithSingleColorOpen","setIsRemoveLinesWithSingleColorOpen","isAllowAnalytics","isAllowAppTelemetry","app","telemetry","divider","borderColor","flex","setKeepLastPath","sx","isDisabled","allowAppTelemetry","setTelemetryApp","WindowHeader","toggleColorMode","useColorMode","isSettingsModalOpen","setIsSettingsModalOpen","isAboutModalOpen","setIsAboutModalOpen","environment","useReadyConfig","RmgEnv","Events","isStandaloneWindow","handleChangeLanguage","language","changeLanguage","whiteSpace","overflow","textOverflow","popoverHeader","undefined","i18nKey","popoverBody","SUPPORTED_LANGUAGES","lang","LANGUAGE_NAMES","GlobalAlerts","globalAlerts","status","message","linkedApp","pl","pr","py","handleAppOpen","closeGlobalAlert","PageHeader","changeStationType","selectedFirst","currentStnType","removeNodeAttribute","newAttrs","mergeNodeAttributes","startsWith","stnId","changeLinePathType","newLinePathType","currentLinePathType","getEdgeAttribute","removeEdgeAttribute","mergeEdgeAttributes","changeLineStyleType","newLineStyleType","currentLineStyleType","getMousePosition","bbox","currentTarget","getBoundingClientRect","clientX","left","clientY","top","roundToNearestN","n","Math","round","MAX_VALUE","MIN_VALUE","webpackAsyncContext","req","__webpack_require__","o","then","Error","code","ids","exports"],"sourceRoot":""}