{"version":3,"file":"static/js/ToolsPanel.c19b00ce.chunk.js","mappings":"iRA+EA,UAhEmB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,KAAgB,SAAAC,GAAK,OAAIA,EAAMC,WAA/CC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,EAAsCC,EAAAA,UAAe,GAArD,eAAOC,EAAP,KAAoBC,EAApB,KAOA,OACI,UAAC,IAAD,CAAMC,UAAU,QAAQC,MAAO,GAAIC,UAAU,SAASC,SAAS,OAA/D,UACKC,OAAOC,OAAOC,EAAAA,GAAaC,KAAI,SAAAC,GAAI,OAChC,SAAC,IAAD,CAEI,aAAYA,EACZC,KAAK,KACLC,KAAMC,EAAAA,EAASH,GAAME,KACrBE,QAAS,kBAbH,SAACJ,GAAD,OAAuBlB,GAASuB,EAAAA,EAAAA,IAAQ,WAAD,OAAYL,KAa1CM,CAAcN,IAC7BO,QAASpB,IAAI,kBAAgBa,GAAS,QAAU,WAL3CA,MAQZJ,OAAOC,OAAOW,EAAAA,GAAcT,KAAI,SAAAC,GAAI,OACjC,SAAC,IAAD,CAEI,aAAYA,EACZC,KAAK,KACLC,KAAMO,EAAAA,EAAUT,GAAME,KACtBE,QAAS,kBArBF,SAACJ,GAAD,OAAwBlB,GAASuB,EAAAA,EAAAA,IAAQ,aAAD,OAAcL,KAqB9CU,CAAeV,IAC9BO,QAASpB,IAAI,oBAAkBa,GAAS,QAAU,WAL7CA,MAQZJ,OAAOC,OAAOc,EAAAA,GAAUZ,KAAI,SAAAC,GAAI,OAC7B,SAAC,IAAD,CAEI,aAAYA,EACZC,KAAK,KACLC,KAAMU,EAAAA,EAAMZ,GAAME,KAClBE,QAAS,kBAhCN,SAACJ,GAAD,OAAoBlB,GAASuB,EAAAA,EAAAA,IAAQ,QAAD,OAASL,KAgCjCa,CAAWb,IAC1BO,QAASpB,IAAI,eAAaa,GAAS,QAAU,WALxCA,MAQZJ,OAAOC,OAAOiB,EAAAA,GAAcf,KAAI,SAAAC,GAAI,OACjC,SAAC,IAAD,CAEI,aAAYA,EACZC,KAAK,KACLC,KAAMa,EAAAA,EAAUf,GAAME,KACtBE,QAAS,kBAxCF,SAACJ,GAAD,OAAwBlB,GAASuB,EAAAA,EAAAA,IAAQ,aAAD,OAAcL,KAwC9CgB,CAAehB,IAC9BO,QAASpB,IAAI,oBAAkBa,GAAS,QAAU,WAL7CA,OAQb,SAAC,IAAD,CAAaZ,MAAOA,EAAOgB,QAAS,kBAAMb,GAAe,OACzD,SAAC,IAAD,CACI0B,OAAQ3B,EACR4B,aAAc9B,EACd+B,QAAS,kBAAM5B,GAAe,IAC9B6B,SAAU,SAAAC,GAAS,OAAIvC,GAASwC,EAAAA,EAAAA,IAASD","sources":["components/panels/tools/tools.tsx"],"sourcesContent":["import React from 'react';\nimport { Flex, IconButton } from '@chakra-ui/react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { setMode, setTheme } from '../../../redux/runtime/runtime-slice';\nimport { StationType } from '../../../constants/stations';\nimport { MiscNodeType } from '../../../constants/nodes';\nimport { LineType } from '../../../constants/lines';\nimport { MiscEdgeType } from '../../../constants/edges';\nimport stations from '../../svgs/stations/stations';\nimport miscNodes from '../../svgs/nodes/misc-nodes';\nimport lines from '../../svgs/lines/lines';\nimport miscEdges from '../../svgs/edges/misc-edges';\nimport ColourModal from '../colour-modal/colour-modal';\nimport ThemeButton from '../theme-button';\n\nconst ToolsPanel = () => {\n    const dispatch = useRootDispatch();\n    const { mode, theme } = useRootSelector(state => state.runtime);\n\n    const [isModalOpen, setIsModalOpen] = React.useState(false);\n\n    const handleStation = (type: StationType) => dispatch(setMode(`station-${type}`));\n    const handleLine = (type: LineType) => dispatch(setMode(`line-${type}`));\n    const handleMiscNode = (type: MiscNodeType) => dispatch(setMode(`misc-node-${type}`));\n    const handleMiscEdge = (type: MiscEdgeType) => dispatch(setMode(`misc-edge-${type}`));\n\n    return (\n        <Flex className=\"tools\" width={50} direction=\"column\" overflow=\"auto\">\n            {Object.values(StationType).map(type => (\n                <IconButton\n                    key={type}\n                    aria-label={type}\n                    size=\"lg\"\n                    icon={stations[type].icon}\n                    onClick={() => handleStation(type)}\n                    variant={mode === `station-${type}` ? 'solid' : 'outline'}\n                />\n            ))}\n            {Object.values(MiscNodeType).map(type => (\n                <IconButton\n                    key={type}\n                    aria-label={type}\n                    size=\"lg\"\n                    icon={miscNodes[type].icon}\n                    onClick={() => handleMiscNode(type)}\n                    variant={mode === `misc-node-${type}` ? 'solid' : 'outline'}\n                />\n            ))}\n            {Object.values(LineType).map(type => (\n                <IconButton\n                    key={type}\n                    aria-label={type}\n                    size=\"lg\"\n                    icon={lines[type].icon}\n                    onClick={() => handleLine(type)}\n                    variant={mode === `line-${type}` ? 'solid' : 'outline'}\n                />\n            ))}\n            {Object.values(MiscEdgeType).map(type => (\n                <IconButton\n                    key={type}\n                    aria-label={type}\n                    size=\"lg\"\n                    icon={miscEdges[type].icon}\n                    onClick={() => handleMiscEdge(type)}\n                    variant={mode === `misc-edge-${type}` ? 'solid' : 'outline'}\n                />\n            ))}\n            <ThemeButton theme={theme} onClick={() => setIsModalOpen(true)} />\n            <ColourModal\n                isOpen={isModalOpen}\n                defaultTheme={theme}\n                onClose={() => setIsModalOpen(false)}\n                onUpdate={nextTheme => dispatch(setTheme(nextTheme))}\n            />\n        </Flex>\n    );\n};\n\nexport default ToolsPanel;\n"],"names":["dispatch","useRootDispatch","useRootSelector","state","runtime","mode","theme","React","isModalOpen","setIsModalOpen","className","width","direction","overflow","Object","values","StationType","map","type","size","icon","stations","onClick","setMode","handleStation","variant","MiscNodeType","miscNodes","handleMiscNode","LineType","lines","handleLine","MiscEdgeType","miscEdges","handleMiscEdge","isOpen","defaultTheme","onClose","onUpdate","nextTheme","setTheme"],"sourceRoot":""}