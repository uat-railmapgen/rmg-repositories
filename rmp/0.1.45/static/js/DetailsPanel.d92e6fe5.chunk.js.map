{"version":3,"file":"static/js/DetailsPanel.d92e6fe5.chunk.js","mappings":"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","sources":["components/panel/details/info-section.tsx","components/panel/details/node-position-section.tsx","components/panel/details/details.tsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootSelector } from '../../../redux';\n\nexport default function InfoSection() {\n    const { t } = useTranslation();\n    const { selected } = useRootSelector(state => state.runtime);\n    const graph = React.useRef(window.graph);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('panel.details.info.id'),\n            value: selected.length > 0 ? selected.join(', ') : 'undefined',\n            minW: 276,\n            onChange: val => {},\n        },\n        {\n            type: 'input',\n            label: t('panel.details.info.type'),\n            value:\n                selected.length === 1\n                    ? graph.current.hasNode(selected.at(0))\n                        ? graph.current.getNodeAttribute(selected.at(0), 'type')\n                        : graph.current.getEdgeAttribute(selected.at(0), 'type')\n                    : selected.length > 1\n                    ? 'multiple nodes'\n                    : 'undefined',\n            minW: 276,\n            onChange: val => {},\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('panel.details.info.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/app/app-slice';\nimport { setRefresh } from '../../../redux/runtime/runtime-slice';\n\nexport default function NodePositionSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n    const {\n        selected,\n        refresh: { all: refreshAll },\n    } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [pos, setPos] = React.useState({ x: 0, y: 0 });\n    React.useEffect(() => {\n        const selectedFirst = selected.at(0);\n        if (selectedFirst?.startsWith('stn') || selectedFirst?.startsWith('misc_node_')) {\n            const x = graph.current.getNodeAttribute(selectedFirst, 'x');\n            const y = graph.current.getNodeAttribute(selectedFirst, 'y');\n            setPos({ x, y });\n        }\n    }, [refreshAll, selected]);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('panel.details.nodePosition.pos.x'),\n            value: pos.x.toString(),\n            validator: val => !Number.isNaN(val),\n            onChange: val => {\n                graph.current.mergeNodeAttributes(selectedFirst, { x: Number(val) });\n                hardRefresh();\n            },\n        },\n        {\n            type: 'input',\n            label: t('panel.details.nodePosition.pos.y'),\n            value: pos.y.toString(),\n            validator: val => !Number.isNaN(val),\n            onChange: val => {\n                graph.current.mergeNodeAttributes(selectedFirst, { y: Number(val) });\n                hardRefresh();\n            },\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('panel.details.nodePosition.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Button, Heading, HStack } from '@chakra-ui/react';\nimport { nanoid } from 'nanoid';\nimport {\n    RmgFields,\n    RmgFieldsField,\n    RmgSidePanel,\n    RmgSidePanelHeader,\n    RmgSidePanelBody,\n    RmgSidePanelFooter,\n} from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/app/app-slice';\nimport { clearSelected, setRefresh, setRefreshReconcile } from '../../../redux/runtime/runtime-slice';\nimport ThemeButton from '../theme-button';\nimport ColourModal from '../colour-modal/colour-modal';\nimport { NodeAttributes, Theme } from '../../../constants/constants';\nimport stations from '../../station/stations';\nimport miscNodes from '../../nodes/misc-nodes';\nimport lines from '../../line/lines';\nimport miscEdges from '../../edges/misc-edges';\nimport InfoSection from './info-section';\nimport NodePositionSection from './node-position-section';\n\nconst nodes = { ...stations, ...miscNodes };\nconst edges = { ...lines, ...miscEdges };\n\nconst DetailsPanel = () => {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n    const { selected } = useRootSelector(state => state.runtime);\n    const graph = React.useRef(window.graph);\n\n    const handleClose = () => dispatch(clearSelected());\n    const handleDuplicate = (selectedFirst: string) => {\n        const allAttr = JSON.parse(JSON.stringify(graph.current.getNodeAttributes(selectedFirst))) as NodeAttributes;\n        allAttr.x += 50;\n        allAttr.y += 50;\n        const id = selectedFirst.startsWith('stn') ? `stn_${nanoid(10)}` : `misc_node_${nanoid(10)}`;\n        graph.current.addNode(id, allAttr);\n        hardRefresh();\n    };\n    const handleRemove = (selected: string[]) => {\n        dispatch(clearSelected());\n        selected.forEach(s => {\n            if (graph.current.hasNode(s)) graph.current.dropNode(s);\n            else if (graph.current.hasEdge(s)) graph.current.dropEdge(s);\n        });\n        hardRefresh();\n    };\n    // A helper method to remove all lines with the same color\n    const handleRemoveEntireLine = (selectedFirst: string) => {\n        dispatch(clearSelected());\n        const theme = graph.current.getEdgeAttribute(selectedFirst, 'color');\n        const lines = graph.current.filterEdges((edge, attr, source, target, sourceAttr, targetAttr, undirected) =>\n            attr.color.every((v, i) => v === theme[i])\n        );\n        lines.forEach(line => {\n            graph.current.dropEdge(line);\n        });\n        hardRefresh();\n    };\n\n    // hide reconcile for now\n    const [reconcileId, setReconcileId] = React.useState('');\n    React.useEffect(() => {\n        const selectedFirst = selected.at(0);\n        if (graph.current.hasEdge(selectedFirst))\n            setReconcileId(graph.current.getEdgeAttribute(selectedFirst, 'reconcileId') ?? 'undefined');\n    }, [selected]);\n\n    const fields: RmgFieldsField[] = [];\n    const selectedFirst = selected.at(0);\n\n    if (selected.length === 1 && graph.current.hasNode(selectedFirst)) {\n        const type = graph.current.getNodeAttribute(selectedFirst, 'type');\n        const attrs = graph.current.getNodeAttribute(selectedFirst, type);\n        fields.push(\n            ...nodes[type].fields\n                // TODO: filter will complain the type\n                // @ts-expect-error\n                .filter(field => field.type !== 'custom')\n                .map(\n                    // @ts-expect-error\n                    field =>\n                        ({\n                            type: field.type,\n                            label: t(field.label),\n                            // TODO: fix this\n                            // @ts-ignore-error\n                            value: field.value(attrs),\n                            // TODO: fix this\n                            // @ts-ignore-error\n                            options: field.options,\n                            // TODO: fix this\n                            // @ts-ignore-error\n                            validator: field.validator,\n                            onChange: (val: string | number) => {\n                                graph.current.mergeNodeAttributes(selectedFirst, {\n                                    // TODO: fix this\n                                    // @ts-ignore-error\n                                    [type]: field.onChange(val, attrs),\n                                });\n                                hardRefresh();\n                            },\n                        } as RmgFieldsField)\n                ),\n            // TODO: filter will complain the type\n            // @ts-expect-error\n            ...nodes[type].fields.filter(field => field.type === 'custom')\n        );\n    }\n\n    if (selected.length === 1 && graph.current.hasEdge(selectedFirst)) {\n        fields.push({\n            type: 'custom',\n            label: t('color'),\n            component: (\n                <ThemeButton\n                    theme={graph.current.getEdgeAttribute(selectedFirst, 'color')}\n                    onClick={() => setIsModalOpen(true)}\n                />\n            ),\n            minW: '40px',\n        });\n        // fields.push({\n        //     type: 'input',\n        //     label: t('panel.details.line.reconcileId'),\n        //     value: reconcileId,\n        //     onChange: val => {\n        //         setReconcileId(val);\n        //         graph.current.mergeEdgeAttributes(selectedFirst, { reconcileId: val });\n        //         dispatch(setRefreshReconcile());\n        //         dispatch(saveGraph(graph.current.export()));\n        //     },\n        // });\n        const type = graph.current.getEdgeAttribute(selectedFirst, 'type');\n        const attrs = graph.current.getEdgeAttribute(selectedFirst, type);\n        fields.push(\n            ...edges[type].fields.map(\n                field =>\n                    ({\n                        type: field.type,\n                        label: t(field.label),\n                        // TODO: fix this\n                        // @ts-ignore-error\n                        value: field.value(attrs),\n                        // TODO: fix this\n                        // @ts-ignore-error\n                        options: field.options,\n                        // TODO: fix this\n                        // @ts-ignore-error\n                        validator: field.validator,\n                        onChange: (val: string | number) => {\n                            graph.current.mergeEdgeAttributes(selectedFirst, {\n                                // TODO: fix this\n                                // @ts-ignore-error\n                                [type]: field.onChange(val, attrs),\n                            });\n                            // console.log(graph.current.getEdgeAttributes(selectedFirst));\n                            hardRefresh();\n                        },\n                    } as RmgFieldsField)\n            )\n        );\n    }\n\n    const [isModalOpen, setIsModalOpen] = React.useState(false);\n    const handleChangeLineColor = (color: Theme) => {\n        if (selected.at(0) && graph.current.hasEdge(selected.at(0))) {\n            graph.current.mergeEdgeAttributes(selected.at(0), { color });\n            hardRefresh();\n        }\n    };\n\n    return (\n        <RmgSidePanel isOpen={selected.length > 0} width={300} header=\"Dummy header\" alwaysOverlay>\n            <RmgSidePanelHeader onClose={handleClose}>{t('panel.details.header')}</RmgSidePanelHeader>\n            <RmgSidePanelBody>\n                <InfoSection />\n\n                {selected.length === 1 && graph.current.hasNode(selectedFirst) && <NodePositionSection />}\n\n                <Box p={1}>\n                    <Heading as=\"h5\" size=\"sm\">\n                        {t('panel.details.specificAttrsTitle')}\n                    </Heading>\n\n                    <RmgFields fields={fields} minW={276} />\n                </Box>\n\n                <ColourModal\n                    isOpen={isModalOpen}\n                    defaultTheme={\n                        selected.at(0)?.startsWith('line')\n                            ? graph.current.getEdgeAttribute(selected.at(0), 'color')\n                            : undefined\n                    }\n                    onClose={() => setIsModalOpen(false)}\n                    onUpdate={nextTheme => handleChangeLineColor(nextTheme)}\n                />\n            </RmgSidePanelBody>\n            <RmgSidePanelFooter>\n                <HStack>\n                    {selected.length === 1 && graph.current.hasNode(selected.at(0)) && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => handleDuplicate(selected.at(0)!)}>\n                            {t('panel.details.footer.duplicate')}\n                        </Button>\n                    )}\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleRemove(selected)}>\n                        {t('panel.details.footer.remove')}\n                    </Button>\n                    {selected.length === 1 && selectedFirst?.startsWith('line-') && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => handleRemoveEntireLine(selected.at(0)!)}>\n                            {t('panel.details.footer.removeEntireLine')}\n                        </Button>\n                    )}\n                </HStack>\n            </RmgSidePanelFooter>\n        </RmgSidePanel>\n    );\n};\n\nexport default DetailsPanel;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["InfoSection","t","useTranslation","selected","useRootSelector","state","runtime","graph","React","window","fields","type","label","value","length","join","minW","onChange","val","current","hasNode","at","getNodeAttribute","getEdgeAttribute","p","as","size","NodePositionSection","dispatch","useRootDispatch","hardRefresh","setRefresh","saveGraph","export","refreshAll","refresh","all","selectedFirst","x","y","pos","setPos","startsWith","toString","validator","Number","isNaN","mergeNodeAttributes","nodes","stations","miscNodes","edges","lines","miscEdges","setReconcileId","hasEdge","attrs","push","filter","field","map","options","component","theme","onClick","setIsModalOpen","mergeEdgeAttributes","isModalOpen","isOpen","width","header","alwaysOverlay","onClose","clearSelected","defaultTheme","undefined","onUpdate","nextTheme","color","variant","allAttr","JSON","parse","stringify","getNodeAttributes","id","nanoid","addNode","handleDuplicate","forEach","s","dropNode","dropEdge","handleRemove","filterEdges","edge","attr","source","target","sourceAttr","targetAttr","undirected","every","v","i","line","handleRemoveEntireLine","crypto","getRandomValues","Uint8Array","reduce","byte","toUpperCase"],"sourceRoot":""}