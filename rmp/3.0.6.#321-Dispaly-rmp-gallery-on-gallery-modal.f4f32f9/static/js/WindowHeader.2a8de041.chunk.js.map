{"version":3,"file":"static/js/WindowHeader.2a8de041.chunk.js","mappings":"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","sources":["components/page-header/rmg-param-app-clip.tsx","components/page-header/rmp-gallery-app-clip.tsx","components/page-header/open-actions.tsx","util/rmg-param-parser.ts","util/fonts.ts","components/page-header/terms-and-conditions.tsx","components/page-header/download-actions.tsx","images/github-mark.svg","images/slack-mark.svg","components/page-header/about-modal.tsx","components/page-header/zoom-popover.tsx","components/page-header/procedures-modal.tsx","components/page-header/settings-modal.tsx","components/page-header/window-header.tsx","components/page-header/global-alerts.tsx","components/page-header/page-header.tsx","util/change-types.ts","util/helpers.ts"],"sourcesContent":["import { SystemStyleObject } from '@chakra-ui/react';\nimport { useEffect, useState } from 'react';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { RmgAppClip } from '@railmapgen/rmg-components';\n\nconst CHANNEL_PREFIX = 'rmg-bridge--';\n\nconst styles: SystemStyleObject = {\n    h: 500,\n    maxH: '70%',\n\n    '& iframe': {\n        h: '100%',\n        w: '100%',\n    },\n};\n\ninterface RmgAppClipProps {\n    isOpen: boolean;\n    onClose: () => void;\n    onImport: (param: Record<string, any>) => void;\n}\n\nexport default function RmgParamAppClip(props: RmgAppClipProps) {\n    const { isOpen, onClose, onImport } = props;\n\n    const [appClipId] = useState(crypto.randomUUID());\n    const frameUrl =\n        '/rmg/import?' +\n        new URLSearchParams({\n            parentComponent: rmgRuntime.getAppName(),\n            parentId: appClipId,\n        });\n\n    useEffect(() => {\n        const channel = new BroadcastChannel(CHANNEL_PREFIX + appClipId);\n        channel.onmessage = ev => {\n            const { event, data } = ev.data;\n            console.log('[rmp] Received event from RMG app clip:', event);\n            if (event === 'CLOSE') {\n                onClose();\n            } else if (event === 'IMPORT') {\n                onImport(data);\n            }\n        };\n\n        return () => {\n            channel.close();\n        };\n    }, []);\n\n    return (\n        <RmgAppClip isOpen={isOpen} onClose={onClose} sx={styles}>\n            <iframe src={frameUrl} loading=\"lazy\" />\n        </RmgAppClip>\n    );\n}\n","import { Box, IconButton, SystemStyleObject, useToast } from '@chakra-ui/react';\nimport { RmgAppClip } from '@railmapgen/rmg-components';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MdClose } from 'react-icons/md';\nimport { useRootDispatch } from '../../redux';\nimport { saveGraph } from '../../redux/param/param-slice';\nimport { clearSelected, setRefreshEdges, setRefreshNodes } from '../../redux/runtime/runtime-slice';\nimport { RMPSave, upgrade } from '../../util/save';\n\nconst RMP_GALLERY_CHANNEL_NAME = 'RMP_GALLERY_CHANNEL';\nconst RMP_GALLERY_CHANNEL_EVENT = 'OPEN_TEMPLATE';\nconst CHN = new BroadcastChannel(RMP_GALLERY_CHANNEL_NAME);\n\nconst styles: SystemStyleObject = {\n    h: '80%',\n    w: '80%',\n\n    '& iframe': {\n        h: '100%',\n        w: '100%',\n    },\n};\n\ninterface RmpGalleryAppClipProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function RmpGalleryAppClip(props: RmpGalleryAppClipProps) {\n    const { isOpen, onClose } = props;\n    const toast = useToast();\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const graph = React.useRef(window.graph);\n\n    const refreshAndSave = React.useCallback(() => {\n        dispatch(setRefreshNodes());\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefreshNodes, setRefreshEdges, saveGraph, graph]);\n\n    const handleOpenTemplate = async (rmpSave: RMPSave) => {\n        // templates may be obsolete and require upgrades\n        const { version, ...save } = JSON.parse(await upgrade(JSON.stringify(rmpSave))) as RMPSave;\n\n        // details panel will complain about unknown nodes or edges if the last selected is not cleared\n        dispatch(clearSelected());\n\n        // rest graph with new data\n        graph.current.clear();\n        graph.current.import(save.graph);\n\n        refreshAndSave();\n    };\n\n    const fetchAndApplyTemplate = async (id: string) => {\n        const template = (await (\n            (\n                await Promise.allSettled([\n                    fetch(`/rmp-gallery/resources/real_world/${id}.json`),\n                    fetch(`/rmp-gallery/resources/fantasy/${id}.json`),\n                ])\n            ).find(res => res.status === 'fulfilled') as PromiseFulfilledResult<Response> | undefined\n        )?.value.json()) as RMPSave | undefined;\n        if (template) handleOpenTemplate(template);\n    };\n\n    // A one time url match to see if it is a template share link and apply the template if needed.\n    React.useEffect(() => {\n        const url = window.location.href;\n        if (url.includes('/s/')) {\n            history.replaceState({}, 'Rail Map Painter', url.substring(0, url.indexOf('s/')));\n\n            const id = url.substring(url.lastIndexOf('s/') + 2);\n            fetchAndApplyTemplate(id);\n        }\n    }, []);\n\n    React.useEffect(() => {\n        CHN.onmessage = e => {\n            const { event, data: id } = e.data;\n            if (event === RMP_GALLERY_CHANNEL_EVENT) {\n                fetchAndApplyTemplate(id);\n                toast({\n                    title: t('header.open.importFromRMPGallery', { id }),\n                    status: 'success' as const,\n                    duration: 9000,\n                    isClosable: true,\n                });\n                onClose();\n            }\n        };\n    }, []);\n\n    return (\n        <>\n            <RmgAppClip isOpen={isOpen} onClose={onClose} size=\"full\" sx={styles}>\n                <iframe src=\"/rmp-gallery/\" loading=\"lazy\" />\n                <Box onClick={onClose} position=\"fixed\" top=\"0\" right=\"10px\" zIndex={3}>\n                    <IconButton aria-label=\"new\" size=\"md\" icon={<MdClose />} variant=\"ghost\" />\n                </Box>\n            </RmgAppClip>\n        </>\n    );\n}\n","import { Badge, IconButton, Menu, MenuButton, MenuItem, MenuList, useToast } from '@chakra-ui/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MdInsertDriveFile, MdNoteAdd, MdUpload } from 'react-icons/md';\nimport { useRootDispatch } from '../../redux';\nimport { saveGraph, setSvgViewBoxMin, setSvgViewBoxZoom } from '../../redux/param/param-slice';\nimport { clearSelected, setGlobalAlert, setRefreshEdges, setRefreshNodes } from '../../redux/runtime/runtime-slice';\nimport { parseRmgParam } from '../../util/rmg-param-parser';\nimport { upgrade } from '../../util/save';\nimport RmgParamAppClip from './rmg-param-app-clip';\nimport RmpGalleryAppClip from './rmp-gallery-app-clip';\n\nexport default function OpenActions() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const graph = React.useRef(window.graph);\n    const fileInputRef = React.useRef<HTMLInputElement | null>(null);\n\n    const [isGalleryModalOpen, setIsGalleryModalOpen] = React.useState(false);\n    const [isRmgParamAppClipOpen, setIsRmgParamAppClipOpen] = React.useState(false);\n\n    const refreshAndSave = React.useCallback(() => {\n        dispatch(setRefreshNodes());\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefreshNodes, setRefreshEdges, saveGraph, graph]);\n\n    const handleNew = () => {\n        dispatch(clearSelected());\n        graph.current.clear();\n        dispatch(setSvgViewBoxZoom(100));\n        dispatch(setSvgViewBoxMin({ x: 0, y: 0 }));\n        refreshAndSave();\n    };\n\n    const handleImportRMGProject = (param: Record<string, any>) => {\n        try {\n            parseRmgParam(graph.current, param);\n            refreshAndSave();\n        } catch (err) {\n            dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.unknownError') }));\n            console.error('OpenActions.handleUploadRMG():: Unknown error occurred while parsing the RMG project', err);\n        } finally {\n            setIsRmgParamAppClipOpen(false);\n        }\n    };\n\n    const handleUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        console.log('OpenActions.handleUpload():: received file', file);\n\n        if (file?.type !== 'application/json') {\n            dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.invalidType') }));\n            console.error('OpenActions.handleUpload():: Invalid file type! Only file in JSON format is accepted.');\n        } else {\n            try {\n                const paramStr = await readFileAsText(file);\n                const { version, ...save } = JSON.parse(await upgrade(paramStr));\n\n                // details panel will complain about unknown nodes or edges if the last selected is not cleared\n                dispatch(clearSelected());\n\n                // rest graph with new data\n                graph.current.clear();\n                graph.current.import(save.graph);\n\n                refreshAndSave();\n            } catch (err) {\n                dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.unknownError') }));\n                console.error(\n                    'OpenActions.handleUpload():: Unknown error occurred while parsing the uploaded file',\n                    err\n                );\n            }\n        }\n\n        // clear field for next upload\n        event.target.value = '';\n    };\n\n    return (\n        <Menu>\n            <MenuButton as={IconButton} size=\"sm\" variant=\"ghost\" icon={<MdUpload />} />\n            <MenuList>\n                <MenuItem icon={<MdNoteAdd />} onClick={handleNew}>\n                    {t('header.open.new')}\n                </MenuItem>\n\n                <input\n                    id=\"upload_project\"\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\".json\"\n                    hidden={true}\n                    onChange={handleUpload}\n                    data-testid=\"file-upload\"\n                />\n                <MenuItem icon={<MdUpload />} onClick={() => fileInputRef?.current?.click()}>\n                    {t('header.open.config')}\n                </MenuItem>\n\n                <MenuItem icon={<MdInsertDriveFile />} onClick={() => setIsRmgParamAppClipOpen(true)}>\n                    {t('header.open.projectRMG')}\n                </MenuItem>\n\n                <MenuItem icon={<MdInsertDriveFile />} onClick={() => setIsGalleryModalOpen(true)}>\n                    {t('header.open.gallery')}\n                    <Badge ml=\"1\" colorScheme=\"green\">\n                        New\n                    </Badge>\n                </MenuItem>\n            </MenuList>\n\n            <RmgParamAppClip\n                isOpen={isRmgParamAppClipOpen}\n                onClose={() => setIsRmgParamAppClipOpen(false)}\n                onImport={handleImportRMGProject}\n            />\n            <RmpGalleryAppClip isOpen={isGalleryModalOpen} onClose={() => setIsGalleryModalOpen(false)} />\n        </Menu>\n    );\n}\n\nconst readFileAsText = (file: File) => {\n    return new Promise((resolve: (text: string) => void) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.readAsText(file);\n    });\n};\n","import Graph from 'graphology';\nimport { nanoid } from 'nanoid';\nimport { InterchangeInfo } from '../components/panels/details/interchange-field';\nimport { linePaths } from '../components/svgs/lines/lines';\nimport { GzmtrBasicStationAttributes } from '../components/svgs/stations/gzmtr-basic';\nimport { GzmtrIntStationAttributes } from '../components/svgs/stations/gzmtr-int';\nimport { MTRStationAttributes } from '../components/svgs/stations/mtr';\nimport { ShmetroBasic2020StationAttributes } from '../components/svgs/stations/shmetro-basic-2020';\nimport stations from '../components/svgs/stations/stations';\nimport { LinePathType, LineStyleType } from '../constants/lines';\nimport { StationAttributes, StationType } from '../constants/stations';\nimport { Theme } from '../constants/constants';\n\ninterface ExtendedInterchangeInfo {\n    theme?: Theme;\n    name: [string, string];\n    facility?: string;\n}\n\ninterface InterchangeGroup {\n    name?: [string, string];\n    lines: ExtendedInterchangeInfo[];\n}\n\nexport const parseRmgParam = (\n    graph: Graph,\n    { info_panel_type, line_num, stn_list: stnList, style, theme }: Record<string, any>\n) => {\n    // generate stn id\n    const stnIdMap = Object.fromEntries(\n        Object.keys(stnList)\n            .filter(id => !['linestart', 'lineend'].includes(id))\n            .map(id => [id, `stn_${nanoid(10)}`])\n    );\n    // update stnIdMap if stations exist in the graph\n    Object.entries(stnList)\n        .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n        .forEach(([id, stnInfo]) => {\n            const nodes = graph.filterNodes(\n                (node, attr) =>\n                    Object.values(StationType).includes(attr.type) &&\n                    // @ts-expect-error\n                    (attr[attr.type] as StationAttributes).names[0] === stnInfo.name[0]\n            );\n            if (nodes.length !== 0) stnIdMap[id] = nodes[0];\n        });\n\n    // only import stations that don't appear in the graph\n    Object.entries(stnList)\n        .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n        .filter(\n            ([id, stnInfo]) =>\n                graph.filterNodes(\n                    (node, attr) =>\n                        Object.values(StationType).includes(attr.type) &&\n                        // @ts-expect-error\n                        (attr[attr.type] as StationAttributes).names[0] === stnInfo.name[0]\n                ).length === 0\n        )\n        .forEach(([id, stnInfo], i) => {\n            // determine station type\n            let type: StationType = StationType.ShmetroBasic;\n            const interchangeGroups: InterchangeGroup[] = (stnInfo as any).transfer.groups;\n            const interchangeLines = interchangeGroups.map(group => group.lines).flat();\n            if (style === 'shmetro') {\n                if (interchangeLines.length > 0) type = StationType.ShmetroInt;\n                else if (info_panel_type === 'sh2020') type = StationType.ShmetroBasic2020;\n                else type = StationType.ShmetroBasic;\n            } else if (style === 'gzmtr') {\n                if (interchangeLines.length > 0) type = StationType.GzmtrInt;\n                else type = StationType.GzmtrBasic;\n            } else if (style === 'mtr') {\n                type = StationType.MTR;\n            }\n\n            // read default attrs\n            const attr = {\n                // deep copy to prevent mutual reference\n                ...JSON.parse(JSON.stringify(stations[type].defaultAttrs)),\n                names: (stnInfo as any).name,\n            };\n\n            // add style specific attrs from RMG save\n            if (type === StationType.ShmetroBasic2020) (attr as ShmetroBasic2020StationAttributes).color = theme;\n            else if (type === StationType.GzmtrBasic) {\n                (attr as GzmtrBasicStationAttributes).color = theme;\n                (attr as GzmtrBasicStationAttributes).lineCode = line_num;\n                (attr as GzmtrBasicStationAttributes).stationCode = (stnInfo as any).num;\n            } else if (type === StationType.GzmtrInt) {\n                (attr as GzmtrIntStationAttributes).transfer = interchangeGroups.map((group, i) => {\n                    // override line code and station code to default as they are not provided in RMG save\n                    const interchangeInfos: InterchangeInfo[] = group.lines.map(line => [\n                        ...(line.theme ?? (theme as Theme)),\n                        '1',\n                        '01',\n                    ]);\n                    // add current line and station code to transfer[0][0]\n                    if (i === 0) {\n                        return [\n                            [...(theme as Theme), line_num, (stnInfo as any).num] as InterchangeInfo,\n                            ...interchangeInfos,\n                        ];\n                    } else {\n                        return interchangeInfos;\n                    }\n                });\n            } else if (type === StationType.MTR) {\n                if (interchangeGroups[0].lines.length) {\n                    (attr as MTRStationAttributes).transfer = [\n                        [\n                            // add current theme to transfer[0][0] as MTR display all transfers including the current line\n                            [...(theme as Theme), '', ''],\n                            // drop out of station transfer as they should be placed in another station\n                            // override line code and station code to empty as they are useless in MTR station\n                            ...interchangeGroups[0].lines.map<InterchangeInfo>(line => [\n                                ...(line.theme ?? (theme as Theme)),\n                                '',\n                                '',\n                            ]),\n                        ],\n                    ];\n                } else {\n                    (attr as MTRStationAttributes).transfer = [[]];\n                }\n            }\n\n            graph.addNode(stnIdMap[id], {\n                visible: true,\n                zIndex: 0,\n                x: 100 + i * 50,\n                y: 1000,\n                type,\n                [type]: attr,\n            });\n        });\n\n    // import lines\n    Object.entries(stnList)\n        .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n        .forEach(([id, stnInfo]) => {\n            (stnInfo as any).children\n                .filter((child: string) => !['linestart', 'lineend'].includes(child))\n                .forEach((child: string) => {\n                    graph.addDirectedEdgeWithKey(`line_${nanoid(10)}`, stnIdMap[id], stnIdMap[child], {\n                        visible: true,\n                        zIndex: 0,\n                        type: LinePathType.Diagonal,\n                        // deep copy to prevent mutual reference\n                        [LinePathType.Diagonal]: JSON.parse(\n                            JSON.stringify(linePaths[LinePathType.Diagonal].defaultAttrs)\n                        ),\n                        style: LineStyleType.SingleColor,\n                        [LineStyleType.SingleColor]: { color: theme },\n                        reconcileId: '',\n                    });\n                });\n        });\n};\n","const waitForMs = (ms: number) => {\n    return new Promise<void>(resolve => {\n        setTimeout(resolve, ms);\n    });\n};\n\nconst isSafari = () => {\n    return navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');\n};\n\nexport const waitForFontReady = async () => {\n    let retryAttempt = 3;\n\n    while (retryAttempt--) {\n        // railmapgen/rmg#274 ready font fact set may not contain GenYoMin when first resolved\n        const fontFaceSet = await document.fonts.ready;\n        const it = fontFaceSet.values();\n        while (true) {\n            const next = it.next();\n            if (next.done) {\n                break;\n            }\n\n            if (next.value.family === 'GenYoMin TW') {\n                return;\n            }\n        }\n\n        console.log('GenYoMin is NOT ready. Retry attempts remaining: ' + retryAttempt + ' ...');\n        await waitForMs(500);\n    }\n\n    throw new Error('Failed to load GenYoMin after 3 attempts');\n};\n\nconst readBlobAsDataURL = (blob: Blob): Promise<string> => {\n    return new Promise((resolve: (value: string) => void) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.readAsDataURL(blob);\n    });\n};\n\nconst matchCssRuleByFontFace = (rules: CSSFontFaceRule[], font: FontFace): CSSFontFaceRule | undefined => {\n    return rules.find(rule => {\n        const cssStyle = rule.style;\n        return (\n            cssStyle.getPropertyValue('font-family').replace(/^\"(.+)\"$/, '$1') === font.family &&\n            cssStyle.getPropertyValue('unicode-range') === font.unicodeRange\n        );\n    });\n};\n\nexport const getBase64FontFace = async (svgEl: SVGSVGElement): Promise<string[]> => {\n    const uniqueCharacters = Array.from(\n        new Set(\n            [\n                ...svgEl.querySelectorAll<SVGElement>('.rmp-name__mtr__zh'),\n                ...svgEl.querySelectorAll<SVGElement>('.rmp-name__mtr__en'),\n            ]\n                .map(el => el.innerHTML)\n                .join('')\n                .replace(/\\s/g, '')\n        )\n    ).join('');\n\n    const fontFaceList = await document.fonts.load('80px GenYoMin TW, Vegur', uniqueCharacters);\n    const cssRules = document.querySelector<HTMLLinkElement>('link#fonts_mtr')?.sheet?.cssRules;\n    if (!cssRules) return Promise.reject(new Error('cssRules can not be found in link#css_share'));\n    const cssFontFaceRules = Array.from(cssRules).filter(rule => rule instanceof CSSFontFaceRule) as CSSFontFaceRule[];\n    const distinctCssRules = fontFaceList.reduce<CSSFontFaceRule[]>((acc, cur) => {\n        const matchedRule = matchCssRuleByFontFace(cssFontFaceRules, cur);\n        if (matchedRule) {\n            const existence = acc.find(rule => {\n                const ruleStyle = rule.style;\n                const matchedStyle = matchedRule.style;\n                return (\n                    ruleStyle.getPropertyValue('font-family') === matchedStyle.getPropertyValue('font-family') &&\n                    ruleStyle.getPropertyValue('unicode-range') === matchedStyle.getPropertyValue('unicode-range')\n                );\n            });\n            return existence ? acc : acc.concat(matchedRule);\n        } else {\n            return acc;\n        }\n    }, []);\n\n    return await Promise.all(\n        distinctCssRules.map(async cssRule => {\n            try {\n                const fontResp = await fetch(getAbsoluteUrl(cssRule));\n                const fontDataUri = await readBlobAsDataURL(await fontResp.blob());\n                return cssRule.cssText.replace(/src:[ \\w('\",\\-:/.)]+;/g, `src: url('${fontDataUri}'); `);\n            } catch (err) {\n                console.error(err);\n                return '';\n            }\n        })\n    );\n};\n\nexport const getAbsoluteUrl = (cssRule: CSSFontFaceRule) => {\n    const ruleStyleSrc = (cssRule.style as any).src;\n    return isSafari()\n        ? ruleStyleSrc.replace(/^url\\(\"(\\S+)\"\\).*$/, '$1')\n        : process.env.PUBLIC_URL + '/styles/' + ruleStyleSrc.match(/^url\\(\"([\\S*]+)\"\\)/)?.[1];\n};\n","import { useTranslation } from 'react-i18next';\nimport {\n    Icon,\n    Link,\n    ListItem,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalCloseButton,\n    ModalBody,\n    OrderedList,\n} from '@chakra-ui/react';\nimport { MdOpenInNew } from 'react-icons/md';\n\nconst TermsAndConditionsModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.download.termsAndConditions')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <OrderedList>\n                        <ListItem>\n                            The layout of the elements on the signage or rail map, is designed by{' '}\n                            <Link color=\"teal.500\" href=\"https://www.shmetro.com/\" isExternal={true}>\n                                Shanghai Shentong Metro Group <Icon as={MdOpenInNew} />\n                            </Link>\n                            {', '}\n                            <Link color=\"teal.500\" href=\"https://www.gzmtr.com/\" isExternal={true}>\n                                Guangzhou Metro Group <Icon as={MdOpenInNew} />\n                            </Link>\n                            {' or '}\n                            <Link color=\"teal.500\" href=\"https://www.mtr.com.hk/\" isExternal={true}>\n                                MTR Corporation <Icon as={MdOpenInNew} />\n                            </Link>\n                            , depending on your selection. You shall grant appropriate permit or license from the\n                            relevant company above before using the generated images for commercial purposes, if it is\n                            required to do so.\n                            <br />\n                            标志版或路线图的元素或布局，基于你所选择的风格，为\n                            <Link color=\"teal.500\" href=\"https://www.shmetro.com/\" isExternal={true}>\n                                上海申通地铁集团 <Icon as={MdOpenInNew} />\n                            </Link>\n                            ，\n                            <Link color=\"teal.500\" href=\"https://www.gzmtr.com/\" isExternal={true}>\n                                广州地铁集团公司 <Icon as={MdOpenInNew} />\n                            </Link>\n                            或\n                            <Link color=\"teal.500\" href=\"https://www.mtr.com.hk/\" isExternal={true}>\n                                港铁公司 <Icon as={MdOpenInNew} />\n                            </Link>\n                            所设计。在产生的图像用作商业用途前，你应向相关公司取得适当之许可证或授权。\n                        </ListItem>\n                        <ListItem>\n                            The elements including shapes and lines on the image are drawn by{' '}\n                            <Link color=\"teal.500\" href=\"https://www.github.com/thekingofcity\" isExternal={true}>\n                                thekingofcity <Icon as={MdOpenInNew} />\n                            </Link>\n                            {' and '}\n                            <Link color=\"teal.500\" href=\"https://www.github.com/wongchito\" isExternal={true}>\n                                Chito Wong <Icon as={MdOpenInNew} />\n                            </Link>\n                            , based on the design standards or rules of the companies listed above. You may use them for\n                            any purposes, but it is recommended to state the name and the link of software alongside.\n                            <br />\n                            图像的元素，包括图形及线条，均由\n                            <Link color=\"teal.500\" href=\"https://www.github.com/thekingofcity\" isExternal={true}>\n                                thekingofcity <Icon as={MdOpenInNew} />\n                            </Link>\n                            及\n                            <Link color=\"teal.500\" href=\"https://www.github.com/wongchito\" isExternal={true}>\n                                Chito Wong <Icon as={MdOpenInNew} />\n                            </Link>\n                            基于上述公司设计标准或准则绘制。你可将其用于任何目的，但我们建议你于使用同时附以我们的名字以及本网站地址。\n                        </ListItem>\n                        <ListItem>\n                            Due to copyright, licensing and other legal restrictions, Rail Map Painter uses{' '}\n                            <Link color=\"teal.500\" href=\"https://github.com/ButTaiwan/genyo-font\" isExternal={true}>\n                                GenYoMin provided by ButTaiwan <Icon as={MdOpenInNew} />\n                            </Link>\n                            , and Vegur instead of MTRSung and Myriad Pro respectively to display and generate MTR-style\n                            signage. You shall grant appropriate permit or license from the manufacturers before using\n                            those generated images for commercial purposes.\n                            <br />\n                            由于著作权及其他法律限制，铁路路线图绘制器使用由\n                            <Link color=\"teal.500\" href=\"https://github.com/ButTaiwan/genyo-font\" isExternal={true}>\n                                ButTaiwan提供的源樣明體 <Icon as={MdOpenInNew} />\n                            </Link>\n                            ，以及Vegur，以代替港铁样式标志牌所使用的地铁宋及Myriad\n                            Pro。在产生之图像用作商业用途前，你应向字型生产厂商取得适当之许可证或授权。\n                        </ListItem>\n                        <ListItem>\n                            The exported images in PNG or SVG format may be modified, published, or used for other\n                            purposes except commercial use, under the conditions above.\n                            <br />\n                            输出的PNG或SVG图像可基于上述条款，在非商业使用时，用于修改、发行或其他用途。\n                        </ListItem>\n                        <ListItem>\n                            All flag emojis shown on Windows platforms are designed by{' '}\n                            <Link color=\"teal.500\" href=\"https://openmoji.org/\" isExternal={true}>\n                                OpenMoji <Icon as={MdOpenInNew} />\n                            </Link>{' '}\n                            – the open-source emoji and icon project. License:\n                            <Link\n                                color=\"teal.500\"\n                                href=\"https://creativecommons.org/licenses/by-sa/4.0/\"\n                                isExternal={true}\n                            >\n                                CC BY-SA 4.0 <Icon as={MdOpenInNew} />\n                            </Link>\n                            <br />\n                            于Windows作业系统上显示的国旗Emoji为\n                            <Link color=\"teal.500\" href=\"https://openmoji.org/\" isExternal={true}>\n                                OpenMoji <Icon as={MdOpenInNew} />\n                            </Link>\n                            所设计。许可证：\n                            <Link\n                                color=\"teal.500\"\n                                href=\"https://creativecommons.org/licenses/by-sa/4.0/\"\n                                isExternal={true}\n                            >\n                                CC BY-SA 4.0 <Icon as={MdOpenInNew} />\n                            </Link>\n                        </ListItem>\n                        <ListItem>\n                            We reserve the rights, without prior notice, to modify, add, or remove these terms. The\n                            Chinese translation is for reference only. In case of any discrepancy between the English\n                            version and the Chinese version, the English version shall prevail.\n                            <br />\n                            我们保留修改、新增或移除上述条款之权利，而无需另行通知。中文译本仅供参考，文义如与英文有歧异，概以英文本为准。\n                        </ListItem>\n                    </OrderedList>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default TermsAndConditionsModal;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Checkbox,\n    HStack,\n    Icon,\n    IconButton,\n    Link,\n    Menu,\n    MenuButton,\n    MenuItem,\n    MenuList,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    Text,\n    useColorModeValue,\n} from '@chakra-ui/react';\nimport { MdDownload, MdImage, MdOpenInNew, MdSave } from 'react-icons/md';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { Events } from '../../constants/constants';\nimport { MiscNodeType } from '../../constants/nodes';\nimport store, { useRootSelector } from '../../redux';\nimport { calculateCanvasSize } from '../../util/helpers';\nimport { stringifyParam } from '../../util/save';\nimport { getBase64FontFace } from '../../util/fonts';\nimport TermsAndConditionsModal from './terms-and-conditions';\nimport { StationType } from '../../constants/stations';\n\nexport default function DownloadActions() {\n    const { t } = useTranslation();\n    const {\n        telemetry: { project: isAllowProjectTelemetry },\n    } = useRootSelector(state => state.app);\n    const { nodeExists } = useRootSelector(state => state.runtime);\n    const graph = React.useRef(window.graph);\n    const bgColor = useColorModeValue('white', 'gray.800');\n\n    const [format, setFormat] = React.useState('png' as 'png' | 'svg');\n    const formatOptions = {\n        png: t('header.download.png'),\n        svg: t('header.download.svg'),\n    };\n    const [scale, setScale] = React.useState(100);\n    const scaleOptions = Object.fromEntries(\n        [25, 33, 50, 67, 75, 80, 90, 100, 110, 125, 150, 175, 200, 250, 300, 400, 500].map(v => [v, `${v}%`])\n    );\n    const [isTransparent, setIsTransparent] = React.useState(false);\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('header.download.format'),\n            value: format,\n            options: formatOptions,\n            onChange: value => setFormat(value === 'png' ? 'png' : 'svg'),\n        },\n    ];\n    const pngFields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('header.download.scale'),\n            value: scale,\n            options: scaleOptions,\n            onChange: value => setScale(value as number),\n        },\n        {\n            type: 'switch',\n            label: t('header.download.transparent'),\n            isChecked: isTransparent,\n            onChange: setIsTransparent,\n        },\n    ];\n    const [isDownloadModalOpen, setIsDownloadModalOpen] = React.useState(false);\n    const [isTermsAndConditionsModalOpen, setIsTermsAndConditionsModalOpen] = React.useState(false);\n    const [isAttachSelected, setIsAttachSelected] = React.useState(false);\n    const [isTermsAndConditionsSelected, setIsTermsAndConditionsSelected] = React.useState(false);\n\n    const handleDownloadJson = () => {\n        if (isAllowProjectTelemetry)\n            rmgRuntime.event(Events.DOWNLOAD_PARAM, { '#nodes': graph.current.order, '#edges': graph.current.size });\n        const param = stringifyParam(store.getState().param);\n        downloadAs(`RMP_${new Date().valueOf()}.json`, 'application/json', param);\n    };\n    // thanks to this article that includes every steps in converting svg to png\n    // https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n    const handleDownload = async () => {\n        setIsDownloadModalOpen(false);\n        if (isAllowProjectTelemetry)\n            rmgRuntime.event(Events.DOWNLOAD_IMAGES, {\n                numberOfNodes: graph.current.order,\n                numberOfEdges: graph.current.size,\n            });\n\n        // get the minimum and maximum of the graph\n        const { xMin, yMin, xMax, yMax } = calculateCanvasSize(graph.current);\n        const [width, height] = [xMax - xMin, yMax - yMin];\n\n        const elem = document.getElementById('canvas')!.cloneNode(true) as SVGSVGElement;\n        // remove virtual nodes\n        [...elem.children]\n            .filter(\n                e =>\n                    graph.current.hasNode(e.id) && graph.current.getNodeAttribute(e.id, 'type') === MiscNodeType.Virtual\n            )\n            .forEach(e => elem.removeChild(e));\n        // append rmp info if user does not want to share rmp info\n        if (!isAttachSelected) elem.appendChild(generateRmpInfo(xMax - 400, yMax - 60));\n        // reset svg viewBox to display all the nodes in the graph\n        // otherwise the later drawImage won't be able to show all of them\n        elem.setAttribute('viewBox', `${xMin} ${yMin} ${width} ${height}`);\n        // Chrome will stretch the image if the following width and height are not set\n        elem.setAttribute('width', width.toString());\n        elem.setAttribute('height', height.toString());\n        // copy attributes from css to each elem in the newly cloned svg\n        // TODO: #274 copy all possible attributes using document.querySelectorAll('link'), this is hard to maintain\n        Object.entries({\n            '.rmp-name__zh': ['font-family'],\n            '.rmp-name__en': ['font-family'],\n            '.rmp-name__mtr__zh': ['font-family'],\n            '.rmp-name__mtr__en': ['font-family'],\n            '.rmp-name-station': ['paint-order', 'stroke', 'stroke-width'],\n        }).forEach(([className, styleSet]) => {\n            const e = document.querySelector(className);\n            if (e === null) return; // no element in the canvas uses this class\n            const style = window.getComputedStyle(e);\n            elem.querySelectorAll(className).forEach(el => {\n                styleSet.forEach(styleName => {\n                    el.setAttribute(styleName, style.getPropertyValue(styleName));\n                });\n                el.classList.remove(className);\n            });\n        });\n\n        if (nodeExists[StationType.MTR]) {\n            try {\n                const uris = await getBase64FontFace(elem);\n                const s = document.createElement('style');\n                s.textContent = uris.join('\\n');\n                elem.prepend(s);\n            } catch (err) {\n                alert('Failed to fonts. Fonts in the exported PNG will be missing.');\n                console.error(err);\n            }\n        }\n\n        if (format === 'svg') {\n            downloadAs(`RMP_${new Date().valueOf()}.svg`, 'image/svg+xml', elem.outerHTML);\n            return;\n        }\n\n        // append to document to render the svg\n        document.body.appendChild(elem);\n        // convert it to blob\n        const src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(elem.outerHTML)));\n        // release after use\n        document.body.removeChild(elem);\n\n        // create canvas to be drawn on\n        const canvas = document.createElement('canvas');\n        const [canvasWidth, canvasHeight] = [(width * scale) / 100, (height * scale) / 100];\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n        // set background, respect to dark mode\n        if (!isTransparent) {\n            ctx.fillStyle = bgColor;\n            ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n        }\n\n        const img = new Image();\n        img.onload = () => {\n            ctx.drawImage(img, 0, 0, canvasWidth, canvasHeight);\n            canvas.toBlob(blob => downloadBlobAs(`RMP_${new Date().valueOf()}.png`, blob!), 'image/png');\n        };\n        img.src = src; // draw src on canvas\n    };\n\n    return (\n        <Menu id=\"download\">\n            <MenuButton as={IconButton} size=\"sm\" variant=\"ghost\" icon={<MdDownload />} />\n            <MenuList>\n                <MenuItem icon={<MdSave />} onClick={handleDownloadJson}>\n                    {t('header.download.config')}\n                </MenuItem>\n                <MenuItem icon={<MdImage />} onClick={() => setIsDownloadModalOpen(true)}>\n                    {t('header.download.image')}\n                </MenuItem>\n            </MenuList>\n\n            <Modal size=\"xl\" isOpen={isDownloadModalOpen} onClose={() => setIsDownloadModalOpen(false)}>\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>{t('header.download.image')}</ModalHeader>\n                    <ModalCloseButton />\n\n                    <ModalBody>\n                        <RmgFields fields={fields} />\n                        {format === 'png' && <RmgFields fields={pngFields} />}\n                        <br />\n                        <Checkbox isChecked={isAttachSelected} onChange={e => setIsAttachSelected(e.target.checked)}>\n                            <Text>\n                                {t('header.download.shareInfo1')}\n                                <Link\n                                    color=\"teal.500\"\n                                    onClick={() => window.open('https://railmapgen.github.io/rmp', '_blank')}\n                                >\n                                    {t('header.about.rmp')} <Icon as={MdOpenInNew} />\n                                </Link>\n                                {t('header.download.shareInfo2')}\n                            </Text>\n                        </Checkbox>\n                        <Checkbox\n                            isChecked={isTermsAndConditionsSelected}\n                            onChange={e => setIsTermsAndConditionsSelected(e.target.checked)}\n                        >\n                            <Text>\n                                {t('header.download.termsAndConditionsInfo')}\n                                <Link color=\"teal.500\" onClick={() => setIsTermsAndConditionsModalOpen(true)}>\n                                    {t('header.download.termsAndConditions')} <Icon as={MdOpenInNew} />\n                                </Link>\n                                {t('header.download.period')}\n                            </Text>\n                        </Checkbox>\n                    </ModalBody>\n\n                    <ModalFooter>\n                        <HStack>\n                            <Button\n                                colorScheme=\"teal\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                disabled={!isTermsAndConditionsSelected}\n                                onClick={handleDownload}\n                            >\n                                {t('header.download.confirm')}\n                            </Button>\n                        </HStack>\n                    </ModalFooter>\n\n                    <TermsAndConditionsModal\n                        isOpen={isTermsAndConditionsModalOpen}\n                        onClose={() => setIsTermsAndConditionsModalOpen(false)}\n                    />\n                </ModalContent>\n            </Modal>\n        </Menu>\n    );\n}\n\nconst downloadAs = (filename: string, type: string, data: any) => {\n    const blob = new Blob([data], { type });\n    downloadBlobAs(filename, blob);\n};\n\nconst downloadBlobAs = (filename: string, blob: Blob) => {\n    const url = window.URL.createObjectURL(blob);\n\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n};\n\nconst generateRmpInfo = (x: number, y: number) => {\n    const info = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    info.setAttribute('transform', `translate(${x}, ${y})scale(2)`);\n\n    const logo = document.createElementNS('http://www.w3.org/2000/svg', 'image');\n    // FIXME: return after image is loaded\n    // logo.setAttribute('href', 'https://uat-railmapgen.github.io/rmp/logo192.png');\n    // logo.setAttribute('href', logoImg);\n    logo.setAttribute('width', '40');\n    logo.setAttribute('height', '40');\n    logo.setAttribute('x', '-50');\n    logo.setAttribute('y', '-20');\n\n    const rmp = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    rmp.setAttribute('font-family', 'Arial, sans-serif');\n    rmp.setAttribute('font-size', '16');\n    rmp.appendChild(document.createTextNode('Rail Map Painter'));\n\n    const link = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    link.setAttribute('font-family', 'Arial, sans-serif');\n    link.setAttribute('font-size', '10');\n    link.setAttribute('y', '10');\n    link.appendChild(document.createTextNode('https://railmapgen.github.io/rmp/'));\n\n    info.appendChild(logo);\n    info.appendChild(rmp);\n    info.appendChild(link);\n\n    return info;\n};\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgGithubMark(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 98,\n    height: 96,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z\",\n    fill: \"#24292f\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgGithubMark);\nexport default __webpack_public_path__ + \"static/media/github-mark.6fa18895f6e6c7772cab7049f7e05f59.svg\";\nexport { ForwardRef as ReactComponent };","var _style, _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSlackMark(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 270 270\",\n    style: {\n      enableBackground: \"new 0 0 270 270\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\n\\t.st0{fill:#E01E5A;}\\n\\t.st1{fill:#36C5F0;}\\n\\t.st2{fill:#2EB67D;}\\n\\t.st3{fill:#ECB22E;}\\n\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M99.4,151.2c0,7.1-5.8,12.9-12.9,12.9c-7.1,0-12.9-5.8-12.9-12.9c0-7.1,5.8-12.9,12.9-12.9h12.9V151.2z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M105.9,151.2c0-7.1,5.8-12.9,12.9-12.9s12.9,5.8,12.9,12.9v32.3c0,7.1-5.8,12.9-12.9,12.9 s-12.9-5.8-12.9-12.9V151.2z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M118.8,99.4c-7.1,0-12.9-5.8-12.9-12.9c0-7.1,5.8-12.9,12.9-12.9s12.9,5.8,12.9,12.9v12.9H118.8z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M118.8,105.9c7.1,0,12.9,5.8,12.9,12.9s-5.8,12.9-12.9,12.9H86.5c-7.1,0-12.9-5.8-12.9-12.9 s5.8-12.9,12.9-12.9H118.8z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st2\",\n    d: \"M170.6,118.8c0-7.1,5.8-12.9,12.9-12.9c7.1,0,12.9,5.8,12.9,12.9s-5.8,12.9-12.9,12.9h-12.9V118.8z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st2\",\n    d: \"M164.1,118.8c0,7.1-5.8,12.9-12.9,12.9c-7.1,0-12.9-5.8-12.9-12.9V86.5c0-7.1,5.8-12.9,12.9-12.9 c7.1,0,12.9,5.8,12.9,12.9V118.8z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st3\",\n    d: \"M151.2,170.6c7.1,0,12.9,5.8,12.9,12.9c0,7.1-5.8,12.9-12.9,12.9c-7.1,0-12.9-5.8-12.9-12.9v-12.9H151.2z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st3\",\n    d: \"M151.2,164.1c-7.1,0-12.9-5.8-12.9-12.9c0-7.1,5.8-12.9,12.9-12.9h32.3c7.1,0,12.9,5.8,12.9,12.9 c0,7.1-5.8,12.9-12.9,12.9H151.2z\"\n  })))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSlackMark);\nexport default __webpack_public_path__ + \"static/media/slack-mark.3474c14d58fbbab9cfa2208b01a4ac3a.svg\";\nexport { ForwardRef as ReactComponent };","import rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Avatar,\n    Box,\n    Flex,\n    Heading,\n    Image,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    Tag,\n    TagLabel,\n    Text,\n    VStack,\n} from '@chakra-ui/react';\nimport GithubIcon from '../../images/github-mark.svg';\nimport SlackIcon from '../../images/slack-mark.svg';\n\nconst AboutModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n    const appVersion = rmgRuntime.getAppVersion();\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.about.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody paddingBottom={10}>\n                    <Flex direction=\"row\">\n                        <Image boxSize=\"128px\" src={process.env.PUBLIC_URL + '/logo192.png'} />\n                        <Flex direction=\"column\" width=\"100%\" alignItems=\"center\" justifyContent=\"center\">\n                            <Text fontSize=\"xl\" as=\"b\">\n                                {t('header.about.rmp')}\n                            </Text>\n                            <Text>{appVersion}</Text>\n                            <Text />\n                            <Text fontSize=\"sm\">{t('header.about.railmapgen')}</Text>\n                        </Flex>\n                    </Flex>\n\n                    <Box margin={5}>\n                        <Text fontSize=\"xl\">{t('header.about.desc')}</Text>\n                    </Box>\n\n                    <Heading as=\"h5\" size=\"sm\" mt={3} mb={2}>\n                        {t('header.about.contributors')}\n                    </Heading>\n\n                    <Heading as=\"h6\" size=\"xs\" my={2}>\n                        {t('header.about.coreContributors')}\n                    </Heading>\n\n                    <VStack>\n                        <Tag\n                            size=\"lg\"\n                            w=\"85%\"\n                            onClick={() => window.open('https://github.com/thekingofcity', '_blank')}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src=\"https://github.com/thekingofcity.png\" size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\" width=\"100%\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    thekingofcity\n                                </Text>\n                                <Text fontSize=\"sm\">{t('header.about.content1')}</Text>\n                                <Text fontSize=\"sm\" align=\"right\" mb={1}>\n                                    {t('header.about.content2')}\n                                </Text>\n                            </TagLabel>\n                        </Tag>\n                    </VStack>\n\n                    <Heading as=\"h6\" size=\"xs\" my={2}>\n                        {t('header.about.styleContributors')}\n                    </Heading>\n\n                    <VStack>\n                        <Tag\n                            size=\"lg\"\n                            w=\"85%\"\n                            onClick={() => window.open('https://github.com/203IhzElttil', '_blank')}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src=\"https://github.com/203IhzElttil.png\" size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\" width=\"100%\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    203IhzElttil\n                                </Text>\n                                <Text fontSize=\"sm\" mb={1}>\n                                    {t('header.about.203IhzElttil')}\n                                </Text>\n                            </TagLabel>\n                        </Tag>\n                    </VStack>\n\n                    <Heading as=\"h5\" size=\"sm\" mt={3} mb={2}>\n                        {t('header.about.contactUs')}\n                    </Heading>\n\n                    <VStack>\n                        <Tag\n                            size=\"lg\"\n                            w=\"85%\"\n                            onClick={() => window.open('https://github.com/railmapgen/rmp/issues', '_blank')}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src={GithubIcon} size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\" width=\"100%\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    {t('header.about.github')}\n                                </Text>\n                                <Text fontSize=\"sm\">{t('header.about.githubContent')}</Text>\n                            </TagLabel>\n                        </Tag>\n                        <Tag\n                            size=\"lg\"\n                            w=\"85%\"\n                            onClick={() =>\n                                window.open(\n                                    'https://join.slack.com/t/railmapgenerator/shared_invite/zt-1odhhta3n-DdZF~fnVwo_q0S0RJmgV8A',\n                                    '_blank'\n                                )\n                            }\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src={SlackIcon} size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\" width=\"100%\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    {t('header.about.slack')}\n                                </Text>\n                                <Text fontSize=\"sm\">{t('header.about.slackContent')}</Text>\n                                <Text fontSize=\"sm\" as=\"i\">\n                                    #rmg, #rmp, #palette-and-templates, #random\n                                </Text>\n                            </TagLabel>\n                        </Tag>\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default AboutModal;\n","import React from 'react';\nimport { IconButton, Popover, PopoverBody, PopoverContent, PopoverTrigger } from '@chakra-ui/react';\nimport { MdZoomOut, MdZoomIn } from 'react-icons/md';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootSelector, useRootDispatch } from '../../redux/index';\nimport { setSvgViewBoxZoom } from '../../redux/param/param-slice';\n\n/**\n * A zoom control displayed in popover component.\n * This will greatly decrease the width of the header in mobile device.\n */\nexport const ZoomPopover = () => {\n    const [isOpen, setIsOpen] = React.useState(false);\n\n    const { svgViewBoxZoom } = useRootSelector(state => state.param);\n    const dispatch = useRootDispatch();\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'slider',\n            label: '',\n            value: 400 - svgViewBoxZoom,\n            min: 10,\n            max: 390,\n            step: 1,\n            onChange: value => dispatch(setSvgViewBoxZoom(400 - value)),\n            leftIcon: <MdZoomOut />,\n            rightIcon: <MdZoomIn />,\n            minW: 160,\n        },\n    ];\n\n    return (\n        <Popover isOpen={isOpen} onOpen={() => setIsOpen(true)} onClose={() => setIsOpen(false)}>\n            <PopoverTrigger>\n                <IconButton\n                    aria-label=\"zoom\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    icon={<MdZoomIn />}\n                    onClick={() => setIsOpen(!isOpen)}\n                />\n            </PopoverTrigger>\n            <PopoverContent>\n                <PopoverBody>\n                    <RmgFields fields={fields} noLabel />\n                </PopoverBody>\n            </PopoverContent>\n        </Popover>\n    );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    Text,\n    Badge,\n    Tooltip,\n    ModalFooter,\n    Button,\n} from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { StationType } from '../../constants/stations';\nimport { LineStyleType } from '../../constants/lines';\nimport { useRootSelector, useRootDispatch } from '../../redux';\nimport { setRefreshNodes, setRefreshEdges } from '../../redux/runtime/runtime-slice';\nimport { saveGraph } from '../../redux/param/param-slice';\nimport stations from '../svgs/stations/stations';\nimport { changeStationsTypeInBatch } from '../../util/change-types';\nimport ColourModal from '../panels/colour-modal/colour-modal';\nimport ThemeButton from '../panels/theme-button';\n\nexport const TranslateNodesModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const graph = React.useRef(window.graph);\n\n    const [x, setX] = React.useState(0);\n    const [y, setY] = React.useState(0);\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('header.settings.procedures.translate.x'),\n            value: x.toString(),\n            variant: 'number',\n            onChange: val => setX(Number(val)),\n            minW: 'full',\n        },\n        {\n            type: 'input',\n            label: t('header.settings.procedures.translate.y'),\n            value: y.toString(),\n            variant: 'number',\n            onChange: val => setY(Number(val)),\n            minW: 'full',\n        },\n    ];\n\n    const handleChange = () => {\n        graph.current.forEachNode((node, attr) => {\n            graph.current.updateNodeAttribute(node, 'x', val => (val ?? 0) + x);\n            graph.current.updateNodeAttribute(node, 'y', val => (val ?? 0) + y);\n        });\n        dispatch(setRefreshNodes());\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n        onClose();\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.settings.procedures.translate.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    {t('header.settings.procedures.translate.content')}\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" variant=\"outline\" mr=\"1\" onClick={onClose}>\n                        {t('cancel')}\n                    </Button>\n                    <Button colorScheme=\"red\" onClick={handleChange}>\n                        {t('apply')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport const ScaleNodesModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const graph = React.useRef(window.graph);\n\n    const [scale, setScale] = React.useState(1);\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('header.settings.procedures.scale.factor'),\n            value: scale.toString(),\n            variant: 'number',\n            onChange: val => setScale(Number(val)),\n            minW: 'full',\n        },\n    ];\n\n    const handleChange = () => {\n        graph.current.forEachNode((node, attr) => {\n            graph.current.updateNodeAttribute(node, 'x', val => (val ?? 0) * scale);\n            graph.current.updateNodeAttribute(node, 'y', val => (val ?? 0) * scale);\n        });\n        dispatch(setRefreshNodes());\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n        onClose();\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.settings.procedures.scale.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    {t('header.settings.procedures.scale.content')}\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" variant=\"outline\" mr=\"1\" onClick={onClose}>\n                        {t('cancel')}\n                    </Button>\n                    <Button colorScheme=\"red\" onClick={handleChange}>\n                        {t('apply')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport const ChangeTypeModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const graph = React.useRef(window.graph);\n\n    const availableStationOptions = Object.fromEntries(\n        Object.entries(stations).map(([key, val]) => [key, t(val.metadata.displayName).toString()])\n    ) as { [k in StationType]: string };\n    const [oldStnType, setOldStnType] = React.useState(Object.keys(stations).at(0)! as StationType);\n    const [newStnType, setNewStnType] = React.useState(Object.keys(stations).at(1)! as StationType);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('header.settings.procedures.changeType.changeFrom'),\n            value: oldStnType as StationType,\n            options: availableStationOptions,\n            disabledOptions: [newStnType],\n            onChange: (val: string | number) => setOldStnType(val as StationType),\n            minW: 'full',\n        },\n        {\n            type: 'select',\n            label: t('header.settings.procedures.changeType.changeTo'),\n            value: newStnType as StationType,\n            options: availableStationOptions,\n            disabledOptions: [oldStnType],\n            onChange: (val: string | number) => setNewStnType(val as StationType),\n            minW: 'full',\n        },\n    ];\n\n    const handleChange = () => {\n        changeStationsTypeInBatch(graph.current, oldStnType, newStnType);\n        dispatch(setRefreshNodes());\n        dispatch(saveGraph(graph.current.export()));\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>\n                    <Text as=\"b\" fontSize=\"xl\">\n                        {t('header.settings.procedures.changeType.title')}\n                    </Text>\n                    <Tooltip label={t('header.settings.pro')}>\n                        <Badge ml=\"1\" color=\"gray.50\" background=\"radial-gradient(circle, #3f5efb, #fc466b)\">\n                            PRO\n                        </Badge>\n                    </Tooltip>\n                </ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <RmgFields fields={fields} />\n                    <Text fontSize=\"sm\" mt=\"3\" lineHeight=\"100%\" color=\"red.500\">\n                        {t('header.settings.procedures.changeType.info')}\n                    </Text>\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" variant=\"outline\" mr=\"1\" onClick={onClose}>\n                        {t('cancel')}\n                    </Button>\n                    <Button colorScheme=\"red\" onClick={handleChange}>\n                        {t('apply')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport const RemoveLinesWithSingleColorModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { theme: runtimeTheme } = useRootSelector(state => state.runtime);\n    const { t } = useTranslation();\n    const graph = React.useRef(window.graph);\n\n    const [theme, setTheme] = React.useState(runtimeTheme);\n    const [isColourModalOpen, setIsColourModalOpen] = React.useState(false);\n\n    const handleChange = () => {\n        graph.current\n            .filterEdges(\n                (edge, attr, source, target, sourceAttr, targetAttr, undirected) =>\n                    attr.style === LineStyleType.SingleColor &&\n                    JSON.stringify(attr[LineStyleType.SingleColor]!.color) === JSON.stringify(theme)\n            )\n            .forEach(edge => graph.current.dropEdge(edge));\n        dispatch(setRefreshEdges());\n        dispatch(saveGraph(graph.current.export()));\n        onClose();\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.settings.procedures.removeLines.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    {t('header.settings.procedures.removeLines.content')}\n                    <ThemeButton theme={theme} onClick={() => setIsColourModalOpen(true)} />\n                    <ColourModal\n                        isOpen={isColourModalOpen}\n                        defaultTheme={theme}\n                        onClose={() => setIsColourModalOpen(false)}\n                        onUpdate={nextTheme => setTheme(nextTheme)}\n                    />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" variant=\"outline\" mr=\"1\" onClick={onClose}>\n                        {t('cancel')}\n                    </Button>\n                    <Button colorScheme=\"red\" onClick={handleChange}>\n                        {t('remove')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n","import React from 'react';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Badge,\n    Box,\n    Button,\n    Icon,\n    Kbd,\n    Link,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    StackDivider,\n    Switch,\n    SystemStyleObject,\n    Table,\n    Tbody,\n    Td,\n    Text,\n    Th,\n    Thead,\n    Tooltip,\n    Tr,\n    useColorModeValue,\n    VStack,\n} from '@chakra-ui/react';\nimport { MdArrowBack, MdArrowDownward, MdArrowForward, MdArrowUpward, MdOpenInNew, MdReadMore } from 'react-icons/md';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { setKeepLastPath } from '../../redux/runtime/runtime-slice';\nimport { setTelemetryApp } from '../../redux/app/app-slice';\nimport {\n    ChangeTypeModal,\n    RemoveLinesWithSingleColorModal,\n    ScaleNodesModal,\n    TranslateNodesModal,\n} from './procedures-modal';\nimport { isMacClient } from '../../util/helpers';\n\nconst procedureButtonStyle: SystemStyleObject = {\n    width: '100%',\n    justifyContent: 'space-between',\n};\n\nconst macKeyStyle: SystemStyleObject = {\n    fontFamily: '-apple-system',\n};\n\nconst SettingsModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const { keepLastPath } = useRootSelector(state => state.runtime);\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const linkColour = useColorModeValue('primary.500', 'primary.300');\n\n    const [isTranslateNodesOpen, setIsTranslateNodesOpen] = React.useState(false);\n    const [isScaleNodesOpen, setIsScaleNodesOpen] = React.useState(false);\n    const [isChangeTypeOpen, setIsChangeTypeOpen] = React.useState(false);\n    const [isRemoveLinesWithSingleColorOpen, setIsRemoveLinesWithSingleColorOpen] = React.useState(false);\n\n    const isAllowAnalytics = rmgRuntime.isAllowAnalytics();\n    const {\n        telemetry: { app: isAllowAppTelemetry },\n    } = useRootSelector(state => state.app);\n    const handleAdditionalTelemetry = (allowAppTelemetry: boolean) => dispatch(setTelemetryApp(allowAppTelemetry));\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.settings.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <VStack divider={<StackDivider borderColor=\"gray.200\" />}>\n                        <Box width=\"100%\" mb=\"3\">\n                            <Text as=\"b\" fontSize=\"xl\">\n                                {t('header.settings.preference.title')}\n                            </Text>\n                            <Box mt=\"3\">\n                                <Box display=\"flex\" mb=\"1\">\n                                    <Text flex=\"1\">{t('header.settings.preference.keepLastPath')}</Text>\n                                    <Switch\n                                        isChecked={keepLastPath}\n                                        onChange={({ target: { checked } }) => dispatch(setKeepLastPath(checked))}\n                                    />\n                                </Box>\n                            </Box>\n                        </Box>\n\n                        <Box width=\"100%\" mb=\"3\">\n                            <Text as=\"b\" fontSize=\"xl\">\n                                {t('header.settings.shortcuts.title')}\n                            </Text>\n                            <Box mt=\"3\">\n                                <Table>\n                                    <Thead>\n                                        <Tr>\n                                            <Th>{t('header.settings.shortcuts.keys')}</Th>\n                                            <Th>{t('header.settings.shortcuts.description')}</Th>\n                                        </Tr>\n                                    </Thead>\n                                    <Tbody>\n                                        <Tr>\n                                            <Td>\n                                                <Kbd>f</Kbd>\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.f')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <MdArrowUpward />\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.arrowUpward')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <MdArrowBack />\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.arrowBack')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <MdArrowForward />\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.arrowForward')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <MdArrowDownward />\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.arrowDownward')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <Kbd>i</Kbd>\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.i')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <Kbd>j</Kbd>\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.j')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <Kbd>k</Kbd>\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.k')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                <Kbd>l</Kbd>\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.l')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                {isMacClient ? <Kbd sx={macKeyStyle}>&#8679;</Kbd> : <Kbd>shift</Kbd>}\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.shift')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                {isMacClient ? <Kbd sx={macKeyStyle}>&#8997;</Kbd> : <Kbd>alt</Kbd>}\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.alt')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                {isMacClient ? <Kbd sx={macKeyStyle}>&#9003;</Kbd> : <Kbd>delete</Kbd>}\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.delete')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                {isMacClient ? <Kbd sx={macKeyStyle}>&#8984;</Kbd> : <Kbd>ctrl</Kbd>}\n                                                {' + '}\n                                                <Kbd>z</Kbd>\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.undo')}</Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>\n                                                {isMacClient ? (\n                                                    <>\n                                                        <Kbd sx={macKeyStyle}>&#8679;</Kbd>\n                                                        {' + '}\n                                                        <Kbd sx={macKeyStyle}>&#8984;</Kbd>\n                                                        {' + '}\n                                                        <Kbd>z</Kbd>\n                                                    </>\n                                                ) : (\n                                                    <>\n                                                        <Kbd>ctrl</Kbd> + <Kbd>y</Kbd>\n                                                    </>\n                                                )}\n                                            </Td>\n                                            <Td>{t('header.settings.shortcuts.redo')}</Td>\n                                        </Tr>\n                                    </Tbody>\n                                </Table>\n                            </Box>\n                        </Box>\n\n                        <Box width=\"100%\" mb=\"3\">\n                            <Text as=\"b\" fontSize=\"xl\">\n                                {t('header.settings.procedures.title')}\n                            </Text>\n                            <Box mt=\"3\">\n                                <Button\n                                    sx={procedureButtonStyle}\n                                    rightIcon={<MdReadMore />}\n                                    onClick={() => setIsTranslateNodesOpen(true)}\n                                >\n                                    {t('header.settings.procedures.translate.title')}\n                                </Button>\n                                <TranslateNodesModal\n                                    isOpen={isTranslateNodesOpen}\n                                    onClose={() => setIsTranslateNodesOpen(false)}\n                                />\n\n                                <Button\n                                    sx={procedureButtonStyle}\n                                    rightIcon={<MdReadMore />}\n                                    onClick={() => setIsScaleNodesOpen(true)}\n                                >\n                                    {t('header.settings.procedures.scale.title')}\n                                </Button>\n                                <ScaleNodesModal isOpen={isScaleNodesOpen} onClose={() => setIsScaleNodesOpen(false)} />\n\n                                <Button\n                                    sx={procedureButtonStyle}\n                                    rightIcon={<MdReadMore />}\n                                    onClick={() => setIsChangeTypeOpen(true)}\n                                >\n                                    <Box>\n                                        {t('header.settings.procedures.changeType.title')}\n                                        <Tooltip label={t('header.settings.pro')}>\n                                            <Badge\n                                                ml=\"1\"\n                                                color=\"gray.50\"\n                                                background=\"radial-gradient(circle, #3f5efb, #fc466b)\"\n                                            >\n                                                PRO\n                                            </Badge>\n                                        </Tooltip>\n                                    </Box>\n                                </Button>\n                                <ChangeTypeModal isOpen={isChangeTypeOpen} onClose={() => setIsChangeTypeOpen(false)} />\n\n                                <Button\n                                    sx={procedureButtonStyle}\n                                    rightIcon={<MdReadMore />}\n                                    onClick={() => setIsRemoveLinesWithSingleColorOpen(true)}\n                                >\n                                    {t('header.settings.procedures.removeLines.title')}\n                                </Button>\n                                <RemoveLinesWithSingleColorModal\n                                    isOpen={isRemoveLinesWithSingleColorOpen}\n                                    onClose={() => setIsRemoveLinesWithSingleColorOpen(false)}\n                                />\n                            </Box>\n                        </Box>\n\n                        <Box width=\"100%\" mb=\"3\">\n                            <Text as=\"b\" fontSize=\"xl\">\n                                {t('header.settings.telemetry.title')}\n                            </Text>\n                            <Box mt=\"3\">\n                                <Box display=\"flex\" mb=\"1\">\n                                    <Text flex=\"1\">{t('header.settings.telemetry.essential')}</Text>\n                                    <Switch isChecked={isAllowAnalytics} isDisabled />\n                                </Box>\n                                <Text fontSize=\"sm\" lineHeight=\"100%\" color=\"gray.600\">\n                                    {t('header.settings.telemetry.essentialInfo')}\n                                </Text>\n                                <Link\n                                    color={linkColour}\n                                    fontSize=\"sm\"\n                                    lineHeight=\"100%\"\n                                    href=\"https://support.google.com/analytics/answer/11593727\"\n                                    isExternal={true}\n                                >\n                                    {t('header.settings.telemetry.essentialLink')} <Icon as={MdOpenInNew} />\n                                </Link>\n\n                                <Box display=\"flex\" mb=\"1\">\n                                    <Text flex=\"1\">{t('header.settings.telemetry.additional')}</Text>\n                                    <Switch\n                                        isChecked={isAllowAppTelemetry}\n                                        onChange={({ target: { checked } }) => handleAdditionalTelemetry(checked)}\n                                    />\n                                </Box>\n                                <Text fontSize=\"sm\" lineHeight=\"100%\" color=\"gray.600\">\n                                    {t('header.settings.telemetry.additionalInfo')}\n                                </Text>\n                            </Box>\n                        </Box>\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default SettingsModal;\n","import React from 'react';\nimport { Heading, IconButton, Menu, MenuButton, MenuItem, MenuList, Wrap, WrapItem } from '@chakra-ui/react';\nimport { MdHelp, MdRedo, MdSettings, MdTranslate, MdUndo } from 'react-icons/md';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { RmgEnvBadge, RmgWindowHeader, useReadyConfig } from '@railmapgen/rmg-components';\nimport { LANGUAGE_NAMES, SUPPORTED_LANGUAGES, SupportedLanguageCode } from '@railmapgen/rmg-translate';\nimport rmgRuntime, { RmgEnv } from '@railmapgen/rmg-runtime';\nimport { Events } from '../../constants/constants';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { redoAction, undoAction } from '../../redux/param/param-slice';\nimport OpenActions from './open-actions';\nimport DownloadActions from './download-actions';\nimport AboutModal from './about-modal';\nimport { ZoomPopover } from './zoom-popover';\nimport SettingsModal from './settings-modal';\n\nexport default function WindowHeader() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const {\n        telemetry: { app: isAllowAppTelemetry },\n    } = useRootSelector(state => state.app);\n    const { past, future } = useRootSelector(state => state.param);\n\n    const [isSettingsModalOpen, setIsSettingsModalOpen] = React.useState(false);\n    const [isAboutModalOpen, setIsAboutModalOpen] = React.useState(false);\n\n    const environment = useReadyConfig(rmgRuntime.getEnv);\n    const appVersion = useReadyConfig(rmgRuntime.getAppVersion);\n\n    React.useEffect(() => {\n        // environment !== RmgEnv.DEV -> wait after rmgRuntime.ready() in useReadyConfig\n        if (isAllowAppTelemetry && environment !== RmgEnv.DEV)\n            rmgRuntime.event(Events.APP_LOAD, { isStandaloneWindow: rmgRuntime.isStandaloneWindow() });\n    }, [environment]);\n\n    const handleChangeLanguage = async (language: SupportedLanguageCode) => {\n        rmgRuntime.setLanguage(language);\n        rmgRuntime.getI18nInstance().changeLanguage(language);\n    };\n\n    return (\n        <RmgWindowHeader>\n            <Heading as=\"h4\" size=\"md\" whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">\n                {t('header.about.rmp')}\n            </Heading>\n            <RmgEnvBadge\n                environment={environment}\n                version={appVersion}\n                popoverHeader={\n                    environment === RmgEnv.PRD ? undefined : (\n                        <Trans i18nKey=\"header.popoverHeader\" environment={environment}>\n                            You&apos;re on {{ environment }} environment!\n                        </Trans>\n                    )\n                }\n                popoverBody={\n                    environment === RmgEnv.PRD ? undefined : (\n                        <Trans i18nKey=\"header.popoverBody\">\n                            This is a testing environment where we test the latest beta RMP.\n                        </Trans>\n                    )\n                }\n            />\n\n            <Wrap ml=\"auto\">\n                <WrapItem>\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label=\"Undo\"\n                        icon={<MdUndo />}\n                        disabled={past.length === 0}\n                        onClick={() => dispatch(undoAction())}\n                    />\n                </WrapItem>\n                <WrapItem>\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label=\"Redo\"\n                        icon={<MdRedo />}\n                        disabled={future.length === 0}\n                        onClick={() => dispatch(redoAction())}\n                    />\n                </WrapItem>\n\n                <WrapItem>\n                    <ZoomPopover />\n                </WrapItem>\n\n                <WrapItem>\n                    <OpenActions />\n                </WrapItem>\n\n                <WrapItem>\n                    <DownloadActions />\n                </WrapItem>\n\n                {rmgRuntime.isStandaloneWindow() && (\n                    <WrapItem>\n                        <Menu>\n                            <MenuButton as={IconButton} icon={<MdTranslate />} variant=\"ghost\" size=\"sm\" />\n                            <MenuList>\n                                {SUPPORTED_LANGUAGES.map(lang => (\n                                    <MenuItem key={lang} onClick={() => handleChangeLanguage(lang)}>\n                                        {LANGUAGE_NAMES[lang][lang]}\n                                    </MenuItem>\n                                ))}\n                            </MenuList>\n                        </Menu>\n                    </WrapItem>\n                )}\n\n                <WrapItem>\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label=\"Settings\"\n                        icon={<MdSettings />}\n                        onClick={() => setIsSettingsModalOpen(true)}\n                    />\n                </WrapItem>\n\n                <WrapItem>\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label=\"Help\"\n                        icon={<MdHelp />}\n                        onClick={() => setIsAboutModalOpen(true)}\n                    />\n                </WrapItem>\n            </Wrap>\n\n            <SettingsModal isOpen={isSettingsModalOpen} onClose={() => setIsSettingsModalOpen(false)} />\n            <AboutModal isOpen={isAboutModalOpen} onClose={() => setIsAboutModalOpen(false)} />\n        </RmgWindowHeader>\n    );\n}\n","import { Alert, AlertIcon, AlertStatus, CloseButton, Link } from '@chakra-ui/react';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { closeGlobalAlert } from '../../redux/runtime/runtime-slice';\n\nexport default function GlobalAlerts() {\n    const dispatch = useRootDispatch();\n\n    const globalAlerts = useRootSelector(state => state.runtime.globalAlerts);\n\n    const handleAppOpen = (linkedApp: string) => {\n        if (rmgRuntime.isStandaloneWindow()) {\n            window.open(`/${linkedApp}`, '_blank');\n        } else {\n            rmgRuntime.openApp(linkedApp);\n        }\n    };\n\n    return (\n        <>\n            {Object.entries(globalAlerts).map(([status, { message, url, linkedApp }]) => (\n                <Alert\n                    key={status}\n                    status={status as AlertStatus}\n                    variant=\"solid\"\n                    size=\"xs\"\n                    pl={3}\n                    pr={1}\n                    py={0}\n                    zIndex=\"5\"\n                >\n                    <AlertIcon />\n                    {linkedApp ? (\n                        <Link onClick={() => handleAppOpen(linkedApp)}>{message}</Link>\n                    ) : url ? (\n                        <Link href={url} target=\"_blank\">\n                            {message}\n                        </Link>\n                    ) : (\n                        message\n                    )}\n                    <CloseButton ml=\"auto\" onClick={() => dispatch(closeGlobalAlert(status as AlertStatus))} />\n                </Alert>\n            ))}\n        </>\n    );\n}\n","import WindowHeader from './window-header';\nimport GlobalAlerts from './global-alerts';\n\n// A simple wrapper that load the following two into a single chunk.\nexport default function PageHeader() {\n    return (\n        <>\n            <WindowHeader />\n            <GlobalAlerts />\n        </>\n    );\n}\n","import { MultiDirectedGraph } from 'graphology';\nimport { EdgeAttributes, GraphAttributes, NodeAttributes, Theme } from '../constants/constants';\nimport { ExternalStationAttributes, StationType } from '../constants/stations';\nimport { LinePathType, LineStyleType } from '../constants/lines';\nimport stations from '../components/svgs/stations/stations';\nimport { linePaths, lineStyles } from '../components/svgs/lines/lines';\nimport { SingleColorAttributes } from '../components/svgs/lines/styles/single-color';\nimport { ShmetroBasic2020StationAttributes } from '../components/svgs/stations/shmetro-basic-2020';\n\nconst StationsWithoutNameOffset = [StationType.ShmetroBasic2020];\n\n/**\n * Change a station's type.\n * @param graph Graph.\n * @param selectedFirst Current station's id.\n * @param newType New station's type.\n */\nexport const changeStationType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newStnType: StationType\n) => {\n    const currentStnType = graph.getNodeAttribute(selectedFirst, 'type') as StationType;\n    const names = graph.getNodeAttribute(selectedFirst, currentStnType)!.names;\n    const newAttrs = { ...stations[newStnType].defaultAttrs, names };\n    if (\n        !Object.values(StationsWithoutNameOffset).includes(currentStnType) ||\n        !Object.values(StationsWithoutNameOffset).includes(newStnType)\n    ) {\n        (\n            newAttrs as Exclude<\n                ExternalStationAttributes[keyof ExternalStationAttributes],\n                ShmetroBasic2020StationAttributes | undefined\n            >\n        ).nameOffsetX = graph.getNodeAttribute(\n            selectedFirst,\n            currentStnType as Exclude<StationType, StationType.ShmetroBasic2020>\n        )!.nameOffsetX;\n        (\n            newAttrs as Exclude<\n                ExternalStationAttributes[keyof ExternalStationAttributes],\n                ShmetroBasic2020StationAttributes | undefined\n            >\n        ).nameOffsetY = graph.getNodeAttribute(\n            selectedFirst,\n            currentStnType as Exclude<StationType, StationType.ShmetroBasic2020>\n        )!.nameOffsetY;\n    }\n    graph.removeNodeAttribute(selectedFirst, currentStnType);\n    graph.mergeNodeAttributes(selectedFirst, { type: newStnType, [newStnType]: newAttrs });\n};\n\n/**\n * Change all the stations' type of currentStnType to newStnType in batch.\n * @param graph Graph.\n * @param currentStnType Current station's type.\n * @param newStnType New station's type.\n * @returns Nothing.\n */\nexport const changeStationsTypeInBatch = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    currentStnType: StationType,\n    newStnType: StationType\n) =>\n    graph\n        .filterNodes((node, attr) => node.startsWith('stn') && attr.type === currentStnType)\n        .forEach(stnId => {\n            changeStationType(graph, stnId, newStnType);\n        });\n\n/**\n * Change a line's path type.\n * @param graph Graph.\n * @param selectedFirst Current line's id.\n * @param newType New line's path type.\n */\nexport const changeLinePathType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newLinePathType: LinePathType\n) => {\n    const currentLinePathType = graph.getEdgeAttribute(selectedFirst, 'type') as LinePathType;\n    graph.removeEdgeAttribute(selectedFirst, currentLinePathType);\n    const newAttrs = JSON.parse(JSON.stringify(linePaths[newLinePathType].defaultAttrs));\n    graph.mergeEdgeAttributes(selectedFirst, { type: newLinePathType, [newLinePathType]: newAttrs });\n};\n\n/**\n * Change a line's style type.\n * @param graph Graph.\n * @param selectedFirst Current line's id.\n * @param newType New line's style type.\n * @param theme A handy helper to override color to current theme.\n */\nexport const changeLineStyleType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newLineStyleType: LineStyleType,\n    theme?: Theme\n) => {\n    const currentLineStyleType = graph.getEdgeAttribute(selectedFirst, 'style') as LineStyleType;\n    graph.removeEdgeAttribute(selectedFirst, currentLineStyleType);\n    const newAttrs = JSON.parse(JSON.stringify(lineStyles[newLineStyleType].defaultAttrs));\n    if (newLineStyleType === LineStyleType.SingleColor && theme) (newAttrs as SingleColorAttributes).color = theme;\n    graph.mergeEdgeAttributes(selectedFirst, { style: newLineStyleType, [newLineStyleType]: newAttrs });\n    if (newLineStyleType === LineStyleType.River) graph.setEdgeAttribute(selectedFirst, 'zIndex', -5);\n    else graph.setEdgeAttribute(selectedFirst, 'zIndex', 0);\n};\n","import { MultiDirectedGraph } from 'graphology';\nimport { NodeAttributes, EdgeAttributes, GraphAttributes } from '../constants/constants';\n\nexport const getMousePosition = (e: React.MouseEvent) => {\n    const bbox = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - bbox.left;\n    const y = e.clientY - bbox.top;\n    // console.log(e.clientX, bbox.left, e.clientY, bbox.top, x, y);\n    return { x, y };\n};\n\nexport const roundToNearestN = (x: number, n: number) => Math.round(x / n) * n;\n\nexport const calculateCanvasSize = (graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>) => {\n    let [xMin, yMin, xMax, yMax] = [Number.MAX_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MIN_VALUE];\n\n    graph.forEachNode((node, attr) => {\n        xMin = Math.min(attr.x, xMin);\n        yMin = Math.min(attr.y, yMin);\n        xMax = Math.max(attr.x, xMax);\n        yMax = Math.max(attr.y, yMax);\n    });\n\n    xMin -= 150;\n    yMin -= 150;\n    xMax += 150;\n    yMax += 150;\n\n    return { xMin, yMin, xMax, yMax };\n};\n\nexport const isMacClient = navigator.platform.startsWith('Mac');\n"],"names":["styles","h","maxH","w","RmgParamAppClip","props","isOpen","onClose","onImport","useState","crypto","randomUUID","appClipId","frameUrl","URLSearchParams","parentComponent","rmgRuntime","parentId","useEffect","channel","BroadcastChannel","onmessage","ev","data","event","console","log","close","sx","src","loading","CHN","RmpGalleryAppClip","toast","useToast","t","useTranslation","dispatch","useRootDispatch","graph","React","window","refreshAndSave","setRefreshNodes","setRefreshEdges","saveGraph","current","export","handleOpenTemplate","rmpSave","JSON","upgrade","stringify","parse","version","save","clearSelected","clear","import","fetchAndApplyTemplate","id","Promise","allSettled","fetch","find","res","status","value","json","template","url","location","href","includes","history","replaceState","substring","indexOf","lastIndexOf","e","title","duration","isClosable","size","onClick","position","top","right","zIndex","icon","variant","OpenActions","fileInputRef","isGalleryModalOpen","setIsGalleryModalOpen","isRmgParamAppClipOpen","setIsRmgParamAppClipOpen","handleUpload","file","target","files","type","setGlobalAlert","message","error","readFileAsText","paramStr","as","IconButton","setSvgViewBoxZoom","setSvgViewBoxMin","x","y","ref","accept","hidden","onChange","click","ml","colorScheme","param","info_panel_type","line_num","stnList","stn_list","style","theme","stnIdMap","Object","fromEntries","keys","filter","map","nanoid","entries","forEach","stnInfo","nodes","filterNodes","node","attr","values","StationType","names","name","length","i","interchangeGroups","transfer","groups","interchangeLines","group","lines","flat","stations","defaultAttrs","color","lineCode","stationCode","num","interchangeInfos","line","addNode","visible","children","child","addDirectedEdgeWithKey","LinePathType","linePaths","LineStyleType","parseRmgParam","err","resolve","reader","FileReader","onloadend","result","readAsText","readBlobAsDataURL","blob","readAsDataURL","getBase64FontFace","svgEl","uniqueCharacters","Array","from","Set","querySelectorAll","el","innerHTML","join","replace","document","fonts","load","fontFaceList","cssRules","querySelector","sheet","reject","Error","cssFontFaceRules","rule","CSSFontFaceRule","distinctCssRules","reduce","acc","cur","font","matchedRule","cssStyle","getPropertyValue","family","unicodeRange","ruleStyle","matchedStyle","concat","all","cssRule","getAbsoluteUrl","fontResp","fontDataUri","cssText","ruleStyleSrc","navigator","userAgent","process","match","scrollBehavior","isExternal","MdOpenInNew","DownloadActions","isAllowProjectTelemetry","useRootSelector","state","app","telemetry","project","nodeExists","runtime","bgColor","useColorModeValue","format","setFormat","formatOptions","png","svg","scale","setScale","scaleOptions","v","isTransparent","setIsTransparent","fields","label","options","pngFields","isChecked","isDownloadModalOpen","setIsDownloadModalOpen","isTermsAndConditionsModalOpen","setIsTermsAndConditionsModalOpen","isAttachSelected","setIsAttachSelected","isTermsAndConditionsSelected","setIsTermsAndConditionsSelected","handleDownload","Events","numberOfNodes","order","numberOfEdges","calculateCanvasSize","xMin","yMin","xMax","yMax","width","height","elem","getElementById","cloneNode","hasNode","getNodeAttribute","MiscNodeType","removeChild","appendChild","generateRmpInfo","setAttribute","toString","className","styleSet","getComputedStyle","styleName","classList","remove","uris","s","createElement","textContent","prepend","alert","downloadAs","Date","valueOf","outerHTML","body","btoa","unescape","encodeURIComponent","canvas","canvasWidth","canvasHeight","ctx","getContext","fillStyle","fillRect","img","Image","onload","drawImage","toBlob","downloadBlobAs","stringifyParam","store","checked","open","disabled","filename","Blob","URL","createObjectURL","a","download","revokeObjectURL","info","createElementNS","logo","rmp","createTextNode","link","appVersion","paddingBottom","direction","boxSize","alignItems","justifyContent","fontSize","margin","mt","mb","my","cursor","mr","display","fontWeight","align","GithubIcon","SlackIcon","ZoomPopover","setIsOpen","svgViewBoxZoom","min","max","step","leftIcon","rightIcon","minW","onOpen","noLabel","TranslateNodesModal","setX","setY","val","Number","forEachNode","updateNodeAttribute","ScaleNodesModal","ChangeTypeModal","availableStationOptions","key","metadata","displayName","at","oldStnType","setOldStnType","newStnType","setNewStnType","disabledOptions","background","lineHeight","changeStationsTypeInBatch","RemoveLinesWithSingleColorModal","runtimeTheme","setTheme","isColourModalOpen","setIsColourModalOpen","defaultTheme","onUpdate","nextTheme","filterEdges","edge","source","sourceAttr","targetAttr","undirected","dropEdge","procedureButtonStyle","macKeyStyle","fontFamily","keepLastPath","linkColour","isTranslateNodesOpen","setIsTranslateNodesOpen","isScaleNodesOpen","setIsScaleNodesOpen","isChangeTypeOpen","setIsChangeTypeOpen","isRemoveLinesWithSingleColorOpen","setIsRemoveLinesWithSingleColorOpen","isAllowAnalytics","isAllowAppTelemetry","divider","borderColor","flex","setKeepLastPath","Tr","Th","Td","isMacClient","isDisabled","allowAppTelemetry","setTelemetryApp","WindowHeader","past","future","isSettingsModalOpen","setIsSettingsModalOpen","isAboutModalOpen","setIsAboutModalOpen","environment","useReadyConfig","RmgEnv","isStandaloneWindow","handleChangeLanguage","language","changeLanguage","whiteSpace","overflow","textOverflow","popoverHeader","undefined","i18nKey","popoverBody","undoAction","redoAction","SUPPORTED_LANGUAGES","lang","LANGUAGE_NAMES","GlobalAlerts","globalAlerts","linkedApp","pl","pr","py","handleAppOpen","closeGlobalAlert","PageHeader","StationsWithoutNameOffset","changeStationType","selectedFirst","currentStnType","newAttrs","nameOffsetX","nameOffsetY","removeNodeAttribute","mergeNodeAttributes","startsWith","stnId","changeLinePathType","newLinePathType","currentLinePathType","getEdgeAttribute","removeEdgeAttribute","mergeEdgeAttributes","changeLineStyleType","newLineStyleType","currentLineStyleType","lineStyles","setEdgeAttribute","getMousePosition","bbox","currentTarget","getBoundingClientRect","clientX","left","clientY","roundToNearestN","n","Math","round","MAX_VALUE","MIN_VALUE","platform"],"sourceRoot":""}