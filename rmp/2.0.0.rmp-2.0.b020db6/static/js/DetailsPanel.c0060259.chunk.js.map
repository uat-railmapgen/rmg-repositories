{"version":3,"file":"static/js/DetailsPanel.c0060259.chunk.js","mappings":"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","sources":["components/panels/details/station-type-section.tsx","components/panels/details/line-type-section.tsx","components/panels/details/info-section.tsx","components/panels/details/node-position-section.tsx","components/panels/details/line-extremities-section.tsx","components/panels/details/details.tsx","util/change-types.ts","../node_modules/@chakra-ui/layout/dist/chunk-B2MGPQRJ.mjs"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    AlertDialog,\n    AlertDialogOverlay,\n    AlertDialogContent,\n    AlertDialogHeader,\n    AlertDialogBody,\n    AlertDialogFooter,\n    Button,\n} from '@chakra-ui/react';\nimport { RmgLabel, RmgSelect } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { setRefresh } from '../../../redux/runtime/runtime-slice';\nimport { StationType } from '../../../constants/stations';\nimport stations from '../../svgs/stations/stations';\nimport { changeStationType } from '../../../util/change-types';\n\nexport default function StationTypeSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n\n    const { selected } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [isChangeTypeWarningOpen, setIsChangeTypeWarningOpen] = React.useState(false);\n    const cancelRef = React.useRef(null);\n    const [newType, setNewType] = React.useState<StationType | undefined>(undefined);\n\n    const currentStationType = graph.current.getNodeAttribute(selectedFirst, 'type') as StationType;\n    // type options for stations and others\n    const availableStationOptions = Object.fromEntries(\n        Object.entries(stations).map(([key, val]) => [key, t(val.metadata.displayName).toString()])\n    ) as { [k in StationType]: string };\n\n    const handleChangeStationType = () => {\n        if (newType) {\n            changeStationType(graph.current, selectedFirst!, newType);\n            hardRefresh();\n        }\n    };\n    const handleClose = (proceed: boolean) => {\n        if (proceed) handleChangeStationType();\n        setNewType(undefined);\n        setIsChangeTypeWarningOpen(false);\n    };\n\n    return (\n        <>\n            <RmgLabel label={t('panel.details.info.stationType')} minW=\"276\">\n                <RmgSelect\n                    options={availableStationOptions}\n                    disabledOptions={[currentStationType]}\n                    value={currentStationType}\n                    onChange={({ target: { value } }) => {\n                        setNewType(value as StationType);\n                        setIsChangeTypeWarningOpen(true);\n                    }}\n                />\n            </RmgLabel>\n\n            <AlertDialog\n                isOpen={isChangeTypeWarningOpen}\n                leastDestructiveRef={cancelRef}\n                onClose={() => handleClose(false)}\n            >\n                <AlertDialogOverlay>\n                    <AlertDialogContent>\n                        <AlertDialogHeader>{t('warning')}</AlertDialogHeader>\n                        <AlertDialogBody>{t('panel.details.changeStationTypeContent')}</AlertDialogBody>\n                        <AlertDialogFooter>\n                            <Button ref={cancelRef} onClick={() => handleClose(false)}>\n                                {t('cancel')}\n                            </Button>\n                            <Button ml=\"2\" colorScheme=\"red\" onClick={() => handleClose(true)}>\n                                {t('panel.details.changeType')}\n                            </Button>\n                        </AlertDialogFooter>\n                    </AlertDialogContent>\n                </AlertDialogOverlay>\n            </AlertDialog>\n        </>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    AlertDialog,\n    AlertDialogOverlay,\n    AlertDialogContent,\n    AlertDialogHeader,\n    AlertDialogBody,\n    AlertDialogFooter,\n    Button,\n} from '@chakra-ui/react';\nimport { RmgLabel, RmgSelect } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { setRefresh } from '../../../redux/runtime/runtime-slice';\nimport { linePaths, lineStyles } from '../../svgs/lines/lines';\nimport { changeLinePathType, changeLineStyleType } from '../../../util/change-types';\nimport { LinePathType, LineStyleType } from '../../../constants/lines';\n\nexport default function LineTypeSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n\n    const { selected, theme } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [isChangeTypeWarningOpen, setIsChangeTypeWarningOpen] = React.useState(false);\n    const cancelRef = React.useRef(null);\n\n    const [newLinePathType, setNewLinePathType] = React.useState<LinePathType | undefined>(undefined);\n    const currentLinePathType = graph.current.getEdgeAttribute(selectedFirst, 'type');\n    const availableLinePathOptions = Object.fromEntries(\n        Object.entries(linePaths).map(([key, val]) => [key, t(val.metadata.displayName).toString()])\n    ) as { [k in LinePathType]: string };\n\n    const [newLineStyleType, setNewLineStyleType] = React.useState<LineStyleType | undefined>(undefined);\n    const currentLineStyleType = graph.current.getEdgeAttribute(selectedFirst, 'style');\n    const availableLineStyleOptions = Object.fromEntries(\n        Object.entries(lineStyles).map(([key, val]) => [key, t(val.metadata.displayName).toString()])\n    ) as { [k in LineStyleType]: string };\n\n    const handleChangeLinePathType = () => {\n        if (newLinePathType) {\n            changeLinePathType(graph.current, selectedFirst!, newLinePathType);\n            hardRefresh();\n        }\n    };\n    const handleChangeLineStyleType = () => {\n        if (newLineStyleType) {\n            changeLineStyleType(graph.current, selectedFirst!, newLineStyleType, theme);\n            hardRefresh();\n        }\n    };\n    const handleClose = (proceed: boolean) => {\n        if (proceed) {\n            if (newLinePathType) {\n                handleChangeLinePathType();\n                setNewLinePathType(undefined);\n            } else if (newLineStyleType) {\n                handleChangeLineStyleType();\n                setNewLineStyleType(undefined);\n            }\n        }\n        setIsChangeTypeWarningOpen(false);\n    };\n\n    return (\n        <>\n            <RmgLabel label={t('panel.details.info.linePathType')} minW=\"276\">\n                <RmgSelect\n                    options={availableLinePathOptions}\n                    disabledOptions={[currentLinePathType]}\n                    value={currentLinePathType}\n                    onChange={({ target: { value } }) => {\n                        setNewLinePathType(value as LinePathType);\n                        setIsChangeTypeWarningOpen(true);\n                    }}\n                />\n            </RmgLabel>\n            <RmgLabel label={t('panel.details.info.lineStyleType')} minW=\"276\">\n                <RmgSelect\n                    options={availableLineStyleOptions}\n                    disabledOptions={[currentLineStyleType]}\n                    value={currentLineStyleType}\n                    onChange={({ target: { value } }) => {\n                        setNewLineStyleType(value as LineStyleType);\n                        setIsChangeTypeWarningOpen(true);\n                    }}\n                />\n            </RmgLabel>\n\n            <AlertDialog\n                isOpen={isChangeTypeWarningOpen}\n                leastDestructiveRef={cancelRef}\n                onClose={() => handleClose(false)}\n            >\n                <AlertDialogOverlay>\n                    <AlertDialogContent>\n                        <AlertDialogHeader>{t('warning')}</AlertDialogHeader>\n                        <AlertDialogBody>{t('panel.details.changeLineTypeContent')}</AlertDialogBody>\n                        <AlertDialogFooter>\n                            <Button ref={cancelRef} onClick={() => handleClose(false)}>\n                                {t('cancel')}\n                            </Button>\n                            <Button ml=\"2\" colorScheme=\"red\" onClick={() => handleClose(true)}>\n                                {t('panel.details.changeType')}\n                            </Button>\n                        </AlertDialogFooter>\n                    </AlertDialogContent>\n                </AlertDialogOverlay>\n            </AlertDialog>\n        </>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootSelector } from '../../../redux';\nimport StationTypeSection from './station-type-section';\nimport LineTypeSection from './line-type-section';\n\nexport default function InfoSection() {\n    const { t } = useTranslation();\n\n    const { selected } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('panel.details.info.id'),\n            value: selected.length > 0 ? selected.join(', ') : 'undefined',\n            minW: 276,\n        },\n    ];\n\n    // deal with undefined and multiple selection\n    if (selected.length === 0) {\n        // do nothing as the details panel will be closed\n    } else if (selected.length > 1) {\n        fields.push({\n            type: 'input',\n            label: t('panel.details.info.type'),\n            value: 'multiple selection',\n            minW: 276,\n        });\n    }\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('panel.details.info.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n\n            {selected.length === 1 && selectedFirst!.startsWith('stn') && graph.current.hasNode(selectedFirst) && (\n                <StationTypeSection />\n            )}\n\n            {selected.length === 1 && selectedFirst!.startsWith('line') && graph.current.hasEdge(selectedFirst) && (\n                <LineTypeSection />\n            )}\n        </Box>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { setRefresh } from '../../../redux/runtime/runtime-slice';\n\nexport default function NodePositionSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n    const {\n        selected,\n        refresh: { all: refreshAll },\n    } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [pos, setPos] = React.useState({ x: 0, y: 0 });\n    React.useEffect(() => {\n        if (selectedFirst?.startsWith('stn') || selectedFirst?.startsWith('misc_node_')) {\n            const x = graph.current.getNodeAttribute(selectedFirst, 'x');\n            const y = graph.current.getNodeAttribute(selectedFirst, 'y');\n            setPos({ x, y });\n        }\n    }, [refreshAll, selected]);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('panel.details.nodePosition.pos.x'),\n            value: pos.x.toString(),\n            validator: val => !Number.isNaN(val),\n            onChange: val => {\n                graph.current.mergeNodeAttributes(selectedFirst, { x: Number(val) });\n                hardRefresh();\n            },\n        },\n        {\n            type: 'input',\n            label: t('panel.details.nodePosition.pos.y'),\n            value: pos.y.toString(),\n            validator: val => !Number.isNaN(val),\n            onChange: val => {\n                graph.current.mergeNodeAttributes(selectedFirst, { y: Number(val) });\n                hardRefresh();\n            },\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('panel.details.nodePosition.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootSelector } from '../../../redux';\nimport { ExternalStationAttributes } from '../../../constants/stations';\n\nexport default function LineExtremitiesSection() {\n    const { t } = useTranslation();\n    const { selected } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [source, setSource] = React.useState('undefined');\n    const [target, setTarget] = React.useState('undefined');\n    const [sourceName, setSourceName] = React.useState('undefined');\n    const [targetName, setTargetName] = React.useState('undefined');\n    React.useEffect(() => {\n        if (selectedFirst?.startsWith('line')) {\n            const [s, t] = graph.current.extremities(selectedFirst);\n            setSource(s);\n            setTarget(t);\n            if (s.startsWith('stn')) {\n                const type = graph.current.getNodeAttribute(s, 'type');\n                setSourceName(\n                    (\n                        graph.current.getNodeAttribute(\n                            s,\n                            type\n                        ) as ExternalStationAttributes[keyof ExternalStationAttributes]\n                    )?.names.at(0) ?? 'undefined'\n                );\n            }\n            if (t.startsWith('stn')) {\n                const type = graph.current.getNodeAttribute(t, 'type');\n                setTargetName(\n                    (\n                        graph.current.getNodeAttribute(\n                            t,\n                            type\n                        ) as ExternalStationAttributes[keyof ExternalStationAttributes]\n                    )?.names.at(0) ?? 'undefined'\n                );\n            }\n        }\n    }, [selected]);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('panel.details.lineExtremities.source'),\n            value: source,\n        },\n        {\n            type: 'input',\n            label: t('panel.details.lineExtremities.target'),\n            value: target,\n        },\n        {\n            type: 'input',\n            label: t('panel.details.lineExtremities.sourceName'),\n            value: sourceName,\n        },\n        {\n            type: 'input',\n            label: t('panel.details.lineExtremities.targetName'),\n            value: targetName,\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('panel.details.lineExtremities.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Button, Heading, HStack } from '@chakra-ui/react';\nimport { nanoid } from 'nanoid';\nimport {\n    RmgFields,\n    RmgFieldsField,\n    RmgSidePanel,\n    RmgSidePanelHeader,\n    RmgSidePanelBody,\n    RmgSidePanelFooter,\n} from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { clearSelected, setGlobalAlert, setRefresh, setRefreshReconcile } from '../../../redux/runtime/runtime-slice';\nimport { NodeAttributes } from '../../../constants/constants';\nimport stations from '../../svgs/stations/stations';\nimport miscNodes from '../../svgs/nodes/misc-nodes';\nimport { linePaths, lineStyles } from '../../svgs/lines/lines';\nimport InfoSection from './info-section';\nimport NodePositionSection from './node-position-section';\nimport LineExtremitiesSection from './line-extremities-section';\n\nconst nodes = { ...stations, ...miscNodes };\n\nconst DetailsPanel = () => {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n    const { selected } = useRootSelector(state => state.runtime);\n    const graph = React.useRef(window.graph);\n\n    const handleClose = () => dispatch(clearSelected());\n    const handleDuplicate = (selectedFirst: string) => {\n        const allAttr = JSON.parse(JSON.stringify(graph.current.getNodeAttributes(selectedFirst))) as NodeAttributes;\n        allAttr.x += 50;\n        allAttr.y += 50;\n        const id = selectedFirst.startsWith('stn') ? `stn_${nanoid(10)}` : `misc_node_${nanoid(10)}`;\n        graph.current.addNode(id, allAttr);\n        hardRefresh();\n    };\n    const handleRemove = (selected: string[]) => {\n        dispatch(clearSelected());\n        selected.forEach(s => {\n            if (graph.current.hasNode(s)) graph.current.dropNode(s);\n            else if (graph.current.hasEdge(s)) graph.current.dropEdge(s);\n        });\n        hardRefresh();\n    };\n    // A helper method to remove all lines with the same color\n    // const handleRemoveEntireLine = (selectedFirst: string) => {\n    //     dispatch(clearSelected());\n    //     const theme = graph.current.getEdgeAttribute(selectedFirst, 'color');\n    //     const lines = graph.current.filterEdges((edge, attr, source, target, sourceAttr, targetAttr, undirected) =>\n    //         attr.color.every((v, i) => v === theme[i])\n    //     );\n    //     lines.forEach(line => {\n    //         graph.current.dropEdge(line);\n    //     });\n    //     hardRefresh();\n    // };\n\n    // hide reconcile for now\n    const [reconcileId, setReconcileId] = React.useState('');\n    React.useEffect(() => {\n        const selectedFirst = selected.at(0);\n        if (graph.current.hasEdge(selectedFirst))\n            setReconcileId(graph.current.getEdgeAttribute(selectedFirst, 'reconcileId') ?? 'undefined');\n    }, [selected]);\n\n    const fields: RmgFieldsField[] = [];\n    const selectedFirst = selected.at(0);\n\n    if (selected.length === 1 && graph.current.hasNode(selectedFirst)) {\n        const type = graph.current.getNodeAttribute(selectedFirst, 'type');\n        const attrs = graph.current.getNodeAttribute(selectedFirst, type);\n        fields.push(\n            ...nodes[type].fields\n                // TODO: filter will complain the type\n                // @ts-expect-error\n                .filter(field => field.type !== 'custom')\n                .map(\n                    // @ts-expect-error\n                    field =>\n                        ({\n                            type: field.type,\n                            label: t(field.label),\n                            value: field.value?.(attrs),\n                            isChecked: field.isChecked?.(attrs),\n                            options: field.options,\n                            disabledOptions: field.disabledOptions && field.disabledOptions(attrs),\n                            validator: field.validator,\n                            oneLine: field.oneLine,\n                            // TODO: val could be string | number | boolean or others in different types.\n                            onChange: (val: any) => {\n                                let updatedAttrs: NodeAttributes;\n                                try {\n                                    updatedAttrs = field.onChange(val, attrs);\n                                } catch (error) {\n                                    dispatch(\n                                        setGlobalAlert({\n                                            status: 'error',\n                                            message: t(`err-code.${error as string}`),\n                                        })\n                                    );\n                                    return;\n                                }\n\n                                graph.current.mergeNodeAttributes(selectedFirst, {\n                                    [type]: updatedAttrs,\n                                });\n                                hardRefresh();\n                            },\n                        } as RmgFieldsField)\n                ),\n            // TODO: filter will complain the type\n            // @ts-expect-error\n            ...nodes[type].fields.filter(field => field.type === 'custom')\n        );\n    }\n\n    if (selected.length === 1 && graph.current.hasEdge(selectedFirst)) {\n        // fields.push({\n        //     type: 'input',\n        //     label: t('panel.details.line.reconcileId'),\n        //     value: reconcileId,\n        //     onChange: val => {\n        //         setReconcileId(val);\n        //         graph.current.mergeEdgeAttributes(selectedFirst, { reconcileId: val });\n        //         dispatch(setRefreshReconcile());\n        //         dispatch(saveGraph(graph.current.export()));\n        //     },\n        // });\n        const type = graph.current.getEdgeAttribute(selectedFirst, 'type');\n        const attrs = graph.current.getEdgeAttribute(selectedFirst, type);\n        fields.push(\n            ...linePaths[type].fields.map(\n                field =>\n                    ({\n                        // TODO: fix this\n                        type: field.type,\n                        label: t(field.label),\n                        // @ts-ignore-error\n                        value: field.value(attrs),\n                        // @ts-ignore-error\n                        options: field.options,\n                        // @ts-ignore-error\n                        disabledOptions: field.disabledOptions && field.disabledOptions(attrs),\n                        // @ts-ignore-error\n                        validator: field.validator,\n                        onChange: (val: string | number) => {\n                            graph.current.mergeEdgeAttributes(selectedFirst, {\n                                // @ts-ignore-error\n                                [type]: field.onChange(val, attrs),\n                            });\n                            // console.log(graph.current.getEdgeAttributes(selectedFirst));\n                            hardRefresh();\n                        },\n                    } as RmgFieldsField)\n            )\n        );\n        const style = graph.current.getEdgeAttribute(selectedFirst, 'style');\n        // TODO: filter will complain the type\n        // @ts-expect-error\n        fields.push(...lineStyles[style].fields.filter(field => field.type === 'custom'));\n    }\n\n    return (\n        <RmgSidePanel isOpen={selected.length > 0} width={300} header=\"Dummy header\" alwaysOverlay>\n            <RmgSidePanelHeader onClose={handleClose}>{t('panel.details.header')}</RmgSidePanelHeader>\n            <RmgSidePanelBody>\n                <InfoSection />\n\n                {selected.length === 1 && graph.current.hasNode(selectedFirst) && <NodePositionSection />}\n\n                {selected.length === 1 && graph.current.hasEdge(selectedFirst) && <LineExtremitiesSection />}\n\n                {selected.length === 1 && (\n                    <Box p={1}>\n                        <Heading as=\"h5\" size=\"sm\">\n                            {t('panel.details.specificAttrsTitle')}\n                        </Heading>\n\n                        <RmgFields fields={fields} minW={276} />\n                    </Box>\n                )}\n            </RmgSidePanelBody>\n            <RmgSidePanelFooter>\n                <HStack>\n                    {selected.length === 1 && graph.current.hasNode(selected.at(0)) && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => handleDuplicate(selected.at(0)!)}>\n                            {t('panel.details.footer.duplicate')}\n                        </Button>\n                    )}\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleRemove(selected)}>\n                        {t('panel.details.footer.remove')}\n                    </Button>\n                    {/* {selected.length === 1 && selectedFirst?.startsWith('line-') && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => handleRemoveEntireLine(selected.at(0)!)}>\n                            {t('panel.details.footer.removeEntireLine')}\n                        </Button>\n                    )} */}\n                </HStack>\n            </RmgSidePanelFooter>\n        </RmgSidePanel>\n    );\n};\n\nexport default DetailsPanel;\n","import { MultiDirectedGraph } from 'graphology';\nimport { EdgeAttributes, GraphAttributes, NodeAttributes, Theme } from '../constants/constants';\nimport { StationType } from '../constants/stations';\nimport { LinePathType, LineStyleType } from '../constants/lines';\nimport stations from '../components/svgs/stations/stations';\nimport { linePaths, lineStyles } from '../components/svgs/lines/lines';\nimport { SingleColorAttributes } from '../components/svgs/lines/styles/single-color';\n\n/**\n * Change a station's type.\n * @param graph Graph.\n * @param selectedFirst Current station's id.\n * @param newType New station's type.\n */\nexport const changeStationType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newStnType: StationType\n) => {\n    const currentStnType = graph.getNodeAttribute(selectedFirst, 'type') as StationType;\n    const names = graph.getNodeAttribute(selectedFirst, currentStnType)!.names;\n    graph.removeNodeAttribute(selectedFirst, currentStnType);\n    const newAttrs = { ...stations[newStnType].defaultAttrs, names };\n    graph.mergeNodeAttributes(selectedFirst, { type: newStnType, [newStnType]: newAttrs });\n};\n\n/**\n * Change all the stations' type of currentStnType to newStnType in batch.\n * @param graph Graph.\n * @param currentStnType Current station's type.\n * @param newStnType New station's type.\n * @returns Nothing.\n */\nexport const changeStationsTypeInBatch = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    currentStnType: StationType,\n    newStnType: StationType\n) =>\n    graph\n        .filterNodes((node, attr) => node.startsWith('stn') && attr.type === currentStnType)\n        .forEach(stnId => {\n            changeStationType(graph, stnId, newStnType);\n        });\n\n/**\n * Change a line's path type.\n * @param graph Graph.\n * @param selectedFirst Current line's id.\n * @param newType New line's path type.\n */\nexport const changeLinePathType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newLinePathType: LinePathType\n) => {\n    const currentLinePathType = graph.getEdgeAttribute(selectedFirst, 'type') as LinePathType;\n    graph.removeEdgeAttribute(selectedFirst, currentLinePathType);\n    const newAttrs = JSON.parse(JSON.stringify(linePaths[newLinePathType].defaultAttrs));\n    graph.mergeEdgeAttributes(selectedFirst, { type: newLinePathType, [newLinePathType]: newAttrs });\n};\n\n/**\n * Change a line's style type.\n * @param graph Graph.\n * @param selectedFirst Current line's id.\n * @param newType New line's style type.\n * @param theme A handy helper to override color to current theme.\n */\nexport const changeLineStyleType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newLineStyleType: LineStyleType,\n    theme?: Theme\n) => {\n    const currentLineStyleType = graph.getEdgeAttribute(selectedFirst, 'style') as LineStyleType;\n    graph.removeEdgeAttribute(selectedFirst, currentLineStyleType);\n    const newAttrs = JSON.parse(JSON.stringify(lineStyles[newLineStyleType].defaultAttrs));\n    if (newLineStyleType === LineStyleType.SingleColor && theme) (newAttrs as SingleColorAttributes).color = theme;\n    graph.mergeEdgeAttributes(selectedFirst, { style: newLineStyleType, [newLineStyleType]: newAttrs });\n};\n","// src/heading.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = forwardRef(function Heading2(props, ref) {\n  const styles = useStyleConfig(\"Heading\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.h2,\n    {\n      ref,\n      className: cx(\"chakra-heading\", props.className),\n      ...rest,\n      __css: styles\n    }\n  );\n});\nHeading.displayName = \"Heading\";\n\nexport {\n  Heading\n};\n"],"names":["StationTypeSection","t","useTranslation","dispatch","useRootDispatch","hardRefresh","React","setRefresh","saveGraph","graph","current","export","selectedFirst","useRootSelector","state","runtime","selected","at","window","isChangeTypeWarningOpen","setIsChangeTypeWarningOpen","cancelRef","undefined","newType","setNewType","currentStationType","getNodeAttribute","availableStationOptions","Object","fromEntries","entries","stations","map","key","val","metadata","displayName","toString","handleClose","proceed","changeStationType","label","minW","options","disabledOptions","value","onChange","target","isOpen","leastDestructiveRef","onClose","ref","onClick","ml","colorScheme","LineTypeSection","theme","newLinePathType","setNewLinePathType","currentLinePathType","getEdgeAttribute","availableLinePathOptions","linePaths","newLineStyleType","setNewLineStyleType","currentLineStyleType","availableLineStyleOptions","lineStyles","changeLinePathType","changeLineStyleType","InfoSection","fields","type","length","join","push","p","as","size","startsWith","hasNode","hasEdge","NodePositionSection","refreshAll","refresh","all","x","y","pos","setPos","validator","Number","isNaN","mergeNodeAttributes","LineExtremitiesSection","source","setSource","setTarget","sourceName","setSourceName","targetName","setTargetName","extremities","s","names","nodes","miscNodes","setReconcileId","attrs","filter","field","isChecked","oneLine","updatedAttrs","error","setGlobalAlert","status","message","mergeEdgeAttributes","style","width","header","alwaysOverlay","clearSelected","variant","allAttr","JSON","parse","stringify","getNodeAttributes","id","nanoid","addNode","handleDuplicate","forEach","dropNode","dropEdge","handleRemove","newStnType","currentStnType","removeNodeAttribute","newAttrs","defaultAttrs","changeStationsTypeInBatch","filterNodes","node","attr","stnId","removeEdgeAttribute","LineStyleType","color","Heading","forwardRef","props","styles","useStyleConfig","omitThemingProps","rest","className","jsx","chakra","cx","__css"],"sourceRoot":""}