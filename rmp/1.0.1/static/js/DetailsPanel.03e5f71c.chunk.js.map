{"version":3,"file":"static/js/DetailsPanel.03e5f71c.chunk.js","mappings":"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","sources":["components/panels/details/info-section.tsx","components/panels/details/node-position-section.tsx","components/panels/details/details.tsx","../node_modules/@chakra-ui/layout/dist/chunk-B2MGPQRJ.mjs","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootSelector } from '../../../redux';\n\nexport default function InfoSection() {\n    const { t } = useTranslation();\n    const { selected } = useRootSelector(state => state.runtime);\n    const graph = React.useRef(window.graph);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('panel.details.info.id'),\n            value: selected.length > 0 ? selected.join(', ') : 'undefined',\n            minW: 276,\n        },\n        {\n            type: 'input',\n            label: t('panel.details.info.type'),\n            value:\n                selected.length === 1\n                    ? graph.current.hasNode(selected.at(0))\n                        ? graph.current.getNodeAttribute(selected.at(0), 'type')\n                        : graph.current.getEdgeAttribute(selected.at(0), 'type')\n                    : selected.length > 1\n                    ? 'multiple nodes'\n                    : 'undefined',\n            minW: 276,\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('panel.details.info.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/app/app-slice';\nimport { setRefresh } from '../../../redux/runtime/runtime-slice';\n\nexport default function NodePositionSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n    const {\n        selected,\n        refresh: { all: refreshAll },\n    } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [pos, setPos] = React.useState({ x: 0, y: 0 });\n    React.useEffect(() => {\n        const selectedFirst = selected.at(0);\n        if (selectedFirst?.startsWith('stn') || selectedFirst?.startsWith('misc_node_')) {\n            const x = graph.current.getNodeAttribute(selectedFirst, 'x');\n            const y = graph.current.getNodeAttribute(selectedFirst, 'y');\n            setPos({ x, y });\n        }\n    }, [refreshAll, selected]);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('panel.details.nodePosition.pos.x'),\n            value: pos.x.toString(),\n            validator: val => !Number.isNaN(val),\n            onChange: val => {\n                graph.current.mergeNodeAttributes(selectedFirst, { x: Number(val) });\n                hardRefresh();\n            },\n        },\n        {\n            type: 'input',\n            label: t('panel.details.nodePosition.pos.y'),\n            value: pos.y.toString(),\n            validator: val => !Number.isNaN(val),\n            onChange: val => {\n                graph.current.mergeNodeAttributes(selectedFirst, { y: Number(val) });\n                hardRefresh();\n            },\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('panel.details.nodePosition.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Button, Heading, HStack } from '@chakra-ui/react';\nimport { nanoid } from 'nanoid';\nimport {\n    RmgFields,\n    RmgFieldsField,\n    RmgSidePanel,\n    RmgSidePanelHeader,\n    RmgSidePanelBody,\n    RmgSidePanelFooter,\n} from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/app/app-slice';\nimport { clearSelected, setGlobalAlert, setRefresh, setRefreshReconcile } from '../../../redux/runtime/runtime-slice';\nimport ThemeButton from '../theme-button';\nimport ColourModal from '../colour-modal/colour-modal';\nimport { NodeAttributes, Theme } from '../../../constants/constants';\nimport stations from '../../svgs/stations/stations';\nimport miscNodes from '../../svgs/nodes/misc-nodes';\nimport lines from '../../svgs/lines/lines';\nimport miscEdges from '../../svgs/edges/misc-edges';\nimport InfoSection from './info-section';\nimport NodePositionSection from './node-position-section';\n\nconst nodes = { ...stations, ...miscNodes };\nconst edges = { ...lines, ...miscEdges };\n\nconst DetailsPanel = () => {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n    const { selected } = useRootSelector(state => state.runtime);\n    const graph = React.useRef(window.graph);\n\n    const handleClose = () => dispatch(clearSelected());\n    const handleDuplicate = (selectedFirst: string) => {\n        const allAttr = JSON.parse(JSON.stringify(graph.current.getNodeAttributes(selectedFirst))) as NodeAttributes;\n        allAttr.x += 50;\n        allAttr.y += 50;\n        const id = selectedFirst.startsWith('stn') ? `stn_${nanoid(10)}` : `misc_node_${nanoid(10)}`;\n        graph.current.addNode(id, allAttr);\n        hardRefresh();\n    };\n    const handleRemove = (selected: string[]) => {\n        dispatch(clearSelected());\n        selected.forEach(s => {\n            if (graph.current.hasNode(s)) graph.current.dropNode(s);\n            else if (graph.current.hasEdge(s)) graph.current.dropEdge(s);\n        });\n        hardRefresh();\n    };\n    // A helper method to remove all lines with the same color\n    const handleRemoveEntireLine = (selectedFirst: string) => {\n        dispatch(clearSelected());\n        const theme = graph.current.getEdgeAttribute(selectedFirst, 'color');\n        const lines = graph.current.filterEdges((edge, attr, source, target, sourceAttr, targetAttr, undirected) =>\n            attr.color.every((v, i) => v === theme[i])\n        );\n        lines.forEach(line => {\n            graph.current.dropEdge(line);\n        });\n        hardRefresh();\n    };\n\n    // hide reconcile for now\n    const [reconcileId, setReconcileId] = React.useState('');\n    React.useEffect(() => {\n        const selectedFirst = selected.at(0);\n        if (graph.current.hasEdge(selectedFirst))\n            setReconcileId(graph.current.getEdgeAttribute(selectedFirst, 'reconcileId') ?? 'undefined');\n    }, [selected]);\n\n    const fields: RmgFieldsField[] = [];\n    const selectedFirst = selected.at(0);\n\n    if (selected.length === 1 && graph.current.hasNode(selectedFirst)) {\n        const type = graph.current.getNodeAttribute(selectedFirst, 'type');\n        const attrs = graph.current.getNodeAttribute(selectedFirst, type);\n        fields.push(\n            ...nodes[type].fields\n                // TODO: filter will complain the type\n                // @ts-expect-error\n                .filter(field => field.type !== 'custom')\n                .map(\n                    // @ts-expect-error\n                    field =>\n                        ({\n                            type: field.type,\n                            label: t(field.label),\n                            value: field.value(attrs),\n                            options: field.options,\n                            disabledOptions: field.disabledOptions && field.disabledOptions(attrs),\n                            validator: field.validator,\n                            onChange: (val: string | number) => {\n                                let updatedAttrs: NodeAttributes;\n                                try {\n                                    updatedAttrs = field.onChange(val, attrs);\n                                } catch (error) {\n                                    dispatch(\n                                        setGlobalAlert({\n                                            status: 'error',\n                                            message: t(`err-code.${error as string}`),\n                                        })\n                                    );\n                                    return;\n                                }\n\n                                graph.current.mergeNodeAttributes(selectedFirst, {\n                                    [type]: updatedAttrs,\n                                });\n                                hardRefresh();\n                            },\n                        } as RmgFieldsField)\n                ),\n            // TODO: filter will complain the type\n            // @ts-expect-error\n            ...nodes[type].fields.filter(field => field.type === 'custom')\n        );\n    }\n\n    if (selected.length === 1 && graph.current.hasEdge(selectedFirst)) {\n        // TODO: remove this after #84\n        if (selectedFirst!.startsWith('line')) {\n            fields.push({\n                type: 'custom',\n                label: t('color'),\n                component: (\n                    <ThemeButton\n                        theme={graph.current.getEdgeAttribute(selectedFirst, 'color')}\n                        onClick={() => setIsModalOpen(true)}\n                    />\n                ),\n                minW: '40px',\n            });\n        }\n        // fields.push({\n        //     type: 'input',\n        //     label: t('panel.details.line.reconcileId'),\n        //     value: reconcileId,\n        //     onChange: val => {\n        //         setReconcileId(val);\n        //         graph.current.mergeEdgeAttributes(selectedFirst, { reconcileId: val });\n        //         dispatch(setRefreshReconcile());\n        //         dispatch(saveGraph(graph.current.export()));\n        //     },\n        // });\n        const type = graph.current.getEdgeAttribute(selectedFirst, 'type');\n        const attrs = graph.current.getEdgeAttribute(selectedFirst, type);\n        fields.push(\n            ...edges[type].fields.map(\n                field =>\n                    ({\n                        type: field.type,\n                        label: t(field.label),\n                        // TODO: fix this\n                        // @ts-ignore-error\n                        value: field.value(attrs),\n                        // TODO: fix this\n                        // @ts-ignore-error\n                        options: field.options,\n                        // TODO: fix this\n                        // @ts-ignore-error\n                        disabledOptions: field.disabledOptions && field.disabledOptions(attrs),\n                        // TODO: fix this\n                        // @ts-ignore-error\n                        validator: field.validator,\n                        onChange: (val: string | number) => {\n                            graph.current.mergeEdgeAttributes(selectedFirst, {\n                                // TODO: fix this\n                                // @ts-ignore-error\n                                [type]: field.onChange(val, attrs),\n                            });\n                            // console.log(graph.current.getEdgeAttributes(selectedFirst));\n                            hardRefresh();\n                        },\n                    } as RmgFieldsField)\n            )\n        );\n    }\n\n    const [isModalOpen, setIsModalOpen] = React.useState(false);\n    const handleChangeLineColor = (color: Theme) => {\n        if (selected.at(0) && graph.current.hasEdge(selected.at(0))) {\n            graph.current.mergeEdgeAttributes(selected.at(0), { color });\n            hardRefresh();\n        }\n    };\n\n    return (\n        <RmgSidePanel isOpen={selected.length > 0} width={300} header=\"Dummy header\" alwaysOverlay>\n            <RmgSidePanelHeader onClose={handleClose}>{t('panel.details.header')}</RmgSidePanelHeader>\n            <RmgSidePanelBody>\n                <InfoSection />\n\n                {selected.length === 1 && graph.current.hasNode(selectedFirst) && <NodePositionSection />}\n\n                <Box p={1}>\n                    <Heading as=\"h5\" size=\"sm\">\n                        {t('panel.details.specificAttrsTitle')}\n                    </Heading>\n\n                    <RmgFields fields={fields} minW={276} />\n                </Box>\n\n                <ColourModal\n                    isOpen={isModalOpen}\n                    defaultTheme={\n                        selected.at(0)?.startsWith('line')\n                            ? graph.current.getEdgeAttribute(selected.at(0), 'color')\n                            : undefined\n                    }\n                    onClose={() => setIsModalOpen(false)}\n                    onUpdate={nextTheme => handleChangeLineColor(nextTheme)}\n                />\n            </RmgSidePanelBody>\n            <RmgSidePanelFooter>\n                <HStack>\n                    {selected.length === 1 && graph.current.hasNode(selected.at(0)) && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => handleDuplicate(selected.at(0)!)}>\n                            {t('panel.details.footer.duplicate')}\n                        </Button>\n                    )}\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleRemove(selected)}>\n                        {t('panel.details.footer.remove')}\n                    </Button>\n                    {selected.length === 1 && selectedFirst?.startsWith('line-') && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => handleRemoveEntireLine(selected.at(0)!)}>\n                            {t('panel.details.footer.removeEntireLine')}\n                        </Button>\n                    )}\n                </HStack>\n            </RmgSidePanelFooter>\n        </RmgSidePanel>\n    );\n};\n\nexport default DetailsPanel;\n","// src/heading.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = forwardRef(function Heading2(props, ref) {\n  const styles = useStyleConfig(\"Heading\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.h2,\n    {\n      ref,\n      className: cx(\"chakra-heading\", props.className),\n      ...rest,\n      __css: styles\n    }\n  );\n});\nHeading.displayName = \"Heading\";\n\nexport {\n  Heading\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["InfoSection","t","useTranslation","selected","useRootSelector","state","runtime","graph","React","window","fields","type","label","value","length","join","minW","current","hasNode","at","getNodeAttribute","getEdgeAttribute","p","as","size","NodePositionSection","dispatch","useRootDispatch","hardRefresh","setRefresh","saveGraph","export","refreshAll","refresh","all","selectedFirst","x","y","pos","setPos","startsWith","toString","validator","val","Number","isNaN","onChange","mergeNodeAttributes","nodes","stations","miscNodes","edges","lines","miscEdges","setReconcileId","hasEdge","attrs","push","filter","field","map","options","disabledOptions","updatedAttrs","error","setGlobalAlert","status","message","component","theme","onClick","setIsModalOpen","mergeEdgeAttributes","isModalOpen","isOpen","width","header","alwaysOverlay","onClose","clearSelected","defaultTheme","undefined","onUpdate","nextTheme","color","variant","allAttr","JSON","parse","stringify","getNodeAttributes","id","nanoid","addNode","handleDuplicate","forEach","s","dropNode","dropEdge","handleRemove","filterEdges","edge","attr","source","target","sourceAttr","targetAttr","undirected","every","v","i","line","handleRemoveEntireLine","Heading","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","rest","className","jsx","chakra","cx","__css","displayName","crypto","getRandomValues","Uint8Array","reduce","byte","toUpperCase"],"sourceRoot":""}