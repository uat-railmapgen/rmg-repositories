{"version":3,"file":"static/js/ToolsPanel.b3be657d.chunk.js","mappings":"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","sources":["components/panels/tools/tools.tsx"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MdExpandLess, MdExpandMore } from 'react-icons/md';\nimport {\n    Accordion,\n    AccordionButton,\n    AccordionIcon,\n    AccordionItem,\n    AccordionPanel,\n    Box,\n    Button,\n    Flex,\n    SystemStyleObject,\n    Text,\n    useColorModeValue,\n} from '@chakra-ui/react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { setMode, setTheme } from '../../../redux/runtime/runtime-slice';\nimport { StationType } from '../../../constants/stations';\nimport { MiscNodeType } from '../../../constants/nodes';\nimport { LinePathType } from '../../../constants/lines';\nimport stations from '../../svgs/stations/stations';\nimport miscNodes from '../../svgs/nodes/misc-nodes';\nimport { linePaths } from '../../svgs/lines/lines';\nimport ColourModal from '../colour-modal/colour-modal';\nimport ThemeButton from '../theme-button';\n\nconst buttonStyle: SystemStyleObject = {\n    justifyContent: 'flex-start',\n    p: 0,\n    pl: '5px',\n    pr: '5px',\n    maxH: 50,\n    minH: 50,\n};\n\nconst accordionPanelStyle: SystemStyleObject = {\n    p: '0',\n    display: 'flex',\n    flexDirection: 'column',\n};\n\nconst ToolsPanel = () => {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const { mode, theme } = useRootSelector(state => state.runtime);\n    const bgColor = useColorModeValue('white', 'gray.800');\n\n    const [isToolsExpanded, setIsToolsExpanded] = React.useState(true);\n    const [isColourModalOpen, setIsColourModalOpen] = React.useState(false);\n\n    const handleStation = (type: StationType) => dispatch(setMode(`station-${type}`));\n    const handleLine = (type: LinePathType) => dispatch(setMode(`line-${type}`));\n    const handleMiscNode = (type: MiscNodeType) => dispatch(setMode(`misc-node-${type}`));\n\n    return (\n        <Flex\n            flexShrink=\"0\"\n            direction=\"column\"\n            width={isToolsExpanded ? 400 : 50}\n            maxWidth=\"100%\"\n            height=\"100%\"\n            bg={bgColor}\n            zIndex=\"5\"\n            transition=\"width 0.3s ease-in-out\"\n        >\n            <Button\n                aria-label=\"Menu\"\n                leftIcon={\n                    isToolsExpanded ? (\n                        <MdExpandMore size={40} transform=\"rotate(90)\" />\n                    ) : (\n                        <MdExpandLess size={40} transform=\"rotate(90)\" />\n                    )\n                }\n                onClick={() => setIsToolsExpanded(!isToolsExpanded)}\n                sx={buttonStyle}\n            >\n                {isToolsExpanded ? t('panel.tools.showLess') : undefined}\n            </Button>\n\n            <Flex className=\"tools\" overflow=\"auto\">\n                <Accordion width=\"100%\" allowMultiple defaultIndex={[0, 1, 2]}>\n                    <AccordionItem>\n                        <AccordionButton sx={{ minH: 50, maxH: 50 }}>\n                            <Box as=\"span\" flex=\"1\" textAlign=\"left\">\n                                {isToolsExpanded ? t('panel.tools.section.lineDrawing') : undefined}\n                            </Box>\n                            <AccordionIcon />\n                        </AccordionButton>\n                        <AccordionPanel sx={accordionPanelStyle}>\n                            <Flex>\n                                <ThemeButton theme={theme} onClick={() => setIsColourModalOpen(true)} />\n                                <Text fontWeight=\"600\" pl=\"1\" alignSelf=\"center\">\n                                    {isToolsExpanded ? t('Color') : undefined}\n                                </Text>\n                            </Flex>\n                            <ColourModal\n                                isOpen={isColourModalOpen}\n                                defaultTheme={theme}\n                                onClose={() => setIsColourModalOpen(false)}\n                                onUpdate={nextTheme => dispatch(setTheme(nextTheme))}\n                            />\n\n                            {Object.values(LinePathType).map(type => (\n                                <Button\n                                    key={type}\n                                    aria-label={type}\n                                    leftIcon={linePaths[type].icon}\n                                    onClick={() => handleLine(type)}\n                                    variant={mode === `line-${type}` ? 'solid' : 'outline'}\n                                    sx={buttonStyle}\n                                >\n                                    {isToolsExpanded ? t(linePaths[type].metadata.displayName) : undefined}\n                                </Button>\n                            ))}\n                            <Button\n                                aria-label={MiscNodeType.Virtual}\n                                leftIcon={miscNodes[MiscNodeType.Virtual].icon}\n                                onClick={() => handleMiscNode(MiscNodeType.Virtual)}\n                                variant={mode === `misc-node-${MiscNodeType.Virtual}` ? 'solid' : 'outline'}\n                                sx={buttonStyle}\n                            >\n                                {isToolsExpanded ? t(miscNodes[MiscNodeType.Virtual].metadata.displayName) : undefined}\n                            </Button>\n                        </AccordionPanel>\n                    </AccordionItem>\n\n                    <AccordionItem>\n                        <AccordionButton sx={{ minH: 50, maxH: 50 }}>\n                            <Box as=\"span\" flex=\"1\" textAlign=\"left\">\n                                {isToolsExpanded ? t('panel.tools.section.stations') : undefined}\n                            </Box>\n                            <AccordionIcon />\n                        </AccordionButton>\n                        <AccordionPanel sx={accordionPanelStyle}>\n                            {Object.values(StationType).map(type => (\n                                <Button\n                                    key={type}\n                                    aria-label={type}\n                                    leftIcon={stations[type].icon}\n                                    onClick={() => handleStation(type)}\n                                    variant={mode === `station-${type}` ? 'solid' : 'outline'}\n                                    sx={buttonStyle}\n                                >\n                                    {isToolsExpanded ? t(stations[type].metadata.displayName) : undefined}\n                                </Button>\n                            ))}\n                        </AccordionPanel>\n                    </AccordionItem>\n\n                    <AccordionItem>\n                        <AccordionButton sx={{ minH: 50, maxH: 50 }}>\n                            <Box as=\"span\" flex=\"1\" textAlign=\"left\">\n                                {isToolsExpanded ? t('panel.tools.section.miscellaneousNodes') : undefined}\n                            </Box>\n                            <AccordionIcon />\n                        </AccordionButton>\n                        <AccordionPanel sx={accordionPanelStyle}>\n                            {Object.values(MiscNodeType)\n                                .filter(type => type !== MiscNodeType.Virtual)\n                                .map(type => (\n                                    <Button\n                                        key={type}\n                                        aria-label={type}\n                                        leftIcon={miscNodes[type].icon}\n                                        onClick={() => handleMiscNode(type)}\n                                        variant={mode === `misc-node-${type}` ? 'solid' : 'outline'}\n                                        sx={buttonStyle}\n                                    >\n                                        {isToolsExpanded ? t(miscNodes[type].metadata.displayName) : undefined}\n                                    </Button>\n                                ))}\n                        </AccordionPanel>\n                    </AccordionItem>\n                </Accordion>\n            </Flex>\n        </Flex>\n    );\n};\n\nexport default ToolsPanel;\n"],"names":["buttonStyle","justifyContent","p","pl","pr","maxH","minH","accordionPanelStyle","display","flexDirection","t","useTranslation","dispatch","useRootDispatch","useRootSelector","state","runtime","mode","theme","bgColor","useColorModeValue","React","isToolsExpanded","setIsToolsExpanded","isColourModalOpen","setIsColourModalOpen","handleMiscNode","type","setMode","flexShrink","direction","width","maxWidth","height","bg","zIndex","transition","leftIcon","size","transform","onClick","sx","undefined","className","overflow","allowMultiple","defaultIndex","as","flex","textAlign","fontWeight","alignSelf","isOpen","defaultTheme","onClose","onUpdate","nextTheme","setTheme","Object","values","LinePathType","map","linePaths","icon","handleLine","variant","metadata","displayName","MiscNodeType","miscNodes","StationType","stations","handleStation","filter"],"sourceRoot":""}