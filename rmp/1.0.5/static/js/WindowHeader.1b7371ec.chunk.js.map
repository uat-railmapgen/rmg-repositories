{"version":3,"file":"static/js/WindowHeader.1b7371ec.chunk.js","mappings":"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","sources":["components/page-header/gallery-modal.tsx","components/page-header/open-actions.tsx","components/page-header/terms-and-conditions.tsx","components/page-header/download-actions.tsx","components/page-header/about-modal.tsx","components/page-header/zoom-popover.tsx","components/page-header/settings-modal.tsx","components/page-header/window-header.tsx","components/page-header/global-alerts.tsx","components/page-header/page-header.tsx","util/helpers.ts","saves|lazy|/^/.//.*/.json$/|chunkName: template|groupOptions: {}|namespace object"],"sourcesContent":["import {\n    Button,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    VStack,\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { RMPSave } from '../../util/save';\n\nexport const GalleryModal = (props: {\n    isOpen: boolean;\n    handleOpenTemplates: (rmpSave: RMPSave) => void;\n    onClose: () => void;\n}) => {\n    const { isOpen, handleOpenTemplates, onClose } = props;\n    const { t } = useTranslation();\n\n    const handleSelect = async (name: string) => {\n        const module = await import(/* webpackChunkName: \"template\" */ `../../saves/${name}.json`);\n        handleOpenTemplates(module.default as RMPSave);\n        onClose();\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.open.gallery')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <VStack>\n                        {['shanghai', 'guangzhou', 'beijing', 'santiago'].map(city => (\n                            <Button key={city} minWidth={200} onClick={() => handleSelect(city)}>\n                                {t(`header.open.${city}`)}\n                            </Button>\n                        ))}\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { Badge, IconButton, Menu, MenuButton, MenuItem, MenuList } from '@chakra-ui/react';\nimport { MdInsertDriveFile, MdNoteAdd, MdUpload } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport { useRootDispatch } from '../../redux';\nimport { ParamState, saveGraph, setFullState } from '../../redux/param/param-slice';\nimport { clearSelected, setRefresh } from '../../redux/runtime/runtime-slice';\nimport { upgrade } from '../../util/save';\nimport { StationAttributes, StationType } from '../../constants/stations';\nimport { LineType } from '../../constants/lines';\nimport stations from '../svgs/stations/stations';\nimport lines from '../svgs/lines/lines';\nimport { ShmetroBasic2020StationAttributes } from '../svgs/stations/shmetro-basic-2020';\nimport { RMPSave } from '../../util/save';\nimport { GalleryModal } from './gallery-modal';\nimport { GzmtrBasicStationAttributes } from '../svgs/stations/gzmtr-basic';\nimport { InterchangeInfo } from '../panels/details/interchange-field';\nimport { GzmtrIntStationAttributes } from '../svgs/stations/gzmtr-int';\n\nexport default function OpenActions() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const graph = React.useRef(window.graph);\n    const fileRMGInputRef = React.useRef<HTMLInputElement | null>(null);\n    const fileInputRef = React.useRef<HTMLInputElement | null>(null);\n\n    const [isGalleryModalOpen, setIsGalleryModalOpen] = React.useState(false);\n\n    const refreshAndSave = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph, graph]);\n\n    const handleNew = () => {\n        dispatch(clearSelected());\n        graph.current.clear();\n        const state: ParamState = { graph: '{}', svgViewBoxZoom: 100, svgViewBoxMin: { x: 0, y: 0 } };\n        dispatch(setFullState(state));\n        refreshAndSave();\n    };\n\n    const handleUploadRMG = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        console.log('OpenActions.handleUploadRMG():: received file', file);\n\n        if (file?.type !== 'application/json') {\n            // dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.invalidType') }));\n            console.error('OpenActions.handleUploadRMG():: Invalid file type! Only file in JSON format is accepted.');\n        } else {\n            try {\n                const paramStr = await readFileAsText(file);\n                const param = JSON.parse(paramStr);\n                const stnList = param.stn_list;\n                const theme = param.theme;\n\n                // generate stn id\n                const stnIdMap = Object.fromEntries(\n                    Object.keys(stnList)\n                        .filter(id => !['linestart', 'lineend'].includes(id))\n                        .map(id => [id, `stn_${nanoid(10)}`])\n                );\n                // update stnIdMap if stations exist in the graph\n                Object.entries(stnList)\n                    .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n                    .forEach(([id, stnInfo]) => {\n                        const nodes = graph.current.filterNodes(\n                            (node, attr) =>\n                                // @ts-ignore-error\n                                Object.values(StationType).includes(attr.type) &&\n                                (attr[attr.type] as StationAttributes).names[0] === (stnInfo as any).name[0]\n                        );\n                        if (nodes.length !== 0) stnIdMap[id] = nodes[0];\n                    });\n\n                // only import stations that don't appear in the graph\n                Object.entries(stnList)\n                    .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n                    .filter(\n                        ([id, stnInfo]) =>\n                            graph.current.filterNodes(\n                                (node, attr) =>\n                                    // @ts-ignore-error\n                                    Object.values(StationType).includes(attr.type) &&\n                                    (attr[attr.type] as StationAttributes).names[0] === (stnInfo as any).name[0]\n                            ).length === 0\n                    )\n                    .forEach(([id, stnInfo], i) => {\n                        // determine station type\n                        let type: StationType = StationType.ShmetroBasic;\n                        if (param.style === 'shmetro') {\n                            if ((stnInfo as any).transfer.info.flat().length > 0) type = StationType.ShmetroInt;\n                            else if (param.info_panel_type === 'sh2020') type = StationType.ShmetroBasic2020;\n                            else type = StationType.ShmetroBasic;\n                        } else if (param.style === 'gzmtr' || param.style === 'mtr') {\n                            if ((stnInfo as any).transfer.info.flat().length > 0) type = StationType.GzmtrInt;\n                            else type = StationType.GzmtrBasic;\n                        }\n\n                        // read default attrs\n                        const attr = {\n                            // deep copy to prevent mutual reference\n                            ...JSON.parse(JSON.stringify(stations[type].defaultAttrs)),\n                            names: (stnInfo as any).name,\n                        };\n\n                        // add style specific attrs from RMG save\n                        if (type === StationType.ShmetroBasic2020)\n                            (attr as ShmetroBasic2020StationAttributes).color = theme;\n                        else if (type === StationType.GzmtrBasic) {\n                            (attr as GzmtrBasicStationAttributes).color = param.theme;\n                            (attr as GzmtrBasicStationAttributes).lineCode = param.line_num;\n                            (attr as GzmtrBasicStationAttributes).stationCode = (stnInfo as any).num;\n                        } else if (type === StationType.GzmtrInt) {\n                            const transfer = JSON.parse(\n                                JSON.stringify((stnInfo as any).transfer.info)\n                            ) as InterchangeInfo[][];\n                            // override line code and station code to default as they are not provided in RMG save\n                            transfer.forEach(lv1 =>\n                                lv1.forEach(transferInfo => {\n                                    transferInfo[4] = '1';\n                                    transferInfo[5] = '01';\n                                })\n                            );\n                            // add current line and station code to transfer[0][0]\n                            transfer[0].unshift([\n                                ...param.theme,\n                                param.line_num,\n                                (stnInfo as any).num,\n                            ] as unknown as InterchangeInfo);\n                            (attr as GzmtrIntStationAttributes).transfer = transfer;\n                        }\n\n                        graph.current.addNode(stnIdMap[id], {\n                            visible: true,\n                            zIndex: 0,\n                            x: 100 + i * 50,\n                            y: 1000,\n                            type,\n                            [type]: attr,\n                        });\n                    });\n\n                // import lines\n                Object.entries(stnList)\n                    .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n                    .forEach(([id, stnInfo]) => {\n                        (stnInfo as any).children\n                            .filter((child: string) => !['linestart', 'lineend'].includes(child))\n                            .forEach((child: string) => {\n                                graph.current.addDirectedEdgeWithKey(\n                                    `line_${nanoid(10)}`,\n                                    stnIdMap[id],\n                                    stnIdMap[child],\n                                    {\n                                        visible: true,\n                                        zIndex: 0,\n                                        color: theme,\n                                        type: LineType.Diagonal,\n                                        // deep copy to prevent mutual reference\n                                        [LineType.Diagonal]: JSON.parse(\n                                            JSON.stringify(lines[LineType.Diagonal].defaultAttrs)\n                                        ),\n                                        reconcileId: '',\n                                    }\n                                );\n                            });\n                    });\n\n                refreshAndSave();\n            } catch (err) {\n                // dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.unknownError') }));\n                console.error(\n                    'OpenActions.handleUploadRMG():: Unknown error occurred while parsing the uploaded file',\n                    err\n                );\n            }\n        }\n\n        // clear field for next upload\n        event.target.value = '';\n    };\n\n    const handleUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        console.log('OpenActions.handleUpload():: received file', file);\n\n        if (file?.type !== 'application/json') {\n            // dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.invalidType') }));\n            console.error('OpenActions.handleUpload():: Invalid file type! Only file in JSON format is accepted.');\n        } else {\n            try {\n                const paramStr = await readFileAsText(file);\n                const { version, ...save } = JSON.parse(await upgrade(paramStr));\n\n                // details panel will complain unknown nodes or edges if last state is not cleared\n                dispatch(clearSelected());\n                graph.current.clear();\n                graph.current.import(save.graph);\n                const state: ParamState = { ...save, graph: JSON.stringify(save.graph) };\n                dispatch(setFullState(state));\n\n                refreshAndSave();\n            } catch (err) {\n                // dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.unknownError') }));\n                console.error(\n                    'OpenActions.handleUpload():: Unknown error occurred while parsing the uploaded file',\n                    err\n                );\n            }\n        }\n\n        // clear field for next upload\n        event.target.value = '';\n    };\n\n    const handleOpenTemplates = async (rmpSave: RMPSave) => {\n        const { version, ...save } = rmpSave;\n\n        // details panel will complain unknown nodes or edges if last state is not cleared\n        dispatch(clearSelected());\n        graph.current.clear();\n        graph.current.import(save.graph);\n        const state: ParamState = { ...save, graph: JSON.stringify(save.graph) };\n        dispatch(setFullState(state));\n\n        refreshAndSave();\n    };\n\n    return (\n        <Menu>\n            <MenuButton as={IconButton} size=\"sm\" variant=\"ghost\" icon={<MdUpload />} />\n            <MenuList>\n                <MenuItem icon={<MdNoteAdd />} onClick={handleNew}>\n                    {t('header.open.new')}\n                </MenuItem>\n\n                <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\".json\"\n                    hidden={true}\n                    onChange={handleUpload}\n                    data-testid=\"file-upload\"\n                />\n                <MenuItem icon={<MdUpload />} onClick={() => fileInputRef?.current?.click()}>\n                    {t('header.open.config')}\n                </MenuItem>\n\n                <input\n                    ref={fileRMGInputRef}\n                    type=\"file\"\n                    accept=\".json\"\n                    hidden={true}\n                    onChange={handleUploadRMG}\n                    data-testid=\"file-upload\"\n                />\n                <MenuItem icon={<MdUpload />} onClick={() => fileRMGInputRef?.current?.click()}>\n                    {t('header.open.configRMG')}\n                </MenuItem>\n\n                <MenuItem icon={<MdInsertDriveFile />} onClick={() => setIsGalleryModalOpen(true)}>\n                    {t('header.open.gallery')}\n                    <Badge ml=\"1\" colorScheme=\"green\">\n                        New\n                    </Badge>\n                </MenuItem>\n                <GalleryModal\n                    isOpen={isGalleryModalOpen}\n                    handleOpenTemplates={handleOpenTemplates}\n                    onClose={() => setIsGalleryModalOpen(false)}\n                />\n            </MenuList>\n        </Menu>\n    );\n}\n\nconst readFileAsText = (file: File) => {\n    return new Promise((resolve: (text: string) => void) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.readAsText(file);\n    });\n};\n","import { useTranslation } from 'react-i18next';\nimport {\n    Icon,\n    Link,\n    ListItem,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalCloseButton,\n    ModalBody,\n    OrderedList,\n} from '@chakra-ui/react';\nimport { MdOpenInNew } from 'react-icons/md';\n\nconst TermsAndConditionsModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.download.termsAndConditions')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <OrderedList>\n                        <ListItem>\n                            The layout of the elements on the signage or rail map, is designed by{' '}\n                            <Link color=\"teal.500\" href=\"https://www.shmetro.com/\" isExternal={true}>\n                                Shanghai Shentong Metro Group <Icon as={MdOpenInNew} />\n                            </Link>\n                            {', '}\n                            <Link color=\"teal.500\" href=\"https://www.gzmtr.com/\" isExternal={true}>\n                                Guangzhou Metro Group <Icon as={MdOpenInNew} />\n                            </Link>\n                            {' or '}\n                            <Link color=\"teal.500\" href=\"https://www.mtr.com.hk/\" isExternal={true}>\n                                MTR Corporation <Icon as={MdOpenInNew} />\n                            </Link>\n                            , depending on your selection. You shall grant appropriate permit or license from the\n                            relevant company above before using the generated images for commercial purposes, if it is\n                            required to do so.\n                            <br />\n                            标志版或路线图的元素或布局，基于你所选择的风格，为\n                            <Link color=\"teal.500\" href=\"https://www.shmetro.com/\" isExternal={true}>\n                                上海申通地铁集团 <Icon as={MdOpenInNew} />\n                            </Link>\n                            ，\n                            <Link color=\"teal.500\" href=\"https://www.gzmtr.com/\" isExternal={true}>\n                                广州地铁集团公司 <Icon as={MdOpenInNew} />\n                            </Link>\n                            或\n                            <Link color=\"teal.500\" href=\"https://www.mtr.com.hk/\" isExternal={true}>\n                                港铁公司 <Icon as={MdOpenInNew} />\n                            </Link>\n                            所设计。在产生的图像用作商业用途前，你应向相关公司取得适当之许可证或授权。\n                        </ListItem>\n                        <ListItem>\n                            The elements including shapes and lines on the image are drawn by{' '}\n                            <Link color=\"teal.500\" href=\"https://www.github.com/thekingofcity\" isExternal={true}>\n                                thekingofcity <Icon as={MdOpenInNew} />\n                            </Link>\n                            {' and '}\n                            <Link color=\"teal.500\" href=\"https://www.github.com/wongchito\" isExternal={true}>\n                                Chito Wong <Icon as={MdOpenInNew} />\n                            </Link>\n                            , based on the design standards or rules of the companies listed above. You may use them for\n                            any purposes, but it is recommended to state the name and the link of software alongside.\n                            <br />\n                            图像的元素，包括图形及线条，均由\n                            <Link color=\"teal.500\" href=\"https://www.github.com/thekingofcity\" isExternal={true}>\n                                thekingofcity <Icon as={MdOpenInNew} />\n                            </Link>\n                            及\n                            <Link color=\"teal.500\" href=\"https://www.github.com/wongchito\" isExternal={true}>\n                                Chito Wong <Icon as={MdOpenInNew} />\n                            </Link>\n                            基于上述公司设计标准或准则绘制。你可将其用于任何目的，但我们建议你于使用同时附以我们的名字以及本网站地址。\n                        </ListItem>\n                        <ListItem>\n                            Due to copyright, licensing and other legal restrictions, Rail Map Painter uses{' '}\n                            <Link color=\"teal.500\" href=\"https://github.com/ButTaiwan/genyo-font\" isExternal={true}>\n                                GenYoMin provided by ButTaiwan <Icon as={MdOpenInNew} />\n                            </Link>\n                            , and Vegur instead of MTRSung and Myriad Pro respectively to display and generate MTR-style\n                            signage. You shall grant appropriate permit or license from the manufacturers before using\n                            those generated images for commercial purposes.\n                            <br />\n                            由于著作权及其他法律限制，铁路路线图绘制器使用由\n                            <Link color=\"teal.500\" href=\"https://github.com/ButTaiwan/genyo-font\" isExternal={true}>\n                                ButTaiwan提供的源樣明體 <Icon as={MdOpenInNew} />\n                            </Link>\n                            ，以及Vegur，以代替港铁样式标志牌所使用的地铁宋及Myriad\n                            Pro。在产生之图像用作商业用途前，你应向字型生产厂商取得适当之许可证或授权。\n                        </ListItem>\n                        <ListItem>\n                            The exported images in PNG or SVG format may be modified, published, or used for other\n                            purposes except commercial use, under the conditions above.\n                            <br />\n                            输出的PNG或SVG图像可基于上述条款，在非商业使用时，用于修改、发行或其他用途。\n                        </ListItem>\n                        <ListItem>\n                            All flag emojis shown on Windows platforms are designed by{' '}\n                            <Link color=\"teal.500\" href=\"https://openmoji.org/\" isExternal={true}>\n                                OpenMoji <Icon as={MdOpenInNew} />\n                            </Link>{' '}\n                            – the open-source emoji and icon project. License:\n                            <Link\n                                color=\"teal.500\"\n                                href=\"https://creativecommons.org/licenses/by-sa/4.0/\"\n                                isExternal={true}\n                            >\n                                CC BY-SA 4.0 <Icon as={MdOpenInNew} />\n                            </Link>\n                            <br />\n                            于Windows作业系统上显示的国旗Emoji为\n                            <Link color=\"teal.500\" href=\"https://openmoji.org/\" isExternal={true}>\n                                OpenMoji <Icon as={MdOpenInNew} />\n                            </Link>\n                            所设计。许可证：\n                            <Link\n                                color=\"teal.500\"\n                                href=\"https://creativecommons.org/licenses/by-sa/4.0/\"\n                                isExternal={true}\n                            >\n                                CC BY-SA 4.0 <Icon as={MdOpenInNew} />\n                            </Link>\n                        </ListItem>\n                        <ListItem>\n                            We reserve the rights, without prior notice, to modify, add, or remove these terms. The\n                            Chinese translation is for reference only. In case of any discrepancy between the English\n                            version and the Chinese version, the English version shall prevail.\n                            <br />\n                            我们保留修改、新增或移除上述条款之权利，而无需另行通知。中文译本仅供参考，文义如与英文有歧异，概以英文本为准。\n                        </ListItem>\n                    </OrderedList>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default TermsAndConditionsModal;\n","import React from 'react';\nimport {\n    Button,\n    Checkbox,\n    HStack,\n    Icon,\n    IconButton,\n    Menu,\n    MenuButton,\n    MenuList,\n    MenuItem,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    Text,\n    Link,\n} from '@chakra-ui/react';\nimport { MdDownload, MdImage, MdOpenInNew, MdSave } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport store from '../../redux';\nimport { calculateCanvasSize } from '../../util/helpers';\nimport { stringifyParam } from '../../util/save';\nimport TermsAndConditionsModal from './terms-and-conditions';\nimport { MiscNodeType } from '../../constants/nodes';\n\nexport default function DownloadActions() {\n    const { t } = useTranslation();\n\n    const graph = React.useRef(window.graph);\n\n    const [format, setFormat] = React.useState('png' as 'png' | 'svg');\n    const formatOptions = {\n        png: t('header.download.png'),\n        svg: t('header.download.svg'),\n    };\n    const [scale, setScale] = React.useState(100);\n    const scaleOptions = Object.fromEntries(\n        [25, 33, 50, 67, 75, 80, 90, 100, 110, 125, 150, 175, 200, 250, 300, 400, 500].map(v => [v, `${v}%`])\n    );\n    const [isTransparent, setIsTransparent] = React.useState(false);\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('header.download.format'),\n            value: format,\n            options: formatOptions,\n            onChange: value => setFormat(value === 'png' ? 'png' : 'svg'),\n        },\n    ];\n    const pngFields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('header.download.scale'),\n            value: scale,\n            options: scaleOptions,\n            onChange: value => setScale(value as number),\n        },\n        {\n            type: 'switch',\n            label: t('header.download.transparent'),\n            isChecked: isTransparent,\n            onChange: setIsTransparent,\n        },\n    ];\n    const [isDownloadModalOpen, setIsDownloadModalOpen] = React.useState(false);\n    const [isTermsAndConditionsModalOpen, setIsTermsAndConditionsModalOpen] = React.useState(false);\n    const [isAttachSelected, setIsAttachSelected] = React.useState(false);\n    const [isTermsAndConditionsSelected, setIsTermsAndConditionsSelected] = React.useState(false);\n\n    const handleDownloadJson = () => {\n        const param = stringifyParam(store.getState().param);\n        downloadAs(`RMP_${new Date().valueOf()}.json`, 'application/json', param);\n    };\n    // thanks to this article that includes every steps in converting svg to png\n    // https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n    const handleDownload = () => {\n        setIsDownloadModalOpen(false);\n\n        // get the minimum and maximum of the graph\n        const { xMin, yMin, xMax, yMax } = calculateCanvasSize(graph.current);\n        const [width, height] = [xMax - xMin, yMax - yMin];\n\n        const elem = document.getElementById('canvas')!.cloneNode(true) as SVGSVGElement;\n        // remove virtual nodes\n        [...elem.children]\n            .filter(\n                e =>\n                    graph.current.hasNode(e.id) && graph.current.getNodeAttribute(e.id, 'type') === MiscNodeType.Virtual\n            )\n            .forEach(e => elem.removeChild(e));\n        // append rmp info if user does not want to share rmp info\n        if (!isAttachSelected) elem.appendChild(generateRmpInfo(xMax - 600, yMax - 60));\n        // reset svg viewBox to display all the nodes in the graph\n        // otherwise the later drawImage won't be able to show all of them\n        elem.setAttribute('viewBox', `${xMin} ${yMin} ${width} ${height}`);\n        // Chrome will stretch the image if the following width and height are not set\n        elem.setAttribute('width', width.toString());\n        elem.setAttribute('height', height.toString());\n        // copy attributes from css to each elem in the new cloned svg\n        Object.entries({\n            '.rmp-name__zh': ['font-family'],\n            '.rmp-name__en': ['font-family'],\n            '.rmp-name-station': ['paint-order', 'stroke', 'stroke-width'],\n        }).forEach(([className, styleSet]) => {\n            const e = document.querySelector(className);\n            const style = window.getComputedStyle(e!);\n            elem.querySelectorAll(className).forEach(el => {\n                styleSet.forEach(styleName => {\n                    el.setAttribute(styleName, style.getPropertyValue(styleName));\n                });\n                el.removeAttribute('class');\n            });\n        });\n\n        if (format === 'svg') {\n            downloadAs(`RMP_${new Date().valueOf()}.svg`, 'image/svg+xml', elem.outerHTML);\n            return;\n        }\n\n        // append to document to render the svg\n        document.body.appendChild(elem);\n        // convert it to blob\n        const src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(elem.outerHTML)));\n        // release after use\n        document.body.removeChild(elem);\n\n        // create canvas to be drawn on\n        const canvas = document.createElement('canvas');\n        const [canvasWidth, canvasHeight] = [(width * scale) / 100, (height * scale) / 100];\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n        // white background\n        if (!isTransparent) {\n            ctx.fillStyle = '#fff';\n            ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n        }\n\n        const img = new Image();\n        img.onload = () => {\n            ctx.drawImage(img, 0, 0, canvasWidth, canvasHeight);\n            canvas.toBlob(blob => downloadBlobAs(`RMP_${new Date().valueOf()}.png`, blob!), 'image/png');\n        };\n        img.src = src; // draw src on canvas\n    };\n\n    return (\n        <Menu>\n            <MenuButton as={IconButton} size=\"sm\" variant=\"ghost\" icon={<MdDownload />} />\n            <MenuList>\n                <MenuItem icon={<MdSave />} onClick={handleDownloadJson}>\n                    {t('header.download.config')}\n                </MenuItem>\n                <MenuItem icon={<MdImage />} onClick={() => setIsDownloadModalOpen(true)}>\n                    {t('header.download.image')}\n                </MenuItem>\n            </MenuList>\n\n            <Modal size=\"xl\" isOpen={isDownloadModalOpen} onClose={() => setIsDownloadModalOpen(false)}>\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>{t('header.download.image')}</ModalHeader>\n                    <ModalCloseButton />\n\n                    <ModalBody>\n                        <RmgFields fields={fields} />\n                        {format === 'png' && <RmgFields fields={pngFields} />}\n                        <br />\n                        <Checkbox isChecked={isAttachSelected} onChange={e => setIsAttachSelected(e.target.checked)}>\n                            <Text>\n                                {t('header.download.shareInfo1')}\n                                <Link\n                                    color=\"teal.500\"\n                                    onClick={() => window.open('https://railmapgen.github.io/rmp', '_blank')}\n                                >\n                                    {t('header.about.rmp')} <Icon as={MdOpenInNew} />\n                                </Link>\n                                {t('header.download.shareInfo2')}\n                            </Text>\n                        </Checkbox>\n                        <Checkbox\n                            isChecked={isTermsAndConditionsSelected}\n                            onChange={e => setIsTermsAndConditionsSelected(e.target.checked)}\n                        >\n                            <Text>\n                                {t('header.download.termsAndConditionsInfo')}\n                                <Link color=\"teal.500\" onClick={() => setIsTermsAndConditionsModalOpen(true)}>\n                                    {t('header.download.termsAndConditions')} <Icon as={MdOpenInNew} />\n                                </Link>\n                                {t('header.download.period')}\n                            </Text>\n                        </Checkbox>\n                    </ModalBody>\n\n                    <ModalFooter>\n                        <HStack>\n                            <Button\n                                colorScheme=\"teal\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                disabled={!isTermsAndConditionsSelected}\n                                onClick={handleDownload}\n                            >\n                                {t('header.download.confirm')}\n                            </Button>\n                        </HStack>\n                    </ModalFooter>\n\n                    <TermsAndConditionsModal\n                        isOpen={isTermsAndConditionsModalOpen}\n                        onClose={() => setIsTermsAndConditionsModalOpen(false)}\n                    />\n                </ModalContent>\n            </Modal>\n        </Menu>\n    );\n}\n\nconst downloadAs = (filename: string, type: string, data: any) => {\n    const blob = new Blob([data], { type });\n    downloadBlobAs(filename, blob);\n};\n\nconst downloadBlobAs = (filename: string, blob: Blob) => {\n    const url = window.URL.createObjectURL(blob);\n\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n};\n\nconst generateRmpInfo = (x: number, y: number) => {\n    const info = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    info.setAttribute('transform', `translate(${x}, ${y})scale(2)`);\n\n    const logo = document.createElementNS('http://www.w3.org/2000/svg', 'image');\n    // FIXME: return after image is loaded\n    // logo.setAttribute('href', 'https://uat-railmapgen.github.io/rmp/logo192.png');\n    // logo.setAttribute('href', logoImg);\n    logo.setAttribute('width', '40');\n    logo.setAttribute('height', '40');\n    logo.setAttribute('x', '-50');\n    logo.setAttribute('y', '-20');\n\n    const rmp = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    rmp.setAttribute('font-size', '20');\n    rmp.appendChild(document.createTextNode('Rail Map Painter'));\n\n    const link = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    link.setAttribute('y', '15');\n    link.appendChild(document.createTextNode('https://railmapgen.github.io/rmp/'));\n\n    info.appendChild(logo);\n    info.appendChild(rmp);\n    info.appendChild(link);\n\n    return info;\n};\n","import rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Avatar,\n    Box,\n    Flex,\n    Heading,\n    Image,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    Tag,\n    TagLabel,\n    Text,\n    VStack,\n} from '@chakra-ui/react';\n\nconst AboutModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n    const appVersion = rmgRuntime.getAppVersion();\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.about.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody paddingBottom={10}>\n                    <Flex direction=\"row\">\n                        <Image boxSize=\"128px\" src={process.env.PUBLIC_URL + '/logo192.png'} />\n                        <Flex direction=\"column\" width=\"100%\" alignItems=\"center\" justifyContent=\"center\">\n                            <Text fontSize=\"xl\" as=\"b\">\n                                {t('header.about.rmp')}\n                            </Text>\n                            <Text>{appVersion}</Text>\n                            <Text> </Text>\n                            <Text fontSize=\"sm\">{t('header.about.railmapgen')}</Text>\n                        </Flex>\n                    </Flex>\n\n                    <Box margin={5}>\n                        <Text fontSize=\"xl\">{t('header.about.desc')}</Text>\n                    </Box>\n\n                    <Heading as=\"h5\" size=\"sm\" mt={3} mb={2}>\n                        {t('header.about.contributors')}\n                    </Heading>\n\n                    <Heading as=\"h6\" size=\"xs\" my={2}>\n                        {t('header.about.coreContributors')}\n                    </Heading>\n\n                    <VStack>\n                        <Tag\n                            size=\"lg\"\n                            minW=\"80%\"\n                            onClick={() => window.open('https://github.com/thekingofcity', '_blank')}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src=\"https://github.com/thekingofcity.png\" size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    thekingofcity\n                                </Text>\n                                <Text fontSize=\"sm\">{t('header.about.content1')}</Text>\n                                <Text fontSize=\"sm\" align=\"right\">\n                                    {t('header.about.content2')}\n                                </Text>\n                            </TagLabel>\n                        </Tag>\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default AboutModal;\n","import React from 'react';\nimport { IconButton, Popover, PopoverBody, PopoverContent, PopoverTrigger } from '@chakra-ui/react';\nimport { MdZoomOut, MdZoomIn } from 'react-icons/md';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootSelector, useRootDispatch } from '../../redux/index';\nimport { setSvgViewBoxZoom } from '../../redux/param/param-slice';\n\n/**\n * A zoom control displayed in popover component.\n * This will greatly decrease the width of the header in mobile device.\n */\nexport const ZoomPopover = () => {\n    const [isOpen, setIsOpen] = React.useState(false);\n\n    const { svgViewBoxZoom } = useRootSelector(state => state.param);\n    const dispatch = useRootDispatch();\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'slider',\n            label: '',\n            value: 400 - svgViewBoxZoom,\n            min: 10,\n            max: 390,\n            step: 1,\n            onChange: value => dispatch(setSvgViewBoxZoom(400 - value)),\n            leftIcon: <MdZoomOut />,\n            rightIcon: <MdZoomIn />,\n            minW: 160,\n        },\n    ];\n\n    return (\n        <Popover isOpen={isOpen} onOpen={() => setIsOpen(true)} onClose={() => setIsOpen(false)}>\n            <PopoverTrigger>\n                <IconButton\n                    aria-label=\"zoom\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    icon={<MdZoomOut />}\n                    onClick={() => setIsOpen(!isOpen)}\n                />\n            </PopoverTrigger>\n            <PopoverContent>\n                <PopoverBody>\n                    <RmgFields fields={fields} noLabel />\n                </PopoverBody>\n            </PopoverContent>\n        </Popover>\n    );\n};\n","import rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Box,\n    Icon,\n    Link,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    StackDivider,\n    Switch,\n    Text,\n    VStack,\n    useColorModeValue,\n} from '@chakra-ui/react';\nimport { MdOpenInNew } from 'react-icons/md';\nimport { useRootSelector, useRootDispatch } from '../../redux';\nimport { setTelemetryApp } from '../../redux/app/app-slice';\n\nconst SettingsModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const dispatch = useRootDispatch();\n    const { t } = useTranslation();\n    const linkColour = useColorModeValue('primary.500', 'primary.300');\n\n    const isAllowAnalytics = rmgRuntime.isAllowAnalytics();\n\n    const {\n        telemetry: { app: isAllowAppTelemetry },\n    } = useRootSelector(state => state.app);\n    const handleAdditionalTelemetry = (allowAppTelemetry: boolean) => dispatch(setTelemetryApp(allowAppTelemetry));\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.settings.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <VStack divider={<StackDivider borderColor=\"gray.200\" />}>\n                        <Box width=\"100%\">\n                            <Text as=\"b\" fontSize=\"xl\">\n                                {t('header.settings.telemetry.title')}\n                            </Text>\n                            <Box mt=\"3\" mb=\"3\">\n                                <Box display=\"flex\" mb=\"1\">\n                                    <Text flex=\"1\">{t('header.settings.telemetry.essential')}</Text>\n                                    <Switch isChecked={isAllowAnalytics} isDisabled />\n                                </Box>\n                                <Text fontSize=\"sm\" lineHeight=\"100%\" color=\"gray.600\">\n                                    {t('header.settings.telemetry.essentialInfo')}\n                                </Text>\n                                <Link\n                                    color={linkColour}\n                                    fontSize=\"sm\"\n                                    lineHeight=\"100%\"\n                                    href=\"https://support.google.com/analytics/answer/11593727\"\n                                    isExternal={true}\n                                >\n                                    {t('header.settings.telemetry.essentialLink')} <Icon as={MdOpenInNew} />\n                                </Link>\n                            </Box>\n                            <Box mb=\"3\">\n                                <Box display=\"flex\" mb=\"1\">\n                                    <Text flex=\"1\">{t('header.settings.telemetry.additional')}</Text>\n                                    <Switch\n                                        isChecked={isAllowAppTelemetry}\n                                        onChange={({ target: { checked } }) => handleAdditionalTelemetry(checked)}\n                                    />\n                                </Box>\n                                <Text fontSize=\"sm\" lineHeight=\"100%\" color=\"gray.600\">\n                                    {t('header.settings.telemetry.additionalInfo')}\n                                </Text>\n                            </Box>\n                        </Box>\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default SettingsModal;\n","import React from 'react';\nimport { Heading, HStack, IconButton, Menu, MenuButton, MenuItem, MenuList } from '@chakra-ui/react';\nimport { MdHelp, MdSettings, MdTranslate } from 'react-icons/md';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { RmgEnvBadge, RmgWindowHeader } from '@railmapgen/rmg-components';\nimport { LanguageCode } from '@railmapgen/rmg-translate';\nimport rmgRuntime, { RmgEnv } from '@railmapgen/rmg-runtime';\nimport { Events } from '../../constants/constants';\nimport { useRootSelector } from '../../redux/index';\nimport OpenActions from './open-actions';\nimport DownloadActions from './download-actions';\nimport AboutModal from './about-modal';\nimport { ZoomPopover } from './zoom-popover';\nimport SettingsModal from './settings-modal';\n\nexport default function WindowHeader() {\n    const { t, i18n } = useTranslation();\n    const {\n        telemetry: { app: isAllowAppTelemetry },\n    } = useRootSelector(state => state.app);\n\n    const [isSettingsModalOpen, setIsSettingsModalOpen] = React.useState(false);\n    const [isAboutModalOpen, setIsAboutModalOpen] = React.useState(false);\n\n    const [environment, setEnvironment] = React.useState(RmgEnv.DEV);\n    const [appVersion, setAppVersion] = React.useState('unknown');\n\n    // load rmgRuntime asynchronously\n    React.useEffect(() => {\n        async function waitRmgRuntime() {\n            await rmgRuntime.ready();\n\n            if (isAllowAppTelemetry)\n                rmgRuntime.event(Events.APP_LOAD, { isStandaloneWindow: rmgRuntime.isStandaloneWindow() });\n\n            setEnvironment(rmgRuntime.getEnv());\n            setAppVersion(rmgRuntime.getAppVersion());\n        }\n\n        waitRmgRuntime();\n    }, [setEnvironment, setAppVersion]);\n\n    const handleChangeLanguage = async (language: LanguageCode) => {\n        rmgRuntime.setLanguage(language);\n        const t = await i18n.changeLanguage(language);\n        document.documentElement.lang = language;\n        document.title = t('header.about.rmp');\n    };\n\n    return (\n        <RmgWindowHeader>\n            <Heading as=\"h4\" size=\"md\" whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">\n                {t('header.about.rmp')}\n            </Heading>\n            <RmgEnvBadge\n                environment={environment}\n                version={appVersion}\n                popoverHeader={\n                    environment === RmgEnv.PRD ? undefined : (\n                        <Trans i18nKey=\"header.popoverHeader\" environment={environment}>\n                            You&apos;re on {{ environment }} environment!\n                        </Trans>\n                    )\n                }\n                popoverBody={\n                    environment === RmgEnv.PRD ? undefined : (\n                        <Trans i18nKey=\"header.popoverBody\">\n                            This is a testing environment where we test the latest beta RMP.\n                        </Trans>\n                    )\n                }\n            />\n\n            <HStack ml=\"auto\">\n                <ZoomPopover />\n\n                <OpenActions />\n\n                <DownloadActions />\n\n                <Menu>\n                    <MenuButton as={IconButton} icon={<MdTranslate />} variant=\"ghost\" size=\"sm\" />\n                    <MenuList>\n                        <MenuItem onClick={() => handleChangeLanguage(LanguageCode.English)}>English</MenuItem>\n                        <MenuItem onClick={() => handleChangeLanguage(LanguageCode.ChineseSimp)}>简体中文</MenuItem>\n                        <MenuItem onClick={() => handleChangeLanguage(LanguageCode.ChineseTrad)}>繁體中文</MenuItem>\n                    </MenuList>\n                </Menu>\n\n                <IconButton\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    aria-label=\"Settings\"\n                    icon={<MdSettings />}\n                    onClick={() => setIsSettingsModalOpen(true)}\n                />\n\n                <IconButton\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    aria-label=\"Help\"\n                    icon={<MdHelp />}\n                    onClick={() => setIsAboutModalOpen(true)}\n                />\n            </HStack>\n\n            <SettingsModal isOpen={isSettingsModalOpen} onClose={() => setIsSettingsModalOpen(false)} />\n            <AboutModal isOpen={isAboutModalOpen} onClose={() => setIsAboutModalOpen(false)} />\n        </RmgWindowHeader>\n    );\n}\n","import { Alert, AlertIcon, AlertStatus, CloseButton, Link } from '@chakra-ui/react';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { closeGlobalAlert } from '../../redux/runtime/runtime-slice';\n\nexport default function GlobalAlerts() {\n    const dispatch = useRootDispatch();\n\n    const globalAlerts = useRootSelector(state => state.runtime.globalAlerts);\n\n    const handleAppOpen = (linkedApp: string) => {\n        if (rmgRuntime.isStandaloneWindow()) {\n            window.open(`/${linkedApp}`, '_blank');\n        } else {\n            rmgRuntime.openApp(linkedApp);\n        }\n    };\n\n    return (\n        <>\n            {Object.entries(globalAlerts).map(([status, { message, url, linkedApp }]) => (\n                <Alert key={status} status={status as AlertStatus} variant=\"solid\" size=\"xs\" pl={3} pr={1} py={0}>\n                    <AlertIcon />\n                    {linkedApp ? (\n                        <Link onClick={() => handleAppOpen(linkedApp)}>{message}</Link>\n                    ) : url ? (\n                        <Link href={url} target=\"_blank\">\n                            {message}\n                        </Link>\n                    ) : (\n                        message\n                    )}\n                    <CloseButton ml=\"auto\" onClick={() => dispatch(closeGlobalAlert(status as AlertStatus))} />\n                </Alert>\n            ))}\n        </>\n    );\n}\n","import WindowHeader from './window-header';\nimport GlobalAlerts from './global-alerts';\n\n// A simple wrapper that load the following two into a single chunk.\nexport default function PageHeader() {\n    return (\n        <>\n            <WindowHeader />\n            <GlobalAlerts />\n        </>\n    );\n}\n","import { MultiDirectedGraph } from 'graphology';\nimport { NodeAttributes, EdgeAttributes, GraphAttributes } from '../constants/constants';\n\nexport const getMousePosition = (e: React.MouseEvent) => {\n    const bbox = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - bbox.left;\n    const y = e.clientY - bbox.top;\n    // console.log(e.clientX, bbox.left, e.clientY, bbox.top, x, y);\n    return { x, y };\n};\n\nexport const roundToNearestN = (x: number, n: number) => Math.round(x / n) * n;\n\nexport const calculateCanvasSize = (graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>) => {\n    let [xMin, yMin, xMax, yMax] = [Number.MAX_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MIN_VALUE];\n\n    graph.forEachNode((node, attr) => {\n        xMin = Math.min(attr.x, xMin);\n        yMin = Math.min(attr.y, yMin);\n        xMax = Math.max(attr.x, xMax);\n        yMax = Math.max(attr.y, yMax);\n    });\n\n    xMin -= 150;\n    yMin -= 150;\n    xMax += 150;\n    yMax += 150;\n\n    return { xMin, yMin, xMax, yMax };\n};\n","var map = {\n\t\"./beijing.json\": [\n\t\t4781,\n\t\t2639\n\t],\n\t\"./guangzhou.json\": [\n\t\t7845,\n\t\t5202\n\t],\n\t\"./santiago.json\": [\n\t\t8470,\n\t\t6398\n\t],\n\t\"./shanghai.json\": [\n\t\t7414,\n\t\t8233\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 9681;\nmodule.exports = webpackAsyncContext;"],"names":["GalleryModal","props","isOpen","handleOpenTemplates","onClose","t","useTranslation","handleSelect","name","module","default","map","city","minWidth","onClick","OpenActions","dispatch","useRootDispatch","graph","React","window","fileRMGInputRef","fileInputRef","isGalleryModalOpen","setIsGalleryModalOpen","refreshAndSave","setRefresh","saveGraph","current","export","handleUploadRMG","event","file","target","files","console","log","type","error","readFileAsText","paramStr","param","JSON","parse","stnList","stn_list","theme","stnIdMap","Object","fromEntries","keys","filter","id","includes","nanoid","entries","forEach","stnInfo","nodes","filterNodes","node","attr","values","StationType","names","length","i","style","transfer","info","flat","info_panel_type","stringify","stations","defaultAttrs","color","lineCode","line_num","stationCode","num","lv1","transferInfo","unshift","addNode","visible","zIndex","x","y","children","child","addDirectedEdgeWithKey","LineType","lines","value","handleUpload","upgrade","version","save","clearSelected","clear","import","state","setFullState","rmpSave","as","IconButton","size","variant","icon","svgViewBoxZoom","svgViewBoxMin","ref","accept","hidden","onChange","click","ml","colorScheme","Promise","resolve","reader","FileReader","onloadend","result","readAsText","scrollBehavior","href","isExternal","MdOpenInNew","DownloadActions","format","setFormat","formatOptions","png","svg","scale","setScale","scaleOptions","v","isTransparent","setIsTransparent","fields","label","options","pngFields","isChecked","isDownloadModalOpen","setIsDownloadModalOpen","isTermsAndConditionsModalOpen","setIsTermsAndConditionsModalOpen","isAttachSelected","setIsAttachSelected","isTermsAndConditionsSelected","setIsTermsAndConditionsSelected","stringifyParam","store","downloadAs","Date","valueOf","e","checked","open","disabled","calculateCanvasSize","xMin","yMin","xMax","yMax","width","height","elem","document","getElementById","cloneNode","hasNode","getNodeAttribute","MiscNodeType","removeChild","appendChild","generateRmpInfo","setAttribute","toString","className","styleSet","querySelector","getComputedStyle","querySelectorAll","el","styleName","getPropertyValue","removeAttribute","body","src","btoa","unescape","encodeURIComponent","outerHTML","canvas","createElement","canvasWidth","canvasHeight","ctx","getContext","fillStyle","fillRect","img","Image","onload","drawImage","toBlob","blob","downloadBlobAs","filename","data","Blob","url","URL","createObjectURL","a","download","revokeObjectURL","createElementNS","logo","rmp","createTextNode","link","appVersion","rmgRuntime","paddingBottom","direction","boxSize","process","alignItems","justifyContent","fontSize","margin","mt","mb","my","minW","cursor","mr","display","fontWeight","align","ZoomPopover","setIsOpen","useRootSelector","min","max","step","setSvgViewBoxZoom","leftIcon","rightIcon","onOpen","noLabel","linkColour","useColorModeValue","isAllowAnalytics","isAllowAppTelemetry","app","telemetry","divider","borderColor","flex","isDisabled","lineHeight","allowAppTelemetry","setTelemetryApp","WindowHeader","i18n","isSettingsModalOpen","setIsSettingsModalOpen","isAboutModalOpen","setIsAboutModalOpen","RmgEnv","environment","setEnvironment","setAppVersion","Events","isStandaloneWindow","waitRmgRuntime","handleChangeLanguage","language","changeLanguage","documentElement","lang","title","whiteSpace","overflow","textOverflow","popoverHeader","undefined","i18nKey","popoverBody","LanguageCode","GlobalAlerts","globalAlerts","runtime","status","message","linkedApp","pl","pr","py","handleAppOpen","closeGlobalAlert","PageHeader","getMousePosition","bbox","currentTarget","getBoundingClientRect","clientX","left","clientY","top","roundToNearestN","n","Math","round","Number","MAX_VALUE","MIN_VALUE","forEachNode","webpackAsyncContext","req","__webpack_require__","o","then","Error","code","ids","exports"],"sourceRoot":""}