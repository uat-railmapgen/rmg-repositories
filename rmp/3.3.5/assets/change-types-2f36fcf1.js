import{S as f,q as r,K as A,L as u,t as d}from"./index-8e2f9a0b.js";import{s as b}from"./stations-3ab3681b.js";const a=[f.ShmetroBasic2020],l=(t,e,s)=>{const o=t.getNodeAttribute(e,"type"),n=t.getNodeAttribute(e,o).names,c={...b[s].defaultAttrs,names:n};(!Object.values(a).includes(o)||!Object.values(a).includes(s))&&(c.nameOffsetX=t.getNodeAttribute(e,o).nameOffsetX,c.nameOffsetY=t.getNodeAttribute(e,o).nameOffsetY),t.removeNodeAttribute(e,o),t.mergeNodeAttributes(e,{type:s,[s]:c})},y=(t,e,s)=>t.filterNodes((o,n)=>o.startsWith("stn")&&n.type===e).forEach(o=>{l(t,o,s)}),N=(t,e,s,o)=>t.filterEdges(n=>t.getEdgeAttribute(n,"style")===e).forEach(n=>{m(t,n,s,o)}),O=(t,e,s)=>{const o=t.getEdgeAttribute(e,"type");t.removeEdgeAttribute(e,o);const n=structuredClone(r[s].defaultAttrs);t.mergeEdgeAttributes(e,{type:s,[s]:n})},m=(t,e,s,o)=>{const n=t.getEdgeAttribute(e,"style"),c=t.getEdgeAttribute(e,n);t.removeEdgeAttribute(e,n);const i=structuredClone(A[s].defaultAttrs);u.includes(n)&&u.includes(s)?i.color=c.color:u.includes(s)&&o&&(i.color=o),t.mergeEdgeAttributes(e,{style:s,[s]:i}),s===d.River?t.setEdgeAttribute(e,"zIndex",-5):t.setEdgeAttribute(e,"zIndex",0)},v=(t,e,s)=>t.filterEdges(o=>u.includes(t.getEdgeAttribute(o,"style"))).forEach(o=>{const n=t.getEdgeAttributes(o),c=n[n.style].color;c[0]==e[0]&&c[1]==e[1]&&c[2]==e[2]&&c[3]==e[3]&&t.mergeEdgeAttributes(o,{[n.style]:{color:s}})});export{N as a,v as b,y as c,l as d,O as e,m as f};
