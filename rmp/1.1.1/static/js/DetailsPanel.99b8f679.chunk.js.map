{"version":3,"file":"static/js/DetailsPanel.99b8f679.chunk.js","mappings":"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","sources":["components/panels/details/info-section.tsx","components/panels/details/node-position-section.tsx","components/panels/details/details.tsx","util/change-types.ts","../node_modules/@chakra-ui/layout/dist/chunk-B2MGPQRJ.mjs","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    AlertDialog,\n    AlertDialogOverlay,\n    AlertDialogContent,\n    AlertDialogHeader,\n    AlertDialogBody,\n    AlertDialogFooter,\n    Box,\n    Heading,\n    Button,\n} from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { setRefresh } from '../../../redux/runtime/runtime-slice';\nimport stations from '../../svgs/stations/stations';\nimport nodes from '../../svgs/nodes/misc-nodes';\nimport lines from '../../svgs/lines/lines';\nimport edges from '../../svgs/edges/misc-edges';\nimport { StationType } from '../../../constants/stations';\nimport { changeStationType } from '../../../util/change-types';\n\nexport default function InfoSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n\n    const { selected } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [isChangeTypeWarningOpen, setIsChangeTypeWarningOpen] = React.useState(false);\n    const cancelRef = React.useRef(null);\n    const [newType, setNewType] = React.useState<StationType | undefined>(undefined);\n\n    const currentType =\n        selected.length === 1\n            ? graph.current.hasNode(selectedFirst)\n                ? graph.current.getNodeAttribute(selectedFirst, 'type')\n                : graph.current.getEdgeAttribute(selectedFirst, 'type')\n            : selected.length > 1\n            ? 'multiple nodes'\n            : 'undefined';\n    const canSwitchStationType =\n        selected.length === 1 && selectedFirst!.startsWith('stn') && graph.current.hasNode(selectedFirst);\n\n    // type options for stations and others\n    const availableStationOptions = Object.fromEntries(\n        Object.entries(stations).map(([key, val]) => [key, t(val.metadata.displayName).toString()])\n    );\n    const nonChangeableOption = {\n        [currentType]: t(\n            {\n                ...stations,\n                ...nodes,\n                ...lines,\n                ...edges,\n                'multiple nodes': { metadata: { displayName: 'panel.details.multipleSelection' } },\n                undefined: { metadata: { displayName: 'undefined' } },\n            }[currentType].metadata.displayName\n        ).toString(),\n    };\n\n    const handleChangeStationType = () => {\n        if (canSwitchStationType && newType) {\n            changeStationType(graph.current, selectedFirst!, newType);\n            hardRefresh();\n        }\n    };\n    const handleClose = (proceed: boolean) => {\n        if (proceed) handleChangeStationType();\n        setNewType(undefined);\n        setIsChangeTypeWarningOpen(false);\n    };\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('panel.details.info.id'),\n            value: selected.length > 0 ? selected.join(', ') : 'undefined',\n            minW: 276,\n        },\n        {\n            type: 'select',\n            label: t('panel.details.info.type'),\n            value: currentType,\n            options: canSwitchStationType ? availableStationOptions : nonChangeableOption,\n            onChange: canSwitchStationType\n                ? val => {\n                      setNewType(val as StationType);\n                      setIsChangeTypeWarningOpen(true);\n                  }\n                : undefined,\n            minW: 276,\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('panel.details.info.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n\n            <AlertDialog\n                isOpen={isChangeTypeWarningOpen}\n                leastDestructiveRef={cancelRef}\n                onClose={() => handleClose(false)}\n            >\n                <AlertDialogOverlay>\n                    <AlertDialogContent>\n                        <AlertDialogHeader>{t('warning')}</AlertDialogHeader>\n                        <AlertDialogBody>{t('panel.details.changeStationTypeContent')}</AlertDialogBody>\n                        <AlertDialogFooter>\n                            <Button ref={cancelRef} onClick={() => handleClose(false)}>\n                                {t('cancel')}\n                            </Button>\n                            <Button ml=\"2\" colorScheme=\"red\" onClick={() => handleClose(true)}>\n                                {t('panel.details.changeStationType')}\n                            </Button>\n                        </AlertDialogFooter>\n                    </AlertDialogContent>\n                </AlertDialogOverlay>\n            </AlertDialog>\n        </Box>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { setRefresh } from '../../../redux/runtime/runtime-slice';\n\nexport default function NodePositionSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n    const {\n        selected,\n        refresh: { all: refreshAll },\n    } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [pos, setPos] = React.useState({ x: 0, y: 0 });\n    React.useEffect(() => {\n        const selectedFirst = selected.at(0);\n        if (selectedFirst?.startsWith('stn') || selectedFirst?.startsWith('misc_node_')) {\n            const x = graph.current.getNodeAttribute(selectedFirst, 'x');\n            const y = graph.current.getNodeAttribute(selectedFirst, 'y');\n            setPos({ x, y });\n        }\n    }, [refreshAll, selected]);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('panel.details.nodePosition.pos.x'),\n            value: pos.x.toString(),\n            validator: val => !Number.isNaN(val),\n            onChange: val => {\n                graph.current.mergeNodeAttributes(selectedFirst, { x: Number(val) });\n                hardRefresh();\n            },\n        },\n        {\n            type: 'input',\n            label: t('panel.details.nodePosition.pos.y'),\n            value: pos.y.toString(),\n            validator: val => !Number.isNaN(val),\n            onChange: val => {\n                graph.current.mergeNodeAttributes(selectedFirst, { y: Number(val) });\n                hardRefresh();\n            },\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('panel.details.nodePosition.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Button, Heading, HStack } from '@chakra-ui/react';\nimport { nanoid } from 'nanoid';\nimport {\n    RmgFields,\n    RmgFieldsField,\n    RmgSidePanel,\n    RmgSidePanelHeader,\n    RmgSidePanelBody,\n    RmgSidePanelFooter,\n} from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { clearSelected, setGlobalAlert, setRefresh, setRefreshReconcile } from '../../../redux/runtime/runtime-slice';\nimport ThemeButton from '../theme-button';\nimport ColourModal from '../colour-modal/colour-modal';\nimport { NodeAttributes, Theme } from '../../../constants/constants';\nimport stations from '../../svgs/stations/stations';\nimport miscNodes from '../../svgs/nodes/misc-nodes';\nimport lines from '../../svgs/lines/lines';\nimport miscEdges from '../../svgs/edges/misc-edges';\nimport InfoSection from './info-section';\nimport NodePositionSection from './node-position-section';\n\nconst nodes = { ...stations, ...miscNodes };\nconst edges = { ...lines, ...miscEdges };\n\nconst DetailsPanel = () => {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n    const { selected } = useRootSelector(state => state.runtime);\n    const graph = React.useRef(window.graph);\n\n    const handleClose = () => dispatch(clearSelected());\n    const handleDuplicate = (selectedFirst: string) => {\n        const allAttr = JSON.parse(JSON.stringify(graph.current.getNodeAttributes(selectedFirst))) as NodeAttributes;\n        allAttr.x += 50;\n        allAttr.y += 50;\n        const id = selectedFirst.startsWith('stn') ? `stn_${nanoid(10)}` : `misc_node_${nanoid(10)}`;\n        graph.current.addNode(id, allAttr);\n        hardRefresh();\n    };\n    const handleRemove = (selected: string[]) => {\n        dispatch(clearSelected());\n        selected.forEach(s => {\n            if (graph.current.hasNode(s)) graph.current.dropNode(s);\n            else if (graph.current.hasEdge(s)) graph.current.dropEdge(s);\n        });\n        hardRefresh();\n    };\n    // A helper method to remove all lines with the same color\n    const handleRemoveEntireLine = (selectedFirst: string) => {\n        dispatch(clearSelected());\n        const theme = graph.current.getEdgeAttribute(selectedFirst, 'color');\n        const lines = graph.current.filterEdges((edge, attr, source, target, sourceAttr, targetAttr, undirected) =>\n            attr.color.every((v, i) => v === theme[i])\n        );\n        lines.forEach(line => {\n            graph.current.dropEdge(line);\n        });\n        hardRefresh();\n    };\n\n    // hide reconcile for now\n    const [reconcileId, setReconcileId] = React.useState('');\n    React.useEffect(() => {\n        const selectedFirst = selected.at(0);\n        if (graph.current.hasEdge(selectedFirst))\n            setReconcileId(graph.current.getEdgeAttribute(selectedFirst, 'reconcileId') ?? 'undefined');\n    }, [selected]);\n\n    const fields: RmgFieldsField[] = [];\n    const selectedFirst = selected.at(0);\n\n    if (selected.length === 1 && graph.current.hasNode(selectedFirst)) {\n        const type = graph.current.getNodeAttribute(selectedFirst, 'type');\n        const attrs = graph.current.getNodeAttribute(selectedFirst, type);\n        fields.push(\n            ...nodes[type].fields\n                // TODO: filter will complain the type\n                // @ts-expect-error\n                .filter(field => field.type !== 'custom')\n                .map(\n                    // @ts-expect-error\n                    field =>\n                        ({\n                            type: field.type,\n                            label: t(field.label),\n                            value: field.value(attrs),\n                            options: field.options,\n                            disabledOptions: field.disabledOptions && field.disabledOptions(attrs),\n                            validator: field.validator,\n                            onChange: (val: string | number) => {\n                                let updatedAttrs: NodeAttributes;\n                                try {\n                                    updatedAttrs = field.onChange(val, attrs);\n                                } catch (error) {\n                                    dispatch(\n                                        setGlobalAlert({\n                                            status: 'error',\n                                            message: t(`err-code.${error as string}`),\n                                        })\n                                    );\n                                    return;\n                                }\n\n                                graph.current.mergeNodeAttributes(selectedFirst, {\n                                    [type]: updatedAttrs,\n                                });\n                                hardRefresh();\n                            },\n                        } as RmgFieldsField)\n                ),\n            // TODO: filter will complain the type\n            // @ts-expect-error\n            ...nodes[type].fields.filter(field => field.type === 'custom')\n        );\n    }\n\n    if (selected.length === 1 && graph.current.hasEdge(selectedFirst)) {\n        // TODO: remove this after #84\n        if (selectedFirst!.startsWith('line')) {\n            fields.push({\n                type: 'custom',\n                label: t('color'),\n                component: (\n                    <ThemeButton\n                        theme={graph.current.getEdgeAttribute(selectedFirst, 'color')}\n                        onClick={() => setIsModalOpen(true)}\n                    />\n                ),\n                minW: '40px',\n            });\n        }\n        // fields.push({\n        //     type: 'input',\n        //     label: t('panel.details.line.reconcileId'),\n        //     value: reconcileId,\n        //     onChange: val => {\n        //         setReconcileId(val);\n        //         graph.current.mergeEdgeAttributes(selectedFirst, { reconcileId: val });\n        //         dispatch(setRefreshReconcile());\n        //         dispatch(saveGraph(graph.current.export()));\n        //     },\n        // });\n        const type = graph.current.getEdgeAttribute(selectedFirst, 'type');\n        const attrs = graph.current.getEdgeAttribute(selectedFirst, type);\n        fields.push(\n            ...edges[type].fields.map(\n                field =>\n                    ({\n                        type: field.type,\n                        label: t(field.label),\n                        // TODO: fix this\n                        // @ts-ignore-error\n                        value: field.value(attrs),\n                        // TODO: fix this\n                        // @ts-ignore-error\n                        options: field.options,\n                        // TODO: fix this\n                        // @ts-ignore-error\n                        disabledOptions: field.disabledOptions && field.disabledOptions(attrs),\n                        // TODO: fix this\n                        // @ts-ignore-error\n                        validator: field.validator,\n                        onChange: (val: string | number) => {\n                            graph.current.mergeEdgeAttributes(selectedFirst, {\n                                // TODO: fix this\n                                // @ts-ignore-error\n                                [type]: field.onChange(val, attrs),\n                            });\n                            // console.log(graph.current.getEdgeAttributes(selectedFirst));\n                            hardRefresh();\n                        },\n                    } as RmgFieldsField)\n            )\n        );\n    }\n\n    const [isModalOpen, setIsModalOpen] = React.useState(false);\n    const handleChangeLineColor = (color: Theme) => {\n        if (selected.at(0) && graph.current.hasEdge(selected.at(0))) {\n            graph.current.mergeEdgeAttributes(selected.at(0), { color });\n            hardRefresh();\n        }\n    };\n\n    return (\n        <RmgSidePanel isOpen={selected.length > 0} width={300} header=\"Dummy header\" alwaysOverlay>\n            <RmgSidePanelHeader onClose={handleClose}>{t('panel.details.header')}</RmgSidePanelHeader>\n            <RmgSidePanelBody>\n                <InfoSection />\n\n                {selected.length === 1 && graph.current.hasNode(selectedFirst) && <NodePositionSection />}\n\n                <Box p={1}>\n                    <Heading as=\"h5\" size=\"sm\">\n                        {t('panel.details.specificAttrsTitle')}\n                    </Heading>\n\n                    <RmgFields fields={fields} minW={276} />\n                </Box>\n\n                <ColourModal\n                    isOpen={isModalOpen}\n                    defaultTheme={\n                        selected.at(0)?.startsWith('line')\n                            ? graph.current.getEdgeAttribute(selected.at(0), 'color')\n                            : undefined\n                    }\n                    onClose={() => setIsModalOpen(false)}\n                    onUpdate={nextTheme => handleChangeLineColor(nextTheme)}\n                />\n            </RmgSidePanelBody>\n            <RmgSidePanelFooter>\n                <HStack>\n                    {selected.length === 1 && graph.current.hasNode(selected.at(0)) && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => handleDuplicate(selected.at(0)!)}>\n                            {t('panel.details.footer.duplicate')}\n                        </Button>\n                    )}\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleRemove(selected)}>\n                        {t('panel.details.footer.remove')}\n                    </Button>\n                    {selected.length === 1 && selectedFirst?.startsWith('line-') && (\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => handleRemoveEntireLine(selected.at(0)!)}>\n                            {t('panel.details.footer.removeEntireLine')}\n                        </Button>\n                    )}\n                </HStack>\n            </RmgSidePanelFooter>\n        </RmgSidePanel>\n    );\n};\n\nexport default DetailsPanel;\n","import { MultiDirectedGraph } from 'graphology';\nimport { EdgeAttributes, GraphAttributes, NodeAttributes } from '../constants/constants';\nimport { StationType } from '../constants/stations';\nimport stations from '../components/svgs/stations/stations';\n\n/**\n * Change a station's type.\n * @param graph Graph.\n * @param selectedFirst Current station's id.\n * @param newType New station's type.\n */\nexport const changeStationType = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    selectedFirst: string,\n    newStnType: StationType\n) => {\n    const currentStnType = graph.getNodeAttribute(selectedFirst, 'type') as StationType;\n    const names = graph.getNodeAttribute(selectedFirst, currentStnType)!.names;\n    graph.removeNodeAttribute(selectedFirst, currentStnType);\n    const newAttrs = { ...stations[newStnType].defaultAttrs, names };\n    graph.mergeNodeAttributes(selectedFirst, { type: newStnType, [newStnType]: newAttrs });\n};\n\n/**\n * Change all the stations' type of currentStnType to newStnType in batch.\n * @param graph Graph.\n * @param currentStnType Current station's type.\n * @param newStnType New station's type.\n * @returns Nothing.\n */\nexport const changeStationsTypeInBatch = (\n    graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>,\n    currentStnType: StationType,\n    newStnType: StationType\n) =>\n    graph\n        .filterNodes((node, attr) => node.startsWith('stn') && attr.type === currentStnType)\n        .forEach(stnId => {\n            changeStationType(graph, stnId, newStnType);\n        });\n","// src/heading.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = forwardRef(function Heading2(props, ref) {\n  const styles = useStyleConfig(\"Heading\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.h2,\n    {\n      ref,\n      className: cx(\"chakra-heading\", props.className),\n      ...rest,\n      __css: styles\n    }\n  );\n});\nHeading.displayName = \"Heading\";\n\nexport {\n  Heading\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["InfoSection","t","useTranslation","dispatch","useRootDispatch","hardRefresh","React","setRefresh","saveGraph","graph","current","export","selected","useRootSelector","state","runtime","selectedFirst","at","window","isChangeTypeWarningOpen","setIsChangeTypeWarningOpen","cancelRef","undefined","newType","setNewType","currentType","length","hasNode","getNodeAttribute","getEdgeAttribute","canSwitchStationType","startsWith","availableStationOptions","Object","fromEntries","entries","stations","map","key","val","metadata","displayName","toString","nonChangeableOption","nodes","lines","edges","handleClose","proceed","changeStationType","fields","type","label","value","join","minW","options","onChange","p","as","size","isOpen","leastDestructiveRef","onClose","ref","onClick","ml","colorScheme","NodePositionSection","refreshAll","refresh","all","x","y","pos","setPos","validator","Number","isNaN","mergeNodeAttributes","miscNodes","miscEdges","setReconcileId","hasEdge","attrs","push","filter","field","disabledOptions","updatedAttrs","error","setGlobalAlert","status","message","component","theme","setIsModalOpen","mergeEdgeAttributes","isModalOpen","width","header","alwaysOverlay","clearSelected","defaultTheme","onUpdate","nextTheme","color","variant","allAttr","JSON","parse","stringify","getNodeAttributes","id","nanoid","addNode","handleDuplicate","forEach","s","dropNode","dropEdge","handleRemove","filterEdges","edge","attr","source","target","sourceAttr","targetAttr","undirected","every","v","i","line","handleRemoveEntireLine","newStnType","currentStnType","names","removeNodeAttribute","newAttrs","defaultAttrs","changeStationsTypeInBatch","filterNodes","node","stnId","Heading","forwardRef","props","styles","useStyleConfig","omitThemingProps","rest","className","jsx","chakra","cx","__css","crypto","getRandomValues","Uint8Array","reduce","byte","toUpperCase"],"sourceRoot":""}