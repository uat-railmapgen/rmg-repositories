{"version":3,"file":"static/js/7676.8d00559d.chunk.js","mappings":"mFAAA,IAAIA,EAAM,CACT,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,GACA,IAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,IACA,KAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,kDAAmD,CAClD,KACA,MAED,kDAAmD,CAClD,KACA,MAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBU,EAAED,EAAI,OAGnCX,EAAoBa,KAAO,WAAa,OAAOC,OAAOD,KAAKd,IAC3DC,EAAoBW,GAAK,KACzBI,EAAOC,QAAUhB,G,qBClMjB,IAAID,EAAM,CACT,cAAe,CACd,KACA,MAED,cAAe,CACd,KACA,MAED,YAAa,CACZ,KACA,MAED,eAAgB,CACf,KACA,MAED,iBAAkB,CACjB,KACA,KAED,eAAgB,CACf,KACA,MAED,cAAe,CACd,KACA,MAED,YAAa,CACZ,KACA,MAED,cAAe,CACd,KACA,MAED,iBAAkB,CACjB,KACA,MAED,gBAAiB,CAChB,KACA,MAED,aAAc,CACb,KACA,MAED,eAAgB,CACf,KACA,MAED,iBAAkB,CACjB,KACA,MAED,gBAAiB,CAChB,IACA,MAED,eAAgB,CACf,KACA,KAED,iBAAkB,CACjB,IACA,MAED,kBAAmB,CAClB,KACA,MAED,eAAgB,CACf,KACA,MAED,kBAAmB,CAClB,KACA,MAED,aAAc,CACb,KACA,MAED,cAAe,CACd,KACA,MAED,aAAc,CACb,KACA,MAED,gBAAiB,CAChB,KACA,MAED,gBAAiB,CAChB,KACA,IAED,iBAAkB,CACjB,IACA,MAED,iBAAkB,CACjB,KACA,KAED,cAAe,CACd,KACA,MAED,iBAAkB,CACjB,KACA,MAED,eAAgB,CACf,KACA,MAED,kBAAmB,CAClB,KACA,MAED,qCAAsC,CACrC,KACA,KAED,mBAAoB,CACnB,KACA,MAED,iBAAkB,CACjB,KACA,MAED,eAAgB,CACf,KACA,MAED,gBAAiB,CAChB,KACA,MAED,aAAc,CACb,IACA,MAED,cAAe,CACd,KACA,MAED,aAAc,CACb,KACA,KAED,iBAAkB,CACjB,IACA,MAED,iBAAkB,CACjB,KACA,MAED,gBAAiB,CAChB,KACA,MAED,aAAc,CACb,IACA,MAED,gBAAiB,CAChB,KACA,MAED,eAAgB,CACf,KACA,MAED,aAAc,CACb,KACA,MAED,cAAe,CACd,IACA,MAED,iBAAkB,CACjB,KACA,MAED,eAAgB,CACf,KACA,MAED,mBAAoB,CACnB,IACA,KAED,eAAgB,CACf,KACA,MAED,YAAa,CACZ,KACA,MAED,cAAe,CACd,KACA,MAED,cAAe,CACd,KACA,KAED,eAAgB,CACf,IACA,MAED,aAAc,CACb,KACA,MAED,cAAe,CACd,KACA,MAED,kBAAmB,CAClB,KACA,MAED,aAAc,CACb,KACA,MAED,iBAAkB,CACjB,KACA,MAED,gBAAiB,CAChB,KACA,MAED,cAAe,CACd,KACA,MAED,eAAgB,CACf,KACA,MAED,cAAe,CACd,KACA,GAED,kBAAmB,CAClB,KACA,MAED,iBAAkB,CACjB,KACA,MAED,eAAgB,CACf,KACA,MAED,cAAe,CACd,KACA,MAED,aAAc,CACb,KACA,MAED,YAAa,CACZ,KACA,KAED,aAAc,CACb,KACA,MAED,cAAe,CACd,IACA,MAED,aAAc,CACb,KACA,MAED,eAAgB,CACf,KACA,MAED,iBAAkB,CACjB,KACA,MAED,WAAY,CACX,KACA,MAED,cAAe,CACd,IACA,MAED,oBAAqB,CACpB,KACA,MAED,sBAAuB,CACtB,KACA,MAED,gBAAiB,CAChB,KACA,MAED,gBAAiB,CAChB,KACA,MAED,aAAc,CACb,KACA,MAED,gBAAiB,CAChB,KACA,MAED,gBAAiB,CAChB,KACA,MAED,gBAAiB,CAChB,KACA,MAED,gBAAiB,CAChB,KACA,MAED,iBAAkB,CACjB,KACA,MAED,iBAAkB,CACjB,KACA,MAED,cAAe,CACd,KACA,KAED,gBAAiB,CAChB,KACA,MAED,cAAe,CACd,KACA,KAED,eAAgB,CACf,KACA,MAED,gBAAiB,CAChB,KACA,MAED,cAAe,CACd,KACA,MAED,eAAgB,CACf,KACA,MAED,aAAc,CACb,KACA,MAED,mBAAoB,CACnB,KACA,MAED,cAAe,CACd,KACA,MAED,cAAe,CACd,KACA,MAED,aAAc,CACb,KACA,MAED,YAAa,CACZ,KACA,MAED,cAAe,CACd,KACA,MAED,YAAa,CACZ,KACA,MAED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","sources":["../node_modules/@railmapgen/rmg-palette-resources/flags|/home/runner/work/rmp/rmp/node_modules/@railmapgen/rmg-palette-resources/flags|lazy|/^/.//.*$/|groupOptions: {}|namespace object","../node_modules/@railmapgen/rmg-palette-resources/palettes|/home/runner/work/rmp/rmp/node_modules/@railmapgen/rmg-palette-resources/palettes|lazy|/^/.//.*/.js$/|chunkName: palettes|groupOptions: {}|namespace object","components/panels/colour-modal/flag-svg-emoji.tsx","components/panels/colour-modal/city-picker.tsx","components/panels/colour-modal/colour-picker.tsx","components/panels/colour-modal/colour-modal.tsx","components/panels/details/color-field.tsx","components/panels/colour-util.ts","components/panels/theme-button.tsx","components/svgs/lines/diagonal-line.tsx","components/svgs/lines/perpendicular-line.tsx","components/svgs/lines/simple-line.tsx","components/svgs/lines/lines.ts","components/svgs/common/multiline-text.tsx","components/svgs/stations/shmetro-int.tsx","components/svgs/stations/shmetro-basic.tsx","components/svgs/stations/shmetro-basic-2020.tsx","components/svgs/stations/gzmtr-basic.tsx","components/panels/details/interchange-card.tsx","components/panels/details/interchange-field.tsx","components/svgs/stations/gzmtr-int.tsx","components/svgs/stations/bjsubway-int.tsx","components/svgs/stations/stations.ts","constants/constants.ts","constants/lines.ts","constants/nodes.ts","constants/stations.ts","util/pathRounding.js"],"sourcesContent":["var map = {\n\t\"./1F1E6-1F1F9.svg\": [\n\t\t4592,\n\t\t9121\n\t],\n\t\"./1F1E6-1F1FF.svg\": [\n\t\t9427,\n\t\t9427\n\t],\n\t\"./1F1E7-1F1F4.svg\": [\n\t\t7191,\n\t\t7191\n\t],\n\t\"./1F1E7-1F1F7.svg\": [\n\t\t7304,\n\t\t7304\n\t],\n\t\"./1F1E8-1F1E6.svg\": [\n\t\t56,\n\t\t56\n\t],\n\t\"./1F1E8-1F1F1.svg\": [\n\t\t3450,\n\t\t3450\n\t],\n\t\"./1F1E8-1F1F3.svg\": [\n\t\t2537,\n\t\t2537\n\t],\n\t\"./1F1E9-1F1EA.svg\": [\n\t\t6311,\n\t\t6311\n\t],\n\t\"./1F1E9-1F1F0.svg\": [\n\t\t1890,\n\t\t1890\n\t],\n\t\"./1F1EA-1F1EC.svg\": [\n\t\t7365,\n\t\t7365\n\t],\n\t\"./1F1EA-1F1F8.svg\": [\n\t\t8721,\n\t\t8721\n\t],\n\t\"./1F1EB-1F1F7.svg\": [\n\t\t8514,\n\t\t8514\n\t],\n\t\"./1F1EC-1F1F7.svg\": [\n\t\t9515,\n\t\t9515\n\t],\n\t\"./1F1ED-1F1F0.svg\": [\n\t\t2248,\n\t\t2248\n\t],\n\t\"./1F1ED-1F1FA.svg\": [\n\t\t268,\n\t\t268\n\t],\n\t\"./1F1EE-1F1E9.svg\": [\n\t\t1370,\n\t\t1370\n\t],\n\t\"./1F1EE-1F1F3.svg\": [\n\t\t6236,\n\t\t6236\n\t],\n\t\"./1F1EE-1F1F7.svg\": [\n\t\t2617,\n\t\t2617\n\t],\n\t\"./1F1EE-1F1F9.svg\": [\n\t\t2480,\n\t\t3541\n\t],\n\t\"./1F1EF-1F1F5.svg\": [\n\t\t2741,\n\t\t2741\n\t],\n\t\"./1F1F0-1F1F7.svg\": [\n\t\t2255,\n\t\t2255\n\t],\n\t\"./1F1F2-1F1F4.svg\": [\n\t\t6435,\n\t\t6435\n\t],\n\t\"./1F1F2-1F1FD.svg\": [\n\t\t3086,\n\t\t3086\n\t],\n\t\"./1F1F2-1F1FE.svg\": [\n\t\t6082,\n\t\t6082\n\t],\n\t\"./1F1F3-1F1F4.svg\": [\n\t\t7779,\n\t\t6095\n\t],\n\t\"./1F1F5-1F1EA.svg\": [\n\t\t2955,\n\t\t2955\n\t],\n\t\"./1F1F5-1F1F1.svg\": [\n\t\t4700,\n\t\t4700\n\t],\n\t\"./1F1F5-1F1F9.svg\": [\n\t\t7791,\n\t\t7791\n\t],\n\t\"./1F1F7-1F1F4.svg\": [\n\t\t7224,\n\t\t7224\n\t],\n\t\"./1F1F7-1F1FA.svg\": [\n\t\t6031,\n\t\t6031\n\t],\n\t\"./1F1F8-1F1E6.svg\": [\n\t\t8600,\n\t\t8600\n\t],\n\t\"./1F1F8-1F1EA.svg\": [\n\t\t1550,\n\t\t1550\n\t],\n\t\"./1F1F8-1F1EC.svg\": [\n\t\t1229,\n\t\t1229\n\t],\n\t\"./1F1F9-1F1ED.svg\": [\n\t\t6203,\n\t\t6203\n\t],\n\t\"./1F1F9-1F1F7.svg\": [\n\t\t2237,\n\t\t2237\n\t],\n\t\"./1F1F9-1F1FC.svg\": [\n\t\t4252,\n\t\t4252\n\t],\n\t\"./1F1FA-1F1E6.svg\": [\n\t\t8521,\n\t\t8521\n\t],\n\t\"./1F1FA-1F1F3.svg\": [\n\t\t3353,\n\t\t3353\n\t],\n\t\"./1F1FA-1F1F8.svg\": [\n\t\t5439,\n\t\t5439\n\t],\n\t\"./1F1FA-1F1FF.svg\": [\n\t\t4504,\n\t\t4504\n\t],\n\t\"./1F1FB-1F1EA.svg\": [\n\t\t2630,\n\t\t2630\n\t],\n\t\"./1F1FB-1F1F3.svg\": [\n\t\t3886,\n\t\t3886\n\t],\n\t\"./1F3F4-E0067-E0062-E0065-E006E-E0067-E007F.svg\": [\n\t\t6129,\n\t\t6129\n\t],\n\t\"./1F3F4-E0067-E0062-E0073-E0063-E0074-E007F.svg\": [\n\t\t9272,\n\t\t138\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 1 | 16);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 2025;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ankara.js\": [\n\t\t8447,\n\t\t6869\n\t],\n\t\"./athens.js\": [\n\t\t6128,\n\t\t6810\n\t],\n\t\"./baku.js\": [\n\t\t2481,\n\t\t5792\n\t],\n\t\"./bangkok.js\": [\n\t\t6870,\n\t\t2358\n\t],\n\t\"./barcelona.js\": [\n\t\t6340,\n\t\t436\n\t],\n\t\"./beijing.js\": [\n\t\t2145,\n\t\t5520\n\t],\n\t\"./berlin.js\": [\n\t\t7976,\n\t\t1321\n\t],\n\t\"./bonn.js\": [\n\t\t7933,\n\t\t5189\n\t],\n\t\"./boston.js\": [\n\t\t8835,\n\t\t6739\n\t],\n\t\"./bucharest.js\": [\n\t\t5249,\n\t\t7599\n\t],\n\t\"./budapest.js\": [\n\t\t8895,\n\t\t7081\n\t],\n\t\"./cairo.js\": [\n\t\t6509,\n\t\t4874\n\t],\n\t\"./caracas.js\": [\n\t\t4883,\n\t\t9186\n\t],\n\t\"./changchun.js\": [\n\t\t7459,\n\t\t8719\n\t],\n\t\"./changsha.js\": [\n\t\t574,\n\t\t7206\n\t],\n\t\"./chengdu.js\": [\n\t\t6312,\n\t\t134\n\t],\n\t\"./chongqing.js\": [\n\t\t300,\n\t\t9770\n\t],\n\t\"./cochabamba.js\": [\n\t\t8174,\n\t\t8189\n\t],\n\t\"./cologne.js\": [\n\t\t6727,\n\t\t9898\n\t],\n\t\"./copenhagen.js\": [\n\t\t7070,\n\t\t4447\n\t],\n\t\"./daegu.js\": [\n\t\t6995,\n\t\t1847\n\t],\n\t\"./dalian.js\": [\n\t\t5169,\n\t\t6951\n\t],\n\t\"./delhi.js\": [\n\t\t3707,\n\t\t1392\n\t],\n\t\"./dongguan.js\": [\n\t\t3280,\n\t\t5449\n\t],\n\t\"./dortmund.js\": [\n\t\t2162,\n\t\t17\n\t],\n\t\"./edinburgh.js\": [\n\t\t285,\n\t\t8237\n\t],\n\t\"./eskisehir.js\": [\n\t\t1686,\n\t\t886\n\t],\n\t\"./foshan.js\": [\n\t\t8246,\n\t\t4788\n\t],\n\t\"./frankfurt.js\": [\n\t\t2040,\n\t\t3106\n\t],\n\t\"./glasgow.js\": [\n\t\t4476,\n\t\t4073\n\t],\n\t\"./gothenburg.js\": [\n\t\t6801,\n\t\t5303\n\t],\n\t\"./greatertorontoandhamiltonarea.js\": [\n\t\t2842,\n\t\t310\n\t],\n\t\"./guadalajara.js\": [\n\t\t9399,\n\t\t5081\n\t],\n\t\"./guangzhou.js\": [\n\t\t5841,\n\t\t1951\n\t],\n\t\"./hamburg.js\": [\n\t\t9505,\n\t\t8183\n\t],\n\t\"./hangzhou.js\": [\n\t\t3427,\n\t\t8140\n\t],\n\t\"./hanoi.js\": [\n\t\t507,\n\t\t3417\n\t],\n\t\"./harbin.js\": [\n\t\t4826,\n\t\t3875\n\t],\n\t\"./hefei.js\": [\n\t\t9982,\n\t\t425\n\t],\n\t\"./hiroshima.js\": [\n\t\t916,\n\t\t7826\n\t],\n\t\"./hochiminh.js\": [\n\t\t6770,\n\t\t2028\n\t],\n\t\"./hongkong.js\": [\n\t\t4243,\n\t\t9890\n\t],\n\t\"./iashi.js\": [\n\t\t940,\n\t\t5944\n\t],\n\t\"./istanbul.js\": [\n\t\t3107,\n\t\t4737\n\t],\n\t\"./jakarta.js\": [\n\t\t8457,\n\t\t3579\n\t],\n\t\"./jinan.js\": [\n\t\t5719,\n\t\t8975\n\t],\n\t\"./kansai.js\": [\n\t\t382,\n\t\t1614\n\t],\n\t\"./kaohsiung.js\": [\n\t\t3037,\n\t\t5066\n\t],\n\t\"./kharkiv.js\": [\n\t\t3804,\n\t\t2168\n\t],\n\t\"./klangvalley.js\": [\n\t\t137,\n\t\t743\n\t],\n\t\"./kunming.js\": [\n\t\t8852,\n\t\t8291\n\t],\n\t\"./lima.js\": [\n\t\t9118,\n\t\t8413\n\t],\n\t\"./lisbon.js\": [\n\t\t4075,\n\t\t6195\n\t],\n\t\"./london.js\": [\n\t\t8087,\n\t\t441\n\t],\n\t\"./luoyang.js\": [\n\t\t109,\n\t\t6546\n\t],\n\t\"./macao.js\": [\n\t\t8015,\n\t\t5288\n\t],\n\t\"./madrid.js\": [\n\t\t8020,\n\t\t3658\n\t],\n\t\"./manchester.js\": [\n\t\t2907,\n\t\t2194\n\t],\n\t\"./milan.js\": [\n\t\t4410,\n\t\t1342\n\t],\n\t\"./monterrey.js\": [\n\t\t7005,\n\t\t7153\n\t],\n\t\"./montreal.js\": [\n\t\t3678,\n\t\t5885\n\t],\n\t\"./munich.js\": [\n\t\t7368,\n\t\t6977\n\t],\n\t\"./nanjing.js\": [\n\t\t1664,\n\t\t7719\n\t],\n\t\"./naples.js\": [\n\t\t3738,\n\t\t9\n\t],\n\t\"./neworleans.js\": [\n\t\t7079,\n\t\t9450\n\t],\n\t\"./newtaipei.js\": [\n\t\t9114,\n\t\t1608\n\t],\n\t\"./newyork.js\": [\n\t\t8298,\n\t\t2871\n\t],\n\t\"./ningbo.js\": [\n\t\t8820,\n\t\t2832\n\t],\n\t\"./osaka.js\": [\n\t\t1064,\n\t\t1902\n\t],\n\t\"./oslo.js\": [\n\t\t8057,\n\t\t530\n\t],\n\t\"./other.js\": [\n\t\t7642,\n\t\t7101\n\t],\n\t\"./ottawa.js\": [\n\t\t254,\n\t\t4111\n\t],\n\t\"./paris.js\": [\n\t\t6651,\n\t\t5418\n\t],\n\t\"./qingdao.js\": [\n\t\t7994,\n\t\t2338\n\t],\n\t\"./rheinruhr.js\": [\n\t\t5790,\n\t\t4760\n\t],\n\t\"./rio.js\": [\n\t\t4618,\n\t\t8759\n\t],\n\t\"./riyadh.js\": [\n\t\t1000,\n\t\t1568\n\t],\n\t\"./sanfrancisco.js\": [\n\t\t4747,\n\t\t5562\n\t],\n\t\"./sanktpeterburg.js\": [\n\t\t1832,\n\t\t5436\n\t],\n\t\"./santiago.js\": [\n\t\t2568,\n\t\t4688\n\t],\n\t\"./saopaulo.js\": [\n\t\t6956,\n\t\t5028\n\t],\n\t\"./seoul.js\": [\n\t\t3266,\n\t\t9989\n\t],\n\t\"./shanghai.js\": [\n\t\t9656,\n\t\t1134\n\t],\n\t\"./shaoxing.js\": [\n\t\t4891,\n\t\t9327\n\t],\n\t\"./shenyang.js\": [\n\t\t2266,\n\t\t8951\n\t],\n\t\"./shenzhen.js\": [\n\t\t4691,\n\t\t5776\n\t],\n\t\"./singapore.js\": [\n\t\t2459,\n\t\t8914\n\t],\n\t\"./stockholm.js\": [\n\t\t4606,\n\t\t1425\n\t],\n\t\"./suzhou.js\": [\n\t\t9819,\n\t\t815\n\t],\n\t\"./taichung.js\": [\n\t\t5230,\n\t\t1624\n\t],\n\t\"./taipei.js\": [\n\t\t9489,\n\t\t672\n\t],\n\t\"./taiyuan.js\": [\n\t\t8965,\n\t\t3961\n\t],\n\t\"./tashkent.js\": [\n\t\t7247,\n\t\t2648\n\t],\n\t\"./tehran.js\": [\n\t\t2573,\n\t\t4433\n\t],\n\t\"./tianjin.js\": [\n\t\t7942,\n\t\t6349\n\t],\n\t\"./tokyo.js\": [\n\t\t3762,\n\t\t6719\n\t],\n\t\"./tyneandwear.js\": [\n\t\t9314,\n\t\t2900\n\t],\n\t\"./vienna.js\": [\n\t\t5252,\n\t\t8864\n\t],\n\t\"./warsaw.js\": [\n\t\t9727,\n\t\t9114\n\t],\n\t\"./wuhan.js\": [\n\t\t3742,\n\t\t4930\n\t],\n\t\"./wuxi.js\": [\n\t\t4099,\n\t\t1943\n\t],\n\t\"./xiamen.js\": [\n\t\t4610,\n\t\t8274\n\t],\n\t\"./xian.js\": [\n\t\t2591,\n\t\t5803\n\t],\n\t\"./yevpatoria.js\": [\n\t\t3342,\n\t\t8262\n\t],\n\t\"./yokohama.js\": [\n\t\t695,\n\t\t2187\n\t],\n\t\"./zhengzhou.js\": [\n\t\t7357,\n\t\t6030\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 6540;\nmodule.exports = webpackAsyncContext;","import React, { useEffect, useState } from 'react';\nimport { Image } from '@chakra-ui/react';\n\ninterface FlagSvgEmojiProps {\n    countryCode: string;\n    svgFilename?: string;\n}\n\nexport default function FlagSvgEmoji(props: FlagSvgEmojiProps) {\n    const { countryCode, svgFilename } = props;\n\n    const [src, setSrc] = useState<string | undefined>(undefined);\n\n    useEffect(() => {\n        if (svgFilename) {\n            import('@railmapgen/rmg-palette-resources/flags/' + svgFilename)\n                .then(module => module.default)\n                .then(setSrc)\n                .catch(err => console.error(`Failed to find SVG file ${svgFilename} as ${err?.message}`));\n        }\n    }, [svgFilename]);\n\n    return src ? <Image src={src} alt={`Flag of ${countryCode}`} h={17} mr={1} /> : <></>;\n}\n","import { RmgAutoComplete } from '@railmapgen/rmg-components';\nimport { CityCode, CityEntry, cityList, countryList } from '@railmapgen/rmg-palette-resources';\nimport { LanguageCode } from '@railmapgen/rmg-translate';\nimport { useTranslation } from 'react-i18next';\nimport FlagSvgEmoji from './flag-svg-emoji';\n\ninterface CityPickerProps {\n    defaultValueId?: CityCode;\n    onChange?: (val: CityCode) => void;\n}\n\nexport default function CityPicker(props: CityPickerProps) {\n    const { defaultValueId, onChange } = props;\n\n    const { i18n } = useTranslation();\n\n    const currentItem = defaultValueId ? cityList.find(item => item.id === defaultValueId) : undefined;\n\n    const displayValue = (item: CityEntry): string => {\n        return i18n.languages.map(lng => item.name[lng as LanguageCode]).find(name => name !== undefined)!;\n    };\n\n    const displayHandler = (item: CityEntry) => {\n        const isCensorTWFlag =\n            item.country === 'TW' &&\n            [LanguageCode.ChineseSimp, LanguageCode.ChineseCN].includes(i18n.languages[0] as LanguageCode);\n        const isWindowsClient = ['Win32', 'Win64'].includes(navigator.platform);\n        // const isWindowsClient = true; // uncomment this line for Windows testing\n\n        const name = i18n.languages.map(lng => item.name[lng as LanguageCode]).find(name => name !== undefined);\n        const flagSvg = countryList.find(country => country.id === item.country)?.flagSvg;\n        const flagEmoji = countryList.find(country => country.id === item.country)?.flagEmoji;\n\n        return (\n            <>\n                {isCensorTWFlag ? (\n                    <span>🏴&nbsp;</span>\n                ) : isWindowsClient ? (\n                    <FlagSvgEmoji countryCode={item.country} svgFilename={flagSvg} />\n                ) : (\n                    <span>{flagEmoji}&nbsp;</span>\n                )}\n                {name}\n            </>\n        );\n    };\n\n    const predicate = (item: CityEntry, input: string): boolean => {\n        return Object.values(item.name).some(name => name.includes(input));\n    };\n\n    const data = cityList.slice().sort((a, b) => {\n        if (a.id === CityCode.Other) {\n            return 1;\n        } else if (b.id === CityCode.Other) {\n            return -1;\n        } else {\n            return displayValue(a).localeCompare(displayValue(b), i18n.languages[0]);\n        }\n    });\n\n    return (\n        <RmgAutoComplete\n            data={data}\n            displayValue={displayValue}\n            displayHandler={displayHandler}\n            predicate={predicate}\n            defaultValue={currentItem}\n            onChange={item => onChange?.(item.id)}\n        />\n    );\n}\n","import { useEffect, useState } from 'react';\nimport { RmgAutoComplete, RmgLineBadge } from '@railmapgen/rmg-components';\nimport { CityCode, ColourHex, MonoColour, PaletteEntry } from '@railmapgen/rmg-palette-resources';\nimport { LanguageCode } from '@railmapgen/rmg-translate';\nimport { useTranslation } from 'react-i18next';\n\nconst usePalette = (cityCode?: CityCode) => {\n    const [paletteList, setPaletteList] = useState<PaletteEntry[]>([]);\n\n    useEffect(() => {\n        import(/* webpackChunkName: \"palettes\" */ `@railmapgen/rmg-palette-resources/palettes/${cityCode}.js`)\n            .then(module => setPaletteList(module.default))\n            .catch(() => setPaletteList([]));\n    }, [cityCode]);\n\n    return paletteList;\n};\n\ninterface ColourPickerProps {\n    city?: CityCode;\n    defaultValueId?: string;\n    onChange?: (lineCode: string, bg: ColourHex, fg: MonoColour) => void;\n}\n\nexport default function ColourPicker(props: ColourPickerProps) {\n    const { city, defaultValueId, onChange } = props;\n\n    const { i18n } = useTranslation();\n\n    const paletteList = usePalette(city);\n\n    const currentItem = defaultValueId ? paletteList.find(palette => palette.id === defaultValueId) : undefined;\n\n    const displayValue = (item: PaletteEntry): string => {\n        return i18n.languages.map(lng => item.name[lng as LanguageCode]).find(name => name !== undefined)!;\n    };\n\n    const displayHandler = (item: PaletteEntry) => {\n        const displayName = displayValue(item);\n\n        return <RmgLineBadge name={displayName} fg={item.fg || MonoColour.white} bg={item.colour} />;\n    };\n\n    const predicate = (item: PaletteEntry, input: string): boolean => {\n        return Object.values(item.name).some(name => name.includes(input));\n    };\n\n    return (\n        <RmgAutoComplete\n            data={paletteList}\n            displayValue={displayValue}\n            displayHandler={displayHandler}\n            predicate={predicate}\n            defaultValue={currentItem}\n            onChange={item => onChange?.(item.id, item.colour, item.fg || MonoColour.white)}\n        />\n    );\n}\n","import {\n    Button,\n    Icon,\n    Link,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    Tab,\n    TabList,\n    TabPanel,\n    TabPanels,\n    Tabs,\n    Text,\n    VStack,\n} from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { RmgFields, RmgFieldsField, RmgLineBadge } from '@railmapgen/rmg-components';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { CityCode, ColourHex, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { Theme } from '../../../constants/constants';\nimport CityPicker from './city-picker';\nimport ColourPicker from './colour-picker';\nimport { useTranslation } from 'react-i18next';\nimport { MdOpenInNew } from 'react-icons/md';\n\ninterface ColourModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    defaultTheme?: Theme;\n    onUpdate?: (theme: Theme) => void;\n}\n\nexport default function ColourModal(props: ColourModalProps) {\n    const { isOpen, onClose, defaultTheme, onUpdate } = props;\n\n    const { t } = useTranslation();\n\n    const [cityCode, setCityCode] = useState(defaultTheme?.[0]);\n    const [lineCode, setLineCode] = useState(defaultTheme?.[1]);\n    const [bgColour, setBgColour] = useState(defaultTheme?.[2] || '#AAAAAA');\n    const [fgColour, setFgColour] = useState(defaultTheme?.[3] || MonoColour.white);\n\n    useEffect(() => {\n        if (defaultTheme) {\n            setCityCode(defaultTheme[0]);\n            setLineCode(defaultTheme[1]);\n            setBgColour(defaultTheme[2]);\n            setFgColour(defaultTheme[3]);\n        }\n    }, [isOpen, defaultTheme?.toString()]);\n\n    const paletteFields: RmgFieldsField[] = [\n        {\n            type: 'custom',\n            label: t('colorModal.city'),\n            component: (\n                <CityPicker\n                    defaultValueId={cityCode}\n                    onChange={value => {\n                        setCityCode(value);\n                        setLineCode(undefined);\n                        setBgColour('#AAAAAA');\n                        setFgColour(MonoColour.white);\n                    }}\n                />\n            ),\n        },\n        {\n            type: 'custom',\n            label: t('colorModal.line'),\n            component: (\n                <ColourPicker\n                    city={cityCode}\n                    defaultValueId={lineCode}\n                    onChange={(line, bg, fg) => {\n                        setLineCode(line);\n                        setBgColour(bg);\n                        setFgColour(fg);\n                    }}\n                />\n            ),\n        },\n    ];\n\n    const customFields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('colorModal.bg'),\n            variant: 'color',\n            value: bgColour,\n            placeholder: '#F3D03E',\n            onChange: value => {\n                setCityCode(CityCode.Other);\n                setLineCode('other');\n                setBgColour(value as ColourHex);\n            },\n        },\n        {\n            type: 'select',\n            label: t('colorModal.fg'),\n            value: fgColour,\n            options: {\n                [MonoColour.white]: t('colorModal.white'),\n                [MonoColour.black]: t('colorModal.black'),\n            },\n            onChange: value => {\n                setCityCode(CityCode.Other);\n                setLineCode('other');\n                setFgColour(value as MonoColour);\n            },\n        },\n    ];\n\n    const handleOpenPalette = () => {\n        if (rmgRuntime.isStandaloneWindow()) {\n            window.open('/rmg-palette', '_blank');\n        } else {\n            rmgRuntime.openApp('rmg-palette');\n        }\n    };\n\n    const isSubmitEnabled = cityCode && lineCode && bgColour && fgColour;\n\n    const handleSubmit = () => {\n        if (isSubmitEnabled) {\n            onUpdate?.([cityCode, lineCode, bgColour, fgColour]);\n            onClose();\n        }\n    };\n\n    const name = t('colorModal.example');\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('colorModal.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <VStack>\n                        <RmgLineBadge name={name} fg={fgColour} bg={bgColour} />\n\n                        <Tabs isFitted colorScheme=\"teal\" w=\"100%\" defaultIndex={cityCode === CityCode.Other ? 1 : 0}>\n                            <TabList>\n                                <Tab>{t('colorModal.palette')}</Tab>\n                                <Tab>{t('colorModal.custom')}</Tab>\n                            </TabList>\n\n                            <TabPanels>\n                                <TabPanel>\n                                    <RmgFields fields={paletteFields} />\n                                </TabPanel>\n                                <TabPanel>\n                                    <RmgFields fields={customFields} />\n                                </TabPanel>\n                            </TabPanels>\n                        </Tabs>\n                    </VStack>\n                </ModalBody>\n\n                <ModalFooter>\n                    <Text fontSize=\"sm\" marginRight={2}>\n                        {t('colorModal.seeAll')}\n                        <Link color=\"teal.500\" onClick={handleOpenPalette}>\n                            {t('Palette')} <Icon as={MdOpenInNew} />\n                        </Link>\n                    </Text>\n\n                    <Button colorScheme=\"teal\" onClick={handleSubmit} disabled={!isSubmitEnabled}>\n                        {t('colorModal.submit')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import React from 'react';\nimport { NodeType, Theme } from '../../../constants/constants';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { setRefresh } from '../../../redux/runtime/runtime-slice';\nimport ThemeButton from '../theme-button';\nimport ColourModal from '../colour-modal/colour-modal';\n\n/**\n * An Attributes that have a color field.\n * Extend this interface in your component's attributes if you want to use <ColorField />.\n *\n * NOTE: Attribute with `color` key will be populated with user defined theme from\n * the _runtime_ redux store. See `handleBackgroundDown` in `SvgWrapper` for more info.\n */\nexport interface AttributesWithColor {\n    color: Theme;\n}\n\n/**\n * This component provides an easy way to have a color input in the details panel.\n * It will read the first id in `selected` and change the `color` field in the related attrs.\n *\n * Make sure your component has a color field in the attributes.\n * You may extend AttributesWithColor interface.\n * Fail to do this will result in a redundant color field in your component's attributes.\n */\nexport const ColorField = (props: { type: NodeType; defaultAttrs: AttributesWithColor }) => {\n    const { type, defaultAttrs } = props;\n\n    const dispatch = useRootDispatch();\n\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n    const { selected } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [isModalOpen, setIsModalOpen] = React.useState(false);\n    const handleChangeColor = (color: Theme) => {\n        if (selectedFirst && graph.current.hasNode(selectedFirst)) {\n            const attrs = (graph.current.getNodeAttribute(selectedFirst, type) as AttributesWithColor) ?? defaultAttrs;\n            attrs.color = color;\n            graph.current.mergeNodeAttributes(selectedFirst, { [type]: attrs });\n            hardRefresh();\n        }\n    };\n\n    const theme =\n        selectedFirst &&\n        graph.current.hasNode(selectedFirst) &&\n        graph.current.getNodeAttribute(selectedFirst, 'type') === type\n            ? ((graph.current.getNodeAttribute(selectedFirst, type) as AttributesWithColor) ?? defaultAttrs).color\n            : defaultAttrs.color;\n\n    return (\n        <>\n            <ThemeButton theme={theme} onClick={() => setIsModalOpen(true)} />\n            <ColourModal\n                isOpen={isModalOpen}\n                defaultTheme={theme}\n                onClose={() => setIsModalOpen(false)}\n                onUpdate={nextTheme => handleChangeColor(nextTheme)}\n            />\n        </>\n    );\n};\n","import { ColourHex } from '@railmapgen/rmg-palette-resources';\nimport { rmgChakraTheme } from '@railmapgen/rmg-components';\n\nexport default class ColourUtil {\n    private static hexToRgb(hex: ColourHex): [number, number, number] {\n        return [parseInt(hex.slice(1, 3), 16), parseInt(hex.slice(3, 5), 16), parseInt(hex.slice(5, 7), 16)];\n    }\n\n    public static fade(hex: ColourHex, alpha: number): `rgba(${string})` {\n        return `rgba(${[...this.hexToRgb(hex), alpha].join(',')})`;\n    }\n\n    public static euclideanDistance(hex1: ColourHex, hex2: ColourHex): number {\n        return this.hexToRgb(hex1).reduce((acc, cur, idx) => {\n            return acc + Math.pow(cur - this.hexToRgb(hex2)[idx], 2);\n        }, 0);\n    }\n}\n\nexport const findNearestColour = (hex: ColourHex): string => {\n    const colourDb: Record<string, Record<string, ColourHex> | ColourHex> = rmgChakraTheme.colors;\n\n    const [nearestColour] = Object.entries(colourDb).reduce(\n        (acc, cur) => {\n            if (cur[0].includes('Alpha') || cur[0] === 'current') {\n                return acc;\n            } else if (typeof cur[1] === 'string') {\n                const dist = ColourUtil.euclideanDistance(hex, cur[1]);\n                return dist < acc[1] ? [cur[0], dist] : acc;\n            } else {\n                const dist = ColourUtil.euclideanDistance(hex, cur[1]['600']);\n                return dist < acc[1] ? [cur[0], dist] : acc;\n            }\n        },\n        ['brand', Infinity]\n    );\n    return nearestColour;\n};\n","import React from 'react';\nimport ColourUtil from './colour-util';\nimport { MdCircle } from 'react-icons/md';\nimport { IconButton } from '@chakra-ui/react';\nimport { Theme } from '../../constants/constants';\nimport { useTranslation } from 'react-i18next';\n\ninterface ThemeButtonProps {\n    theme: Theme;\n    onClick?: () => void;\n}\n\nexport default function ThemeButton(props: ThemeButtonProps) {\n    const { theme, onClick } = props;\n\n    const { t } = useTranslation();\n\n    return (\n        <IconButton\n            aria-label={t('Color')}\n            color={theme[3]}\n            bg={theme[2]}\n            size=\"lg\"\n            style={{ minHeight: 50, minWidth: 50 }}\n            _hover={{ bg: ColourUtil.fade(theme[2], 0.7) }}\n            icon={<MdCircle />}\n            onClick={onClick}\n        />\n    );\n}\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport { LineAttributes, Line, LineComponentProps, GeneratePathFunction } from '../../../constants/lines';\nimport { roundPathCorners } from '../../../util/pathRounding';\n\nconst generatePath: GeneratePathFunction<DiagonalLineAttributes> = (\n    propsx1: number,\n    propsx2: number,\n    propsy1: number,\n    propsy2: number,\n    attrs: DiagonalLineAttributes\n) => {\n    const {\n        startFrom = defaultDiagonalLineAttributes.startFrom,\n        offsetFrom = defaultDiagonalLineAttributes.offsetFrom,\n        offsetTo = defaultDiagonalLineAttributes.offsetTo,\n    } = attrs;\n\n    const x1_ = startFrom === 'from' ? propsx1 : propsx2;\n    const x2_ = startFrom === 'from' ? propsx2 : propsx1;\n    const y1_ = startFrom === 'from' ? propsy1 : propsy2;\n    const y2_ = startFrom === 'from' ? propsy2 : propsy1;\n\n    // indicate the line angle start from x1, y1\n    const horizontalOrVertical = Math.abs(x2_ - x1_) > Math.abs(y2_ - y1_) ? 'vertical' : 'horizontal';\n\n    const [offset1, offset2] = startFrom === 'from' ? [offsetFrom, offsetTo] : [offsetTo, offsetFrom];\n    const dx1 = horizontalOrVertical === 'vertical' ? 0 : offset1;\n    const dy1 = horizontalOrVertical === 'vertical' ? offset1 : 0;\n    const dx2 = Math.sqrt(Math.abs(offset2)) * (offset2 >= 0 ? 1 : -1);\n    const dy2 =\n        ((x2_ - x1_ > 0 && y2_ - y1_ > 0) || (x2_ - x1_ < 0 && y2_ - y1_ < 0) ? -1 : 1) *\n        Math.sqrt(Math.abs(offset2)) *\n        (offset2 >= 0 ? 1 : -1);\n\n    const [x1, y1, x2, y2] = [x1_ + dx1, y1_ + dy1, x2_ + dx2, y2_ + dy2];\n\n    const x = horizontalOrVertical === 'vertical' ? x2 + Math.abs(y2 - y1) * (x2 - x1 > 0 ? -1 : 1) : x1;\n    const y = horizontalOrVertical === 'vertical' ? y1 : y2 + Math.abs(x2 - x1) * (y2 - y1 > 0 ? -1 : 1);\n\n    return { type: 'straight', d: `M ${x1},${y1} L ${x},${y} L ${x2},${y2}` };\n};\n\nconst DiagonalLine = (props: LineComponentProps) => {\n    const { id, attrs, newLine, handleClick } = props;\n    const { color, diagonal = defaultDiagonalLineAttributes } = attrs;\n\n    const path = generatePath(props.x1, props.x2, props.y1, props.y2, diagonal);\n\n    const onClick = React.useCallback(\n        (e: React.MouseEvent<SVGPathElement, MouseEvent>) => handleClick(id, e),\n        [id, handleClick]\n    );\n\n    return React.useMemo(\n        () => (\n            <path\n                id={id}\n                d={roundPathCorners(path.d, 7.5, false)}\n                fill=\"none\"\n                stroke={color[2]}\n                strokeWidth={5}\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n                onClick={newLine ? undefined : onClick}\n                pointerEvents={newLine ? 'none' : undefined}\n            />\n        ),\n        [\n            props.x1,\n            props.y1,\n            props.x2,\n            props.y2,\n            color[2],\n            diagonal.startFrom,\n            diagonal.offsetFrom,\n            diagonal.offsetTo,\n            newLine,\n            onClick,\n        ]\n    );\n};\n\n/**\n * <DiagonalLine /> specific props.\n */\nexport interface DiagonalLineAttributes extends LineAttributes {\n    /**\n     * Change the drawing direction of line.\n     * e.g. from\n     *         b\n     *        /\n     *      a-\n     * e.g. to\n     *        -b\n     *       /\n     *      a\n     */\n    startFrom: 'from' | 'to';\n    offsetFrom: number;\n    offsetTo: number;\n}\n\nconst defaultDiagonalLineAttributes: DiagonalLineAttributes = { startFrom: 'from', offsetFrom: 0, offsetTo: 0 };\n\nconst diagonalLineFields = [\n    {\n        type: 'select',\n        label: 'panel.details.line.diagonal.startFrom',\n        value: (attrs?: DiagonalLineAttributes) => attrs?.startFrom ?? defaultDiagonalLineAttributes.startFrom,\n        options: { from: 'from', to: 'to' },\n        onChange: (val: string | number, attrs_: DiagonalLineAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultDiagonalLineAttributes;\n            // set value\n            attrs.startFrom = val as 'from' | 'to';\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.line.diagonal.offsetFrom',\n        value: (attrs?: DiagonalLineAttributes) =>\n            (attrs?.offsetFrom ?? defaultDiagonalLineAttributes.offsetFrom).toString(),\n        validator: (val: string) => !Number.isNaN(val),\n        onChange: (val: string | number, attrs_: DiagonalLineAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultDiagonalLineAttributes;\n            // return if invalid\n            if (Number.isNaN(val)) return attrs;\n            // set value\n            attrs.offsetFrom = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.line.diagonal.offsetTo',\n        value: (attrs?: DiagonalLineAttributes) =>\n            (attrs?.offsetTo ?? defaultDiagonalLineAttributes.offsetTo).toString(),\n        validator: (val: string) => !Number.isNaN(val),\n        onChange: (val: string | number, attrs_: DiagonalLineAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultDiagonalLineAttributes;\n            // return if invalid\n            if (Number.isNaN(val)) return attrs;\n            // set value\n            attrs.offsetTo = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst diagonalLineIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <path d=\"M9,18V12L15,6\" stroke=\"currentColor\" fill=\"none\" />\n    </svg>\n);\n\nconst diagonalLine: Line<DiagonalLineAttributes> = {\n    component: DiagonalLine,\n    icon: diagonalLineIcon,\n    defaultAttrs: defaultDiagonalLineAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: diagonalLineFields,\n    generatePath,\n    metadata: {\n        displayName: 'panel.details.line.diagonal.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default diagonalLine;\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport { LineAttributes, Line, LineComponentProps, GeneratePathFunction } from '../../../constants/lines';\nimport { roundPathCorners } from '../../../util/pathRounding';\n\nconst generatePath: GeneratePathFunction<PerpendicularLineAttributes> = (\n    x1: number,\n    x2: number,\n    y1: number,\n    y2: number,\n    attrs: PerpendicularLineAttributes\n) => {\n    // get type specific attrs with default value\n    const {\n        startFrom = defaultPerpendicularLineAttributes.startFrom,\n        offsetFrom = defaultPerpendicularLineAttributes.offsetFrom,\n        offsetTo = defaultPerpendicularLineAttributes.offsetTo,\n    } = attrs;\n\n    const [offset1, offset2] = startFrom === 'from' ? [offsetFrom, offsetTo] : [offsetTo, offsetFrom];\n    const [dx1, dy1, dx2, dy2] = startFrom === 'from' ? [0, offset1, offset2, 0] : [offset1, 0, 0, offset2];\n\n    const x = startFrom === 'from' ? x2 + dx2 : x1 + dx1;\n    const y = startFrom === 'from' ? y1 + dy1 : y2 + dy2;\n\n    return { type: 'straight', d: `M ${x1 + dx1},${y1 + dy1} L ${x},${y} L ${x2 + dx2},${y2 + dy2}` };\n};\n\nconst PerpendicularLine = (props: LineComponentProps) => {\n    const { id, x1, x2, y1, y2, attrs, newLine, handleClick } = props;\n    const { color, perpendicular = defaultPerpendicularLineAttributes } = attrs;\n    const { roundCornerFactor = defaultPerpendicularLineAttributes.roundCornerFactor } = perpendicular;\n\n    const [path, setPath] = React.useState(generatePath(x1, x2, y1, y2, perpendicular));\n    React.useEffect(\n        () => setPath(generatePath(x1, x2, y1, y2, perpendicular)),\n        [x1, y1, x2, y2, perpendicular.startFrom, perpendicular.offsetFrom, perpendicular.offsetTo]\n    );\n\n    const onClick = React.useCallback(\n        (e: React.MouseEvent<SVGPathElement, MouseEvent>) => handleClick(id, e),\n        [id, handleClick]\n    );\n\n    return React.useMemo(\n        () => (\n            <path\n                id={id}\n                d={roundPathCorners(path.d, roundCornerFactor, false)}\n                fill=\"none\"\n                stroke={color[2]}\n                strokeWidth={5}\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n                onClick={newLine ? undefined : onClick}\n                pointerEvents={newLine ? 'none' : undefined}\n            />\n        ),\n        [path.d, roundCornerFactor, color[2], newLine, onClick]\n    );\n};\n\n/**\n * <PerpendicularLine /> specific props.\n */\nexport interface PerpendicularLineAttributes extends LineAttributes {\n    /**\n     * Change the drawing direction of line.\n     * e.g. from\n     *        b\n     *        |\n     *      a-\n     * e.g. to\n     *       -b\n     *      |\n     *      a\n     */\n    startFrom: 'from' | 'to';\n    offsetFrom: number;\n    offsetTo: number;\n    roundCornerFactor: number;\n}\n\nconst defaultPerpendicularLineAttributes: PerpendicularLineAttributes = {\n    startFrom: 'from',\n    offsetFrom: 0,\n    offsetTo: 0,\n    roundCornerFactor: 7.5,\n};\n\nconst perpendicularFields = [\n    {\n        type: 'select',\n        label: 'panel.details.line.perpendicular.startFrom',\n        value: (attrs?: PerpendicularLineAttributes) =>\n            attrs?.startFrom ?? defaultPerpendicularLineAttributes.startFrom,\n        options: { from: 'from', to: 'to' },\n        onChange: (val: string | number, attrs_: PerpendicularLineAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultPerpendicularLineAttributes;\n            // set value\n            attrs.startFrom = val as 'from' | 'to';\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.line.perpendicular.offsetFrom',\n        value: (attrs?: PerpendicularLineAttributes) =>\n            (attrs?.offsetFrom ?? defaultPerpendicularLineAttributes.offsetFrom).toString(),\n        validator: (val: string) => !Number.isNaN(val),\n        onChange: (val: string | number, attrs_: PerpendicularLineAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultPerpendicularLineAttributes;\n            // return if invalid\n            if (Number.isNaN(val)) return attrs;\n            // set value\n            attrs.offsetFrom = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.line.perpendicular.offsetTo',\n        value: (attrs?: PerpendicularLineAttributes) =>\n            (attrs?.offsetTo ?? defaultPerpendicularLineAttributes.offsetTo).toString(),\n        validator: (val: string) => !Number.isNaN(val),\n        onChange: (val: string | number, attrs_: PerpendicularLineAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultPerpendicularLineAttributes;\n            // return if invalid\n            if (Number.isNaN(val)) return attrs;\n            // set value\n            attrs.offsetTo = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.line.perpendicular.roundCornerFactor',\n        value: (attrs?: PerpendicularLineAttributes) =>\n            (attrs?.roundCornerFactor ?? defaultPerpendicularLineAttributes.roundCornerFactor).toString(),\n        validator: (val: string) => !Number.isNaN(val),\n        onChange: (val: string | number, attrs_: PerpendicularLineAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultPerpendicularLineAttributes;\n            // return if invalid\n            if (Number.isNaN(val)) return attrs;\n            // set value\n            attrs.roundCornerFactor = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst perpendicularIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <path d=\"M6,6H18V18\" stroke=\"currentColor\" fill=\"none\" />\n    </svg>\n);\n\nconst perpendicularLine: Line<PerpendicularLineAttributes> = {\n    component: PerpendicularLine,\n    icon: perpendicularIcon,\n    defaultAttrs: defaultPerpendicularLineAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: perpendicularFields,\n    generatePath,\n    metadata: {\n        displayName: 'panel.details.line.perpendicular.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default perpendicularLine;\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport { LineAttributes, Line, LineComponentProps } from '../../../constants/lines';\n\nconst SimpleLine = (props: LineComponentProps) => {\n    const { id, attrs, newLine, handleClick } = props;\n    const { color } = attrs;\n\n    const onClick = React.useCallback(\n        (e: React.MouseEvent<SVGPathElement, MouseEvent>) => handleClick(id, e),\n        [id, handleClick]\n    );\n\n    return React.useMemo(\n        () => (\n            <path\n                d={`M ${props.x1},${props.y1} L ${props.x2},${props.y2}`}\n                fill=\"none\"\n                stroke={color[2]}\n                strokeWidth={5}\n                strokeLinecap=\"round\"\n                onClick={newLine ? undefined : onClick}\n                pointerEvents={newLine ? 'none' : undefined}\n            />\n        ),\n        [props.x1, props.y1, props.x2, props.y2, color[2], newLine, onClick]\n    );\n};\n\n/**\n * <SimpleLine /> specific props.\n */\nexport interface SimpleLineAttributes extends LineAttributes {}\n\nconst defaultSimpleLineAttributes: SimpleLineAttributes = {};\n\nconst simpleLineIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <path d=\"M6,18L18,6\" stroke=\"currentColor\" fill=\"none\" />\n    </svg>\n);\n\nconst simpleLine: Line<SimpleLineAttributes> = {\n    component: SimpleLine,\n    icon: simpleLineIcon,\n    defaultAttrs: defaultSimpleLineAttributes,\n    fields: [],\n    metadata: {\n        displayName: 'panel.details.line.simple.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default simpleLine;\n","import { LineType } from '../../../constants/lines';\nimport diagonalLine from './diagonal-line';\nimport perpendicularLine from './perpendicular-line';\nimport simpleLine from './simple-line';\n\nconst lines = {\n    [LineType.Diagonal]: diagonalLine,\n    [LineType.Perpendicular]: perpendicularLine,\n    [LineType.Simple]: simpleLine,\n};\n\nexport default lines;\n","import React from 'react';\n\ninterface MultilineTextProps extends React.SVGProps<SVGTextElement> {\n    text: string[];\n    lineHeight: number;\n    grow: 'up' | 'down';\n}\n\nexport const MultilineText = React.forwardRef((props: MultilineTextProps, ref: React.Ref<SVGGElement>) => {\n    const {\n        text,\n        lineHeight,\n        grow,\n        // if dominantBaseline is defined, use it, or we calculate the dominantBaseline for you\n        dominantBaseline = grow === 'up' ? 'auto' : 'hanging',\n        ...otherSvgTextProps\n    } = props;\n\n    return React.useMemo(\n        () => (\n            <g ref={ref}>\n                {(grow === 'up' ? [...text].reverse() : text).map((t, i) => (\n                    <text\n                        key={t}\n                        dy={(i * lineHeight + 2) * (grow === 'up' ? -1 : 1)}\n                        dominantBaseline={dominantBaseline}\n                        {...otherSvgTextProps}\n                    >\n                        {t}\n                    </text>\n                ))}\n            </g>\n        ),\n        [JSON.stringify(text), lineHeight, grow, JSON.stringify(otherSvgTextProps)]\n    );\n});\n\n// Display component name in debugging.\n// Required by eslint react/display-name.\nMultilineText.displayName = 'MultilineText';\n\n// This is the default const for name dy calculation.\n// It is suitable for names that has 2 elements with 16px/10px font size.\nexport const NAME_DY: {\n    [key in 'up' | 'middle' | 'bottom']: {\n        namesPos: number; // index of the names we need to calculate dy\n        lineHeight: number;\n        polarity: -1 | 0 | 1; // in which direction\n    };\n} = {\n    up: {\n        namesPos: 1,\n        lineHeight: 10,\n        polarity: -1,\n    },\n    middle: {\n        namesPos: 0,\n        lineHeight: 0,\n        polarity: 0,\n    },\n    bottom: {\n        namesPos: 0,\n        lineHeight: 16,\n        polarity: 1,\n    },\n};\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst ShmetroIntStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultShmetroIntStationAttributes.nameOffsetX,\n        nameOffsetY = defaultShmetroIntStationAttributes.nameOffsetY,\n        rotate = defaultShmetroIntStationAttributes.rotate,\n        width = defaultShmetroIntStationAttributes.width,\n        height = defaultShmetroIntStationAttributes.height,\n    } = attrs[StationType.ShmetroInt] ?? defaultShmetroIntStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -12 : nameOffsetX === 'right' ? 12 : 0;\n    const textDy =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length - 1) *\n        NAME_DY[nameOffsetY].lineHeight *\n        NAME_DY[nameOffsetY].polarity;\n    const textY = textDy + (nameOffsetY === 'up' ? -24 : nameOffsetY === 'bottom' ? 24 : 0);\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    return React.useMemo(\n        () => (\n            <g id={id}>\n                <g transform={`translate(${x}, ${y})rotate(${rotate})`}>\n                    <rect\n                        id={`stn_core_${id}`}\n                        x={-width / 2}\n                        y={-height / 2}\n                        height={height}\n                        width={width}\n                        ry={height / 2}\n                        stroke=\"black\"\n                        fill=\"white\"\n                        onPointerDown={onPointerDown}\n                        onPointerMove={onPointerMove}\n                        onPointerUp={onPointerUp}\n                        style={{ cursor: 'move' }}\n                    />\n                </g>\n                <g\n                    transform={`translate(${x + textX}, ${y + textY})`}\n                    textAnchor={textAnchor}\n                    className=\"rmp-name-station\"\n                >\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, nameOffsetX, nameOffsetY, rotate, width, height, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * <ShmetroIntStation /> specific props.\n */\nexport interface ShmetroIntStationAttributes extends StationAttributes {\n    nameOffsetX: 'left' | 'middle' | 'right';\n    nameOffsetY: 'up' | 'middle' | 'bottom';\n    /**\n     * 0 <= rotate < 180\n     */\n    rotate: number;\n    width: number;\n    height: number;\n}\n\nconst defaultShmetroIntStationAttributes: ShmetroIntStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'up',\n    rotate: 0,\n    height: 10,\n    width: 15,\n};\n\nconst shmetroIntStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroInt.nameZh',\n        value: (attrs?: ShmetroIntStationAttributes) =>\n            (attrs ?? defaultShmetroIntStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroInt.nameEn',\n        value: (attrs?: ShmetroIntStationAttributes) =>\n            (attrs ?? defaultShmetroIntStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroInt.nameOffsetX',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: ShmetroIntStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as 'left' | 'middle' | 'right';\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroInt.nameOffsetY',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).nameOffsetY,\n        options: { up: 'up', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: ShmetroIntStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as 'up' | 'middle' | 'bottom';\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.shmetroInt.height',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).height,\n        validator: (val: string) => Number.isInteger(val),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.height = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.shmetroInt.width',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).width,\n        validator: (val: string) => Number.isInteger(val),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.width = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.shmetroInt.rotate',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).rotate,\n        validator: (val: string) => Number.isInteger(val) && Number(val) >= 0 && Number(val) < 180,\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.rotate = Math.abs(Number(val)) % 180;\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst shmetroIntStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <rect x=\"4.5\" y=\"7\" height=\"10\" width=\"15\" ry=\"5\" stroke=\"currentColor\" fill=\"none\" />\n    </svg>\n);\n\nconst shmetroIntStation: Station<ShmetroIntStationAttributes> = {\n    component: ShmetroIntStation,\n    icon: shmetroIntStationIcon,\n    defaultAttrs: defaultShmetroIntStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: shmetroIntStationFields,\n    metadata: {\n        displayName: 'panel.details.station.shmetroInt.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: ['interchange'],\n    },\n};\n\nexport default shmetroIntStation;\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst ShmetroBasicStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultShmetroBasicStationAttributes.nameOffsetX,\n        nameOffsetY = defaultShmetroBasicStationAttributes.nameOffsetY,\n    } = attrs[StationType.ShmetroBasic] ?? defaultShmetroBasicStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -12 : nameOffsetX === 'right' ? 12 : 0;\n    const textDy =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length - 1) *\n        NAME_DY[nameOffsetY].lineHeight *\n        NAME_DY[nameOffsetY].polarity;\n    const textY = textDy + (nameOffsetY === 'up' ? -24 : nameOffsetY === 'bottom' ? 24 : 0);\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                <circle\n                    id={`stn_core_${id}`}\n                    r={5}\n                    stroke=\"black\"\n                    fill=\"white\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n                <g transform={`translate(${textX}, ${textY})`} textAnchor={textAnchor} className=\"rmp-name-station\">\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, nameOffsetX, nameOffsetY, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * <ShmetroBasicStation /> specific props.\n */\nexport interface ShmetroBasicStationAttributes extends StationAttributes {\n    nameOffsetX: 'left' | 'middle' | 'right';\n    nameOffsetY: 'up' | 'middle' | 'bottom';\n}\n\nconst defaultShmetroBasicStationAttributes: ShmetroBasicStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'up',\n};\n\nconst shmetroBasicStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroBasic.nameZh',\n        value: (attrs?: ShmetroBasicStationAttributes) =>\n            (attrs ?? defaultShmetroBasicStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: ShmetroBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasicStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroBasic.nameEn',\n        value: (attrs?: ShmetroBasicStationAttributes) =>\n            (attrs ?? defaultShmetroBasicStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: ShmetroBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasicStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroBasic.nameOffsetX',\n        value: (attrs?: ShmetroBasicStationAttributes) => (attrs ?? defaultShmetroBasicStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: ShmetroBasicStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: ShmetroBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasicStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as 'left' | 'middle' | 'right';\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroBasic.nameOffsetY',\n        value: (attrs?: ShmetroBasicStationAttributes) => (attrs ?? defaultShmetroBasicStationAttributes).nameOffsetY,\n        options: { up: 'up', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: ShmetroBasicStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: ShmetroBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasicStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as 'up' | 'middle' | 'bottom';\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst shmetroBasicStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <circle cx=\"12\" cy=\"12\" r=\"5\" stroke=\"currentColor\" fill=\"none\" />\n    </svg>\n);\n\nconst shmetroBasicStation: Station<ShmetroBasicStationAttributes> = {\n    component: ShmetroBasicStation,\n    icon: shmetroBasicStationIcon,\n    defaultAttrs: defaultShmetroBasicStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: shmetroBasicStationFields,\n    metadata: {\n        displayName: 'panel.details.station.shmetroBasic.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default shmetroBasicStation;\n","import React from 'react';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { ColorField, AttributesWithColor } from '../../panels/details/color-field';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\ntype ROTATE = 0 | 45 | 90 | 135 | 180 | 225 | 270 | 315;\n\nconst ROTATE_CONST: {\n    [rotate: number]: {\n        textDx: number;\n        textDy: number;\n        textAnchor: 'start' | 'middle' | 'end';\n        namesPos: 0 | 1;\n        lineHeight: 0 | 10 | 16;\n        polarity: -1 | 0 | 1;\n    };\n} = {\n    0: {\n        textDx: 0,\n        textDy: -27,\n        textAnchor: 'middle',\n        namesPos: 1,\n        lineHeight: 10,\n        polarity: -1,\n    },\n    45: {\n        textDx: 12,\n        textDy: -15,\n        textAnchor: 'start',\n        namesPos: 1,\n        lineHeight: 10,\n        polarity: -1,\n    },\n    90: {\n        textDx: 12,\n        textDy: 0,\n        textAnchor: 'start',\n        namesPos: 0,\n        lineHeight: 0,\n        polarity: 0,\n    },\n    135: {\n        textDx: 12,\n        textDy: 15,\n        textAnchor: 'start',\n        namesPos: 0,\n        lineHeight: 16,\n        polarity: 1,\n    },\n    180: {\n        textDx: 0,\n        textDy: 27,\n        textAnchor: 'middle',\n        namesPos: 0,\n        lineHeight: 16,\n        polarity: 1,\n    },\n    225: {\n        textDx: -12,\n        textDy: 15,\n        textAnchor: 'end',\n        namesPos: 0,\n        lineHeight: 16,\n        polarity: 1,\n    },\n    270: {\n        textDx: -12,\n        textDy: 0,\n        textAnchor: 'end',\n        namesPos: 0,\n        lineHeight: 0,\n        polarity: 0,\n    },\n    315: {\n        textDx: -12,\n        textDy: -15,\n        textAnchor: 'end',\n        namesPos: 1,\n        lineHeight: 10,\n        polarity: -1,\n    },\n};\n\nconst ShmetroBasic2020Station = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        color = defaultShmetroBasic2020StationAttributes.color,\n        rotate = defaultShmetroBasic2020StationAttributes.rotate,\n    } = attrs[StationType.ShmetroBasic2020] ?? defaultShmetroBasic2020StationAttributes;\n\n    const textDy =\n        ROTATE_CONST[rotate].textDy + // fixed dy for each rotation\n        (names[ROTATE_CONST[rotate].namesPos].split('\\\\').length - 1) *\n            ROTATE_CONST[rotate].lineHeight *\n            ROTATE_CONST[rotate].polarity; // dynamic dy of n lines (either zh or en)\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id}>\n                <g transform={`translate(${x}, ${y})rotate(${rotate})`}>\n                    <rect\n                        id={`stn_core_${id}`}\n                        x=\"-2.5\"\n                        y=\"-10\"\n                        width=\"5\"\n                        height=\"10\"\n                        stroke=\"none\"\n                        fill={color[2]}\n                        onPointerDown={onPointerDown}\n                        onPointerMove={onPointerMove}\n                        onPointerUp={onPointerUp}\n                        style={{ cursor: 'move' }}\n                    />\n                </g>\n                <g\n                    transform={`translate(${x + ROTATE_CONST[rotate].textDx}, ${y + textDy})`}\n                    textAnchor={ROTATE_CONST[rotate].textAnchor}\n                    className=\"rmp-name-station\"\n                >\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, rotate, color, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * <ShmetroBasic2020Station /> specific props.\n */\nexport interface ShmetroBasic2020StationAttributes extends StationAttributes, AttributesWithColor {\n    rotate: ROTATE;\n}\n\nconst defaultShmetroBasic2020StationAttributes: ShmetroBasic2020StationAttributes = {\n    ...defaultStationAttributes,\n    rotate: 0,\n    color: [CityCode.Shanghai, 'sh1', '#E4002B', MonoColour.white],\n};\n\nconst shmetroBasic2020StationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroBasic2020.nameZh',\n        value: (attrs?: ShmetroBasic2020StationAttributes) =>\n            (attrs ?? defaultShmetroBasic2020StationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        onChange: (val: string | number, attrs_: ShmetroBasic2020StationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasic2020StationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroBasic2020.nameEn',\n        value: (attrs?: ShmetroBasic2020StationAttributes) =>\n            (attrs ?? defaultShmetroBasic2020StationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        onChange: (val: string | number, attrs_: ShmetroBasic2020StationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasic2020StationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroBasic2020.rotate',\n        value: (attrs?: ShmetroBasic2020StationAttributes) =>\n            (attrs ?? defaultShmetroBasic2020StationAttributes).rotate,\n        options: { 0: '0', 45: '45', 90: '90', 135: '135', 180: '180', 225: '225', 270: '270', 315: '315' },\n        onChange: (val: string | number, attrs_: ShmetroBasic2020StationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasic2020StationAttributes;\n            // set value\n            attrs.rotate = Number(val) as ROTATE;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: (\n            <ColorField type={StationType.ShmetroBasic2020} defaultAttrs={defaultShmetroBasic2020StationAttributes} />\n        ),\n    },\n];\n\nconst shmetroBasic2020StationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <rect x=\"6\" y=\"9\" width=\"12\" height=\"6\" stroke=\"currentColor\" fill=\"currentColor\" />\n    </svg>\n);\n\nconst shmetroBasic2020Station: Station<ShmetroBasic2020StationAttributes> = {\n    component: ShmetroBasic2020Station,\n    icon: shmetroBasic2020StationIcon,\n    defaultAttrs: defaultShmetroBasic2020StationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: shmetroBasic2020StationFields,\n    metadata: {\n        displayName: 'panel.details.station.shmetroBasic2020.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default shmetroBasic2020Station;\n","import React from 'react';\nimport { CityCode, ColourHex, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { AttributesWithColor, ColorField } from '../../panels/details/color-field';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst PATH = 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\nconst TEXT_MAX_WIDTH = 12.5;\n\n/**\n * A StationNumber sub component for both gzmtr-basic and gzmtr-int station.\n * It draws the code of the line and the station with a capsule icon outside it.\n */\nexport const StationNumber = (props: { strokeColor: ColourHex; lineCode: string; stationCode: string }) => {\n    const { strokeColor, lineCode, stationCode } = props;\n\n    const lineCodeEl = React.useRef<SVGTextElement | null>(null);\n    const stnCodeEl = React.useRef<SVGTextElement | null>(null);\n\n    const [lineCodeBBox, setlineCodeBBox] = React.useState({ width: 0 } as DOMRect);\n    const [stnCodeBBox, setstnCodeBBox] = React.useState({ width: 0 } as DOMRect);\n\n    React.useEffect(() => {\n        setlineCodeBBox(lineCodeEl.current!.getBBox());\n        setstnCodeBBox(stnCodeEl.current!.getBBox());\n    }, [lineCode, stationCode]);\n\n    const lineCodeScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineCodeBBox.width);\n    const stnCodeScale =\n        lineCode.length === 2 && stationCode.length === 2\n            ? lineCodeScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnCodeBBox.width);\n\n    return (\n        <g>\n            <path d={PATH} strokeWidth=\"2\" stroke={strokeColor} fill=\"white\" transform=\"scale(0.75)\" />\n            <g textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize=\"8\">\n                <g transform={`translate(-6,0)scale(${lineCodeScale})`}>\n                    <text ref={lineCodeEl} className=\"rmp-name__zh\">\n                        {lineCode}\n                    </text>\n                </g>\n                <g transform={`translate(6,0)scale(${stnCodeScale})`}>\n                    <text ref={stnCodeEl} className=\"rmp-name__zh\">\n                        {stationCode}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n};\n\nconst GzmtrBasicStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultGzmtrBasicStationAttributes.nameOffsetX,\n        nameOffsetY = defaultGzmtrBasicStationAttributes.nameOffsetY,\n        color = defaultGzmtrBasicStationAttributes.color,\n        lineCode = defaultGzmtrBasicStationAttributes.lineCode,\n        stationCode = defaultGzmtrBasicStationAttributes.stationCode,\n    } = attrs[StationType.GzmtrBasic] ?? defaultGzmtrBasicStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -18 : nameOffsetX === 'right' ? 18 : 0;\n    const textDy =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length - 1) *\n        NAME_DY[nameOffsetY].lineHeight *\n        NAME_DY[nameOffsetY].polarity;\n    const textY = textDy + (nameOffsetY === 'up' ? -21 : nameOffsetY === 'bottom' ? 27 : 0);\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                <StationNumber strokeColor={color[2]} lineCode={lineCode} stationCode={stationCode} />\n                <g transform={`translate(${textX}, ${textY})`} textAnchor={textAnchor} className=\"rmp-name-station\">\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <path\n                    id={`stn_core_${id}`}\n                    d={PATH}\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                    transform=\"scale(0.75)\"\n                />\n            </g>\n        ),\n        [\n            id,\n            x,\n            y,\n            ...names,\n            nameOffsetX,\n            nameOffsetY,\n            color,\n            lineCode,\n            stationCode,\n            onPointerDown,\n            onPointerMove,\n            onPointerUp,\n        ]\n    );\n};\n\n/**\n * <GzmtrStation /> specific props.\n */\nexport interface GzmtrBasicStationAttributes extends StationAttributes, AttributesWithColor {\n    nameOffsetX: 'left' | 'middle' | 'right';\n    nameOffsetY: 'up' | 'middle' | 'bottom';\n    lineCode: string;\n    stationCode: string;\n}\n\nconst defaultGzmtrBasicStationAttributes: GzmtrBasicStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'up',\n    color: [CityCode.Guangzhou, 'gz1', '#F3D03E', MonoColour.black],\n    lineCode: '1',\n    stationCode: '01',\n};\n\nconst gzmtrBasicStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.gzmtrBasic.nameZh',\n        value: (attrs?: GzmtrBasicStationAttributes) =>\n            (attrs ?? defaultGzmtrBasicStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.gzmtrBasic.nameEn',\n        value: (attrs?: GzmtrBasicStationAttributes) =>\n            (attrs ?? defaultGzmtrBasicStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.gzmtrBasic.nameOffsetX',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as 'left' | 'middle' | 'right';\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.gzmtrBasic.nameOffsetY',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).nameOffsetY,\n        options: { up: 'up', middle: 'middle', bottom: 'bottom' },\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as 'up' | 'middle' | 'bottom';\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: <ColorField type={StationType.GzmtrBasic} defaultAttrs={defaultGzmtrBasicStationAttributes} />,\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrBasic.lineCode',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).lineCode,\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.lineCode = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrBasic.stationCode',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).stationCode,\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.stationCode = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst gzmtrBasicStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <g transform=\"translate(12,12)scale(0.6)\">\n            <StationNumber strokeColor=\"#000\" lineCode=\"1\" stationCode=\"01\" />\n        </g>\n    </svg>\n);\n\nconst gzmtrBasicStation: Station<GzmtrBasicStationAttributes> = {\n    component: GzmtrBasicStation,\n    icon: gzmtrBasicStationIcon,\n    defaultAttrs: defaultGzmtrBasicStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: gzmtrBasicStationFields,\n    metadata: {\n        displayName: 'panel.details.station.gzmtrBasic.displayName',\n        cities: [CityCode.Guangzhou],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default gzmtrBasicStation;\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, HStack, IconButton, Text } from '@chakra-ui/react';\nimport { RmgCard, RmgFields, RmgFieldsField, RmgLabel } from '@railmapgen/rmg-components';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { Theme } from '../../../constants/constants';\nimport { InterchangeInfo } from './interchange-field';\nimport { MdAdd, MdContentCopy, MdDelete } from 'react-icons/md';\nimport ColourModal from '../colour-modal/colour-modal';\nimport ThemeButton from '../theme-button';\n\ninterface InterchangeCardProps {\n    interchangeList: InterchangeInfo[];\n    onAdd?: (info: InterchangeInfo) => void;\n    onDelete?: (index: number) => void;\n    onUpdate?: (index: number, info: InterchangeInfo) => void;\n}\n\nexport default function InterchangeCard(props: InterchangeCardProps) {\n    const { interchangeList, onAdd, onDelete, onUpdate } = props;\n\n    const { t } = useTranslation();\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedIndex, setSelectedIndex] = useState(0);\n\n    const interchangeFields: RmgFieldsField[][] = interchangeList.map((it, i) => [\n        {\n            type: 'input',\n            label: t('panel.details.station.gzmtrInt.lineCode'),\n            value: it[4],\n            minW: '80px',\n            onChange: val => onUpdate?.(i, [it[0], it[1], it[2], it[3], val, it[5]]),\n        },\n        {\n            type: 'input',\n            label: t('panel.details.station.gzmtrInt.stationCode'),\n            value: it[5],\n            minW: '80px',\n            onChange: val => onUpdate?.(i, [it[0], it[1], it[2], it[3], it[4], val]),\n        },\n    ]);\n\n    return (\n        <RmgCard direction=\"column\">\n            {interchangeList.length === 0 && (\n                <HStack spacing={0.5} data-testid={`interchange-card-stack`}>\n                    <Text as=\"i\" flex={1} align=\"center\" fontSize=\"md\" colorScheme=\"gray\">\n                        {t('panel.details.station.interchange.noInterchanges')}\n                    </Text>\n\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label={t('panel.details.station.interchange.add')}\n                        onClick={() => onAdd?.([CityCode.Shanghai, '', '#aaaaaa', MonoColour.white, '', ''])}\n                        icon={<MdAdd />}\n                    />\n                </HStack>\n            )}\n\n            {interchangeList.map((it, i) => (\n                <HStack key={i} spacing={0.5} data-testid={`interchange-card-stack-${i}`}>\n                    <RmgLabel label={t('color')} minW=\"40px\" noLabel={i !== 0}>\n                        <ThemeButton\n                            theme={[it[0], it[1], it[2], it[3]]}\n                            onClick={() => {\n                                setIsModalOpen(true);\n                                setSelectedIndex(i);\n                            }}\n                        />\n                    </RmgLabel>\n\n                    <RmgFields fields={interchangeFields[i]} noLabel={i !== 0} />\n\n                    {onAdd && i === interchangeFields.length - 1 && interchangeFields.length < 3 ? (\n                        <IconButton\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            aria-label={t('panel.details.station.interchange.copy')}\n                            onClick={() => onAdd?.(interchangeList.slice(-1)[0])} // duplicate last leg\n                            icon={<MdContentCopy />}\n                        />\n                    ) : (\n                        <Box minW={8} />\n                    )}\n\n                    {onDelete && (\n                        <IconButton\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            aria-label={t('panel.details.station.interchange.remove')}\n                            onClick={() => onDelete?.(i)}\n                            icon={<MdDelete />}\n                        />\n                    )}\n                </HStack>\n            ))}\n\n            <ColourModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                defaultTheme={interchangeList[selectedIndex]?.slice(0, 4) as Theme}\n                onUpdate={theme =>\n                    onUpdate?.(selectedIndex, [\n                        ...theme,\n                        interchangeList[selectedIndex][4],\n                        interchangeList[selectedIndex][5],\n                    ])\n                }\n            />\n        </RmgCard>\n    );\n}\n","import React, { Fragment } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MdAdd } from 'react-icons/md';\nimport { Button, FormLabel, VStack } from '@chakra-ui/react';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { Theme } from '../../../constants/constants';\nimport { StationAttributes, StationType } from '../../../constants/stations';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { setRefresh } from '../../../redux/runtime/runtime-slice';\nimport InterchangeCard from './interchange-card';\n\n/**\n * InterchangeInfo with theme, line code, station code.\n */\nexport type InterchangeInfo = [...Theme, ...string[]];\n\n/**\n * A StationAttributes that have a transfer field.\n * Extend this interface if you want to use <InterchangeField />.\n */\nexport interface StationAttributesWithInterchange extends StationAttributes {\n    transfer: InterchangeInfo[][];\n}\n\n/**\n * This component provides an easy way to modify interchanges in the details panel.\n * It will read the first id in `selected` and change the `transfer` field in the related attrs.\n *\n * Make sure your station has a transfer field in the extended StationAttributes. (a.k.a extends StationAttributesWithInterchange)\n * Fail to do this will result in a redundant transfer field in your StationAttributes.\n */\nexport const InterchangeField = (props: {\n    stationType: StationType;\n    defaultAttrs: StationAttributesWithInterchange;\n}) => {\n    const { stationType, defaultAttrs } = props;\n\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n    const { selected } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const attr =\n        selectedFirst &&\n        graph.current.hasNode(selectedFirst) &&\n        graph.current.getNodeAttribute(selectedFirst, 'type') === stationType\n            ? (graph.current.getNodeAttribute(selectedFirst, stationType) as StationAttributesWithInterchange)\n            : defaultAttrs;\n    const transfer = attr.transfer ?? defaultAttrs.transfer;\n\n    const handleAdd = (setIndex: number) => (interchangeInfo: InterchangeInfo) => {\n        const newTransferInfo: InterchangeInfo[][] = JSON.parse(JSON.stringify(transfer));\n        if (newTransferInfo.length <= setIndex) {\n            for (let i = newTransferInfo.length; i <= setIndex; i++) {\n                newTransferInfo[i] = [];\n            }\n        }\n        newTransferInfo[setIndex].push(interchangeInfo);\n\n        attr.transfer = newTransferInfo;\n        graph.current.mergeNodeAttributes(selected, { [stationType]: attr });\n        hardRefresh();\n    };\n\n    const handleDelete = (setIndex: number) => (interchangeIndex: number) => {\n        if (transfer.length > setIndex && transfer[setIndex].length > interchangeIndex) {\n            const newTransferInfo = transfer.map((set, setIdx) =>\n                setIdx === setIndex ? set.filter((_, intIdx) => intIdx !== interchangeIndex) : set\n            );\n\n            attr.transfer = newTransferInfo;\n            graph.current.mergeNodeAttributes(selected, { [stationType]: attr });\n            hardRefresh();\n        }\n    };\n\n    const handleUpdate = (setIndex: number) => (interchangeIndex: number, interchangeInfo: InterchangeInfo) => {\n        if (transfer.length > setIndex && transfer[setIndex].length > interchangeIndex) {\n            const newTransferInfo = transfer.map((set, setIdx) =>\n                setIdx === setIndex\n                    ? set.map((int, intIdx) =>\n                          intIdx === interchangeIndex\n                              ? ([0, 1, 2, 3, 4, 5].map(i =>\n                                    interchangeInfo[i] === undefined ? int[i] : interchangeInfo[i]\n                                ) as InterchangeInfo)\n                              : int\n                      )\n                    : set\n            );\n\n            attr.transfer = newTransferInfo;\n            graph.current.mergeNodeAttributes(selected, { [stationType]: attr });\n            hardRefresh();\n        }\n    };\n\n    const handleAddInterchangeGroup = () =>\n        handleAdd(attr.transfer.length)([CityCode.Guangzhou, '', '#AAAAAA', MonoColour.white, '', '']);\n\n    return (\n        <VStack align=\"flex-start\">\n            {attr.transfer.map((infoList, i) => (\n                <Fragment key={i}>\n                    <FormLabel size=\"xs\">\n                        {i === 0\n                            ? t('panel.details.station.interchange.within')\n                            : i === 1\n                            ? t('panel.details.station.interchange.outStation')\n                            : t('panel.details.station.interchange.outSystem')}\n                    </FormLabel>\n\n                    <InterchangeCard\n                        interchangeList={infoList}\n                        onAdd={handleAdd(i)}\n                        onDelete={handleDelete(i)}\n                        onUpdate={handleUpdate(i)}\n                    />\n                </Fragment>\n            ))}\n\n            {attr.transfer.length < 2 && (\n                <Button\n                    size=\"xs\"\n                    variant=\"ghost\"\n                    alignSelf=\"flex-end\"\n                    leftIcon={<MdAdd />}\n                    onClick={handleAddInterchangeGroup}\n                >\n                    {t('panel.details.station.interchange.addGroup')}\n                </Button>\n            )}\n        </VStack>\n    );\n};\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { StationNumber } from './gzmtr-basic';\nimport { InterchangeField, StationAttributesWithInterchange } from '../../panels/details/interchange-field';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst CODE_POS = [\n    [[0, 0]],\n    [[0, 0]],\n    [\n        [-18, 0],\n        [18, 0],\n    ],\n    [\n        [-15.588, -9],\n        [15.588, -9],\n        [0, 18],\n    ],\n];\n\nconst GzmtrIntStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultGzmtrIntStationAttributes.nameOffsetX,\n        nameOffsetY = defaultGzmtrIntStationAttributes.nameOffsetY,\n        transfer = defaultGzmtrIntStationAttributes.transfer,\n    } = attrs[StationType.GzmtrInt] ?? defaultGzmtrIntStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -20 : nameOffsetX === 'right' ? 20 : 0;\n    const textDy =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length - 1) *\n        NAME_DY[nameOffsetY].lineHeight *\n        NAME_DY[nameOffsetY].polarity;\n    const textY = textDy + (nameOffsetY === 'up' ? -24 : nameOffsetY === 'bottom' ? 24 : 0);\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    const transferAll = transfer.flat().slice(0, 3); // slice to make sure at most 3 transfers\n    const arrowColor = [\n        ['black', 'black'],\n        [transferAll.at(0)?.at(2) ?? 'black', transferAll.at(0)?.at(2) ?? 'black'],\n        [transferAll.at(0)?.at(2) ?? 'black', transferAll.at(1)?.at(2) ?? 'black'],\n        [transferAll.at(0)?.at(2) ?? 'black', transferAll.at(1)?.at(2) ?? 'black', transferAll.at(2)?.at(2) ?? 'black'],\n    ];\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                <circle r={transferAll.length === 3 ? 22.395 : 18} fill=\"white\" />\n                {transferAll\n                    .map(info => info[2])\n                    .filter((color, i, arr) => arr.indexOf(color) === i)\n                    .map(color => (\n                        <marker\n                            key={`gzmtr_int_arrow_${color}`}\n                            id={`gzmtr_int_arrow_${color}`}\n                            markerWidth=\"5\"\n                            markerHeight=\"5\"\n                            refX=\"1\"\n                            refY=\"1.25\"\n                            orient=\"auto\"\n                        >\n                            <polygon points=\"0,0 0,3 2,1.5\" fill={color} />\n                        </marker>\n                    ))}\n                {transferAll.length <= 2 && (\n                    <g>\n                        {/* A simple white mask to hide all underlying lines. */}\n                        <path d=\"M -18,-12 A 24 24 0 0 1 18,-12 L 18,12 A 24 24 0 0 1 -18,12 Z\" fill=\"white\" />\n                        <path\n                            d=\"M -18,-12 A 24 24 0 0 1 18,-12\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][0]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][0]})`}\n                        />\n                        <path\n                            d=\"M 18,12 A 24 24 0 0 1 -18,12\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][1]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][1]})`}\n                        />\n                    </g>\n                )}\n                {transferAll.length >= 3 && (\n                    <g>\n                        <path\n                            d=\"M -19.3948,11.1976 A 22.395 22.395 0 0 1 0,-22.395\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][0]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][0]})`}\n                        />\n                        <path\n                            d=\"M 0,-22.395 A 22.395 22.395 0 0 1 19.3948,11.1976\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][1]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][1]})`}\n                        />\n                        <path\n                            d=\"M 19.3948,11.1976 A 22.395 22.395 0 0 1 -19.3948,11.1976\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][2]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][2]})`}\n                        />\n                        {/* Add another 2 transparent arrows with marker to cover bottom arrows */}\n                        <path\n                            d=\"M -19.3948,11.1976 A 22.395 22.395 0 0 1 0,-22.395\"\n                            fill=\"none\"\n                            strokeOpacity=\"0\"\n                            stroke=\"white\"\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][0]})`}\n                        />\n                        <path\n                            d=\"M 0,-22.395 A 22.395 22.395 0 0 1 19.3948,11.1976\"\n                            fill=\"none\"\n                            strokeOpacity=\"0\"\n                            stroke=\"white\"\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][1]})`}\n                        />\n                    </g>\n                )}\n\n                {transfer[0]?.map((info, i, arr) => (\n                    <g\n                        key={`gzmtr_int_${id}_stn_${i}`}\n                        transform={`translate(${CODE_POS[arr.length][i][0]},${CODE_POS[arr.length][i][1]})`}\n                    >\n                        <StationNumber strokeColor={info[2]} lineCode={info[4]} stationCode={info[5]} />\n                    </g>\n                ))}\n\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <circle\n                    id={`stn_core_${id}`}\n                    r={transferAll.length === 3 ? 22.395 : 18}\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n                <g transform={`translate(${textX}, ${textY})`} textAnchor={textAnchor} className=\"rmp-name-station\">\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n            </g>\n        ),\n        [\n            id,\n            x,\n            y,\n            JSON.stringify(names),\n            nameOffsetX,\n            nameOffsetY,\n            JSON.stringify(transferAll),\n            onPointerDown,\n            onPointerMove,\n            onPointerUp,\n        ]\n    );\n};\n\n/**\n * <GzmtrStation /> specific props.\n */\nexport interface GzmtrIntStationAttributes extends StationAttributes, StationAttributesWithInterchange {\n    nameOffsetX: 'left' | 'middle' | 'right';\n    nameOffsetY: 'up' | 'middle' | 'bottom';\n}\n\nconst defaultGzmtrIntStationAttributes: GzmtrIntStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'up',\n    transfer: [[], []],\n};\n\nconst gzmtrIntStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.gzmtrInt.nameZh',\n        value: (attrs?: GzmtrIntStationAttributes) =>\n            (attrs ?? defaultGzmtrIntStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.gzmtrInt.nameEn',\n        value: (attrs?: GzmtrIntStationAttributes) =>\n            (attrs ?? defaultGzmtrIntStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.gzmtrInt.nameOffsetX',\n        value: (attrs?: GzmtrIntStationAttributes) => (attrs ?? defaultGzmtrIntStationAttributes).nameOffsetX,\n        options: { left: 'left', right: 'right' },\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as 'left' | 'middle' | 'right';\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.gzmtrInt.nameOffsetY',\n        value: (attrs?: GzmtrIntStationAttributes) => (attrs ?? defaultGzmtrIntStationAttributes).nameOffsetY,\n        options: { up: 'up', bottom: 'bottom' },\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as 'up' | 'middle' | 'bottom';\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: (\n            <InterchangeField stationType={StationType.GzmtrInt} defaultAttrs={defaultGzmtrIntStationAttributes} />\n        ),\n    },\n];\n\nconst gzmtrIntStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <g transform=\"translate(6,12)scale(0.4)\">\n            <StationNumber strokeColor=\"#000\" lineCode=\"1\" stationCode=\"09\" />\n        </g>\n        <g transform=\"translate(18,12)scale(0.4)\">\n            <StationNumber strokeColor=\"#000\" lineCode=\"2\" stationCode=\"13\" />\n        </g>\n        <marker id=\"arrow\" markerWidth=\"5\" markerHeight=\"5\" refX=\"1\" refY=\"1.25\" orient=\"auto\">\n            <polygon points=\"0,0 0,3 2,1.5\" />\n        </marker>\n        <path d=\"M 6,6 A 8 8 0 0 1 18,6\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" markerEnd=\"url(#arrow)\" />\n        <path d=\"M 18,18 A 8 8 0 0 1 6,18\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" markerEnd=\"url(#arrow)\" />\n    </svg>\n);\n\nconst gzmtrIntStation: Station<GzmtrIntStationAttributes> = {\n    component: GzmtrIntStation,\n    icon: gzmtrIntStationIcon,\n    defaultAttrs: defaultGzmtrIntStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: gzmtrIntStationFields,\n    metadata: {\n        displayName: 'panel.details.station.gzmtrInt.displayName',\n        cities: [CityCode.Guangzhou],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default gzmtrIntStation;\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst PATH_CIRCLE =\n    'M 11.28125 1.140625 L 13.640625 2.890625 L 15.140625 5.34375 L 15.59375 8.015625 L 14.84375 11.296875 L 13.09375 13.640625 L 10.640625 15.140625 L 8 15.59375 L 5.34375 15.140625 L 2.890625 13.640625 L 1.140625 11.28125 L 0.390625 8 L 1.140625 4.703125 L 2.890625 2.34375 L 5.34375 0.84375 L 8.015625 0.390625 Z';\nconst PATH_ARROW =\n    'M 11.440588 5.277981 C 11.453615 5.291885 11.587931 5.437238 11.747473 5.609957 C 11.907014 5.782675 12.1709 6.068339 12.333887 6.244765 C 12.496872 6.42119 12.721814 6.664686 12.833756 6.785865 C 12.945699 6.907044 13.131799 7.108507 13.247311 7.23356 C 13.362823 7.358612 13.541716 7.552304 13.644851 7.663987 C 13.747985 7.77567 13.832122 7.867293 13.831819 7.867597 C 13.831516 7.867898 13.796118 7.857393 13.753154 7.844253 C 13.710191 7.831111 13.586626 7.793118 13.478564 7.759822 C 13.370503 7.726526 13.149901 7.658427 12.988341 7.608488 C 12.826778 7.558551 12.651407 7.504336 12.598626 7.488013 C 12.545845 7.471689 12.444536 7.440359 12.373497 7.418388 C 12.302457 7.396419 12.24303 7.378104 12.241435 7.377691 C 12.238537 7.37694 12.238537 7.37694 12.238452 7.667598 C 12.238405 7.82746 12.237812 8.148848 12.237131 8.381794 C 12.23599 8.772066 12.235702 8.808723 12.233451 8.848493 C 12.232109 8.872231 12.230076 8.906435 12.228933 8.924503 C 12.227791 8.942573 12.225414 8.976198 12.223652 8.999228 C 12.221888 9.022256 12.218693 9.059649 12.216552 9.082325 C 12.214411 9.105 12.210642 9.141523 12.208177 9.163489 C 12.205711 9.185455 12.201398 9.221471 12.198589 9.243523 C 12.195782 9.265575 12.19115 9.299782 12.188296 9.319534 C 12.185443 9.339289 12.180499 9.371973 12.177308 9.392168 C 12.174119 9.412363 12.168339 9.446857 12.164465 9.468823 C 12.160591 9.490789 12.154195 9.525534 12.150251 9.546032 C 12.146309 9.56653 12.139606 9.599867 12.135357 9.620111 C 12.131108 9.640356 12.123926 9.673443 12.119399 9.693637 C 12.114869 9.713832 12.107058 9.747458 12.102037 9.76836 C 12.097017 9.789264 12.088536 9.823179 12.083192 9.843727 C 12.077847 9.864277 12.069181 9.896742 12.063936 9.915874 C 12.058692 9.935006 12.049478 9.967472 12.043463 9.98802 C 12.037446 10.00857 12.027314 10.042194 12.020947 10.062744 C 12.014578 10.083292 12.00405 10.116339 11.997549 10.136179 C 11.99105 10.156019 11.979944 10.188774 11.972873 10.208969 C 11.965799 10.229164 11.954216 10.261629 11.947129 10.281116 C 11.940045 10.300602 11.928874 10.330749 11.922305 10.348108 C 11.915738 10.365469 11.903365 10.397161 11.894812 10.418536 C 11.886259 10.439911 11.873086 10.472087 11.865542 10.490038 C 11.857997 10.50799 11.846004 10.536013 11.838888 10.552309 C 11.831774 10.568606 11.820028 10.594985 11.812787 10.610928 C 11.805546 10.626871 11.791868 10.656439 11.782393 10.676634 C 11.772919 10.696828 11.752564 10.738569 11.737161 10.769393 C 11.721758 10.800217 11.700079 10.842538 11.688987 10.863441 C 11.677894 10.884344 11.660975 10.91565 11.651391 10.933011 C 11.641806 10.950371 11.625526 10.979359 11.615214 10.997427 C 11.604902 11.015496 11.587982 11.044483 11.577617 11.061844 C 11.567249 11.079205 11.550732 11.106453 11.540911 11.122396 C 11.531089 11.138338 11.514559 11.164717 11.504177 11.181015 C 11.493794 11.197311 11.475755 11.22514 11.464087 11.242854 C 11.452422 11.260569 11.4325 11.290136 11.419816 11.308559 C 11.407133 11.326982 11.386632 11.35625 11.374257 11.373598 C 11.361882 11.390946 11.341907 11.418484 11.329866 11.434793 C 11.317827 11.451103 11.296664 11.479178 11.282838 11.497184 C 11.269012 11.515189 11.245138 11.545626 11.229783 11.564821 C 11.214428 11.584017 11.191522 11.612186 11.178879 11.62742 C 11.166237 11.642655 11.145446 11.667295 11.132679 11.682175 C 11.119911 11.697056 11.098126 11.721968 11.084268 11.737535 C 11.070409 11.753103 11.049216 11.776584 11.037173 11.789713 C 11.02513 11.802842 11.004583 11.82489 10.991514 11.838707 C 10.978446 11.852524 10.943078 11.888517 10.912921 11.918692 C 10.882765 11.948866 10.847586 11.983407 10.834745 11.99545 C 10.821907 12.007493 10.800434 12.027446 10.78703 12.039789 C 10.773625 12.052134 10.751954 12.071833 10.738873 12.083565 C 10.725789 12.095299 10.702621 12.115593 10.687387 12.128664 C 10.672152 12.141735 10.647802 12.16233 10.633277 12.174431 C 10.618752 12.186531 10.594981 12.20599 10.580456 12.217671 C 10.565929 12.229353 10.54245 12.247905 10.528278 12.258898 C 10.514107 12.26989 10.490626 12.287798 10.476101 12.298694 C 10.461575 12.309589 10.439254 12.326124 10.4265 12.335437 C 10.413746 12.344749 10.387367 12.363544 10.367881 12.377202 C 10.348394 12.390861 10.31535 12.413427 10.294446 12.42735 C 10.273542 12.441273 10.242983 12.461212 10.226537 12.471661 C 10.210089 12.482109 10.18313 12.498964 10.166629 12.509117 C 10.150127 12.519271 10.121055 12.536686 10.102024 12.547817 C 10.082994 12.558949 10.049368 12.578092 10.027301 12.590355 C 10.005234 12.602619 9.971236 12.621062 9.95175 12.63134 C 9.932264 12.641619 9.900668 12.657854 9.881536 12.66742 C 9.862405 12.676986 9.831677 12.691934 9.813254 12.700637 C 9.794832 12.709341 9.765844 12.722797 9.748838 12.73054 C 9.731832 12.738283 9.704004 12.750604 9.686998 12.757919 C 9.669992 12.765234 9.639845 12.777857 9.620005 12.785967 C 9.600165 12.794079 9.567785 12.806902 9.54805 12.814465 C 9.528315 12.822027 9.498457 12.833195 9.481701 12.839279 C 9.464944 12.845366 9.426305 12.858651 9.395836 12.868803 C 9.365367 12.878956 9.321305 12.893074 9.297922 12.900176 C 9.27454 12.907278 9.238595 12.917776 9.218046 12.923504 C 9.197497 12.929233 9.161552 12.938776 9.138169 12.944712 C 9.114786 12.950647 9.079132 12.959304 9.058937 12.963949 C 9.038743 12.968595 9.005407 12.975908 8.984859 12.980201 C 8.964309 12.984494 8.932134 12.990869 8.913356 12.994366 C 8.894578 12.997863 8.861647 13.00363 8.840174 13.00718 C 8.8187 13.010731 8.785074 13.015954 8.76545 13.018787 C 8.745825 13.021622 8.710927 13.026254 8.687899 13.029081 C 8.664869 13.031908 8.631534 13.03568 8.613819 13.037461 C 8.596105 13.039244 8.564508 13.042139 8.543605 13.043895 C 8.522702 13.04565 8.485599 13.048254 8.461152 13.049679 C 8.436706 13.051105 8.402791 13.052863 8.385785 13.053587 C 8.368778 13.054312 8.316022 13.05514 8.268547 13.05543 C 8.221071 13.05572 8.166865 13.055489 8.148088 13.054915 C 8.12931 13.054342 8.100034 13.053223 8.083027 13.052427 C 8.066021 13.051633 8.037904 13.050098 8.020543 13.049019 C 8.003182 13.047939 7.974485 13.04591 7.956771 13.04451 C 7.939056 13.04311 7.912387 13.040781 7.897508 13.039336 C 7.882627 13.037891 7.857698 13.035282 7.842109 13.033539 C 7.82652 13.031795 7.802291 13.028913 7.788266 13.027136 C 7.774241 13.025358 7.748733 13.021883 7.73158 13.019413 C 7.714427 13.016943 7.685609 13.012562 7.667541 13.009678 C 7.649472 13.006795 7.629471 13.00346 7.623095 13.002269 C 7.611501 13.000101 7.611501 13.000101 7.636622 12.994555 C 7.650439 12.991505 7.676527 12.985559 7.694595 12.981343 C 7.712664 12.977127 7.741941 12.969952 7.759656 12.9654 C 7.777371 12.960847 7.806117 12.953061 7.823535 12.948098 C 7.840954 12.943135 7.871102 12.934138 7.890529 12.928105 C 7.909956 12.922072 7.942084 12.911687 7.961924 12.905026 C 7.981764 12.898365 8.011671 12.887936 8.028384 12.881847 C 8.045095 12.87576 8.073503 12.86504 8.091512 12.858027 C 8.10952 12.851011 8.137588 12.839729 8.153885 12.832955 C 8.170182 12.826181 8.197142 12.814584 8.213793 12.807184 C 8.230444 12.799784 8.258852 12.786846 8.276921 12.778433 C 8.29499 12.77002 8.326876 12.754597 8.347779 12.74416 C 8.368682 12.733724 8.398539 12.718414 8.414128 12.710141 C 8.429717 12.701868 8.458994 12.685846 8.479189 12.674538 C 8.499383 12.66323 8.527211 12.647285 8.541029 12.639106 C 8.554846 12.630927 8.578036 12.616967 8.592562 12.608085 C 8.607087 12.599203 8.630278 12.58469 8.644094 12.575834 C 8.657912 12.566979 8.681393 12.551619 8.696272 12.5417 C 8.711152 12.531783 8.734632 12.515828 8.748449 12.506246 C 8.762267 12.496663 8.786036 12.479852 8.801271 12.468886 C 8.816506 12.457922 8.842595 12.438689 8.859246 12.426147 C 8.875897 12.413605 8.902262 12.393316 8.917833 12.381063 C 8.933404 12.368808 8.957463 12.349505 8.971299 12.338168 C 8.985134 12.326831 9.009177 12.306777 9.024728 12.293604 C 9.040278 12.280432 9.064918 12.258945 9.079482 12.245855 C 9.094046 12.232767 9.117557 12.21134 9.131728 12.198241 C 9.1459 12.185143 9.171699 12.160997 9.189058 12.144587 C 9.206419 12.128176 9.229666 12.105832 9.240718 12.094933 C 9.25177 12.084033 9.273801 12.061763 9.289675 12.045443 C 9.305548 12.029122 9.330596 12.00281 9.345335 11.986971 C 9.360076 11.97113 9.384564 11.944294 9.399755 11.927334 C 9.414946 11.910374 9.437705 11.884508 9.450331 11.869856 C 9.462957 11.855205 9.48393 11.830462 9.496936 11.814873 C 9.509942 11.799284 9.535174 11.768268 9.553007 11.745947 C 9.570842 11.723627 9.59689 11.690317 9.610895 11.671925 C 9.6249 11.653532 9.647423 11.623384 9.660946 11.604931 C 9.67447 11.586477 9.697331 11.554625 9.711749 11.534147 C 9.726167 11.513672 9.749086 11.480335 9.762682 11.46007 C 9.776278 11.439802 9.796456 11.409307 9.807524 11.392301 C 9.818591 11.375295 9.837319 11.345901 9.849143 11.326981 C 9.860967 11.308061 9.879974 11.277044 9.891383 11.258055 C 9.902793 11.239066 9.920535 11.209036 9.93081 11.19132 C 9.941086 11.173607 9.959478 11.14114 9.971683 11.119175 C 9.983888 11.097208 10.001452 11.065033 10.010717 11.047672 C 10.019982 11.030312 10.036373 10.999006 10.047143 10.978102 C 10.057912 10.957199 10.07368 10.925893 10.082182 10.908533 C 10.090686 10.891172 10.104289 10.863054 10.112412 10.846048 C 10.120536 10.829042 10.133455 10.801504 10.141122 10.784853 C 10.148788 10.768202 10.160986 10.741243 10.168226 10.724945 C 10.175467 10.708649 10.187742 10.680531 10.195504 10.662461 C 10.203266 10.644393 10.215696 10.614919 10.223126 10.596964 C 10.230556 10.57901 10.242644 10.549152 10.249988 10.530615 C 10.257331 10.512077 10.269513 10.480679 10.27706 10.460838 C 10.284605 10.440998 10.296892 10.407951 10.304365 10.387403 C 10.311838 10.366854 10.324866 10.33004 10.333318 10.305593 C 10.341768 10.281148 10.355087 10.241435 10.362916 10.217343 C 10.370745 10.193252 10.383221 10.153829 10.390639 10.129737 C 10.398059 10.105645 10.410211 10.064773 10.417645 10.03891 C 10.425078 10.013046 10.436652 9.971594 10.443365 9.946795 C 10.450078 9.921993 10.461591 9.877643 10.468948 9.848236 C 10.476308 9.81883 10.486477 9.776798 10.491548 9.754833 C 10.496618 9.732866 10.504164 9.699242 10.508314 9.680109 C 10.512465 9.660978 10.519329 9.628511 10.523567 9.607964 C 10.527805 9.587414 10.534791 9.55205 10.539091 9.529375 C 10.543391 9.506701 10.550352 9.468437 10.554559 9.444345 C 10.558767 9.420254 10.565132 9.381978 10.568707 9.359289 C 10.572279 9.3366 10.577805 9.300076 10.580984 9.278124 C 10.584165 9.256172 10.58911 9.22024 10.591976 9.198275 C 10.594842 9.176308 10.599497 9.138334 10.602321 9.113888 C 10.605145 9.089442 10.609192 9.052339 10.611313 9.031435 C 10.613434 9.010532 10.616921 8.973429 10.619061 8.948982 C 10.621201 8.924536 10.624384 8.884533 10.626135 8.860087 C 10.627887 8.835642 10.630222 8.800277 10.631326 8.7815 C 10.63243 8.762722 10.633892 8.737503 10.634575 8.725456 C 10.635258 8.713411 10.636455 8.576301 10.637235 8.420767 C 10.638015 8.265233 10.638457 7.967436 10.638219 7.758994 C 10.637981 7.550553 10.637424 7.379649 10.636982 7.379207 C 10.636539 7.378764 10.458989 7.433203 10.242425 7.500182 C 10.02586 7.567161 9.76983 7.646325 9.673469 7.676104 C 9.577106 7.705882 9.421153 7.753998 9.326905 7.783029 C 9.232657 7.812058 9.131698 7.843084 9.102551 7.851975 C 9.073404 7.860867 9.049296 7.86788 9.048977 7.867561 C 9.048658 7.867242 9.153096 7.753597 9.281062 7.615018 C 9.409027 7.476439 9.618952 7.249135 9.74756 7.1099 C 9.876167 6.970664 10.090381 6.738761 10.22359 6.594561 C 10.356798 6.45036 10.574782 6.2144 10.707998 6.070207 C 10.841214 5.926012 11.052899 5.696868 11.17841 5.560997 C 11.303921 5.425126 11.414255 5.305863 11.423599 5.29597 L 11.440588 5.277981 Z M 4.55901 11.11072 C 4.55854 11.110675 4.452765 10.996483 4.323955 10.85696 C 4.195145 10.717439 3.913253 10.412228 3.697528 10.178715 C 3.481803 9.945202 3.133676 9.568354 2.923913 9.341274 C 2.71415 9.114195 2.458143 8.837027 2.355008 8.725344 C 2.251874 8.61366 2.167738 8.522036 2.168041 8.521733 C 2.168343 8.521431 2.203741 8.531938 2.246704 8.545081 C 2.289667 8.558224 2.397287 8.591297 2.48586 8.618576 C 2.574433 8.645855 2.716191 8.689599 2.800876 8.715784 C 2.885562 8.741968 2.974553 8.769506 2.998635 8.776979 C 3.022717 8.784452 3.20279 8.840129 3.398797 8.900705 C 3.594804 8.961283 3.756557 9.011194 3.758248 9.011618 C 3.761323 9.01239 3.761323 9.01239 3.761408 8.720444 C 3.761455 8.559874 3.76205 8.238484 3.76273 8.006247 C 3.763869 7.617239 3.764159 7.580599 3.766408 7.540837 C 3.767752 7.5171 3.769785 7.482895 3.770927 7.464826 C 3.772069 7.446757 3.774446 7.413132 3.776209 7.390102 C 3.777972 7.367074 3.781167 7.32968 3.783308 7.307005 C 3.785449 7.28433 3.789219 7.247807 3.791686 7.225841 C 3.794152 7.203875 3.79822 7.169669 3.800725 7.149829 C 3.80323 7.129989 3.807594 7.097523 3.810423 7.077682 C 3.813252 7.057842 3.818159 7.025086 3.821327 7.004891 C 3.824494 6.984697 3.830009 6.951362 3.833582 6.930813 C 3.837154 6.910264 3.84355 6.87519 3.847794 6.852869 C 3.852038 6.830548 3.859245 6.794431 3.863809 6.772607 C 3.868372 6.750783 3.875839 6.716289 3.880401 6.695951 C 3.884963 6.675614 3.892802 6.641872 3.897822 6.62097 C 3.902842 6.600066 3.911323 6.566152 3.916668 6.545602 C 3.922013 6.525053 3.930678 6.492587 3.935923 6.473455 C 3.941168 6.454324 3.950381 6.421858 3.956397 6.401309 C 3.962413 6.38076 3.972545 6.347135 3.978913 6.326586 C 3.985281 6.306037 3.995809 6.272991 4.002309 6.253151 C 4.00881 6.233311 4.019915 6.200555 4.026988 6.180361 C 4.03406 6.160166 4.045644 6.1277 4.052729 6.108214 C 4.059815 6.088728 4.070986 6.058581 4.077553 6.041221 C 4.084122 6.02386 4.096494 5.992168 4.105048 5.970794 C 4.113602 5.949419 4.126773 5.917243 4.134318 5.899291 C 4.141862 5.881339 4.153857 5.853317 4.160971 5.837021 C 4.168086 5.820724 4.179832 5.794345 4.187073 5.778401 C 4.194314 5.762458 4.207991 5.732891 4.217466 5.712696 C 4.226941 5.692502 4.247297 5.65076 4.262701 5.619937 C 4.278105 5.589113 4.299471 5.547371 4.310183 5.527177 C 4.320894 5.506983 4.338125 5.475097 4.348473 5.456319 C 4.358821 5.437541 4.376262 5.406525 4.387228 5.387393 C 4.398195 5.368261 4.414826 5.339815 4.424186 5.32418 C 4.433546 5.308544 4.449215 5.282746 4.459005 5.26685 C 4.468796 5.250953 4.485301 5.224612 4.495683 5.208315 C 4.506065 5.192018 4.524105 5.16419 4.535771 5.146476 C 4.547438 5.128761 4.56736 5.099194 4.580043 5.08077 C 4.592726 5.062347 4.613228 5.03308 4.625603 5.015732 C 4.637978 4.998384 4.657954 4.970845 4.669993 4.954536 C 4.682033 4.938227 4.703196 4.910151 4.717021 4.892146 C 4.730846 4.874141 4.754722 4.843704 4.770077 4.824509 C 4.785432 4.805313 4.808339 4.777143 4.820981 4.761909 C 4.833623 4.746674 4.854413 4.722034 4.86718 4.707154 C 4.879948 4.692275 4.901733 4.667362 4.915592 4.651794 C 4.929451 4.636226 4.950643 4.612746 4.962686 4.599617 C 4.97473 4.586487 4.995276 4.56444 5.008345 4.550623 C 5.021414 4.536805 5.056781 4.500813 5.086938 4.470638 C 5.117095 4.440464 5.152274 4.405923 5.165114 4.39388 C 5.177953 4.381836 5.199425 4.361883 5.21283 4.34954 C 5.226234 4.337196 5.247905 4.317498 5.260988 4.305764 C 5.27407 4.294031 5.297238 4.273737 5.312473 4.260666 C 5.327707 4.247595 5.352057 4.226999 5.366583 4.214899 C 5.381108 4.202798 5.404879 4.18334 5.419404 4.171658 C 5.43393 4.159976 5.45741 4.141415 5.471581 4.130409 C 5.485753 4.119404 5.513871 4.098057 5.534066 4.082971 C 5.55426 4.067884 5.583538 4.046452 5.599126 4.035341 C 5.614715 4.024232 5.641384 4.005539 5.65839 3.993802 C 5.675395 3.982066 5.703128 3.963359 5.720018 3.952231 C 5.736908 3.941103 5.763287 3.924033 5.778637 3.9143 C 5.793987 3.904566 5.819302 3.888762 5.834891 3.879179 C 5.85048 3.869596 5.878805 3.852647 5.897835 3.841514 C 5.916866 3.830381 5.950491 3.811238 5.972558 3.798974 C 5.994626 3.786711 6.028624 3.768267 6.04811 3.757989 C 6.067595 3.747711 6.099192 3.731475 6.118323 3.72191 C 6.137455 3.712343 6.168761 3.697124 6.187893 3.688087 C 6.207025 3.679051 6.237953 3.664736 6.256621 3.656275 C 6.275289 3.647813 6.304566 3.634922 6.321681 3.627627 C 6.338797 3.620333 6.366433 3.608807 6.383097 3.602014 C 6.39976 3.59522 6.429907 3.583312 6.45009 3.575552 C 6.470273 3.567791 6.5007 3.556389 6.517706 3.550214 C 6.534712 3.544038 6.573555 3.530679 6.604024 3.520527 C 6.634493 3.510373 6.678554 3.496256 6.701937 3.489154 C 6.72532 3.482052 6.761264 3.471554 6.781814 3.465825 C 6.802362 3.460097 6.838307 3.450554 6.86169 3.444619 C 6.885073 3.438683 6.920728 3.430026 6.940922 3.425381 C 6.961117 3.420735 6.994452 3.413422 7.015001 3.409128 C 7.035551 3.404836 7.067726 3.398461 7.086504 3.394964 C 7.105281 3.391467 7.138213 3.3857 7.159686 3.38215 C 7.181159 3.378599 7.214785 3.373376 7.234409 3.370542 C 7.254035 3.367708 7.288932 3.363076 7.311962 3.360249 C 7.334991 3.357421 7.368326 3.35365 7.38604 3.351868 C 7.403755 3.350086 7.435351 3.347191 7.456254 3.345435 C 7.477158 3.343679 7.514261 3.341078 7.538708 3.339654 C 7.563154 3.338231 7.597939 3.336467 7.616007 3.335733 C 7.634076 3.334999 7.678427 3.33403 7.714565 3.333579 C 7.754577 3.33308 7.802688 3.333353 7.8376 3.334277 C 7.869132 3.335112 7.906526 3.336362 7.920698 3.337054 C 7.934869 3.337748 7.960958 3.339205 7.978673 3.340292 C 7.996387 3.34138 8.025374 3.343417 8.043089 3.344818 C 8.060803 3.346219 8.087472 3.348548 8.102352 3.349994 C 8.117232 3.351439 8.142161 3.354048 8.15775 3.355791 C 8.173339 3.357535 8.197568 3.360415 8.211594 3.362193 C 8.225618 3.363971 8.251127 3.367447 8.26828 3.369917 C 8.285433 3.372387 8.31396 3.376728 8.331675 3.379564 C 8.349389 3.382401 8.369372 3.385738 8.376081 3.386984 C 8.388279 3.389246 8.388279 3.389246 8.363197 3.394783 C 8.349403 3.397829 8.323333 3.40377 8.305264 3.407987 C 8.287195 3.412203 8.257918 3.419377 8.240204 3.42393 C 8.222488 3.428483 8.193743 3.436269 8.176324 3.441232 C 8.158905 3.446195 8.128757 3.455192 8.109331 3.461225 C 8.089904 3.467257 8.057775 3.477643 8.037935 3.484303 C 8.018095 3.490964 7.988188 3.501394 7.971476 3.507483 C 7.954764 3.51357 7.926356 3.524291 7.908348 3.531308 C 7.89034 3.538325 7.862038 3.549712 7.845454 3.556612 C 7.828871 3.563512 7.801912 3.575107 7.785547 3.582378 C 7.769181 3.58965 7.741007 3.602484 7.722939 3.610897 C 7.70487 3.61931 7.672984 3.634732 7.652081 3.645169 C 7.631177 3.655606 7.601321 3.670915 7.585732 3.679188 C 7.570143 3.687462 7.540865 3.703484 7.520671 3.714791 C 7.500476 3.7261 7.472649 3.742044 7.458831 3.750223 C 7.445014 3.758403 7.421824 3.772363 7.407298 3.781244 C 7.392772 3.790127 7.369582 3.80464 7.355765 3.813495 C 7.341947 3.822351 7.318467 3.83771 7.303587 3.847629 C 7.288707 3.857547 7.265227 3.873502 7.25141 3.883084 C 7.237592 3.892667 7.213823 3.909481 7.198588 3.92045 C 7.183353 3.931419 7.159294 3.949104 7.145123 3.959751 C 7.130951 3.970396 7.106022 3.98953 7.089725 4.002269 C 7.073427 4.015007 7.047628 4.035613 7.032394 4.048059 C 7.017159 4.060504 6.991677 4.081709 6.975768 4.095181 C 6.959858 4.108654 6.934928 4.130385 6.92037 4.143474 C 6.90581 4.156563 6.882303 4.177989 6.868132 4.191089 C 6.85396 4.204187 6.828161 4.228332 6.810801 4.244742 C 6.79344 4.261153 6.770194 4.283498 6.759141 4.294397 C 6.748089 4.305296 6.726058 4.327566 6.710185 4.343887 C 6.694312 4.360207 6.669264 4.386519 6.654524 4.402359 C 6.639784 4.418199 6.615295 4.445035 6.600105 4.461996 C 6.584914 4.478956 6.562154 4.504822 6.549529 4.519473 C 6.536902 4.534125 6.51593 4.558867 6.502924 4.574457 C 6.489918 4.590046 6.464685 4.621062 6.446852 4.643382 C 6.429018 4.665703 6.402969 4.699014 6.388964 4.717405 C 6.374959 4.735798 6.352437 4.765944 6.338913 4.784399 C 6.32539 4.802853 6.302528 4.834705 6.288111 4.855182 C 6.273693 4.875659 6.250773 4.908994 6.237177 4.929261 C 6.223581 4.949528 6.203403 4.980022 6.192336 4.997029 C 6.181269 5.014035 6.16254 5.043429 6.150717 5.062349 C 6.138893 5.081269 6.119885 5.112286 6.108476 5.131274 C 6.097066 5.150264 6.079324 5.180294 6.069049 5.198009 C 6.058774 5.215723 6.040381 5.248189 6.028177 5.270155 C 6.015972 5.292121 5.998407 5.324297 5.989142 5.341658 C 5.979877 5.359017 5.963487 5.390324 5.952717 5.411227 C 5.941948 5.432131 5.92618 5.463437 5.917677 5.480797 C 5.909174 5.498158 5.895571 5.526275 5.887447 5.543282 C 5.879323 5.560287 5.866405 5.587826 5.858737 5.604477 C 5.851071 5.621128 5.838874 5.648087 5.831634 5.664384 C 5.824393 5.680681 5.812117 5.708799 5.804355 5.726869 C 5.796593 5.744937 5.784163 5.77441 5.776733 5.792365 C 5.769303 5.81032 5.757215 5.840178 5.749872 5.858714 C 5.742528 5.877252 5.730346 5.908651 5.7228 5.928492 C 5.715255 5.948332 5.702967 5.981378 5.695494 6.001926 C 5.688022 6.022476 5.674994 6.05929 5.666543 6.083735 C 5.658092 6.108182 5.644772 6.147894 5.636943 6.171987 C 5.629115 6.196078 5.616639 6.2355 5.60922 6.259593 C 5.601801 6.283685 5.589649 6.324556 5.582215 6.35042 C 5.574781 6.376284 5.563207 6.417735 5.556494 6.442535 C 5.549782 6.467336 5.538269 6.511686 5.530911 6.541093 C 5.523552 6.570499 5.513383 6.612531 5.508312 6.634497 C 5.503242 6.656463 5.495696 6.690088 5.491545 6.70922 C 5.487394 6.728352 5.48053 6.760818 5.476292 6.781366 C 5.472054 6.801915 5.465069 6.83728 5.460769 6.859955 C 5.456468 6.882629 5.449508 6.920893 5.4453 6.944984 C 5.441093 6.969076 5.434727 7.007352 5.431154 7.03004 C 5.42758 7.05273 5.422055 7.089253 5.418875 7.111205 C 5.415696 7.133157 5.410749 7.169089 5.407883 7.191055 C 5.405017 7.213021 5.400362 7.250995 5.397538 7.275441 C 5.394714 7.299888 5.390668 7.336991 5.388546 7.357894 C 5.386425 7.378798 5.382939 7.415901 5.380799 7.440348 C 5.378659 7.464793 5.375475 7.504796 5.373724 7.529243 C 5.371973 7.553688 5.369637 7.589053 5.368533 7.60783 C 5.367429 7.626608 5.365967 7.651827 5.365284 7.663873 C 5.364602 7.675919 5.363405 7.813029 5.362625 7.968563 C 5.361845 8.124097 5.361403 8.421894 5.36164 8.630335 C 5.361878 8.838777 5.362435 9.009682 5.362877 9.010123 C 5.36332 9.010565 5.540871 8.956126 5.757435 8.889147 C 5.974 8.822168 6.23003 8.743004 6.326391 8.713226 C 6.422753 8.683448 6.578706 8.635332 6.672954 8.606302 C 6.767202 8.577271 6.868162 8.546246 6.897308 8.537354 C 6.926455 8.528463 6.950563 8.52145 6.950882 8.521769 C 6.951201 8.522088 6.846763 8.635731 6.718796 8.77431 C 6.59083 8.912889 6.380905 9.140192 6.252297 9.279428 C 6.123689 9.418663 5.909475 9.650566 5.776268 9.794767 C 5.64306 9.938969 5.425077 10.174929 5.291862 10.319123 C 5.158646 10.463318 4.946957 10.692462 4.821442 10.828333 C 4.695926 10.964205 4.585724 11.083344 4.576548 11.093086 C 4.567372 11.102829 4.55948 11.110764 4.55901 11.11072 Z';\n\nconst BjsubwayIntStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultBjsubwayIntStationAttributes.nameOffsetX,\n        nameOffsetY = defaultBjsubwayIntStationAttributes.nameOffsetY,\n    } = attrs[StationType.BjsubwayInt] ?? defaultBjsubwayIntStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -12 : nameOffsetX === 'right' ? 12 : 0;\n    const textDy =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length - 1) *\n        NAME_DY[nameOffsetY].lineHeight *\n        NAME_DY[nameOffsetY].polarity;\n    const textY = textDy + (nameOffsetY === 'up' ? -24 : nameOffsetY === 'bottom' ? 24 : 0);\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    return React.useMemo(\n        () => (\n            <g id={id}>\n                <g transform={`translate(${x - 8}, ${y - 10})`}>\n                    <path d={PATH_CIRCLE} fill=\"#fff\" stroke=\"#000\" strokeWidth=\"0.778\" />\n                    <path d={PATH_ARROW} stroke=\"#000\" strokeWidth=\"0.778\" />\n                    <path\n                        id={`stn_core_${id}`}\n                        d={PATH_CIRCLE}\n                        fill=\"#fff\"\n                        fillOpacity=\"0\"\n                        stroke=\"#000\"\n                        strokeWidth=\"0.778\"\n                        onPointerDown={onPointerDown}\n                        onPointerMove={onPointerMove}\n                        onPointerUp={onPointerUp}\n                        style={{ cursor: 'move' }}\n                    />\n                </g>\n                <g\n                    transform={`translate(${x + textX}, ${y + textY})`}\n                    textAnchor={textAnchor}\n                    className=\"rmp-name-station\"\n                >\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, nameOffsetX, nameOffsetY, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * <BjsubwayIntStation /> specific props.\n */\nexport interface BjsubwayIntStationAttributes extends StationAttributes {\n    nameOffsetX: 'left' | 'middle' | 'right';\n    nameOffsetY: 'up' | 'middle' | 'bottom';\n}\n\nconst defaultBjsubwayIntStationAttributes: BjsubwayIntStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'up',\n};\n\nconst bjsubwayIntStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.bjsubwayInt.nameZh',\n        value: (attrs?: BjsubwayIntStationAttributes) =>\n            (attrs ?? defaultBjsubwayIntStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.bjsubwayInt.nameEn',\n        value: (attrs?: BjsubwayIntStationAttributes) =>\n            (attrs ?? defaultBjsubwayIntStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.bjsubwayInt.nameOffsetX',\n        value: (attrs?: BjsubwayIntStationAttributes) => (attrs ?? defaultBjsubwayIntStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: BjsubwayIntStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as 'left' | 'right';\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.bjsubwayInt.nameOffsetY',\n        value: (attrs?: BjsubwayIntStationAttributes) => (attrs ?? defaultBjsubwayIntStationAttributes).nameOffsetY,\n        options: { up: 'up', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: BjsubwayIntStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as 'up' | 'bottom';\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst bjsubwayIntStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <g transform=\"translate(4, 4)\">\n            <path d={PATH_CIRCLE} fill=\"#fff\" stroke=\"#000\" strokeWidth=\"0.778\" />\n            <path d={PATH_ARROW} stroke=\"#000\" strokeWidth=\"0.778\" />\n        </g>\n    </svg>\n);\n\nconst bjsubwayIntStation: Station<BjsubwayIntStationAttributes> = {\n    component: BjsubwayIntStation,\n    icon: bjsubwayIntStationIcon,\n    defaultAttrs: defaultBjsubwayIntStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: bjsubwayIntStationFields,\n    metadata: {\n        displayName: 'panel.details.station.bjsubwayInt.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: ['interchange'],\n    },\n};\n\nexport default bjsubwayIntStation;\n","import { StationType } from '../../../constants/stations';\nimport shmetroIntStation from './shmetro-int';\nimport shmetroBasicStation from './shmetro-basic';\nimport shmetroBasic2020Station from './shmetro-basic-2020';\nimport gzmtrBasicStation from './gzmtr-basic';\nimport gzmtrIntStation from './gzmtr-int';\nimport bjsubwayIntStation from './bjsubway-int';\n\nconst stations = {\n    [StationType.ShmetroBasic]: shmetroBasicStation,\n    [StationType.ShmetroBasic2020]: shmetroBasic2020Station,\n    [StationType.ShmetroInt]: shmetroIntStation,\n    [StationType.GzmtrBasic]: gzmtrBasicStation,\n    [StationType.GzmtrInt]: gzmtrIntStation,\n    [StationType.BjsubwayInt]: bjsubwayIntStation,\n};\n\nexport default stations;\n","import { CityCode, ColourHex, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { ExternalStationAttributes, StationType } from './stations';\nimport { ExternalLineAttributes, LineType } from './lines';\nimport { MiscNodeAttributes, MiscNodeType } from './nodes';\nimport { MiscEdgeAttributes, MiscEdgeType } from './edges';\n\ninterface BaseAttributes {\n    visible: boolean;\n    zIndex: number;\n}\n\nexport type NodeType = StationType | MiscNodeType;\nexport type NodeAttributes = BaseAttributes & {\n    x: number;\n    y: number;\n    type: NodeType;\n} & Partial<ExternalStationAttributes> &\n    Partial<MiscNodeAttributes>;\n\nexport type EdgeType = LineType | MiscEdgeType;\nexport type EdgeAttributes = BaseAttributes & {\n    // TODO: split to path generation type and style type.\n    color: Theme;\n    type: EdgeType;\n    /**\n     * Unique ID to reconcile lines.\n     */\n    reconcileId: string;\n} & Partial<ExternalLineAttributes> &\n    Partial<MiscEdgeAttributes>;\n\nexport type GraphAttributes = {\n    name?: string;\n};\n\n/**\n * Colour theme of line, derived from `LineEntry`.\n * @property 0 - city id\n * @property 1 - line id\n * @property 2 - background colour\n * @property 3 - foreground colour\n */\nexport type Theme = [CityCode, string, ColourHex, MonoColour];\n\nexport type StnId = `stn_${string}`;\nexport type LineId = `line_${string}`;\nexport type MiscNodeId = `misc_node_${string}`;\nexport type MiscEdgeId = `misc_edge_${string}`;\n\n/**\n * Indicate which station/line/node/edge is currently in mouse control. (Runtime only)\n */\nexport type ActiveType = StnId | LineId | MiscNodeId | MiscEdgeId | 'background';\n\n/**\n * Indicate which element will be placed by next click. (Runtime only)\n */\nexport type RuntimeMode =\n    | 'free'\n    | `line-${LineType}`\n    | `station-${StationType}`\n    | `misc-node-${MiscNodeType}`\n    | `misc-edge-${MiscEdgeType}`;\n\n/**\n * Stations and lines may be in different displaying format.\n * E.g. Station's icon of Rail map and platform are different in Shanghai metro.\n */\nexport enum CanvasType {\n    RailMap = 'railmap',\n    Platform = 'platform',\n}\n\n/**\n * Categories of different railway class.\n */\nexport enum CategoriesType {\n    Metro = 'metro',\n    NationalRail = 'nationalrail',\n    LightRail = 'lightrail',\n    Footpath = 'footpath',\n}\n\n/**\n * RmgRuntime statistics event.\n */\nexport enum Events {\n    APP_LOAD = 'APP_LOAD',\n}\n","import { RmgFieldsField } from '@railmapgen/rmg-components';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, LineId, EdgeAttributes, CategoriesType } from './constants';\nimport { DiagonalLineAttributes } from '../components/svgs/lines/diagonal-line';\nimport { PerpendicularLineAttributes } from '../components/svgs/lines/perpendicular-line';\nimport { SimpleLineAttributes } from '../components/svgs/lines/simple-line';\n\nexport enum LineType {\n    Diagonal = 'diagonal',\n    Perpendicular = 'perpendicular',\n    Simple = 'simple',\n}\n\nexport interface ExternalLineAttributes {\n    [LineType.Diagonal]?: DiagonalLineAttributes;\n    [LineType.Perpendicular]?: PerpendicularLineAttributes;\n    [LineType.Simple]?: SimpleLineAttributes;\n}\n\n/* ----- Below are core types for all lines, DO NOT TOUCH. ----- */\n\nexport interface LineAttributes {}\nexport interface LineComponentProps {\n    id: LineId;\n    x1: number;\n    x2: number;\n    y1: number;\n    y2: number;\n    /**\n     * Indicate whether or not this line is created in progress.\n     * If yes, we need to set pointer-events to none\n     * so elementsFromPoint will return the underlying station instead of this line.\n     * https://stackoverflow.com/a/49174322\n     */\n    newLine: boolean;\n    handleClick: (edge: LineId, e: React.MouseEvent<SVGPathElement, MouseEvent>) => void;\n    attrs: EdgeAttributes;\n}\n/**\n * The default interface a customized Line should export.\n */\nexport interface Line<T extends LineAttributes> {\n    /**\n     * The core line component.\n     */\n    component: (props: LineComponentProps) => JSX.Element;\n    /**\n     * The icon displayed in the tools panel.\n     */\n    icon: JSX.Element;\n    /**\n     * Default attributes for this component.\n     */\n    defaultAttrs: T;\n    /**\n     * Changeable actions in the details panel.\n     * In a slightly different RmgFieldsField format that hides some internal implementation.\n     * Attrs should be obtained via this wrapper instead of window.graph or redux.\n     */\n    fields: (Omit<RmgFieldsField, 'value' | 'onChange'> & {\n        value: (attrs?: T) => string;\n        disabledOptions: (attrs?: T) => (string | number)[];\n        onChange: (val: string | number, attrs_?: T) => T;\n    })[];\n    /**\n     * TODO: split to path generation type and style type.\n     * If you export the internal path generation function, RMP\n     * will try to reconcile this line with other lines to form\n     * a single line/path as long as the user set the same Reconcile ID.\n     */\n    generatePath?: GeneratePathFunction<T>;\n    /**\n     * Metadata for this line.\n     */\n    metadata: {\n        /**\n         * The name displayed in the tools panel. In react-i18next index format.\n         */\n        displayName: string;\n        /**\n         * Cities that can use this line implementation.\n         */\n        cities: CityCode[];\n        /**\n         * This line is suitable to which canvas.\n         */\n        canvas: CanvasType[];\n        /**\n         * The categories which this line suits for.\n         */\n        categories: CategoriesType[];\n        /**\n         * Tags of this line.\n         */\n        tags: string[];\n    };\n}\n\nexport type GeneratePathFunction<T> = (\n    x1: number,\n    x2: number,\n    y1: number,\n    y2: number,\n    attrs: T\n) => {\n    type: 'straight';\n    d: `${'m' | 'M'}${string}`;\n};\n","import { RmgFieldsField } from '@railmapgen/rmg-components';\nimport { FacilitiesAttributes } from '../components/svgs/nodes/facilities';\nimport { GzmtrLineBadgeAttributes } from '../components/svgs/nodes/gzmtr-line-badge/gzmtr-line-badge';\nimport { ShmetroNumLineBadgeAttributes } from '../components/svgs/nodes/shmetro-num-line-badge';\nimport { ShmetroTextLineBadgeAttributes } from '../components/svgs/nodes/shmetro-text-line-badge';\nimport { VirtualAttributes } from '../components/svgs/nodes/virtual';\nimport { MiscNodeId } from './constants';\n\nexport interface NodeComponentProps<T> {\n    id: MiscNodeId;\n    attrs: T;\n    x: number;\n    y: number;\n    handlePointerDown: (node: MiscNodeId, e: React.PointerEvent<SVGElement>) => void;\n    handlePointerMove: (node: MiscNodeId, e: React.PointerEvent<SVGElement>) => void;\n    handlePointerUp: (node: MiscNodeId, e: React.PointerEvent<SVGElement>) => void;\n}\nexport interface Node<T> {\n    /**\n     * The core node component.\n     */\n    component: (props: NodeComponentProps<T>) => JSX.Element;\n    /**\n     * The icon displayed in the tools panel.\n     */\n    icon: JSX.Element;\n    /**\n     * Default attributes for this component.\n     */\n    defaultAttrs: T;\n    /**\n     * Changeable actions in the details panel.\n     * In a slightly different RmgFieldsField format that hides some internal implementation.\n     * Attrs should be obtained via this wrapper instead of window.graph or redux.\n     */\n    fields: (Omit<RmgFieldsField, 'value' | 'onChange'> & {\n        value: (attrs?: T) => string;\n        disabledOptions: (attrs?: T) => (string | number)[];\n        onChange: (val: string | number, attrs_?: T) => T;\n    })[];\n    /**\n     * Metadata for this node.\n     */\n    metadata: {\n        /**\n         * The name displayed in the tools panel. In react-i18next index format.\n         */\n        displayName: string;\n        /**\n         * Tags of this station.\n         */\n        tags: string[];\n    };\n}\n\nexport enum MiscNodeType {\n    Virtual = 'virtual',\n    ShmetroNumLineBadge = 'shmetro-num-line-badge',\n    ShmetroTextLineBadge = 'shmetro-text-line-badge',\n    Facilities = 'facilities',\n    GzmtrLineBadge = 'gzmtr-line-badge',\n}\nexport interface MiscNodeAttributes {\n    [MiscNodeType.Virtual]?: VirtualAttributes;\n    [MiscNodeType.ShmetroNumLineBadge]?: ShmetroNumLineBadgeAttributes;\n    [MiscNodeType.ShmetroTextLineBadge]?: ShmetroTextLineBadgeAttributes;\n    [MiscNodeType.Facilities]?: FacilitiesAttributes;\n    [MiscNodeType.GzmtrLineBadge]?: GzmtrLineBadgeAttributes;\n}\n","import { RmgFieldsField } from '@railmapgen/rmg-components';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, StnId, CategoriesType } from './constants';\nimport { ShmetroIntStationAttributes } from '../components/svgs/stations/shmetro-int';\nimport { ShmetroBasicStationAttributes } from '../components/svgs/stations/shmetro-basic';\nimport { ShmetroBasic2020StationAttributes } from '../components/svgs/stations/shmetro-basic-2020';\nimport { GzmtrBasicStationAttributes } from '../components/svgs/stations/gzmtr-basic';\nimport { GzmtrIntStationAttributes } from '../components/svgs/stations/gzmtr-int';\nimport { BjsubwayIntStationAttributes } from '../components/svgs/stations/bjsubway-int';\n\nexport enum StationType {\n    ShmetroBasic = 'shmetro-basic',\n    ShmetroInt = 'shmetro-int',\n    ShmetroBasic2020 = 'shmetro-basic-2020',\n    GzmtrBasic = 'gzmtr-basic',\n    GzmtrInt = 'gzmtr-int',\n    BjsubwayInt = 'bjsubway-int',\n}\n\nexport interface ExternalStationAttributes {\n    [StationType.ShmetroInt]?: ShmetroIntStationAttributes;\n    [StationType.ShmetroBasic]?: ShmetroBasicStationAttributes;\n    [StationType.ShmetroBasic2020]?: ShmetroBasic2020StationAttributes;\n    [StationType.GzmtrBasic]?: GzmtrBasicStationAttributes;\n    [StationType.GzmtrInt]?: GzmtrIntStationAttributes;\n    [StationType.BjsubwayInt]?: BjsubwayIntStationAttributes;\n}\n\n/* ----- Below are core types for all stations, DO NOT TOUCH. ----- */\n\nexport interface StationAttributes {\n    /**\n     * The names (in different languages) of this station.\n     * If you need to break the line, use `\\\\` and <MultilineText /> instead.\n     * NEVER ASSUME ANY INDEX WOULD HAVE A VALUE. EVERY INDEX COULD BE UNDEFINED.\n     */\n    names: string[];\n}\nexport interface StationComponentProps {\n    id: StnId;\n    attrs: ExternalStationAttributes;\n    x: number;\n    y: number;\n    handlePointerDown: (node: StnId, e: React.PointerEvent<SVGElement>) => void;\n    handlePointerMove: (node: StnId, e: React.PointerEvent<SVGElement>) => void;\n    handlePointerUp: (node: StnId, e: React.PointerEvent<SVGElement>) => void;\n}\n/**\n * The default interface a customized Station should export.\n */\nexport interface Station<T extends StationAttributes> {\n    /**\n     * The core station component.\n     */\n    component: (props: StationComponentProps) => JSX.Element;\n    /**\n     * The icon displayed in the tools panel.\n     */\n    icon: JSX.Element;\n    /**\n     * Default attributes for this component.\n     */\n    defaultAttrs: T;\n    /**\n     * Changeable actions in the details panel.\n     * In a slightly different RmgFieldsField format that hides some internal implementation.\n     * Attrs should be obtained via this wrapper instead of window.graph or redux.\n     */\n    fields: (Omit<RmgFieldsField, 'value' | 'onChange'> & {\n        value: (attrs?: T) => string;\n        disabledOptions: (attrs?: T) => (string | number)[];\n        onChange: (val: string | number, attrs_?: T) => T;\n    })[];\n    /**\n     * Metadata for this station.\n     */\n    metadata: {\n        /**\n         * The name displayed in the tools panel. In react-i18next index format.\n         */\n        displayName: string;\n        /**\n         * Cities that can use this station implementation.\n         */\n        cities: CityCode[];\n        /**\n         * This station is suitable to which canvas.\n         */\n        canvas: CanvasType[];\n        /**\n         * The categories which this line suits for.\n         */\n        categories: CategoriesType[];\n        /**\n         * Tags of this station.\n         */\n        tags: string[];\n    };\n}\n\nexport const defaultStationAttributes: StationAttributes = { names: ['车站', 'Stn'] };\n","/*****************************************************************************\n *                                                                            *\n *  SVG Path Rounding Function                                                *\n *  Copyright (C) 2014 Yona Appletree                                         *\n *                                                                            *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");           *\n *  you may not use this file except in compliance with the License.          *\n *  You may obtain a copy of the License at                                   *\n *                                                                            *\n *      http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                            *\n *  Unless required by applicable law or agreed to in writing, software       *\n *  distributed under the License is distributed on an \"AS IS\" BASIS,         *\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *\n *  See the License for the specific language governing permissions and       *\n *  limitations under the License.                                            *\n *                                                                            *\n *****************************************************************************/\n\n// @ts-nocheck\n// Special thanks to Yona Appletree who shared this amazing rounding snippets.\n// https://stackoverflow.com/a/27031874\n\n/**\n * SVG Path rounding function. Takes an input path string and outputs a path\n * string where all line-line corners have been rounded. Only supports absolute\n * commands at the moment.\n *\n * @param pathString The SVG input path\n * @param radius The amount to round the corners, either a value in the SVG\n *               coordinate space, or, if useFractionalRadius is true, a value\n *               from 0 to 1.\n * @param useFractionalRadius If true, the curve radius is expressed as a\n *               fraction of the distance between the point being curved and\n *               the previous and next points.\n * @returns A new SVG path string with the rounding\n */\nexport function roundPathCorners(pathString, radius, useFractionalRadius) {\n    function moveTowardsLength(movingPoint, targetPoint, amount) {\n        var width = targetPoint.x - movingPoint.x;\n        var height = targetPoint.y - movingPoint.y;\n\n        var distance = Math.sqrt(width * width + height * height);\n\n        return moveTowardsFractional(movingPoint, targetPoint, Math.min(1, amount / distance));\n    }\n    function moveTowardsFractional(movingPoint, targetPoint, fraction) {\n        return {\n            x: movingPoint.x + (targetPoint.x - movingPoint.x) * fraction,\n            y: movingPoint.y + (targetPoint.y - movingPoint.y) * fraction,\n        };\n    }\n\n    // Adjusts the ending position of a command\n    function adjustCommand(cmd, newPoint) {\n        if (cmd.length > 2) {\n            cmd[cmd.length - 2] = newPoint.x;\n            cmd[cmd.length - 1] = newPoint.y;\n        }\n    }\n\n    // Gives an {x, y} object for a command's ending position\n    function pointForCommand(cmd) {\n        return {\n            x: parseFloat(cmd[cmd.length - 2]),\n            y: parseFloat(cmd[cmd.length - 1]),\n        };\n    }\n\n    // Split apart the path, handing concatonated letters and numbers\n    var pathParts = pathString.split(/[,\\s]/).reduce(function (parts, part) {\n        var match = part.match('([a-zA-Z])(.+)');\n        if (match) {\n            parts.push(match[1]);\n            parts.push(match[2]);\n        } else {\n            parts.push(part);\n        }\n\n        return parts;\n    }, []);\n\n    // Group the commands with their arguments for easier handling\n    var commands = pathParts.reduce(function (commands, part) {\n        if (parseFloat(part) == part && commands.length) {\n            commands[commands.length - 1].push(part);\n        } else {\n            commands.push([part]);\n        }\n\n        return commands;\n    }, []);\n\n    // The resulting commands, also grouped\n    var resultCommands = [];\n\n    if (commands.length > 1) {\n        var startPoint = pointForCommand(commands[0]);\n\n        // Handle the close path case with a \"virtual\" closing line\n        var virtualCloseLine = null;\n        if (commands[commands.length - 1][0] == 'Z' && commands[0].length > 2) {\n            virtualCloseLine = ['L', startPoint.x, startPoint.y];\n            commands[commands.length - 1] = virtualCloseLine;\n        }\n\n        // We always use the first command (but it may be mutated)\n        resultCommands.push(commands[0]);\n\n        for (var cmdIndex = 1; cmdIndex < commands.length; cmdIndex++) {\n            var prevCmd = resultCommands[resultCommands.length - 1];\n\n            var curCmd = commands[cmdIndex];\n\n            // Handle closing case\n            var nextCmd = curCmd == virtualCloseLine ? commands[1] : commands[cmdIndex + 1];\n\n            // Nasty logic to decide if this path is a candidite.\n            if (\n                nextCmd &&\n                prevCmd &&\n                prevCmd.length > 2 &&\n                curCmd[0] == 'L' &&\n                nextCmd.length > 2 &&\n                nextCmd[0] == 'L'\n            ) {\n                // Calc the points we're dealing with\n                var prevPoint = pointForCommand(prevCmd);\n                var curPoint = pointForCommand(curCmd);\n                var nextPoint = pointForCommand(nextCmd);\n\n                // The start and end of the cuve are just our point moved towards the previous and next points, respectivly\n                var curveStart, curveEnd;\n\n                if (useFractionalRadius) {\n                    curveStart = moveTowardsFractional(curPoint, prevCmd.origPoint || prevPoint, radius);\n                    curveEnd = moveTowardsFractional(curPoint, nextCmd.origPoint || nextPoint, radius);\n                } else {\n                    curveStart = moveTowardsLength(curPoint, prevPoint, radius);\n                    curveEnd = moveTowardsLength(curPoint, nextPoint, radius);\n                }\n\n                // Adjust the current command and add it\n                adjustCommand(curCmd, curveStart);\n                curCmd.origPoint = curPoint;\n                resultCommands.push(curCmd);\n\n                // The curve control points are halfway between the start/end of the curve and\n                // the original point\n                var startControl = moveTowardsFractional(curveStart, curPoint, 0.5);\n                var endControl = moveTowardsFractional(curPoint, curveEnd, 0.5);\n\n                // Create the curve\n                var curveCmd = [\n                    'C',\n                    startControl.x,\n                    startControl.y,\n                    endControl.x,\n                    endControl.y,\n                    curveEnd.x,\n                    curveEnd.y,\n                ];\n                // Save the original point for fractional calculations\n                curveCmd.origPoint = curPoint;\n                resultCommands.push(curveCmd);\n            } else {\n                // Pass through commands that don't qualify\n                resultCommands.push(curCmd);\n            }\n        }\n\n        // Fix up the starting point and restore the close path if the path was orignally closed\n        if (virtualCloseLine) {\n            var newStartPoint = pointForCommand(resultCommands[resultCommands.length - 1]);\n            resultCommands.push(['Z']);\n            adjustCommand(resultCommands[0], newStartPoint);\n        }\n    } else {\n        resultCommands = commands;\n    }\n\n    return resultCommands.reduce(function (str, c) {\n        return str + c.join(' ') + ' ';\n    }, '');\n}\n"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","FlagSvgEmoji","props","countryCode","svgFilename","useState","undefined","src","setSrc","useEffect","default","catch","err","console","error","message","alt","h","mr","CityPicker","defaultValueId","onChange","i18n","useTranslation","currentItem","cityList","item","displayValue","languages","lng","name","find","data","sort","a","b","CityCode","localeCompare","displayHandler","isCensorTWFlag","country","LanguageCode","includes","isWindowsClient","navigator","platform","flagSvg","countryList","flagEmoji","predicate","input","values","some","defaultValue","ColourPicker","city","paletteList","cityCode","setPaletteList","usePalette","palette","displayName","fg","MonoColour","bg","colour","ColourModal","isOpen","onClose","defaultTheme","onUpdate","setCityCode","lineCode","setLineCode","bgColour","setBgColour","fgColour","setFgColour","toString","paletteFields","type","label","component","value","line","customFields","variant","placeholder","options","isSubmitEnabled","isFitted","colorScheme","w","defaultIndex","fields","fontSize","marginRight","color","onClick","rmgRuntime","window","open","as","MdOpenInNew","disabled","ColorField","defaultAttrs","dispatch","useRootDispatch","hardRefresh","React","setRefresh","saveGraph","graph","current","export","selectedFirst","useRootSelector","state","runtime","selected","at","isModalOpen","setIsModalOpen","theme","hasNode","getNodeAttribute","nextTheme","attrs","mergeNodeAttributes","handleChangeColor","ColourUtil","hex","parseInt","slice","alpha","this","hexToRgb","join","hex1","hex2","reduce","acc","cur","idx","Math","pow","ThemeButton","size","style","minHeight","minWidth","_hover","fade","icon","generatePath","propsx1","propsx2","propsy1","propsy2","startFrom","defaultDiagonalLineAttributes","offsetFrom","offsetTo","x1_","x2_","y1_","y2_","horizontalOrVertical","abs","offset1","offset2","x1","y1","x2","sqrt","y2","x","y","d","diagonalLineFields","from","to","val","attrs_","validator","Number","isNaN","newLine","handleClick","diagonal","path","roundPathCorners","fill","stroke","strokeWidth","strokeLinejoin","strokeLinecap","pointerEvents","viewBox","height","width","focusable","metadata","cities","canvas","CanvasType","categories","CategoriesType","tags","defaultPerpendicularLineAttributes","dx1","dy1","dx2","dy2","roundCornerFactor","perpendicularFields","perpendicular","setPath","LineType","diagonalLine","perpendicularLine","simpleLine","MultilineText","ref","text","lineHeight","grow","dominantBaseline","otherSvgTextProps","reverse","i","dy","JSON","stringify","NAME_DY","up","namesPos","polarity","middle","bottom","defaultShmetroIntStationAttributes","defaultStationAttributes","nameOffsetX","nameOffsetY","rotate","shmetroIntStationFields","names","replaceAll","left","right","disabledOptions","isInteger","handlePointerDown","handlePointerMove","handlePointerUp","StationType","onPointerDown","onPointerMove","onPointerUp","textX","textY","split","length","textAnchor","transform","ry","cursor","className","defaultShmetroBasicStationAttributes","shmetroBasicStationFields","r","cx","cy","ROTATE_CONST","textDx","textDy","defaultShmetroBasic2020StationAttributes","shmetroBasic2020StationFields","PATH","TEXT_MAX_WIDTH","StationNumber","strokeColor","stationCode","lineCodeEl","stnCodeEl","lineCodeBBox","setlineCodeBBox","stnCodeBBox","setstnCodeBBox","getBBox","lineCodeScale","max","stnCodeScale","defaultGzmtrBasicStationAttributes","gzmtrBasicStationFields","fillOpacity","InterchangeCard","interchangeList","onAdd","onDelete","selectedIndex","setSelectedIndex","interchangeFields","it","minW","direction","spacing","flex","align","noLabel","InterchangeField","stationType","attr","transfer","handleAdd","setIndex","interchangeInfo","newTransferInfo","parse","push","handleUpdate","interchangeIndex","set","setIdx","int","intIdx","infoList","Fragment","filter","_","alignSelf","leftIcon","CODE_POS","defaultGzmtrIntStationAttributes","gzmtrIntStationFields","transferAll","flat","arrowColor","info","arr","indexOf","markerWidth","markerHeight","refX","refY","orient","points","markerEnd","strokeOpacity","PATH_CIRCLE","PATH_ARROW","defaultBjsubwayIntStationAttributes","bjsubwayIntStationFields","shmetroBasicStation","shmetroBasic2020Station","shmetroIntStation","gzmtrBasicStation","gzmtrIntStation","bjsubwayIntStation","Events","MiscNodeType","pathString","radius","useFractionalRadius","moveTowardsLength","movingPoint","targetPoint","amount","distance","moveTowardsFractional","min","fraction","adjustCommand","cmd","newPoint","pointForCommand","parseFloat","commands","parts","part","match","resultCommands","startPoint","virtualCloseLine","cmdIndex","prevCmd","curCmd","nextCmd","curveStart","curveEnd","prevPoint","curPoint","nextPoint","origPoint","startControl","endControl","curveCmd","newStartPoint","str","c"],"sourceRoot":""}