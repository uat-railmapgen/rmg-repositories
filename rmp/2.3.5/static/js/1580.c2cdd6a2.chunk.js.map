{"version":3,"file":"static/js/1580.c2cdd6a2.chunk.js","mappings":"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","sources":["components/svgs/common/multiline-text.tsx","components/svgs/stations/shmetro-int.tsx","components/svgs/stations/shmetro-basic.tsx","components/svgs/stations/shmetro-basic-2020.tsx","components/svgs/stations/gzmtr-basic.tsx","components/panels/details/interchange-card.tsx","components/panels/details/interchange-field.tsx","components/svgs/stations/gzmtr-int.tsx","components/svgs/stations/bjsubway-basic.tsx","components/svgs/stations/bjsubway-int.tsx","components/svgs/stations/stations.ts","constants/constants.ts"],"sourcesContent":["import React from 'react';\nimport { NameOffsetY } from '../../../constants/stations';\n\ninterface MultilineTextProps extends React.SVGProps<SVGTextElement> {\n    text: string[];\n    lineHeight: number;\n    grow: 'up' | 'down';\n}\n\nexport const MultilineText = React.forwardRef((props: MultilineTextProps, ref: React.Ref<SVGGElement>) => {\n    const {\n        text,\n        lineHeight,\n        grow,\n        // if dominantBaseline is defined, use it, or we calculate the dominantBaseline for you\n        dominantBaseline = grow === 'up' ? 'auto' : 'hanging',\n        ...otherSvgTextProps\n    } = props;\n\n    return React.useMemo(\n        () => (\n            <g ref={ref}>\n                {(grow === 'up' ? [...text].reverse() : text).map((t, i) => (\n                    <text\n                        key={t}\n                        dy={(i * lineHeight + 2) * (grow === 'up' ? -1 : 1)}\n                        dominantBaseline={dominantBaseline}\n                        {...otherSvgTextProps}\n                    >\n                        {t}\n                    </text>\n                ))}\n            </g>\n        ),\n        [text.join(''), lineHeight, grow, dominantBaseline, JSON.stringify(otherSvgTextProps)]\n    );\n});\n\n// Display component name in debugging.\n// Required by eslint react/display-name.\nMultilineText.displayName = 'MultilineText';\n\n/**\n * This is the default const of name height in different languages.\n */\nexport const LINE_HEIGHT = {\n    zh: 16,\n    en: 10,\n};\n\n/**\n * This is the default const of name dy calculation.\n * It is suitable for names that has 2 elements with 16px/10px font size.\n */\nexport const NAME_DY: {\n    [key in NameOffsetY]: {\n        namesPos: number; // index of the names we need to calculate dy\n        lineHeight: number;\n        polarity: -1 | 0 | 1; // in which direction\n    };\n} = {\n    top: {\n        namesPos: 1,\n        lineHeight: LINE_HEIGHT.en,\n        polarity: -1,\n    },\n    middle: {\n        namesPos: 0,\n        lineHeight: 0,\n        polarity: 0,\n    },\n    bottom: {\n        namesPos: 0,\n        lineHeight: LINE_HEIGHT.zh,\n        polarity: 1,\n    },\n};\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    NameOffsetX,\n    NameOffsetY,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst ShmetroIntStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultShmetroIntStationAttributes.nameOffsetX,\n        nameOffsetY = defaultShmetroIntStationAttributes.nameOffsetY,\n        rotate = defaultShmetroIntStationAttributes.rotate,\n        width = defaultShmetroIntStationAttributes.width,\n        height = defaultShmetroIntStationAttributes.height,\n    } = attrs[StationType.ShmetroInt] ?? defaultShmetroIntStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -12 : nameOffsetX === 'right' ? 12 : 0;\n    const textY =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length * NAME_DY[nameOffsetY].lineHeight + 8) *\n        NAME_DY[nameOffsetY].polarity;\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    return React.useMemo(\n        () => (\n            <g id={id}>\n                <g transform={`translate(${x}, ${y})rotate(${rotate})`}>\n                    <rect\n                        id={`stn_core_${id}`}\n                        x={-width / 2}\n                        y={-height / 2}\n                        height={height}\n                        width={width}\n                        ry={height / 2}\n                        stroke=\"black\"\n                        fill=\"white\"\n                        onPointerDown={onPointerDown}\n                        onPointerMove={onPointerMove}\n                        onPointerUp={onPointerUp}\n                        style={{ cursor: 'move' }}\n                    />\n                </g>\n                <g\n                    transform={`translate(${x + textX}, ${y + textY})`}\n                    textAnchor={textAnchor}\n                    className=\"rmp-name-station\"\n                >\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, nameOffsetX, nameOffsetY, rotate, width, height, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * <ShmetroIntStation /> specific props.\n */\nexport interface ShmetroIntStationAttributes extends StationAttributes {\n    nameOffsetX: NameOffsetX;\n    nameOffsetY: NameOffsetY;\n    /**\n     * 0 <= rotate < 180\n     */\n    rotate: number;\n    width: number;\n    height: number;\n}\n\nconst defaultShmetroIntStationAttributes: ShmetroIntStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'top',\n    rotate: 0,\n    height: 10,\n    width: 15,\n};\n\nconst shmetroIntStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroInt.nameZh',\n        value: (attrs?: ShmetroIntStationAttributes) =>\n            (attrs ?? defaultShmetroIntStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroInt.nameEn',\n        value: (attrs?: ShmetroIntStationAttributes) =>\n            (attrs ?? defaultShmetroIntStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroInt.nameOffsetX',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: ShmetroIntStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as NameOffsetX;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroInt.nameOffsetY',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).nameOffsetY,\n        options: { top: 'top', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: ShmetroIntStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as NameOffsetY;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.shmetroInt.height',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).height,\n        validator: (val: string) => Number.isInteger(val),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.height = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.shmetroInt.width',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).width,\n        validator: (val: string) => Number.isInteger(val),\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.width = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.shmetroInt.rotate',\n        value: (attrs?: ShmetroIntStationAttributes) => (attrs ?? defaultShmetroIntStationAttributes).rotate,\n        validator: (val: string) => Number.isInteger(val) && Number(val) >= 0 && Number(val) < 180,\n        onChange: (val: string | number, attrs_: ShmetroIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroIntStationAttributes;\n            // set value\n            attrs.rotate = Math.abs(Number(val)) % 180;\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst shmetroIntStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <rect x=\"4.5\" y=\"7\" height=\"10\" width=\"15\" ry=\"5\" stroke=\"currentColor\" fill=\"none\" />\n    </svg>\n);\n\nconst shmetroIntStation: Station<ShmetroIntStationAttributes> = {\n    component: ShmetroIntStation,\n    icon: shmetroIntStationIcon,\n    defaultAttrs: defaultShmetroIntStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: shmetroIntStationFields,\n    metadata: {\n        displayName: 'panel.details.station.shmetroInt.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: ['interchange'],\n    },\n};\n\nexport default shmetroIntStation;\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    NameOffsetX,\n    NameOffsetY,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst ShmetroBasicStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultShmetroBasicStationAttributes.nameOffsetX,\n        nameOffsetY = defaultShmetroBasicStationAttributes.nameOffsetY,\n    } = attrs[StationType.ShmetroBasic] ?? defaultShmetroBasicStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -12 : nameOffsetX === 'right' ? 12 : 0;\n    const textY =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length * NAME_DY[nameOffsetY].lineHeight + 8) *\n        NAME_DY[nameOffsetY].polarity;\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                <circle\n                    id={`stn_core_${id}`}\n                    r={5}\n                    stroke=\"black\"\n                    fill=\"white\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n                <g transform={`translate(${textX}, ${textY})`} textAnchor={textAnchor} className=\"rmp-name-station\">\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, nameOffsetX, nameOffsetY, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * <ShmetroBasicStation /> specific props.\n */\nexport interface ShmetroBasicStationAttributes extends StationAttributes {\n    nameOffsetX: NameOffsetX;\n    nameOffsetY: NameOffsetY;\n}\n\nconst defaultShmetroBasicStationAttributes: ShmetroBasicStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'top',\n};\n\nconst shmetroBasicStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroBasic.nameZh',\n        value: (attrs?: ShmetroBasicStationAttributes) =>\n            (attrs ?? defaultShmetroBasicStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: ShmetroBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasicStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroBasic.nameEn',\n        value: (attrs?: ShmetroBasicStationAttributes) =>\n            (attrs ?? defaultShmetroBasicStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: ShmetroBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasicStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroBasic.nameOffsetX',\n        value: (attrs?: ShmetroBasicStationAttributes) => (attrs ?? defaultShmetroBasicStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: ShmetroBasicStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: ShmetroBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasicStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as NameOffsetX;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroBasic.nameOffsetY',\n        value: (attrs?: ShmetroBasicStationAttributes) => (attrs ?? defaultShmetroBasicStationAttributes).nameOffsetY,\n        options: { top: 'top', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: ShmetroBasicStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: ShmetroBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasicStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as NameOffsetY;\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst shmetroBasicStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <circle cx=\"12\" cy=\"12\" r=\"5\" stroke=\"currentColor\" fill=\"none\" />\n    </svg>\n);\n\nconst shmetroBasicStation: Station<ShmetroBasicStationAttributes> = {\n    component: ShmetroBasicStation,\n    icon: shmetroBasicStationIcon,\n    defaultAttrs: defaultShmetroBasicStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: shmetroBasicStationFields,\n    metadata: {\n        displayName: 'panel.details.station.shmetroBasic.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default shmetroBasicStation;\n","import React from 'react';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { ColorField, AttributesWithColor } from '../../panels/details/color-field';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\ntype ROTATE = 0 | 45 | 90 | 135 | 180 | 225 | 270 | 315;\n\nconst ROTATE_CONST: {\n    [rotate: number]: {\n        textDx: number;\n        textDy: number;\n        textAnchor: 'start' | 'middle' | 'end';\n        namesPos: 0 | 1;\n        lineHeight: 0 | 10 | 16;\n        polarity: -1 | 0 | 1;\n    };\n} = {\n    0: {\n        textDx: 0,\n        textDy: -27,\n        textAnchor: 'middle',\n        namesPos: 1,\n        lineHeight: 10,\n        polarity: -1,\n    },\n    45: {\n        textDx: 12,\n        textDy: -15,\n        textAnchor: 'start',\n        namesPos: 1,\n        lineHeight: 10,\n        polarity: -1,\n    },\n    90: {\n        textDx: 12,\n        textDy: 0,\n        textAnchor: 'start',\n        namesPos: 0,\n        lineHeight: 0,\n        polarity: 0,\n    },\n    135: {\n        textDx: 12,\n        textDy: 15,\n        textAnchor: 'start',\n        namesPos: 0,\n        lineHeight: 16,\n        polarity: 1,\n    },\n    180: {\n        textDx: 0,\n        textDy: 27,\n        textAnchor: 'middle',\n        namesPos: 0,\n        lineHeight: 16,\n        polarity: 1,\n    },\n    225: {\n        textDx: -12,\n        textDy: 15,\n        textAnchor: 'end',\n        namesPos: 0,\n        lineHeight: 16,\n        polarity: 1,\n    },\n    270: {\n        textDx: -12,\n        textDy: 0,\n        textAnchor: 'end',\n        namesPos: 0,\n        lineHeight: 0,\n        polarity: 0,\n    },\n    315: {\n        textDx: -12,\n        textDy: -15,\n        textAnchor: 'end',\n        namesPos: 1,\n        lineHeight: 10,\n        polarity: -1,\n    },\n};\n\nconst ShmetroBasic2020Station = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        color = defaultShmetroBasic2020StationAttributes.color,\n        rotate = defaultShmetroBasic2020StationAttributes.rotate,\n    } = attrs[StationType.ShmetroBasic2020] ?? defaultShmetroBasic2020StationAttributes;\n\n    const textDy =\n        ROTATE_CONST[rotate].textDy + // fixed dy for each rotation\n        (names[ROTATE_CONST[rotate].namesPos].split('\\\\').length - 1) *\n            ROTATE_CONST[rotate].lineHeight *\n            ROTATE_CONST[rotate].polarity; // dynamic dy of n lines (either zh or en)\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id}>\n                <g transform={`translate(${x}, ${y})rotate(${rotate})`}>\n                    <rect\n                        id={`stn_core_${id}`}\n                        x=\"-2.5\"\n                        y=\"-10\"\n                        width=\"5\"\n                        height=\"10\"\n                        stroke=\"none\"\n                        fill={color[2]}\n                        onPointerDown={onPointerDown}\n                        onPointerMove={onPointerMove}\n                        onPointerUp={onPointerUp}\n                        style={{ cursor: 'move' }}\n                    />\n                </g>\n                <g\n                    transform={`translate(${x + ROTATE_CONST[rotate].textDx}, ${y + textDy})`}\n                    textAnchor={ROTATE_CONST[rotate].textAnchor}\n                    className=\"rmp-name-station\"\n                >\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, rotate, color, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * <ShmetroBasic2020Station /> specific props.\n */\nexport interface ShmetroBasic2020StationAttributes extends StationAttributes, AttributesWithColor {\n    rotate: ROTATE;\n}\n\nconst defaultShmetroBasic2020StationAttributes: ShmetroBasic2020StationAttributes = {\n    ...defaultStationAttributes,\n    rotate: 0,\n    color: [CityCode.Shanghai, 'sh1', '#E4002B', MonoColour.white],\n};\n\nconst shmetroBasic2020StationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroBasic2020.nameZh',\n        value: (attrs?: ShmetroBasic2020StationAttributes) =>\n            (attrs ?? defaultShmetroBasic2020StationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        onChange: (val: string | number, attrs_: ShmetroBasic2020StationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasic2020StationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.shmetroBasic2020.nameEn',\n        value: (attrs?: ShmetroBasic2020StationAttributes) =>\n            (attrs ?? defaultShmetroBasic2020StationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        onChange: (val: string | number, attrs_: ShmetroBasic2020StationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasic2020StationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.shmetroBasic2020.rotate',\n        value: (attrs?: ShmetroBasic2020StationAttributes) =>\n            (attrs ?? defaultShmetroBasic2020StationAttributes).rotate,\n        options: { 0: '0', 45: '45', 90: '90', 135: '135', 180: '180', 225: '225', 270: '270', 315: '315' },\n        onChange: (val: string | number, attrs_: ShmetroBasic2020StationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroBasic2020StationAttributes;\n            // set value\n            attrs.rotate = Number(val) as ROTATE;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: (\n            <ColorField type={StationType.ShmetroBasic2020} defaultAttrs={defaultShmetroBasic2020StationAttributes} />\n        ),\n    },\n];\n\nconst shmetroBasic2020StationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <rect x=\"6\" y=\"9\" width=\"12\" height=\"6\" stroke=\"currentColor\" fill=\"currentColor\" />\n    </svg>\n);\n\nconst shmetroBasic2020Station: Station<ShmetroBasic2020StationAttributes> = {\n    component: ShmetroBasic2020Station,\n    icon: shmetroBasic2020StationIcon,\n    defaultAttrs: defaultShmetroBasic2020StationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: shmetroBasic2020StationFields,\n    metadata: {\n        displayName: 'panel.details.station.shmetroBasic2020.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default shmetroBasic2020Station;\n","import React from 'react';\nimport { CityCode, ColourHex, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    NameOffsetX,\n    NameOffsetY,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { AttributesWithColor, ColorField } from '../../panels/details/color-field';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst PATH = 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\nconst TEXT_MAX_WIDTH = 12.5;\n\n/**\n * A StationNumber sub component for both gzmtr-basic and gzmtr-int station.\n * It draws the code of the line and the station with a capsule icon outside it.\n */\nexport const StationNumber = (props: { strokeColor: ColourHex; lineCode: string; stationCode: string }) => {\n    const { strokeColor, lineCode, stationCode } = props;\n\n    const lineCodeEl = React.useRef<SVGTextElement | null>(null);\n    const stnCodeEl = React.useRef<SVGTextElement | null>(null);\n\n    const [lineCodeBBox, setlineCodeBBox] = React.useState({ width: 0 } as DOMRect);\n    const [stnCodeBBox, setstnCodeBBox] = React.useState({ width: 0 } as DOMRect);\n\n    React.useEffect(() => {\n        setlineCodeBBox(lineCodeEl.current!.getBBox());\n        setstnCodeBBox(stnCodeEl.current!.getBBox());\n    }, [lineCode, stationCode]);\n\n    const lineCodeScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineCodeBBox.width);\n    const stnCodeScale =\n        lineCode.length === 2 && stationCode.length === 2\n            ? lineCodeScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnCodeBBox.width);\n\n    return (\n        <g>\n            <path d={PATH} strokeWidth=\"2\" stroke={strokeColor} fill=\"white\" transform=\"scale(0.75)\" />\n            <g textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize=\"8\">\n                <g transform={`translate(-6,0)scale(${lineCodeScale})`}>\n                    <text\n                        ref={lineCodeEl}\n                        className=\"rmp-name__zh\"\n                        // dominantBaseline is specified in rmg-name__zh but missing in rmp-name__zh\n                        dominantBaseline=\"central\"\n                    >\n                        {lineCode}\n                    </text>\n                </g>\n                <g transform={`translate(6,0)scale(${stnCodeScale})`}>\n                    <text\n                        ref={stnCodeEl}\n                        className=\"rmp-name__zh\"\n                        // dominantBaseline is specified in rmg-name__zh but missing in rmp-name__zh\n                        dominantBaseline=\"central\"\n                    >\n                        {stationCode}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n};\n\nconst GzmtrBasicStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultGzmtrBasicStationAttributes.nameOffsetX,\n        nameOffsetY = defaultGzmtrBasicStationAttributes.nameOffsetY,\n        color = defaultGzmtrBasicStationAttributes.color,\n        lineCode = defaultGzmtrBasicStationAttributes.lineCode,\n        stationCode = defaultGzmtrBasicStationAttributes.stationCode,\n        open = defaultGzmtrBasicStationAttributes.open,\n        secondaryNames = defaultGzmtrBasicStationAttributes.secondaryNames,\n        tram = defaultGzmtrBasicStationAttributes.tram,\n    } = attrs[StationType.GzmtrBasic] ?? defaultGzmtrBasicStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -18 : nameOffsetX === 'right' ? 18 : 0;\n    const textY =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length * NAME_DY[nameOffsetY].lineHeight + 11) *\n        NAME_DY[nameOffsetY].polarity;\n    const textAnchor =\n        nameOffsetX === 'left'\n            ? 'end'\n            : nameOffsetX === 'right'\n            ? 'start'\n            : !open && nameOffsetX === 'middle' && secondaryNames.join('') === ''\n            ? // Special hook to align station name and (Under Construction) when there are no secondaryNames.\n              'end'\n            : // Default to middle when nameOffsetX === 'middle'.\n              'middle';\n\n    const secondaryTextRef = React.useRef<SVGGElement | null>(null);\n    const [secondaryTextWidth, setSecondaryTextWidth] = React.useState(0);\n    React.useEffect(() => setSecondaryTextWidth(secondaryTextRef.current?.getBBox().width ?? 0), [...secondaryNames]);\n\n    const textRef = React.useRef<SVGGElement | null>(null);\n    const [textWidth, setTextWidth] = React.useState(0);\n    React.useEffect(() => setTextWidth(textRef.current?.getBBox().width ?? 0), [...names]);\n\n    const secondaryDx =\n        nameOffsetX === 'middle'\n            ? textWidth / 2 + (secondaryTextWidth + 12 * 2) / 2\n            : (textWidth + (secondaryTextWidth + 12 * 2) / 2) * (nameOffsetX === 'left' ? -1 : 1);\n    const underConstructionDx =\n        nameOffsetX === 'middle' && secondaryNames.join('') !== ''\n            ? textWidth / 2 + (secondaryTextWidth + 12 * 2)\n            : (textWidth + secondaryTextWidth + (secondaryTextWidth !== 0 ? 12 * 2 : 0)) *\n              (nameOffsetX === 'left' ? -1 : nameOffsetX === 'right' ? 1 : 0);\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})scale(${tram ? 0.5 : 1})`}>\n                <StationNumber strokeColor={color[2]} lineCode={lineCode} stationCode={stationCode} />\n                <g\n                    ref={textRef}\n                    transform={`translate(${textX}, ${textY})`}\n                    textAnchor={textAnchor}\n                    className=\"rmp-name-station\"\n                >\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n                {secondaryNames.join('') !== '' && (\n                    <g\n                        transform={`translate(${textX + secondaryDx}, ${textY})`}\n                        textAnchor=\"middle\"\n                        className=\"rmp-name-station\"\n                    >\n                        <text\n                            fontSize=\"20\"\n                            dx={-(secondaryTextWidth + 5) / 2}\n                            textAnchor=\"end\"\n                            dominantBaseline=\"middle\"\n                            className=\"rmp-name__zh\"\n                        >\n                            （\n                        </text>\n                        <text\n                            fontSize=\"20\"\n                            dx={(secondaryTextWidth + 5) / 2}\n                            textAnchor=\"start\"\n                            dominantBaseline=\"middle\"\n                            className=\"rmp-name__zh\"\n                        >\n                            ）\n                        </text>\n                        <g ref={secondaryTextRef}>\n                            <text fontSize=\"14\" dy=\"-2\" dominantBaseline=\"auto\" className=\"rmp-name__zh\">\n                                {secondaryNames[0]}\n                            </text>\n                            <text fontSize=\"8\" dy=\"2\" dominantBaseline=\"hanging\" className=\"rmp-name__en\">\n                                {secondaryNames[1]}\n                            </text>\n                        </g>\n                    </g>\n                )}\n                {!open && (\n                    <g\n                        transform={`translate(${textX + underConstructionDx}, ${textY})`}\n                        textAnchor={nameOffsetX === 'middle' ? 'start' : textAnchor}\n                        fill=\"red\"\n                        className=\"rmp-name-station\"\n                    >\n                        <text fontSize=\"8\" dy=\"-2\" dominantBaseline=\"auto\" className=\"rmp-name__zh\">\n                            （未开通）\n                        </text>\n                        <text fontSize=\"6\" dy=\"4\" dominantBaseline=\"hanging\" className=\"rmp-name__en\">\n                            (Under Construction)\n                        </text>\n                    </g>\n                )}\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <path\n                    id={`stn_core_${id}`}\n                    d={PATH}\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                    transform=\"scale(0.75)\"\n                />\n            </g>\n        ),\n        [\n            id,\n            x,\n            y,\n            ...names,\n            nameOffsetX,\n            nameOffsetY,\n            color,\n            lineCode,\n            stationCode,\n            open,\n            ...secondaryNames,\n            tram,\n            // bbox will only be computed after first render and won't cause this to update another time\n            textWidth,\n            secondaryTextWidth,\n            onPointerDown,\n            onPointerMove,\n            onPointerUp,\n        ]\n    );\n};\n\n/**\n * GzmtrStation specific props.\n */\nexport interface GzmtrBasicStationAttributes extends StationAttributes, AttributesWithColor {\n    nameOffsetX: NameOffsetX;\n    nameOffsetY: NameOffsetY;\n    lineCode: string;\n    stationCode: string;\n    /**\n     * Whether to show a Under Construction hint.\n     */\n    open: boolean;\n    secondaryNames: [string, string];\n    tram: boolean;\n}\n\nconst defaultGzmtrBasicStationAttributes: GzmtrBasicStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'top',\n    color: [CityCode.Guangzhou, 'gz1', '#F3D03E', MonoColour.black],\n    lineCode: '1',\n    stationCode: '01',\n    open: true,\n    secondaryNames: ['', ''],\n    tram: false,\n};\n\nconst gzmtrBasicStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.gzmtrBasic.nameZh',\n        value: (attrs?: GzmtrBasicStationAttributes) =>\n            (attrs ?? defaultGzmtrBasicStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.gzmtrBasic.nameEn',\n        value: (attrs?: GzmtrBasicStationAttributes) =>\n            (attrs ?? defaultGzmtrBasicStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.gzmtrBasic.nameOffsetX',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: GzmtrBasicStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as NameOffsetX;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.gzmtrBasic.nameOffsetY',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).nameOffsetY,\n        options: { top: 'top', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: GzmtrBasicStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as NameOffsetY;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: <ColorField type={StationType.GzmtrBasic} defaultAttrs={defaultGzmtrBasicStationAttributes} />,\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrBasic.lineCode',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).lineCode,\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.lineCode = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrBasic.stationCode',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).stationCode,\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.stationCode = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'switch',\n        label: 'panel.details.station.gzmtrBasic.open',\n        oneLine: true,\n        isChecked: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).open,\n        onChange: (val: boolean, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.open = val;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrBasic.secondaryNameZh',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).secondaryNames[0],\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.secondaryNames[0] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrBasic.secondaryNameEn',\n        value: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).secondaryNames[1],\n        onChange: (val: string | number, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.secondaryNames[1] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'switch',\n        label: 'panel.details.station.gzmtrBasic.tram',\n        oneLine: true,\n        isChecked: (attrs?: GzmtrBasicStationAttributes) => (attrs ?? defaultGzmtrBasicStationAttributes).tram,\n        onChange: (val: boolean, attrs_: GzmtrBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrBasicStationAttributes;\n            // set value\n            attrs.tram = val;\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst gzmtrBasicStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <g transform=\"translate(12,12)scale(0.6)\">\n            <StationNumber strokeColor=\"#000\" lineCode=\"1\" stationCode=\"01\" />\n        </g>\n    </svg>\n);\n\nconst gzmtrBasicStation: Station<GzmtrBasicStationAttributes> = {\n    component: GzmtrBasicStation,\n    icon: gzmtrBasicStationIcon,\n    defaultAttrs: defaultGzmtrBasicStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: gzmtrBasicStationFields,\n    metadata: {\n        displayName: 'panel.details.station.gzmtrBasic.displayName',\n        cities: [CityCode.Guangzhou],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default gzmtrBasicStation;\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, HStack, IconButton, Text } from '@chakra-ui/react';\nimport { RmgCard, RmgFields, RmgFieldsField, RmgLabel } from '@railmapgen/rmg-components';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { Theme } from '../../../constants/constants';\nimport { InterchangeInfo } from './interchange-field';\nimport { MdAdd, MdContentCopy, MdDelete } from 'react-icons/md';\nimport ColourModal from '../colour-modal/colour-modal';\nimport ThemeButton from '../theme-button';\n\ninterface InterchangeCardProps {\n    interchangeList: InterchangeInfo[];\n    onAdd?: (info: InterchangeInfo) => void;\n    onDelete?: (index: number) => void;\n    onUpdate?: (index: number, info: InterchangeInfo) => void;\n}\n\nexport default function InterchangeCard(props: InterchangeCardProps) {\n    const { interchangeList, onAdd, onDelete, onUpdate } = props;\n\n    const { t } = useTranslation();\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedIndex, setSelectedIndex] = useState(0);\n\n    const interchangeFields: RmgFieldsField[][] = interchangeList.map((it, i) => [\n        {\n            type: 'input',\n            label: t('panel.details.station.gzmtrInt.lineCode'),\n            value: it[4],\n            minW: '80px',\n            onChange: val => onUpdate?.(i, [it[0], it[1], it[2], it[3], val, it[5]]),\n        },\n        {\n            type: 'input',\n            label: t('panel.details.station.gzmtrInt.stationCode'),\n            value: it[5],\n            minW: '80px',\n            onChange: val => onUpdate?.(i, [it[0], it[1], it[2], it[3], it[4], val]),\n        },\n    ]);\n\n    return (\n        <RmgCard direction=\"column\">\n            {interchangeList.length === 0 && (\n                <HStack spacing={0.5} data-testid={`interchange-card-stack`}>\n                    <Text as=\"i\" flex={1} align=\"center\" fontSize=\"md\" colorScheme=\"gray\">\n                        {t('panel.details.station.interchange.noInterchanges')}\n                    </Text>\n\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label={t('panel.details.station.interchange.add')}\n                        onClick={() => onAdd?.([CityCode.Shanghai, '', '#aaaaaa', MonoColour.white, '', ''])}\n                        icon={<MdAdd />}\n                    />\n                </HStack>\n            )}\n\n            {interchangeList.map((it, i) => (\n                <HStack key={i} spacing={0.5} data-testid={`interchange-card-stack-${i}`}>\n                    <RmgLabel label={t('color')} minW=\"40px\" noLabel={i !== 0}>\n                        <ThemeButton\n                            theme={[it[0], it[1], it[2], it[3]]}\n                            onClick={() => {\n                                setIsModalOpen(true);\n                                setSelectedIndex(i);\n                            }}\n                        />\n                    </RmgLabel>\n\n                    <RmgFields fields={interchangeFields[i]} noLabel={i !== 0} />\n\n                    {onAdd && i === interchangeFields.length - 1 && interchangeFields.length < 3 ? (\n                        <IconButton\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            aria-label={t('panel.details.station.interchange.copy')}\n                            onClick={() => onAdd?.(interchangeList.slice(-1)[0])} // duplicate last leg\n                            icon={<MdContentCopy />}\n                        />\n                    ) : (\n                        <Box minW={8} />\n                    )}\n\n                    {onDelete && (\n                        <IconButton\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            aria-label={t('panel.details.station.interchange.remove')}\n                            onClick={() => onDelete?.(i)}\n                            icon={<MdDelete />}\n                        />\n                    )}\n                </HStack>\n            ))}\n\n            <ColourModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                defaultTheme={interchangeList[selectedIndex]?.slice(0, 4) as Theme}\n                onUpdate={theme =>\n                    onUpdate?.(selectedIndex, [\n                        ...theme,\n                        interchangeList[selectedIndex][4],\n                        interchangeList[selectedIndex][5],\n                    ])\n                }\n            />\n        </RmgCard>\n    );\n}\n","import React, { Fragment } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MdAdd } from 'react-icons/md';\nimport { Button, FormLabel, VStack } from '@chakra-ui/react';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { Theme } from '../../../constants/constants';\nimport { StationAttributes, StationType } from '../../../constants/stations';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { saveGraph } from '../../../redux/param/param-slice';\nimport { setRefreshNodes } from '../../../redux/runtime/runtime-slice';\nimport InterchangeCard from './interchange-card';\n\n/**\n * InterchangeInfo with theme, line code, station code.\n */\nexport type InterchangeInfo = [...Theme, ...string[]];\n\n/**\n * A StationAttributes that have a transfer field.\n * Extend this interface if you want to use <InterchangeField />.\n */\nexport interface StationAttributesWithInterchange extends StationAttributes {\n    transfer: InterchangeInfo[][];\n}\n\n/**\n * This component provides an easy way to modify interchanges in the details panel.\n * It will read the first id in `selected` and change the `transfer` field in the related attrs.\n *\n * Make sure your station has a transfer field in the extended StationAttributes. (a.k.a extends StationAttributesWithInterchange)\n * Fail to do this will result in a redundant transfer field in your StationAttributes.\n */\nexport const InterchangeField = (props: {\n    stationType: StationType;\n    defaultAttrs: StationAttributesWithInterchange;\n}) => {\n    const { stationType, defaultAttrs } = props;\n\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefreshNodes());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefreshNodes, saveGraph]);\n    const { selected } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const attr =\n        selectedFirst &&\n        graph.current.hasNode(selectedFirst) &&\n        graph.current.getNodeAttribute(selectedFirst, 'type') === stationType\n            ? (graph.current.getNodeAttribute(selectedFirst, stationType) as StationAttributesWithInterchange)\n            : defaultAttrs;\n    const transfer = attr.transfer ?? defaultAttrs.transfer;\n\n    const handleAdd = (setIndex: number) => (interchangeInfo: InterchangeInfo) => {\n        const newTransferInfo: InterchangeInfo[][] = JSON.parse(JSON.stringify(transfer));\n        if (newTransferInfo.length <= setIndex) {\n            for (let i = newTransferInfo.length; i <= setIndex; i++) {\n                newTransferInfo[i] = [];\n            }\n        }\n        newTransferInfo[setIndex].push(interchangeInfo);\n\n        attr.transfer = newTransferInfo;\n        graph.current.mergeNodeAttributes(selected, { [stationType]: attr });\n        hardRefresh();\n    };\n\n    const handleDelete = (setIndex: number) => (interchangeIndex: number) => {\n        if (transfer.length > setIndex && transfer[setIndex].length > interchangeIndex) {\n            const newTransferInfo = transfer.map((set, setIdx) =>\n                setIdx === setIndex ? set.filter((_, intIdx) => intIdx !== interchangeIndex) : set\n            );\n\n            attr.transfer = newTransferInfo;\n            graph.current.mergeNodeAttributes(selected, { [stationType]: attr });\n            hardRefresh();\n        }\n    };\n\n    const handleUpdate = (setIndex: number) => (interchangeIndex: number, interchangeInfo: InterchangeInfo) => {\n        if (transfer.length > setIndex && transfer[setIndex].length > interchangeIndex) {\n            const newTransferInfo = transfer.map((set, setIdx) =>\n                setIdx === setIndex\n                    ? set.map((int, intIdx) =>\n                          intIdx === interchangeIndex\n                              ? ([0, 1, 2, 3, 4, 5].map(i =>\n                                    interchangeInfo[i] === undefined ? int[i] : interchangeInfo[i]\n                                ) as InterchangeInfo)\n                              : int\n                      )\n                    : set\n            );\n\n            attr.transfer = newTransferInfo;\n            graph.current.mergeNodeAttributes(selected, { [stationType]: attr });\n            hardRefresh();\n        }\n    };\n\n    const handleAddInterchangeGroup = () =>\n        handleAdd(attr.transfer.length)([CityCode.Guangzhou, '', '#AAAAAA', MonoColour.white, '', '']);\n\n    return (\n        <VStack align=\"flex-start\">\n            {attr.transfer.map((infoList, i) => (\n                <Fragment key={i}>\n                    <FormLabel size=\"xs\">\n                        {i === 0\n                            ? t('panel.details.station.interchange.within')\n                            : i === 1\n                            ? t('panel.details.station.interchange.outStation')\n                            : t('panel.details.station.interchange.outSystem')}\n                    </FormLabel>\n\n                    <InterchangeCard\n                        interchangeList={infoList}\n                        onAdd={handleAdd(i)}\n                        onDelete={handleDelete(i)}\n                        onUpdate={handleUpdate(i)}\n                    />\n                </Fragment>\n            ))}\n\n            {attr.transfer.length < 2 && (\n                <Button\n                    size=\"xs\"\n                    variant=\"ghost\"\n                    alignSelf=\"flex-end\"\n                    leftIcon={<MdAdd />}\n                    onClick={handleAddInterchangeGroup}\n                >\n                    {t('panel.details.station.interchange.addGroup')}\n                </Button>\n            )}\n        </VStack>\n    );\n};\n","import React from 'react';\nimport { useColorMode, useColorModeValue } from '@chakra-ui/react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    NameOffsetX,\n    NameOffsetY,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { StationNumber } from './gzmtr-basic';\nimport { InterchangeField, StationAttributesWithInterchange } from '../../panels/details/interchange-field';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst CODE_POS = [\n    [[0, 0]],\n    [[0, 0]],\n    [\n        [-18, 0],\n        [18, 0],\n    ],\n    [\n        [-15.588, -9],\n        [15.588, -9],\n        [0, 18],\n    ],\n];\n\nconst GzmtrIntStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultGzmtrIntStationAttributes.nameOffsetX,\n        nameOffsetY = defaultGzmtrIntStationAttributes.nameOffsetY,\n        transfer = defaultGzmtrIntStationAttributes.transfer,\n        open = defaultGzmtrIntStationAttributes.open,\n        secondaryNames = defaultGzmtrIntStationAttributes.secondaryNames,\n    } = attrs[StationType.GzmtrInt] ?? defaultGzmtrIntStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const { colorMode } = useColorMode();\n    const bgColor = useColorModeValue('white', 'gray.800');\n\n    const textX =\n        (nameOffsetX === 'left' ? -20 : nameOffsetX === 'right' ? 20 : 0) * (nameOffsetY === 'middle' ? 1.8 : 1);\n    const textY =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length * NAME_DY[nameOffsetY].lineHeight +\n            20 * (nameOffsetX === 'middle' ? 1.8 : 1)) *\n        NAME_DY[nameOffsetY].polarity;\n    const textAnchor =\n        nameOffsetX === 'left'\n            ? 'end'\n            : nameOffsetX === 'right'\n            ? 'start'\n            : !open && nameOffsetX === 'middle' && secondaryNames.join('') === ''\n            ? // Special hook to align station name and (Under Construction) when there are no secondaryNames.\n              'end'\n            : // Default to middle when nameOffsetX === 'middle'.\n              'middle';\n\n    const transferAll = transfer.flat().slice(0, 3); // slice to make sure at most 3 transfers\n    const arrowColor = [\n        ['black', 'black'],\n        [transferAll.at(0)?.at(2) ?? 'black', transferAll.at(0)?.at(2) ?? 'black'],\n        [transferAll.at(0)?.at(2) ?? 'black', transferAll.at(1)?.at(2) ?? 'black'],\n        [transferAll.at(0)?.at(2) ?? 'black', transferAll.at(1)?.at(2) ?? 'black', transferAll.at(2)?.at(2) ?? 'black'],\n    ];\n\n    const secondaryTextRef = React.useRef<SVGGElement | null>(null);\n    const [secondaryTextWidth, setSecondaryTextWidth] = React.useState(0);\n    React.useEffect(() => setSecondaryTextWidth(secondaryTextRef.current?.getBBox().width ?? 0), [...secondaryNames]);\n\n    const textRef = React.useRef<SVGGElement | null>(null);\n    const [textWidth, setTextWidth] = React.useState(0);\n    React.useEffect(() => setTextWidth(textRef.current?.getBBox().width ?? 0), [...names]);\n\n    const secondaryDx = (textWidth + (secondaryTextWidth + 12 * 2) / 2) * (nameOffsetX === 'left' ? -1 : 1);\n    const underConstructionDx =\n        (textWidth + secondaryTextWidth + (secondaryTextWidth !== 0 ? 12 * 2 : 0)) * (nameOffsetX === 'left' ? -1 : 1);\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                {transferAll\n                    .map(info => info[2])\n                    .filter((color, i, arr) => arr.indexOf(color) === i)\n                    .map(color => (\n                        <marker\n                            key={`gzmtr_int_arrow_${color}`}\n                            id={`gzmtr_int_arrow_${color}`}\n                            markerWidth=\"5\"\n                            markerHeight=\"5\"\n                            refX=\"1\"\n                            refY=\"1.25\"\n                            orient=\"auto\"\n                        >\n                            <polygon points=\"0,0 0,3 2,1.5\" fill={color} />\n                        </marker>\n                    ))}\n                {transferAll.length <= 2 && (\n                    <g>\n                        {/* A simple mask to hide all underlying lines. */}\n                        <path d=\"M -18,-12 A 24 24 0 0 1 18,-12 L 18,12 A 24 24 0 0 1 -18,12 Z\" fill={bgColor} />\n                        <path\n                            d=\"M -18,-12 A 24 24 0 0 1 18,-12\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][0]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][0]})`}\n                        />\n                        <path\n                            d=\"M 18,12 A 24 24 0 0 1 -18,12\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][1]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][1]})`}\n                        />\n                    </g>\n                )}\n                {transferAll.length >= 3 && (\n                    <g>\n                        <circle r=\"22.395\" fill={bgColor} />\n                        <path\n                            d=\"M -19.3948,11.1976 A 22.395 22.395 0 0 1 0,-22.395\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][0]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][0]})`}\n                        />\n                        <path\n                            d=\"M 0,-22.395 A 22.395 22.395 0 0 1 19.3948,11.1976\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][1]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][1]})`}\n                        />\n                        <path\n                            d=\"M 19.3948,11.1976 A 22.395 22.395 0 0 1 -19.3948,11.1976\"\n                            fill=\"none\"\n                            stroke={arrowColor[transferAll.length][2]}\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][2]})`}\n                        />\n                        {/* Add another 2 transparent arrows with marker to cover bottom arrows */}\n                        <path\n                            d=\"M -19.3948,11.1976 A 22.395 22.395 0 0 1 0,-22.395\"\n                            fill=\"none\"\n                            strokeOpacity=\"0\"\n                            stroke=\"white\"\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][0]})`}\n                        />\n                        <path\n                            d=\"M 0,-22.395 A 22.395 22.395 0 0 1 19.3948,11.1976\"\n                            fill=\"none\"\n                            strokeOpacity=\"0\"\n                            stroke=\"white\"\n                            strokeWidth=\"5\"\n                            markerEnd={`url(#gzmtr_int_arrow_${arrowColor[transferAll.length][1]})`}\n                        />\n                    </g>\n                )}\n\n                {transfer[0]?.map((info, i, arr) => (\n                    <g\n                        key={`gzmtr_int_${id}_stn_${i}`}\n                        transform={`translate(${CODE_POS[arr.length][i][0]},${CODE_POS[arr.length][i][1]})`}\n                    >\n                        <StationNumber strokeColor={info[2]} lineCode={info[4]} stationCode={info[5]} />\n                    </g>\n                ))}\n\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <circle\n                    id={`stn_core_${id}`}\n                    r={transferAll.length === 3 ? 22.395 : 18}\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n                <g\n                    ref={textRef}\n                    transform={`translate(${textX}, ${textY})`}\n                    textAnchor={textAnchor}\n                    className=\"rmp-name-station\"\n                >\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n                {secondaryNames.join('') !== '' && (\n                    <g\n                        transform={`translate(${textX + secondaryDx}, ${textY})`}\n                        textAnchor=\"middle\"\n                        className=\"rmp-name-station\"\n                    >\n                        <text\n                            fontSize=\"20\"\n                            dx={-(secondaryTextWidth + 5) / 2}\n                            textAnchor=\"end\"\n                            dominantBaseline=\"middle\"\n                            className=\"rmp-name__zh\"\n                        >\n                            （\n                        </text>\n                        <text\n                            fontSize=\"20\"\n                            dx={(secondaryTextWidth + 5) / 2}\n                            textAnchor=\"start\"\n                            dominantBaseline=\"middle\"\n                            className=\"rmp-name__zh\"\n                        >\n                            ）\n                        </text>\n                        <g ref={secondaryTextRef}>\n                            <text fontSize=\"14\" dy=\"-2\" dominantBaseline=\"auto\" className=\"rmp-name__zh\">\n                                {secondaryNames[0]}\n                            </text>\n                            <text fontSize=\"8\" dy=\"2\" dominantBaseline=\"hanging\" className=\"rmp-name__en\">\n                                {secondaryNames[1]}\n                            </text>\n                        </g>\n                    </g>\n                )}\n                {!open && (\n                    <g\n                        transform={`translate(${textX + underConstructionDx}, ${textY})`}\n                        textAnchor={textAnchor}\n                        fill=\"red\"\n                        className=\"rmp-name-station\"\n                    >\n                        <text fontSize=\"8\" dy=\"-2\" dominantBaseline=\"auto\" className=\"rmp-name__zh\">\n                            （未开通）\n                        </text>\n                        <text fontSize=\"6\" dy=\"4\" dominantBaseline=\"hanging\" className=\"rmp-name__en\">\n                            (Under Construction)\n                        </text>\n                    </g>\n                )}\n            </g>\n        ),\n        [\n            id,\n            x,\n            y,\n            ...names,\n            nameOffsetX,\n            nameOffsetY,\n            JSON.stringify(transferAll),\n            open,\n            ...secondaryNames,\n            // Update the mask on dark mode changes.\n            colorMode,\n            // BBox will only be computed after first render and won't cause this to update another time.\n            textWidth,\n            secondaryTextWidth,\n            onPointerDown,\n            onPointerMove,\n            onPointerUp,\n        ]\n    );\n};\n\n/**\n * GzmtrStation specific props.\n */\nexport interface GzmtrIntStationAttributes extends StationAttributes, StationAttributesWithInterchange {\n    nameOffsetX: NameOffsetX;\n    nameOffsetY: NameOffsetY;\n    /**\n     * Whether to show a Under Construction hint.\n     */\n    open: boolean;\n    secondaryNames: [string, string];\n}\n\nconst defaultGzmtrIntStationAttributes: GzmtrIntStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'top',\n    transfer: [[], []],\n    open: true,\n    secondaryNames: ['', ''],\n};\n\nconst gzmtrIntStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.gzmtrInt.nameZh',\n        value: (attrs?: GzmtrIntStationAttributes) =>\n            (attrs ?? defaultGzmtrIntStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.gzmtrInt.nameEn',\n        value: (attrs?: GzmtrIntStationAttributes) =>\n            (attrs ?? defaultGzmtrIntStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.gzmtrInt.nameOffsetX',\n        value: (attrs?: GzmtrIntStationAttributes) => (attrs ?? defaultGzmtrIntStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: GzmtrIntStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as Exclude<NameOffsetX, 'middle'>;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.gzmtrInt.nameOffsetY',\n        value: (attrs?: GzmtrIntStationAttributes) => (attrs ?? defaultGzmtrIntStationAttributes).nameOffsetY,\n        options: { top: 'top', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: GzmtrIntStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as Exclude<NameOffsetY, 'middle'>;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'switch',\n        label: 'panel.details.station.gzmtrInt.open',\n        oneLine: true,\n        isChecked: (attrs?: GzmtrIntStationAttributes) => (attrs ?? defaultGzmtrIntStationAttributes).open,\n        onChange: (val: boolean, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.open = val;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrInt.secondaryNameZh',\n        value: (attrs?: GzmtrIntStationAttributes) => (attrs ?? defaultGzmtrIntStationAttributes).secondaryNames[0],\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.secondaryNames[0] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.station.gzmtrInt.secondaryNameEn',\n        value: (attrs?: GzmtrIntStationAttributes) => (attrs ?? defaultGzmtrIntStationAttributes).secondaryNames[1],\n        onChange: (val: string | number, attrs_: GzmtrIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultGzmtrIntStationAttributes;\n            // set value\n            attrs.secondaryNames[1] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: (\n            <InterchangeField stationType={StationType.GzmtrInt} defaultAttrs={defaultGzmtrIntStationAttributes} />\n        ),\n    },\n];\n\nconst gzmtrIntStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <g transform=\"translate(6,12)scale(0.4)\">\n            <StationNumber strokeColor=\"#000\" lineCode=\"1\" stationCode=\"09\" />\n        </g>\n        <g transform=\"translate(18,12)scale(0.4)\">\n            <StationNumber strokeColor=\"#000\" lineCode=\"2\" stationCode=\"13\" />\n        </g>\n        <marker id=\"arrow\" markerWidth=\"5\" markerHeight=\"5\" refX=\"1\" refY=\"1.25\" orient=\"auto\">\n            <polygon points=\"0,0 0,3 2,1.5\" />\n        </marker>\n        <path d=\"M 6,6 A 8 8 0 0 1 18,6\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" markerEnd=\"url(#arrow)\" />\n        <path d=\"M 18,18 A 8 8 0 0 1 6,18\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" markerEnd=\"url(#arrow)\" />\n    </svg>\n);\n\nconst gzmtrIntStation: Station<GzmtrIntStationAttributes> = {\n    component: GzmtrIntStation,\n    icon: gzmtrIntStationIcon,\n    defaultAttrs: defaultGzmtrIntStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: gzmtrIntStationFields,\n    metadata: {\n        displayName: 'panel.details.station.gzmtrInt.displayName',\n        cities: [CityCode.Guangzhou],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default gzmtrIntStation;\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    NameOffsetX,\n    NameOffsetY,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { MultilineText, LINE_HEIGHT, NAME_DY } from '../common/multiline-text';\n\nconst BjsubwayBasicStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultBjsubwayBasicStationAttributes.nameOffsetX,\n        nameOffsetY = defaultBjsubwayBasicStationAttributes.nameOffsetY,\n        open = defaultBjsubwayBasicStationAttributes.open,\n    } = attrs[StationType.BjsubwayBasic] ?? defaultBjsubwayBasicStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -12 : nameOffsetX === 'right' ? 12 : 0;\n    const textY =\n        ((names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length + (nameOffsetY === 'top' && !open ? 1 : 0)) *\n            NAME_DY[nameOffsetY].lineHeight +\n            8) *\n        NAME_DY[nameOffsetY].polarity;\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                <circle\n                    id={`stn_core_${id}`}\n                    r=\"4\"\n                    stroke=\"black\"\n                    strokeWidth=\"0.5\"\n                    strokeDasharray={open ? undefined : '1.5'}\n                    fill=\"white\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n                <g transform={`translate(${textX}, ${textY})`} textAnchor={textAnchor} className=\"rmp-name-station\">\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={LINE_HEIGHT.zh}\n                        lineHeight={LINE_HEIGHT.zh}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={LINE_HEIGHT.en}\n                        lineHeight={LINE_HEIGHT.en}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                    {!open && (\n                        <text\n                            dy={names[1].split('\\\\').length * LINE_HEIGHT.en + 2}\n                            fontSize={LINE_HEIGHT.en}\n                            dominantBaseline=\"hanging\"\n                            className=\"rmp-name__zh\"\n                        >\n                            (暂缓开通)\n                        </text>\n                    )}\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, nameOffsetX, nameOffsetY, open, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * BjsubwayBasicStation specific props.\n */\nexport interface BjsubwayBasicStationAttributes extends StationAttributes {\n    nameOffsetX: NameOffsetX;\n    nameOffsetY: NameOffsetY;\n    /**\n     * Whether to show a (暂缓开通) hint.\n     */\n    open: boolean;\n}\n\nconst defaultBjsubwayBasicStationAttributes: BjsubwayBasicStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'top',\n    open: true,\n};\n\nconst bjsubwayBasicStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.bjsubwayBasic.nameZh',\n        value: (attrs?: BjsubwayBasicStationAttributes) =>\n            (attrs ?? defaultBjsubwayBasicStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: BjsubwayBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayBasicStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.bjsubwayBasic.nameEn',\n        value: (attrs?: BjsubwayBasicStationAttributes) =>\n            (attrs ?? defaultBjsubwayBasicStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: BjsubwayBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayBasicStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.bjsubwayBasic.nameOffsetX',\n        value: (attrs?: BjsubwayBasicStationAttributes) => (attrs ?? defaultBjsubwayBasicStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: BjsubwayBasicStationAttributes) =>\n            attrs?.nameOffsetY === 'middle' ? ['middle'] : [],\n        onChange: (val: string | number, attrs_: BjsubwayBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayBasicStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as NameOffsetX;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.bjsubwayBasic.nameOffsetY',\n        value: (attrs?: BjsubwayBasicStationAttributes) => (attrs ?? defaultBjsubwayBasicStationAttributes).nameOffsetY,\n        options: { top: 'top', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: BjsubwayBasicStationAttributes) =>\n            attrs?.nameOffsetX === 'middle' ? ['middle'] : [],\n        onChange: (val: string | number, attrs_: BjsubwayBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayBasicStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as NameOffsetY;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'switch',\n        label: 'panel.details.station.bjsubwayBasic.open',\n        oneLine: true,\n        isChecked: (attrs?: BjsubwayBasicStationAttributes) => (attrs ?? defaultBjsubwayBasicStationAttributes).open,\n        onChange: (val: boolean, attrs_: BjsubwayBasicStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayBasicStationAttributes;\n            // set value\n            attrs.open = val;\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst bjsubwayBasicStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <circle cx=\"12\" cy=\"12\" r=\"4\" stroke=\"currentColor\" strokeWidth=\"0.5\" fill=\"none\" />\n    </svg>\n);\n\nconst bjsubwayBasicStation: Station<BjsubwayBasicStationAttributes> = {\n    component: BjsubwayBasicStation,\n    icon: bjsubwayBasicStationIcon,\n    defaultAttrs: defaultBjsubwayBasicStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: bjsubwayBasicStationFields,\n    metadata: {\n        displayName: 'panel.details.station.bjsubwayBasic.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: [],\n    },\n};\n\nexport default bjsubwayBasicStation;\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { CanvasType, CategoriesType } from '../../../constants/constants';\nimport {\n    defaultStationAttributes,\n    NameOffsetX,\n    NameOffsetY,\n    Station,\n    StationAttributes,\n    StationComponentProps,\n    StationType,\n} from '../../../constants/stations';\nimport { MultilineText, NAME_DY } from '../common/multiline-text';\n\nconst PATH_ARROW =\n    'M 8.359893 4.159288 C 8.368828 4.168825 8.460953 4.26852 8.57038 4.386985 C 8.679807 4.505449 8.860802 4.701382 8.972592 4.822389 C 9.084381 4.943397 9.238666 5.110407 9.315445 5.193521 C 9.392224 5.276636 9.519867 5.414817 9.599094 5.500589 C 9.678323 5.58636 9.801023 5.719209 9.871761 5.795812 C 9.942499 5.872413 10.000208 5.935256 9.999999 5.935465 C 9.999792 5.935671 9.975513 5.928466 9.946045 5.919453 C 9.916577 5.910439 9.831826 5.88438 9.757708 5.861543 C 9.683591 5.838706 9.532284 5.791997 9.421472 5.757746 C 9.310658 5.723495 9.190374 5.686309 9.154173 5.675113 C 9.11797 5.663918 9.048485 5.642428 8.99976 5.627359 C 8.951035 5.612291 8.910275 5.599729 8.909181 5.599446 C 8.907193 5.59893 8.907193 5.59893 8.907135 5.798288 C 8.907103 5.907935 8.906695 6.128369 8.906229 6.288144 C 8.905446 6.555825 8.905249 6.580968 8.903705 6.608245 C 8.902784 6.624527 8.90139 6.647987 8.900606 6.660379 C 8.899822 6.672773 8.898192 6.695836 8.896983 6.711632 C 8.895774 6.727427 8.893582 6.753074 8.892114 6.768627 C 8.890645 6.784179 8.888061 6.80923 8.88637 6.824296 C 8.884679 6.839362 8.88172 6.864065 8.879793 6.879189 C 8.877868 6.894315 8.874691 6.917777 8.872734 6.931325 C 8.870777 6.944874 8.867386 6.967292 8.865197 6.981143 C 8.863009 6.994995 8.859045 7.018654 8.856388 7.03372 C 8.853731 7.048786 8.849344 7.072617 8.84664 7.086676 C 8.843935 7.100736 8.839338 7.1236 8.836424 7.137486 C 8.833509 7.151371 8.828584 7.174065 8.825479 7.187916 C 8.822371 7.201767 8.817014 7.224831 8.81357 7.239167 C 8.810127 7.253505 8.80431 7.276767 8.800644 7.29086 C 8.796978 7.304955 8.791035 7.327222 8.787437 7.340344 C 8.78384 7.353467 8.77752 7.375735 8.773395 7.389829 C 8.769268 7.403923 8.762319 7.426986 8.757952 7.441081 C 8.753583 7.455174 8.746363 7.47784 8.741903 7.491448 C 8.737446 7.505056 8.729829 7.527523 8.724978 7.541374 C 8.720126 7.555225 8.712182 7.577493 8.707321 7.590858 C 8.702462 7.604224 8.6948 7.624901 8.690294 7.636807 C 8.68579 7.648715 8.677304 7.670452 8.671437 7.685113 C 8.665571 7.699773 8.656536 7.721842 8.651362 7.734155 C 8.646187 7.746468 8.63796 7.765688 8.63308 7.776865 C 8.628201 7.788043 8.620145 7.806136 8.615178 7.817071 C 8.610211 7.828006 8.60083 7.848286 8.594332 7.862138 C 8.587832 7.875988 8.573873 7.904618 8.563307 7.92576 C 8.552743 7.946901 8.537873 7.975929 8.530265 7.990266 C 8.522656 8.004602 8.511053 8.026075 8.504479 8.037983 C 8.497905 8.04989 8.486739 8.069772 8.479666 8.082165 C 8.472593 8.094558 8.460988 8.11444 8.453878 8.126348 C 8.446768 8.138254 8.435438 8.156944 8.428702 8.167879 C 8.421966 8.178814 8.410628 8.196906 8.403507 8.208085 C 8.396386 8.219262 8.384013 8.238349 8.37601 8.2505 C 8.36801 8.26265 8.354345 8.282929 8.345645 8.295566 C 8.336946 8.308201 8.322885 8.328276 8.314397 8.340175 C 8.305909 8.352074 8.292209 8.37096 8.283951 8.382147 C 8.275693 8.393333 8.261178 8.41259 8.251695 8.42494 C 8.242211 8.437289 8.225837 8.458165 8.215304 8.471332 C 8.204773 8.484497 8.189062 8.503819 8.18039 8.514267 C 8.17172 8.524716 8.157459 8.541616 8.148703 8.551823 C 8.139945 8.562029 8.125004 8.579116 8.115499 8.589793 C 8.105992 8.600471 8.091457 8.616575 8.083197 8.625581 C 8.074937 8.634586 8.060843 8.649709 8.05188 8.659185 C 8.042916 8.668662 8.018659 8.69335 7.997974 8.714046 C 7.977291 8.734741 7.953162 8.758432 7.944355 8.766693 C 7.935549 8.774953 7.920821 8.788638 7.911628 8.797104 C 7.902433 8.805571 7.887569 8.819082 7.878597 8.827129 C 7.869623 8.835177 7.853733 8.849096 7.843284 8.858062 C 7.832834 8.867027 7.816133 8.881153 7.806171 8.889453 C 7.796208 8.897753 7.779904 8.911098 7.769942 8.919111 C 7.759978 8.927123 7.743874 8.939848 7.734154 8.947388 C 7.724434 8.954926 7.708329 8.96721 7.698366 8.974683 C 7.688403 8.982156 7.673093 8.993497 7.664346 8.999885 C 7.655598 9.006271 7.637505 9.019163 7.62414 9.02853 C 7.610775 9.037899 7.588109 9.053377 7.573772 9.062926 C 7.559434 9.072475 7.538474 9.086151 7.527194 9.093318 C 7.515913 9.100485 7.497422 9.112045 7.486104 9.119009 C 7.474786 9.125973 7.454846 9.137918 7.441793 9.145553 C 7.428741 9.153188 7.405677 9.166317 7.390542 9.174728 C 7.375406 9.18314 7.352087 9.19579 7.338722 9.20284 C 7.325357 9.209889 7.303686 9.221025 7.290564 9.227587 C 7.277442 9.234147 7.256366 9.2444 7.243731 9.250369 C 7.231095 9.256339 7.211213 9.265569 7.199549 9.27088 C 7.187884 9.27619 7.168797 9.28464 7.157134 9.289659 C 7.145469 9.294676 7.124792 9.303333 7.111184 9.308895 C 7.097576 9.31446 7.075367 9.323255 7.061831 9.328442 C 7.048295 9.333629 7.027816 9.341289 7.016323 9.345462 C 7.00483 9.349636 6.978328 9.358748 6.95743 9.365711 C 6.936532 9.372675 6.906311 9.382359 6.890272 9.38723 C 6.874235 9.392101 6.849581 9.399302 6.835486 9.403231 C 6.821393 9.40716 6.796739 9.413705 6.7807 9.417776 C 6.764662 9.421847 6.740208 9.427785 6.726356 9.430971 C 6.712505 9.434157 6.689641 9.439174 6.675548 9.442118 C 6.661452 9.445063 6.639384 9.449434 6.626504 9.451833 C 6.613625 9.454231 6.591038 9.458187 6.57631 9.460623 C 6.561581 9.463058 6.538518 9.46664 6.525058 9.468584 C 6.511598 9.470528 6.487662 9.473704 6.471867 9.475644 C 6.456071 9.477583 6.433207 9.480169 6.421057 9.481392 C 6.408907 9.482615 6.387236 9.4846 6.372898 9.485805 C 6.358561 9.487008 6.333112 9.488794 6.316345 9.489771 C 6.299578 9.490749 6.276316 9.491956 6.264652 9.492452 C 6.252987 9.492949 6.216803 9.493517 6.18424 9.493716 C 6.151678 9.493916 6.114499 9.493756 6.10162 9.493363 C 6.088739 9.49297 6.06866 9.492202 6.056995 9.491656 C 6.045331 9.491112 6.026046 9.490059 6.014138 9.489319 C 6.002231 9.488579 5.982548 9.487186 5.970398 9.486226 C 5.958248 9.485266 5.939956 9.483668 5.92975 9.482677 C 5.919544 9.481687 5.902445 9.479897 5.891753 9.478702 C 5.881061 9.477505 5.864443 9.475529 5.854823 9.47431 C 5.845204 9.47309 5.827708 9.470707 5.815943 9.469012 C 5.804178 9.467319 5.784412 9.464314 5.77202 9.462336 C 5.759627 9.460358 5.745908 9.458071 5.741535 9.457253 C 5.733583 9.455767 5.733583 9.455767 5.750813 9.451963 C 5.76029 9.449871 5.778183 9.445793 5.790576 9.442902 C 5.802969 9.440009 5.82305 9.435088 5.8352 9.431966 C 5.847351 9.428843 5.867067 9.423503 5.879014 9.420099 C 5.890961 9.416695 5.911639 9.410524 5.924964 9.406386 C 5.938288 9.402248 5.960324 9.395124 5.973932 9.390556 C 5.98754 9.385988 6.008053 9.378835 6.019516 9.374659 C 6.030978 9.370483 6.050462 9.363131 6.062815 9.358321 C 6.075166 9.353508 6.094417 9.34577 6.105595 9.341125 C 6.116774 9.336478 6.135264 9.328524 6.146685 9.323448 C 6.158106 9.318373 6.177591 9.309499 6.189984 9.303728 C 6.202377 9.297957 6.224247 9.287379 6.238585 9.280221 C 6.252921 9.273063 6.273399 9.262563 6.284092 9.256887 C 6.294784 9.251213 6.314865 9.240225 6.328716 9.232468 C 6.342567 9.224712 6.361654 9.213777 6.371131 9.208166 C 6.380608 9.202557 6.396514 9.192982 6.406477 9.18689 C 6.41644 9.180798 6.432345 9.170843 6.441822 9.164769 C 6.4513 9.158695 6.467404 9.14816 6.47761 9.141357 C 6.487816 9.134555 6.50392 9.123611 6.513398 9.117039 C 6.522875 9.110467 6.539177 9.098936 6.549627 9.091415 C 6.560077 9.083895 6.577971 9.070704 6.589391 9.062101 C 6.600812 9.053498 6.618895 9.039583 6.629575 9.031179 C 6.640255 9.022773 6.656757 9.009534 6.666247 9.001758 C 6.675736 8.993981 6.692227 8.980227 6.702893 8.971191 C 6.713559 8.962157 6.730458 8.94742 6.740448 8.938442 C 6.750437 8.929464 6.766562 8.914768 6.776282 8.905784 C 6.786003 8.896801 6.803698 8.880239 6.815604 8.868983 C 6.827512 8.857727 6.843456 8.842402 6.851037 8.834927 C 6.858617 8.827451 6.873728 8.812176 6.884615 8.800982 C 6.895503 8.789788 6.912683 8.77174 6.922792 8.760878 C 6.932902 8.750012 6.949699 8.731606 6.960117 8.719973 C 6.970537 8.70834 6.986147 8.690599 6.994807 8.68055 C 7.003467 8.670501 7.017852 8.65353 7.026772 8.642838 C 7.035693 8.632146 7.053 8.610872 7.065231 8.595562 C 7.077464 8.580254 7.09533 8.557407 7.104936 8.544792 C 7.114541 8.532177 7.129989 8.511499 7.139265 8.498842 C 7.14854 8.486185 7.164221 8.464337 7.174109 8.450293 C 7.183999 8.436249 7.199718 8.413383 7.209044 8.399484 C 7.218369 8.385583 7.232209 8.364666 7.2398 8.353003 C 7.247391 8.341338 7.260236 8.321177 7.268346 8.3082 C 7.276455 8.295223 7.289493 8.27395 7.297318 8.260925 C 7.305143 8.247901 7.317313 8.227304 7.32436 8.215153 C 7.331408 8.203004 7.344023 8.180735 7.352394 8.165669 C 7.360765 8.150602 7.372812 8.128534 7.379167 8.116627 C 7.385522 8.104719 7.396764 8.083248 7.404151 8.06891 C 7.411537 8.054573 7.422352 8.0331 7.428184 8.021194 C 7.434016 8.009287 7.443347 7.990001 7.448918 7.978336 C 7.45449 7.966672 7.463351 7.947784 7.468609 7.936364 C 7.473868 7.924943 7.482234 7.906453 7.4872 7.895274 C 7.492166 7.884096 7.500586 7.86481 7.505909 7.852417 C 7.511233 7.840024 7.519759 7.819808 7.524855 7.807493 C 7.529951 7.795179 7.538242 7.7747 7.543279 7.761986 C 7.548316 7.749271 7.556671 7.727735 7.561847 7.714127 C 7.567022 7.700519 7.57545 7.677853 7.580575 7.663759 C 7.585701 7.649664 7.594637 7.624414 7.600433 7.607646 C 7.60623 7.59088 7.615365 7.563642 7.620735 7.547118 C 7.626104 7.530593 7.634661 7.503554 7.63975 7.48703 C 7.644838 7.470506 7.653173 7.442472 7.658273 7.424733 C 7.663371 7.406994 7.671309 7.378562 7.675913 7.361553 C 7.680518 7.344542 7.688414 7.314123 7.69346 7.293953 C 7.698508 7.273784 7.705483 7.244955 7.708961 7.229889 C 7.712439 7.214823 7.717614 7.19176 7.720461 7.178638 C 7.723308 7.165516 7.728016 7.143247 7.730923 7.129154 C 7.733829 7.115059 7.738621 7.090804 7.74157 7.075251 C 7.74452 7.0597 7.749294 7.033455 7.752179 7.016931 C 7.755066 7.000407 7.759431 6.974154 7.761884 6.958592 C 7.764333 6.94303 7.768123 6.917978 7.770304 6.902922 C 7.772485 6.887866 7.775877 6.86322 7.777843 6.848155 C 7.779809 6.833088 7.783001 6.807043 7.784938 6.790275 C 7.786876 6.773509 7.789651 6.74806 7.791106 6.733722 C 7.792561 6.719385 7.794953 6.693936 7.796421 6.677169 C 7.797888 6.660402 7.800071 6.632964 7.801272 6.616198 C 7.802474 6.599431 7.804076 6.575174 7.804832 6.562295 C 7.80559 6.549416 7.806592 6.532119 7.807061 6.523856 C 7.807529 6.515595 7.80835 6.421553 7.808886 6.314875 C 7.809421 6.208197 7.809724 6.003942 7.80956 5.860975 C 7.809398 5.718009 7.809015 5.600789 7.808712 5.600486 C 7.808408 5.600182 7.68663 5.63752 7.538092 5.68346 C 7.389553 5.7294 7.213946 5.783698 7.147853 5.804122 C 7.08176 5.824546 6.974794 5.857548 6.910151 5.877461 C 6.845508 5.897371 6.776261 5.918652 6.75627 5.924749 C 6.736279 5.930848 6.719744 5.935658 6.719525 5.93544 C 6.719306 5.935221 6.790938 5.857274 6.878708 5.762224 C 6.966477 5.667175 7.110461 5.511271 7.198671 5.415771 C 7.286881 5.320272 7.433807 5.161213 7.525173 5.062309 C 7.616539 4.963404 7.76605 4.801562 7.857421 4.702663 C 7.948792 4.603762 8.093983 4.446596 8.180069 4.353404 C 8.266154 4.260212 8.341831 4.178411 8.34824 4.171626 L 8.359893 4.159288 Z M 3.639928 8.15987 C 3.639606 8.15984 3.567056 8.081517 3.478708 7.985821 C 3.390359 7.890125 3.197014 7.680786 3.049051 7.520623 C 2.901089 7.36046 2.662314 7.101986 2.518441 6.946236 C 2.374568 6.790486 2.198977 6.60038 2.128238 6.523779 C 2.0575 6.447177 1.999793 6.384333 2 6.384126 C 2.000208 6.383919 2.024487 6.391125 2.053954 6.40014 C 2.083422 6.409154 2.157237 6.431839 2.217988 6.450549 C 2.278738 6.469259 2.375968 6.499262 2.434052 6.517222 C 2.492137 6.535182 2.553174 6.55407 2.569692 6.559195 C 2.586209 6.564321 2.709718 6.602509 2.844157 6.644057 C 2.978595 6.685606 3.089538 6.719839 3.090698 6.72013 C 3.092807 6.72066 3.092807 6.72066 3.092866 6.520418 C 3.092898 6.410285 3.093306 6.18985 3.093772 6.030562 C 3.094553 5.763748 3.094752 5.738617 3.096295 5.711344 C 3.097217 5.695064 3.098611 5.671603 3.099395 5.659211 C 3.100178 5.646816 3.101808 5.623754 3.103017 5.607958 C 3.104227 5.592164 3.106418 5.566515 3.107887 5.550963 C 3.109355 5.535411 3.111941 5.51036 3.113633 5.495295 C 3.115324 5.480227 3.118114 5.456767 3.119833 5.443159 C 3.121551 5.429551 3.124544 5.407283 3.126484 5.393674 C 3.128424 5.380066 3.13179 5.357599 3.133963 5.343748 C 3.136135 5.329897 3.139918 5.307034 3.142369 5.292939 C 3.144819 5.278845 3.149205 5.254788 3.152116 5.239479 C 3.155027 5.224168 3.159971 5.199397 3.163101 5.184428 C 3.16623 5.169459 3.171352 5.145801 3.174481 5.131851 C 3.17761 5.117902 3.182986 5.094759 3.18643 5.080422 C 3.189873 5.066085 3.19569 5.042824 3.199356 5.028729 C 3.203022 5.014635 3.208965 4.992367 3.212563 4.979245 C 3.21616 4.966123 3.222479 4.943855 3.226605 4.929761 C 3.230732 4.915667 3.237681 4.892604 3.242049 4.878509 C 3.246417 4.864415 3.253638 4.84175 3.258096 4.828142 C 3.262555 4.814533 3.270171 4.792067 3.275023 4.778216 C 3.279873 4.764364 3.287818 4.742096 3.292678 4.728731 C 3.297538 4.715366 3.3052 4.694689 3.309704 4.682783 C 3.31421 4.670875 3.322696 4.649137 3.328563 4.634478 C 3.33443 4.619817 3.343463 4.597748 3.348639 4.585434 C 3.353813 4.573122 3.36204 4.553902 3.36692 4.542725 C 3.371799 4.531547 3.379856 4.513454 3.384823 4.502518 C 3.389789 4.491583 3.39917 4.471303 3.405668 4.457452 C 3.412167 4.443601 3.426129 4.414971 3.436694 4.39383 C 3.44726 4.372689 3.461914 4.344058 3.469262 4.330207 C 3.476608 4.316357 3.488427 4.294487 3.495524 4.281607 C 3.502622 4.268728 3.514584 4.247454 3.522105 4.234332 C 3.529628 4.22121 3.541034 4.201699 3.547455 4.190976 C 3.553874 4.180251 3.564621 4.162556 3.571336 4.151653 C 3.578052 4.14075 3.589372 4.122683 3.596493 4.111505 C 3.603614 4.100327 3.615987 4.081241 3.623989 4.069091 C 3.631991 4.056941 3.645655 4.036661 3.654354 4.024024 C 3.663054 4.011388 3.677115 3.991314 3.685603 3.979416 C 3.694091 3.967517 3.707792 3.948628 3.716049 3.937443 C 3.724308 3.926256 3.738823 3.906999 3.748305 3.89465 C 3.757787 3.882301 3.774164 3.861424 3.784696 3.848259 C 3.795227 3.835093 3.810939 3.815771 3.81961 3.805323 C 3.828281 3.794872 3.84254 3.777973 3.851297 3.767766 C 3.860054 3.757562 3.874996 3.740475 3.884502 3.729796 C 3.894008 3.719119 3.908543 3.703013 3.916803 3.694009 C 3.925064 3.685003 3.939156 3.669882 3.94812 3.660404 C 3.957083 3.650928 3.981341 3.626241 4.002025 3.605544 C 4.02271 3.584848 4.046838 3.561157 4.055645 3.552897 C 4.064451 3.544637 4.079179 3.530951 4.088373 3.522486 C 4.097566 3.514019 4.11243 3.500508 4.121404 3.49246 C 4.130376 3.484412 4.146267 3.470493 4.156716 3.461528 C 4.167165 3.452562 4.183867 3.438437 4.19383 3.430137 C 4.203792 3.421837 4.220096 3.408491 4.230059 3.400478 C 4.240022 3.392467 4.256126 3.379735 4.265846 3.372187 C 4.275566 3.364638 4.294852 3.349997 4.308703 3.33965 C 4.322554 3.329302 4.342636 3.314602 4.353327 3.306981 C 4.364019 3.299361 4.382311 3.28654 4.393975 3.27849 C 4.405639 3.270441 4.42466 3.257609 4.436245 3.249977 C 4.447829 3.242345 4.465922 3.230637 4.476451 3.223961 C 4.486979 3.217284 4.504342 3.206445 4.515034 3.199872 C 4.525727 3.193299 4.545155 3.181674 4.558207 3.174039 C 4.571259 3.166403 4.594323 3.153273 4.609458 3.14486 C 4.624594 3.13645 4.647913 3.123799 4.661278 3.11675 C 4.674643 3.1097 4.696314 3.098564 4.709436 3.092004 C 4.722558 3.085442 4.74403 3.075004 4.757153 3.068806 C 4.770275 3.062607 4.791488 3.052789 4.804292 3.046986 C 4.817096 3.041182 4.837177 3.03234 4.848916 3.027336 C 4.860656 3.022333 4.879611 3.014428 4.89104 3.009769 C 4.902469 3.00511 4.923146 2.996942 4.93699 2.991619 C 4.950833 2.986296 4.971702 2.978476 4.983366 2.97424 C 4.99503 2.970004 5.021672 2.960841 5.042571 2.953878 C 5.063468 2.946914 5.093689 2.937231 5.109727 2.93236 C 5.125765 2.927489 5.150419 2.920288 5.164514 2.916359 C 5.178607 2.912431 5.203261 2.905885 5.219299 2.901814 C 5.235338 2.897742 5.259793 2.891805 5.273643 2.888619 C 5.287495 2.885432 5.310359 2.880417 5.324453 2.877472 C 5.338548 2.874528 5.360616 2.870155 5.373496 2.867757 C 5.386374 2.865358 5.408962 2.861403 5.42369 2.858968 C 5.438418 2.856532 5.461482 2.85295 5.474941 2.851007 C 5.488403 2.849062 5.512338 2.845885 5.528134 2.843946 C 5.543929 2.842007 5.566793 2.83942 5.578943 2.838198 C 5.591094 2.836976 5.612764 2.83499 5.627101 2.833786 C 5.641439 2.832582 5.666887 2.830797 5.683655 2.829821 C 5.700423 2.828844 5.724281 2.827635 5.736673 2.827131 C 5.749067 2.826628 5.779487 2.825963 5.804273 2.825654 C 5.831717 2.825312 5.864715 2.825499 5.888661 2.826133 C 5.910288 2.826705 5.935936 2.827562 5.945656 2.828037 C 5.955376 2.828513 5.97327 2.829513 5.98542 2.830258 C 5.99757 2.831004 6.017452 2.832401 6.029602 2.833363 C 6.041752 2.834323 6.060044 2.83592 6.07025 2.836912 C 6.080456 2.837903 6.097554 2.839693 6.108246 2.840889 C 6.118938 2.842084 6.135557 2.84406 6.145177 2.84528 C 6.154796 2.846498 6.172292 2.848883 6.184057 2.850577 C 6.195822 2.852271 6.215388 2.855248 6.227539 2.857194 C 6.239688 2.859139 6.253395 2.861429 6.257997 2.862283 C 6.266363 2.863834 6.266363 2.863834 6.249159 2.867633 C 6.239698 2.869721 6.221817 2.873796 6.209424 2.876689 C 6.197031 2.87958 6.17695 2.884501 6.1648 2.887624 C 6.152649 2.890747 6.132933 2.896087 6.120986 2.899491 C 6.109038 2.902895 6.088361 2.909066 6.075037 2.913204 C 6.061712 2.917341 6.039675 2.924465 6.026067 2.929032 C 6.012459 2.933601 5.991946 2.940756 5.980484 2.944931 C 5.969021 2.949106 5.949537 2.95646 5.937186 2.961273 C 5.924834 2.966085 5.905422 2.973896 5.894048 2.978628 C 5.882673 2.983361 5.864182 2.991314 5.852958 2.996302 C 5.841733 3.001288 5.822409 3.010091 5.810017 3.015862 C 5.797623 3.021632 5.775753 3.032209 5.761416 3.039369 C 5.747078 3.046527 5.726601 3.057027 5.715909 3.062701 C 5.705216 3.068377 5.685135 3.079366 5.671284 3.087121 C 5.657433 3.094877 5.638347 3.105814 5.628869 3.111423 C 5.619392 3.117034 5.603487 3.126609 5.593524 3.1327 C 5.58356 3.138793 5.567655 3.148746 5.558177 3.15482 C 5.5487 3.160895 5.532596 3.171429 5.522389 3.178233 C 5.512184 3.185035 5.496079 3.195978 5.486602 3.202551 C 5.477125 3.209123 5.460822 3.220655 5.450372 3.228179 C 5.439923 3.235703 5.423421 3.247832 5.413702 3.255136 C 5.403981 3.262436 5.386883 3.27556 5.375705 3.284297 C 5.364527 3.293035 5.346831 3.307168 5.336382 3.315704 C 5.325933 3.32424 5.308455 3.338784 5.297544 3.348024 C 5.286631 3.357265 5.269532 3.372169 5.259547 3.381148 C 5.249561 3.390125 5.233438 3.404821 5.223718 3.413807 C 5.213998 3.422791 5.196302 3.439351 5.184396 3.450605 C 5.172488 3.461862 5.156544 3.477188 5.148963 3.484664 C 5.141382 3.492139 5.126272 3.507414 5.115385 3.518608 C 5.104497 3.529801 5.087317 3.547848 5.077208 3.558713 C 5.067098 3.569577 5.050301 3.587983 5.039882 3.599617 C 5.029463 3.61125 5.013853 3.62899 5.005193 3.639039 C 4.996532 3.649089 4.982148 3.666059 4.973228 3.676752 C 4.964307 3.687445 4.947 3.708717 4.934769 3.724027 C 4.922537 3.739336 4.90467 3.762184 4.895064 3.774798 C 4.885458 3.787414 4.870011 3.808089 4.860735 3.820748 C 4.85146 3.833405 4.835779 3.855252 4.825891 3.869297 C 4.816002 3.883342 4.800281 3.906206 4.790956 3.920107 C 4.781631 3.934007 4.767791 3.954923 4.760201 3.966587 C 4.75261 3.978251 4.739764 3.998412 4.731654 4.01139 C 4.723545 4.024366 4.710507 4.04564 4.702682 4.058664 C 4.694856 4.071689 4.682687 4.092286 4.67564 4.104437 C 4.668592 4.116586 4.655977 4.138854 4.647606 4.15392 C 4.639235 4.168986 4.627187 4.191055 4.620833 4.202963 C 4.614478 4.214869 4.603237 4.236342 4.59585 4.250679 C 4.588463 4.265017 4.577648 4.286489 4.571816 4.298396 C 4.565984 4.310304 4.556654 4.329589 4.551082 4.341253 C 4.54551 4.352918 4.536649 4.371806 4.53139 4.383226 C 4.526132 4.394647 4.517766 4.413137 4.512801 4.424315 C 4.507834 4.435493 4.499414 4.45478 4.494091 4.467174 C 4.488767 4.479566 4.480241 4.499781 4.475145 4.512096 C 4.470048 4.524411 4.461758 4.544889 4.456721 4.557603 C 4.451684 4.570319 4.443329 4.591855 4.438153 4.605463 C 4.432978 4.619071 4.42455 4.641737 4.419425 4.65583 C 4.414299 4.669925 4.405364 4.695175 4.399567 4.711941 C 4.393771 4.72871 4.384635 4.755947 4.379265 4.772473 C 4.373896 4.788996 4.365339 4.816035 4.36025 4.83256 C 4.355162 4.849085 4.346827 4.877117 4.341728 4.894857 C 4.336629 4.912596 4.328691 4.941027 4.324087 4.958037 C 4.319483 4.975048 4.311586 5.005467 4.30654 5.025636 C 4.301492 5.045806 4.294517 5.074635 4.291039 5.0897 C 4.287562 5.104767 4.282386 5.12783 4.279539 5.140952 C 4.276692 5.154074 4.271984 5.176342 4.269077 5.190436 C 4.266171 5.20453 4.261379 5.228786 4.25843 5.244339 C 4.25548 5.259891 4.250707 5.286135 4.24782 5.302659 C 4.244935 5.319183 4.240569 5.345436 4.238118 5.360997 C 4.235666 5.37656 4.231877 5.40161 4.229696 5.416667 C 4.227515 5.431724 4.224122 5.456368 4.222157 5.471435 C 4.220191 5.486501 4.216998 5.512547 4.215061 5.529314 C 4.213124 5.546082 4.210349 5.571529 4.208893 5.585867 C 4.207439 5.600204 4.205048 5.625653 4.20358 5.642421 C 4.202112 5.659187 4.199928 5.686625 4.198727 5.703393 C 4.197526 5.720159 4.195924 5.744415 4.195167 5.757294 C 4.194409 5.770174 4.193407 5.787471 4.192938 5.795733 C 4.192471 5.803995 4.19165 5.898036 4.191115 6.004715 C 4.19058 6.111393 4.190277 6.315648 4.190439 6.458614 C 4.190602 6.601581 4.190984 6.718802 4.191288 6.719105 C 4.191591 6.719408 4.313371 6.682069 4.461908 6.636129 C 4.610447 6.590189 4.786054 6.535892 4.852147 6.515468 C 4.91824 6.495043 5.025205 6.462041 5.089849 6.442131 C 5.154491 6.422219 5.223739 6.400939 5.243729 6.39484 C 5.263721 6.388742 5.280256 6.383932 5.280475 6.38415 C 5.280694 6.384369 5.209062 6.462315 5.121291 6.557364 C 5.033521 6.652413 4.889537 6.808317 4.801327 6.903816 C 4.713117 6.999316 4.56619 7.158374 4.474826 7.25728 C 4.383461 7.356185 4.23395 7.518026 4.14258 7.616927 C 4.051209 7.715828 3.906015 7.872994 3.819926 7.966186 C 3.733837 8.059378 3.658251 8.141094 3.651957 8.147776 C 3.645663 8.154458 3.64025 8.159901 3.639928 8.15987 Z';\n\nconst BjsubwayIntStation = (props: StationComponentProps) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const {\n        names = defaultStationAttributes.names,\n        nameOffsetX = defaultBjsubwayIntStationAttributes.nameOffsetX,\n        nameOffsetY = defaultBjsubwayIntStationAttributes.nameOffsetY,\n        outOfStation = defaultBjsubwayIntStationAttributes.outOfStation,\n    } = attrs[StationType.BjsubwayInt] ?? defaultBjsubwayIntStationAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    const textX = nameOffsetX === 'left' ? -12 : nameOffsetX === 'right' ? 12 : 0;\n    const textY =\n        (names[NAME_DY[nameOffsetY].namesPos].split('\\\\').length * NAME_DY[nameOffsetY].lineHeight + 8) *\n        NAME_DY[nameOffsetY].polarity;\n    const textAnchor = nameOffsetX === 'left' ? 'end' : nameOffsetX === 'right' ? 'start' : 'middle';\n\n    return React.useMemo(\n        () => (\n            <g id={id}>\n                <g transform={`translate(${x - 6}, ${y - 6})`}>\n                    <circle cx=\"6\" cy=\"6\" r=\"6\" stroke=\"black\" strokeWidth=\"1\" fill=\"white\" />\n                    <path\n                        d={PATH_ARROW}\n                        fill={outOfStation ? '#898989' : 'black'}\n                        stroke={outOfStation ? '#898989' : 'black'}\n                        strokeWidth=\"0.533618\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                    />\n                    <circle\n                        id={`stn_core_${id}`}\n                        cx=\"6\"\n                        cy=\"6\"\n                        r=\"6\"\n                        stroke=\"black\"\n                        strokeWidth=\"1\"\n                        strokeOpacity=\"0\"\n                        fill=\"white\"\n                        fillOpacity=\"0\"\n                        onPointerDown={onPointerDown}\n                        onPointerMove={onPointerMove}\n                        onPointerUp={onPointerUp}\n                        style={{ cursor: 'move' }}\n                    />\n                </g>\n                <g\n                    transform={`translate(${x + textX}, ${y + textY})`}\n                    textAnchor={textAnchor}\n                    className=\"rmp-name-station\"\n                >\n                    <MultilineText\n                        text={names[0].split('\\\\')}\n                        fontSize={16}\n                        lineHeight={16}\n                        grow=\"up\"\n                        className=\"rmp-name__zh\"\n                    />\n                    <MultilineText\n                        text={names[1].split('\\\\')}\n                        fontSize={10}\n                        lineHeight={10}\n                        grow=\"down\"\n                        className=\"rmp-name__en\"\n                    />\n                </g>\n            </g>\n        ),\n        [id, x, y, ...names, nameOffsetX, nameOffsetY, outOfStation, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * BjsubwayIntStation specific props.\n */\nexport interface BjsubwayIntStationAttributes extends StationAttributes {\n    nameOffsetX: NameOffsetX;\n    nameOffsetY: NameOffsetY;\n    outOfStation: boolean;\n}\n\nconst defaultBjsubwayIntStationAttributes: BjsubwayIntStationAttributes = {\n    ...defaultStationAttributes,\n    nameOffsetX: 'right',\n    nameOffsetY: 'top',\n    outOfStation: false,\n};\n\nconst bjsubwayIntStationFields = [\n    {\n        type: 'textarea',\n        label: 'panel.details.station.bjsubwayInt.nameZh',\n        value: (attrs?: BjsubwayIntStationAttributes) =>\n            (attrs ?? defaultBjsubwayIntStationAttributes).names[0].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.names[0] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'textarea',\n        label: 'panel.details.station.bjsubwayInt.nameEn',\n        value: (attrs?: BjsubwayIntStationAttributes) =>\n            (attrs ?? defaultBjsubwayIntStationAttributes).names[1].replaceAll('\\\\', '\\n'),\n        onChange: (val: string | number, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.names[1] = val.toString().replaceAll('\\n', '\\\\');\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.bjsubwayInt.nameOffsetX',\n        value: (attrs?: BjsubwayIntStationAttributes) => (attrs ?? defaultBjsubwayIntStationAttributes).nameOffsetX,\n        options: { left: 'left', middle: 'middle', right: 'right' },\n        disabledOptions: (attrs?: BjsubwayIntStationAttributes) => (attrs?.nameOffsetY === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.nameOffsetX = val as NameOffsetX;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'select',\n        label: 'panel.details.station.bjsubwayInt.nameOffsetY',\n        value: (attrs?: BjsubwayIntStationAttributes) => (attrs ?? defaultBjsubwayIntStationAttributes).nameOffsetY,\n        options: { top: 'top', middle: 'middle', bottom: 'bottom' },\n        disabledOptions: (attrs?: BjsubwayIntStationAttributes) => (attrs?.nameOffsetX === 'middle' ? ['middle'] : []),\n        onChange: (val: string | number, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.nameOffsetY = val as NameOffsetY;\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'switch',\n        label: 'panel.details.station.bjsubwayInt.outOfStation',\n        oneLine: true,\n        isChecked: (attrs?: BjsubwayIntStationAttributes) =>\n            (attrs ?? defaultBjsubwayIntStationAttributes).outOfStation,\n        onChange: (val: boolean, attrs_: BjsubwayIntStationAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultBjsubwayIntStationAttributes;\n            // set value\n            attrs.outOfStation = val;\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst bjsubwayIntStationIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <g transform=\"translate(6, 6)\">\n            <circle cx=\"6\" cy=\"6\" r=\"6\" stroke=\"black\" strokeWidth=\"1\" fill=\"white\" />\n            <path d={PATH_ARROW} stroke=\"black\" strokeWidth=\"0.533618\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n        </g>\n    </svg>\n);\n\nconst bjsubwayIntStation: Station<BjsubwayIntStationAttributes> = {\n    component: BjsubwayIntStation,\n    icon: bjsubwayIntStationIcon,\n    defaultAttrs: defaultBjsubwayIntStationAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: bjsubwayIntStationFields,\n    metadata: {\n        displayName: 'panel.details.station.bjsubwayInt.displayName',\n        cities: [CityCode.Shanghai],\n        canvas: [CanvasType.RailMap],\n        categories: [CategoriesType.Metro],\n        tags: ['interchange'],\n    },\n};\n\nexport default bjsubwayIntStation;\n","import { StationType } from '../../../constants/stations';\nimport shmetroIntStation from './shmetro-int';\nimport shmetroBasicStation from './shmetro-basic';\nimport shmetroBasic2020Station from './shmetro-basic-2020';\nimport gzmtrBasicStation from './gzmtr-basic';\nimport gzmtrIntStation from './gzmtr-int';\nimport bjsubwayBasicStation from './bjsubway-basic';\nimport bjsubwayIntStation from './bjsubway-int';\n\nconst stations = {\n    [StationType.ShmetroBasic]: shmetroBasicStation,\n    [StationType.ShmetroBasic2020]: shmetroBasic2020Station,\n    [StationType.ShmetroInt]: shmetroIntStation,\n    [StationType.GzmtrBasic]: gzmtrBasicStation,\n    [StationType.GzmtrInt]: gzmtrIntStation,\n    [StationType.BjsubwayBasic]: bjsubwayBasicStation,\n    [StationType.BjsubwayInt]: bjsubwayIntStation,\n};\n\nexport default stations;\n","import { CityCode, ColourHex, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { ExternalStationAttributes, StationType } from './stations';\nimport { ExternalLinePathAttributes, ExternalLineStyleAttributes, LinePathType, LineStyleType } from './lines';\nimport { MiscNodeAttributes, MiscNodeType } from './nodes';\nimport { MiscEdgeType } from './edges';\n\n/**\n * Attributes shared both in nodes and edges.\n */\ninterface BaseAttributes {\n    visible: boolean;\n    zIndex: number;\n}\n\nexport type NodeType = StationType | MiscNodeType;\nexport type NodeAttributes = BaseAttributes & {\n    x: number;\n    y: number;\n    type: NodeType;\n} & Partial<ExternalStationAttributes> &\n    Partial<MiscNodeAttributes>;\n\nexport type EdgeType = LinePathType;\nexport type EdgeAttributes = BaseAttributes & {\n    type: EdgeType;\n    style: LineStyleType;\n    /**\n     * Unique ID to reconcile lines.\n     */\n    reconcileId: string;\n} & Partial<ExternalLinePathAttributes> &\n    Partial<ExternalLineStyleAttributes>;\n\nexport type GraphAttributes = {\n    name?: string;\n};\n\n/**\n * Colour theme of line, derived from `LineEntry`.\n * @property 0 - city id\n * @property 1 - line id\n * @property 2 - background colour\n * @property 3 - foreground colour\n */\nexport type Theme = [CityCode, string, ColourHex, MonoColour];\n\nexport type StnId = `stn_${string}`;\nexport type LineId = `line_${string}`;\nexport type MiscNodeId = `misc_node_${string}`;\nexport type MiscEdgeId = `misc_edge_${string}`;\n\n/**\n * Indicate which station/line/node/edge is currently in mouse control. (Runtime only)\n */\nexport type ActiveType = StnId | LineId | MiscNodeId | MiscEdgeId | 'background';\n\n/**\n * Indicate which element will be placed by next click. (Runtime only)\n */\nexport type RuntimeMode =\n    | 'free'\n    | `line-${LinePathType}`\n    | `station-${StationType}`\n    | `misc-node-${MiscNodeType}`\n    | `misc-edge-${MiscEdgeType}`;\n\n/**\n * Stations and lines may be in different displaying format.\n * E.g. Station's icon of Rail map and platform are different in Shanghai metro.\n */\nexport enum CanvasType {\n    RailMap = 'railmap',\n    Platform = 'platform',\n}\n\n/**\n * Categories of different railway class.\n */\nexport enum CategoriesType {\n    Metro = 'metro',\n    NationalRail = 'nationalrail',\n    LightRail = 'lightrail',\n    Footpath = 'footpath',\n}\n\n/**\n * RmgRuntime statistics event.\n */\nexport enum Events {\n    APP_LOAD = 'APP_LOAD',\n    ADD_STATION = 'ADD_STATION',\n    ADD_LINE = 'ADD_LINE',\n}\n"],"names":["MultilineText","React","props","ref","text","lineHeight","grow","dominantBaseline","otherSvgTextProps","reverse","map","t","i","dy","join","JSON","stringify","displayName","LINE_HEIGHT","zh","en","NAME_DY","top","namesPos","polarity","middle","bottom","defaultShmetroIntStationAttributes","defaultStationAttributes","nameOffsetX","nameOffsetY","rotate","height","width","shmetroIntStationFields","type","label","value","attrs","names","replaceAll","onChange","val","attrs_","toString","options","left","right","disabledOptions","validator","Number","isInteger","Math","abs","component","id","x","y","handlePointerDown","handlePointerMove","handlePointerUp","StationType","onPointerDown","e","onPointerMove","onPointerUp","textX","textY","split","length","textAnchor","transform","ry","stroke","fill","style","cursor","className","fontSize","icon","viewBox","focusable","defaultAttrs","fields","metadata","cities","CityCode","canvas","CanvasType","categories","CategoriesType","tags","defaultShmetroBasicStationAttributes","shmetroBasicStationFields","r","cx","cy","ROTATE_CONST","textDx","textDy","defaultShmetroBasic2020StationAttributes","color","MonoColour","shmetroBasic2020StationFields","PATH","TEXT_MAX_WIDTH","StationNumber","strokeColor","lineCode","stationCode","lineCodeEl","stnCodeEl","lineCodeBBox","setlineCodeBBox","stnCodeBBox","setstnCodeBBox","current","getBBox","lineCodeScale","max","stnCodeScale","d","strokeWidth","defaultGzmtrBasicStationAttributes","open","secondaryNames","tram","gzmtrBasicStationFields","oneLine","isChecked","secondaryTextRef","secondaryTextWidth","setSecondaryTextWidth","textRef","textWidth","setTextWidth","secondaryDx","underConstructionDx","dx","fillOpacity","InterchangeCard","interchangeList","onAdd","onDelete","onUpdate","useTranslation","useState","isModalOpen","setIsModalOpen","selectedIndex","setSelectedIndex","interchangeFields","it","minW","direction","spacing","as","flex","align","colorScheme","size","variant","onClick","noLabel","theme","slice","isOpen","onClose","defaultTheme","InterchangeField","stationType","dispatch","useRootDispatch","hardRefresh","setRefreshNodes","saveGraph","graph","export","selected","useRootSelector","state","runtime","selectedFirst","at","window","attr","hasNode","getNodeAttribute","transfer","handleAdd","setIndex","interchangeInfo","newTransferInfo","parse","push","mergeNodeAttributes","handleUpdate","interchangeIndex","set","setIdx","int","intIdx","undefined","infoList","Fragment","filter","_","alignSelf","leftIcon","CODE_POS","defaultGzmtrIntStationAttributes","gzmtrIntStationFields","colorMode","useColorMode","bgColor","useColorModeValue","transferAll","flat","arrowColor","info","arr","indexOf","markerWidth","markerHeight","refX","refY","orient","points","markerEnd","strokeOpacity","defaultBjsubwayBasicStationAttributes","bjsubwayBasicStationFields","strokeDasharray","PATH_ARROW","defaultBjsubwayIntStationAttributes","outOfStation","bjsubwayIntStationFields","strokeLinecap","strokeLinejoin","shmetroBasicStation","shmetroBasic2020Station","shmetroIntStation","gzmtrBasicStation","gzmtrIntStation","bjsubwayBasicStation","bjsubwayIntStation","Events"],"sourceRoot":""}