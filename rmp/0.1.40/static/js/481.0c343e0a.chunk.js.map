{"version":3,"file":"static/js/481.0c343e0a.chunk.js","mappings":"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","sources":["components/edges/shmetro-virtual-int.tsx","components/edges/gzmtr-virtual-int.tsx","components/edges/misc-edges.ts","components/nodes/virtual.tsx","components/nodes/shmetro-num-line-badge.tsx","components/nodes/shmetro-text-line-badge.tsx","components/nodes/facilities.tsx","components/nodes/misc-nodes.ts","constants/edges.ts","constants/nodes.ts"],"sourcesContent":["import React from 'react';\nimport { Edge, EdgeComponentProps } from '../../constants/edges';\n\nconst ShmetroVirtualInt = (props: EdgeComponentProps<ShmetroVirtualIntAttributes>) => {\n    const { id, x1, y1, x2, y2, newLine, handleClick } = props;\n\n    const onClick = React.useCallback(\n        (e: React.MouseEvent<SVGPathElement, MouseEvent>) => handleClick(id, e),\n        [id, handleClick]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id}>\n                <line\n                    x1={x1}\n                    y1={y1}\n                    x2={x2}\n                    y2={y2}\n                    stroke=\"black\"\n                    strokeWidth=\"7\"\n                    strokeLinecap=\"round\"\n                    pointerEvents={newLine ? 'none' : undefined}\n                />\n                <line\n                    x1={x1}\n                    y1={y1}\n                    x2={x2}\n                    y2={y2}\n                    stroke=\"white\"\n                    strokeWidth=\"5\"\n                    strokeLinecap=\"round\"\n                    pointerEvents={newLine ? 'none' : undefined}\n                />\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <line\n                    x1={x1}\n                    y1={y1}\n                    x2={x2}\n                    y2={y2}\n                    stroke=\"white\"\n                    strokeOpacity=\"0\"\n                    strokeWidth=\"7\"\n                    strokeLinecap=\"round\"\n                    onClick={newLine ? undefined : onClick}\n                    pointerEvents={newLine ? 'none' : undefined}\n                />\n            </g>\n        ),\n        [x1, y1, x2, y2, newLine, onClick]\n    );\n};\n\n/**\n * <ShmetroVirtualInt /> specific props.\n */\nexport interface ShmetroVirtualIntAttributes {}\n\nconst defaultShmetroVirtualIntAttributes: ShmetroVirtualIntAttributes = {};\n\nconst shmetroVirtualIntIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <line x1=\"6\" y1=\"12\" x2=\"18\" y2=\"12\" stroke=\"currentColor\" strokeWidth=\"5\" strokeLinecap=\"round\" />\n        <line x1=\"6\" y1=\"12\" x2=\"18\" y2=\"12\" stroke=\"white\" strokeWidth=\"3\" strokeLinecap=\"round\" />\n    </svg>\n);\n\nconst shmetroVirtualInt: Edge<ShmetroVirtualIntAttributes> = {\n    component: ShmetroVirtualInt,\n    icon: shmetroVirtualIntIcon,\n    defaultAttrs: defaultShmetroVirtualIntAttributes,\n    fields: [],\n    metadata: {\n        displayName: 'panel.details.edge.shmetroVirtualInt.displayName',\n        tags: [],\n    },\n};\n\nexport default shmetroVirtualInt;\n","import React from 'react';\nimport { Edge, EdgeComponentProps } from '../../constants/edges';\n\nconst GzmtrVirtualInt = (props: EdgeComponentProps<GzmtrVirtualIntAttributes>) => {\n    const { id, x1, y1, x2, y2, newLine, handleClick } = props;\n\n    const onClick = React.useCallback(\n        (e: React.MouseEvent<SVGPathElement, MouseEvent>) => handleClick(id, e),\n        [id, handleClick]\n    );\n\n    return React.useMemo(\n        () => (\n            <line\n                id={id}\n                x1={x1}\n                y1={y1}\n                x2={x2}\n                y2={y2}\n                stroke=\"black\"\n                strokeWidth=\"3\"\n                strokeDasharray=\"3\"\n                onClick={newLine ? undefined : onClick}\n                pointerEvents={newLine ? 'none' : undefined}\n            />\n        ),\n        [x1, y1, x2, y2, newLine, onClick]\n    );\n};\n\n/**\n * <GzmtrVirtualInt /> specific props.\n */\nexport interface GzmtrVirtualIntAttributes {}\n\nconst defaultGzmtrVirtualIntAttributes: GzmtrVirtualIntAttributes = {};\n\nconst gzmtrVirtualIntIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <line x1=\"4\" y1=\"12\" x2=\"20\" y2=\"12\" stroke=\"currentColor\" strokeWidth=\"3\" strokeDasharray=\"3\" />\n    </svg>\n);\n\nconst gzmtrVirtualInt: Edge<GzmtrVirtualIntAttributes> = {\n    component: GzmtrVirtualInt,\n    icon: gzmtrVirtualIntIcon,\n    defaultAttrs: defaultGzmtrVirtualIntAttributes,\n    fields: [],\n    metadata: {\n        displayName: 'panel.details.edge.gzmtrVirtualInt.displayName',\n        tags: [],\n    },\n};\n\nexport default gzmtrVirtualInt;\n","import { MiscEdgeType } from '../../constants/edges';\nimport shmetroVirtualInt from './shmetro-virtual-int';\nimport gzmtrVirtualInt from './gzmtr-virtual-int';\n\nconst miscEdges = {\n    [MiscEdgeType.ShmetroVirtualInt]: shmetroVirtualInt,\n    [MiscEdgeType.GzmtrVirtualInt]: gzmtrVirtualInt,\n};\n\nexport default miscEdges;\n","import React from 'react';\nimport { Node, NodeComponentProps } from '../../constants/nodes';\n\nconst Virtual = (props: NodeComponentProps<VirtualAttributes>) => {\n    const { id, x, y, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})rotate(45)`}>\n                <line x1=\"-5\" y1=\"0\" x2=\"5\" y2=\"0\" stroke=\"black\" />\n                <line x1=\"0\" y1=\"-5\" x2=\"0\" y2=\"5\" stroke=\"black\" />\n                <circle\n                    id={`virtual_circle_${id}`}\n                    r={5}\n                    stroke=\"black\"\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n            </g>\n        ),\n        [id, x, y, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * <Virtual /> specific props.\n */\nexport interface VirtualAttributes {}\n\nconst defaultVirtualAttributes: VirtualAttributes = {};\n\nconst virtualIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <circle cx=\"12\" cy=\"12\" r=\"6\" stroke=\"currentColor\" fill=\"none\" />\n        <line x1=\"6\" y1=\"12\" x2=\"18\" y2=\"12\" stroke=\"currentColor\" />\n        <line x1=\"12\" y1=\"6\" x2=\"12\" y2=\"18\" stroke=\"currentColor\" />\n    </svg>\n);\n\nconst virtual: Node<VirtualAttributes> = {\n    component: Virtual,\n    icon: virtualIcon,\n    defaultAttrs: defaultVirtualAttributes,\n    fields: [],\n    metadata: {\n        displayName: 'panel.details.node.virtual.displayName',\n        tags: [],\n    },\n};\n\nexport default virtual;\n","import React from 'react';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { Theme } from '../../constants/constants';\nimport { MiscNodeType, Node, NodeComponentProps } from '../../constants/nodes';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { saveGraph } from '../../redux/app/app-slice';\nimport { setRefresh } from '../../redux/runtime/runtime-slice';\nimport ThemeButton from '../panel/theme-button';\nimport ColourModal from '../panel/colour-modal/colour-modal';\n\nconst ShmetroNumLineBadge = (props: NodeComponentProps<ShmetroNumLineBadgeAttributes>) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const { num = defaultShmetroNumLineBadgeAttributes.num, color = defaultShmetroNumLineBadgeAttributes.color } =\n        attrs ?? defaultShmetroNumLineBadgeAttributes;\n\n    const width = num >= 10 ? 17.5 : 14.5;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})scale(2)`}>\n                <rect fill={color[2]} x={0} width={width} height=\"16\" />\n                <text textAnchor=\"middle\" x={width / 2} y=\"14\" fill={color[3]}>\n                    {num}\n                </text>\n                <text x={width + 2} y=\"9\" fontSize=\"10\">\n                    号线\n                </text>\n                <text x={width + 2} y=\"16\" fontSize=\"6\">\n                    Line {num}\n                </text>\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <rect\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    x={0}\n                    width={width}\n                    height={10}\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n            </g>\n        ),\n        [id, x, y, num, ...color, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * <ShmetroNumLineBadge /> specific props.\n */\nexport interface ShmetroNumLineBadgeAttributes {\n    num: number;\n    color: Theme;\n}\n\nconst defaultShmetroNumLineBadgeAttributes: ShmetroNumLineBadgeAttributes = {\n    num: 1,\n    color: [CityCode.Shanghai, 'sh1', '#E4002B', MonoColour.white],\n};\n\nconst Color = () => {\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n    const { selected } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [isModalOpen, setIsModalOpen] = React.useState(false);\n    const handleChangeColor = (color: Theme) => {\n        if (selectedFirst && graph.current.hasNode(selectedFirst)) {\n            const attrs =\n                graph.current.getNodeAttribute(selectedFirst, MiscNodeType.ShmetroNumLineBadge) ??\n                defaultShmetroNumLineBadgeAttributes;\n            attrs.color = color;\n            graph.current.mergeNodeAttributes(selectedFirst, { [MiscNodeType.ShmetroNumLineBadge]: attrs });\n            hardRefresh();\n        }\n    };\n\n    const theme =\n        selectedFirst &&\n        graph.current.hasNode(selectedFirst) &&\n        graph.current.getNodeAttribute(selectedFirst, 'type') === MiscNodeType.ShmetroNumLineBadge\n            ? (\n                  graph.current.getNodeAttribute(selectedFirst, MiscNodeType.ShmetroNumLineBadge) ??\n                  defaultShmetroNumLineBadgeAttributes\n              ).color\n            : defaultShmetroNumLineBadgeAttributes.color;\n\n    return (\n        <>\n            <ThemeButton theme={theme} onClick={() => setIsModalOpen(true)} />\n            <ColourModal\n                isOpen={isModalOpen}\n                defaultTheme={theme}\n                onClose={() => setIsModalOpen(false)}\n                onUpdate={nextTheme => handleChangeColor(nextTheme)}\n            />\n        </>\n    );\n};\n\nconst ShmetroNumLineBadgeFields = [\n    {\n        type: 'input',\n        label: 'panel.details.node.shmetroNumLineBadge.num',\n        value: (attrs?: ShmetroNumLineBadgeAttributes) => (attrs ?? defaultShmetroNumLineBadgeAttributes).num,\n        validator: (val: string) => !Number.isNaN(val),\n        onChange: (val: string | number, attrs_: ShmetroNumLineBadgeAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroNumLineBadgeAttributes;\n            // return if invalid\n            if (Number.isNaN(val)) return attrs;\n            // set value\n            attrs.num = Number(val);\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: <Color />,\n    },\n];\n\nconst ShmetroNumLineBadgeIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <rect fill=\"currentColor\" x=\"2\" y=\"4\" width=\"10\" height=\"16\" />\n        <text x=\"4\" y=\"18\" fill=\"white\">\n            1\n        </text>\n        <text x=\"14\" y=\"10\" fontSize=\"5\">\n            号线\n        </text>\n        <text x=\"14\" y=\"18\" fontSize=\"4\">\n            Line 1\n        </text>\n    </svg>\n);\n\nconst shmetroNumLineBadge: Node<ShmetroNumLineBadgeAttributes> = {\n    component: ShmetroNumLineBadge,\n    icon: ShmetroNumLineBadgeIcon,\n    defaultAttrs: defaultShmetroNumLineBadgeAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: ShmetroNumLineBadgeFields,\n    metadata: {\n        displayName: 'panel.details.node.shmetroNumLineBadge.displayName',\n        tags: [],\n    },\n};\n\nexport default shmetroNumLineBadge;\n","import React from 'react';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { Theme } from '../../constants/constants';\nimport { MiscNodeType, Node, NodeComponentProps } from '../../constants/nodes';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { saveGraph } from '../../redux/app/app-slice';\nimport { setRefresh } from '../../redux/runtime/runtime-slice';\nimport ThemeButton from '../panel/theme-button';\nimport ColourModal from '../panel/colour-modal/colour-modal';\n\nconst ShmetroTextLineBadge = (props: NodeComponentProps<ShmetroTextLineBadgeAttributes>) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const { names = defaultShmetroTextLineBadgeAttributes.names, color = defaultShmetroTextLineBadgeAttributes.color } =\n        attrs ?? defaultShmetroTextLineBadgeAttributes;\n\n    const textLineEl = React.useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: 12 } as DOMRect);\n    React.useEffect(() => setBBox(textLineEl.current!.getBBox()), [...names, setBBox, textLineEl]);\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})scale(2)`}>\n                <rect fill={color[2]} x={0} width={bBox.width + 3} height=\"16\" />\n                <g ref={textLineEl}>\n                    <text textAnchor=\"middle\" x={(bBox.width + 3) / 2} y=\"8\" fontSize=\"8\" fill={color[3]}>\n                        {names[0]}\n                    </text>\n                    <text textAnchor=\"middle\" x={(bBox.width + 3) / 2} y=\"14\" fontSize=\"6\" fill={color[3]}>\n                        {names[1]}\n                    </text>\n                </g>\n                {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                <rect\n                    fill=\"white\"\n                    fillOpacity=\"0\"\n                    x=\"0\"\n                    width={bBox.width + 3}\n                    height=\"16\"\n                    onPointerDown={onPointerDown}\n                    onPointerMove={onPointerMove}\n                    onPointerUp={onPointerUp}\n                    style={{ cursor: 'move' }}\n                />\n            </g>\n        ),\n        [id, x, y, ...names, bBox, ...color, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * <ShmetroTextLineBadge /> specific props.\n */\nexport interface ShmetroTextLineBadgeAttributes {\n    names: [string, string];\n    color: Theme;\n}\n\nconst defaultShmetroTextLineBadgeAttributes: ShmetroTextLineBadgeAttributes = {\n    names: ['浦江线', 'Pujiang Line'],\n    color: [CityCode.Shanghai, 'pjl', '#999999', MonoColour.white],\n};\n\nconst Color = () => {\n    const dispatch = useRootDispatch();\n    const hardRefresh = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph]);\n    const { selected } = useRootSelector(state => state.runtime);\n    const selectedFirst = selected.at(0);\n    const graph = React.useRef(window.graph);\n\n    const [isModalOpen, setIsModalOpen] = React.useState(false);\n    const handleChangeColor = (color: Theme) => {\n        if (selectedFirst && graph.current.hasNode(selectedFirst)) {\n            const attrs =\n                graph.current.getNodeAttribute(selectedFirst, MiscNodeType.ShmetroTextLineBadge) ??\n                defaultShmetroTextLineBadgeAttributes;\n            attrs.color = color;\n            graph.current.mergeNodeAttributes(selectedFirst, { [MiscNodeType.ShmetroTextLineBadge]: attrs });\n            hardRefresh();\n        }\n    };\n\n    const theme =\n        selectedFirst &&\n        graph.current.hasNode(selectedFirst) &&\n        graph.current.getNodeAttribute(selectedFirst, 'type') === MiscNodeType.ShmetroTextLineBadge\n            ? (\n                  graph.current.getNodeAttribute(selectedFirst, MiscNodeType.ShmetroTextLineBadge) ??\n                  defaultShmetroTextLineBadgeAttributes\n              ).color\n            : defaultShmetroTextLineBadgeAttributes.color;\n\n    return (\n        <>\n            <ThemeButton theme={theme} onClick={() => setIsModalOpen(true)} />\n            <ColourModal\n                isOpen={isModalOpen}\n                defaultTheme={theme}\n                onClose={() => setIsModalOpen(false)}\n                onUpdate={nextTheme => handleChangeColor(nextTheme)}\n            />\n        </>\n    );\n};\n\nconst ShmetroTextLineBadgeFields = [\n    {\n        type: 'input',\n        label: 'panel.details.node.shmetroTextLineBadge.nameZh',\n        value: (attrs?: ShmetroTextLineBadgeAttributes) => (attrs ?? defaultShmetroTextLineBadgeAttributes).names[0],\n        onChange: (val: string | number, attrs_: ShmetroTextLineBadgeAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroTextLineBadgeAttributes;\n            // set value\n            attrs.names[0] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'input',\n        label: 'panel.details.node.shmetroTextLineBadge.nameEn',\n        value: (attrs?: ShmetroTextLineBadgeAttributes) => (attrs ?? defaultShmetroTextLineBadgeAttributes).names[1],\n        onChange: (val: string | number, attrs_: ShmetroTextLineBadgeAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultShmetroTextLineBadgeAttributes;\n            // return if invalid\n            // set value\n            attrs.names[1] = val.toString();\n            // return modified attrs\n            return attrs;\n        },\n    },\n    {\n        type: 'custom',\n        component: <Color />,\n    },\n];\n\nconst ShmetroTextLineBadgeIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <rect fill=\"currentColor\" x=\"2\" y=\"6\" width=\"20\" height=\"12\" />\n        <text x=\"5\" y=\"11\" fontSize=\"5\" fill=\"white\">\n            浦江线\n        </text>\n        <text x=\"3\" y=\"16\" fontSize=\"4\" fill=\"white\">\n            Pujiang Line\n        </text>\n    </svg>\n);\n\nconst shmetroTextLineBadge: Node<ShmetroTextLineBadgeAttributes> = {\n    component: ShmetroTextLineBadge,\n    icon: ShmetroTextLineBadgeIcon,\n    defaultAttrs: defaultShmetroTextLineBadgeAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: ShmetroTextLineBadgeFields,\n    metadata: {\n        displayName: 'panel.details.node.shmetroTextLineBadge.displayName',\n        tags: [],\n    },\n};\n\nexport default shmetroTextLineBadge;\n","import React from 'react';\nimport { Node, NodeComponentProps } from '../../constants/nodes';\n\nconst Facilities = (props: NodeComponentProps<FacilitiesAttributes>) => {\n    const { id, x, y, attrs, handlePointerDown, handlePointerMove, handlePointerUp } = props;\n    const { type = defaultFacilitiesAttributes.type } = attrs ?? defaultFacilitiesAttributes;\n\n    const onPointerDown = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerDown(id, e),\n        [id, handlePointerDown]\n    );\n    const onPointerMove = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerMove(id, e),\n        [id, handlePointerMove]\n    );\n    const onPointerUp = React.useCallback(\n        (e: React.PointerEvent<SVGElement>) => handlePointerUp(id, e),\n        [id, handlePointerUp]\n    );\n\n    return React.useMemo(\n        () => (\n            <g id={id} transform={`translate(${x}, ${y})`}>\n                {type === 'airport' && (\n                    <g id=\"airport\" transform=\"scale(0.5)\">\n                        <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"grey\" />\n                        <path\n                            id=\"airport\"\n                            d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                            transform=\"translate(-28.9697,0.14347)\"\n                            fill=\"white\"\n                        />\n                        <circle\n                            cx=\"0\"\n                            cy=\"29.33899\"\n                            r=\"29.33899\"\n                            fill=\"grey\"\n                            fillOpacity=\"0\"\n                            onPointerDown={onPointerDown}\n                            onPointerMove={onPointerMove}\n                            onPointerUp={onPointerUp}\n                            style={{ cursor: 'move' }}\n                        />\n                    </g>\n                )}\n                {type === 'maglev' && (\n                    <g id=\"intbox_maglev\" transform=\"translate(-20,0)scale(0.2)\">\n                        <rect id=\"maglev_5\" height=\"144\" width=\"130\" y=\"40\" x=\"30\" fill=\"grey\" />\n                        <path\n                            id=\"maglev_3\"\n                            fill=\"white\"\n                            d=\"m90,55a40,5 0 0 0 -40,3a5,5 0 0 0 -5,5a5,60 0 0 0 -3,60a5,5 0 0 0 5,5l96,0a5,5 0 0 0 5,-5a5,60 0 0 0 -3,-60a5,5 0 0 0 -5,-5a40,5 0 0 0 -40,-3l-5,-10l-5,10\"\n                        />\n                        <path\n                            id=\"maglev_4\"\n                            fill=\"white\"\n                            d=\"m90,140l-40,0a10,5 0 0 1 -10,-5l0,25a10,15 0 0 0 10,15l15,0l0,-10l-15,0l0,-15l90,0l0,15l-15,0l0,10l15,0a10,15 0 0 0 10,-15l0,-25a10,5 0 0 1 -10,5l-50,0\"\n                        />\n                        <rect id=\"maglev_1\" fill=\"grey\" height=\"25\" width=\"40\" y=\"80\" x=\"50\" />\n                        <rect id=\"maglev_2\" fill=\"grey\" height=\"25\" width=\"40\" y=\"80\" x=\"100\" />\n                        {/* Below is an overlay element that has all event hooks but can not be seen. */}\n                        <rect\n                            id=\"maglev_overlay\"\n                            height=\"144\"\n                            width=\"130\"\n                            y=\"40\"\n                            x=\"30\"\n                            fillOpacity=\"0\"\n                            onPointerDown={onPointerDown}\n                            onPointerMove={onPointerMove}\n                            onPointerUp={onPointerUp}\n                            style={{ cursor: 'move' }}\n                        />\n                    </g>\n                )}\n                {type === 'disney' && (\n                    <g id=\"disney\" transform=\"scale(0.5)\">\n                        <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"grey\" />\n                        <path\n                            fill=\"white\"\n                            d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                            transform=\"translate(-28.9697 0.13398)\"\n                        />\n                        <circle\n                            cx=\"0\"\n                            cy=\"29.33899\"\n                            r=\"29.33899\"\n                            fill=\"grey\"\n                            fillOpacity=\"0\"\n                            onPointerDown={onPointerDown}\n                            onPointerMove={onPointerMove}\n                            onPointerUp={onPointerUp}\n                            style={{ cursor: 'move' }}\n                        />\n                    </g>\n                )}\n                {type === 'railway' && (\n                    // Special thanks to Wikimedia Commons, see https://commons.wikimedia.org/wiki/File:China_Railways.svg\n                    <g id=\"railway\">\n                        <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"grey\" transform=\"translate(0,-2)scale(0.5)\" />\n                        <path\n                            fill=\"white\"\n                            d=\"M169,273.5c0-19,14.7-34.8,33.7-36.3c18.9-1.5,38.1-2.2,57.4-2.2c19.3,0,38.4,0.8,57.3,2.2  c19,1.5,33.7,17.3,33.7,36.3v47.3l-51.3,14.7c-11.2,3.2-18.9,13.4-18.9,25v147.8c0,17.4,12.2,32.3,29.3,35.7l110.6,22.1  c4.9,1,8.4,5.2,8.4,10.2V599H91v-22.7c0-5,3.5-9.2,8.4-10.2L209.9,544c17-3.4,29.3-18.3,29.3-35.7V360.5c0-11.6-7.7-21.8-18.9-25  L169,320.8V273.5z M309.4,31.7c0.2-1.2,0.3-2.4,0.3-3.6c0-14-11.1-25.4-24.9-26C276.6,1.4,268.3,1,260,1c-8.3,0-16.6,0.4-24.7,1.1  c-13.9,0.6-24.9,12-24.9,26c0,1.2,0.1,2.5,0.3,3.6C90.6,54.8,0,160.3,0,287c0,97.2,53.4,182,132.4,226.6l36.8-48.1  C104.3,432.4,59.8,364.9,59.8,287c0-110.6,89.6-200.2,200.2-200.2S460.2,176.4,460.2,287c0,77.9-44.5,145.4-109.4,178.5  c15,19.6,25.6,33.5,36.8,48.1C466.6,469,520,384.2,520,287C520,160.3,429.4,54.8,309.4,31.7z\"\n                            transform=\"translate(-10,0)scale(0.04)\"\n                        />\n                        <circle\n                            cx=\"0\"\n                            cy=\"29.33899\"\n                            r=\"29.33899\"\n                            fill=\"grey\"\n                            transform=\"translate(0,-2)scale(0.5)\"\n                            fillOpacity=\"0\"\n                            onPointerDown={onPointerDown}\n                            onPointerMove={onPointerMove}\n                            onPointerUp={onPointerUp}\n                            style={{ cursor: 'move' }}\n                        />\n                    </g>\n                )}\n                {type === 'hsr' && (\n                    <>\n                        <clipPath id=\"hsr-clip-path\" transform=\"translate(-0.00057 0.01643)\">\n                            <path\n                                fill=\"none\"\n                                d=\"M5.1606.89861a3.67176,3.67176,0,0,0-3.676,3.667v48.966a3.67842,3.67842,0,0,0,3.676,3.692h48.443a3.67892,3.67892,0,0,0,3.678-3.692V4.5656a3.67227,3.67227,0,0,0-3.678-3.667Z\"\n                            />\n                        </clipPath>\n                        <g id=\"hsr\" transform=\"scale(0.5970084519)\">\n                            <rect x={-29.33899} width={58.67798} height={58.67798} />\n                            <g clipPath=\"url(#hsr-clip-path)\" transform=\"translate(-29.33899,0)\">\n                                <rect\n                                    x={-3.25242}\n                                    y={24.74141}\n                                    width={61.75879}\n                                    height={0.98008}\n                                    transform=\"translate(-8.93747 17.31321) rotate(-30.16134)\"\n                                    fill=\"white\"\n                                />\n                                <path\n                                    d=\"M5.77169,48.97289c-2.17407-3.89294,2.56994-10.525,4.85-13.724l.173-.248a83.00826,83.00826,0,0,1,7.39294-9.285,97.384,97.384,0,0,1,11.082-9.958c7.051-6.045,15.832-5.876,16.447-5.894l11.785-.957.276,17.42-11.5271,10.586c-.36.39405-5.553,5.863-18.10193,11.035-6.752,2.783-11.877,4.146-15.66,4.146-3.301,0-5.561-1.049-6.71692-3.121\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                    fill=\"white\"\n                                />\n                                <polygon\n                                    points=\"57.453 29.614 32.426 58.31 35.582 58.509 57.584 30.433 57.453 29.614\"\n                                    fill=\"white\"\n                                />\n                                <path\n                                    d=\"M49.04708,11.61364a.94277.94277,0,0,0-.17407-.227c-.752-.93695-2.988-1.259-5.933-.793a25.98382,25.98382,0,0,0-9.99695,3.032A98.52916,98.52916,0,0,0,20.723,23.69768c-3.1759,3.487-4.645,6.388-3.62292,7.584,1.84,2.166,13.7539.716,22.00793-6.066,9.035-7.42,10.718-11.577,9.93909-13.602\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                />\n                                <path\n                                    d=\"M34.65255,13.81182c5.65991-2.842,11.28088-2.856,12.1499-1.213.88306,1.652-2.99792,5.303-8.656,8.128-5.648,2.837-10.9469,3.805-11.81994,2.15-.873-1.641,2.668-6.237,8.326-9.065\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                    fill=\"white\"\n                                />\n                                <path\n                                    d=\"M58.10958,25.03454c-16.832,20.708-40.7301,26.038-40.7301,26.038,11-6.73,12.769-8.111,18.968-18.01,8.364-13.351,21.77808-21.549,21.912-21.63,0,0-.068,13.5-.1499,13.602\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                />\n                                <path\n                                    d=\"M27.1877,26.69561l9.705-2.814a6.22768,6.22768,0,0,1-1.994,2.759,25.57277,25.57277,0,0,1-6.697,3.405,11.78221,11.78221,0,0,1-5.5.783Z\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                    fill=\"white\"\n                                />\n                                <path\n                                    d=\"M19.59005,25.97692a18.37656,18.37656,0,0,1,3.891-3.976,6.66452,6.66452,0,0,0-.30908,2.213l-4.391,4.829a6.18212,6.18212,0,0,1,.80908-3.066\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                    fill=\"white\"\n                                />\n                                <polygon\n                                    points=\"23.156 58.311 57.463 26.746 57.396 25.857 21.582 58.607 23.156 58.311\"\n                                    fill=\"white\"\n                                />\n                                <path\n                                    d=\"M60.15645,12.35973a68.6782,68.6782,0,0,0-12.602,9.542c-8.15,7.745-12.109,15.259-9.855,16.091,2.24793.816,10.678-4.782,18.83594-12.543,1.828-1.74,3.48-3.424,4.926-5.024Z\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                    fill=\"white\"\n                                />\n                                <path\n                                    d=\"M63.07638,11.82653a40.86955,40.86955,0,0,0-10,7.096c-5.90406,5.437-9.48609,11.105-7.848,11.742,1.657.631,8.28894-3.955,14.188-9.401a61.76591,61.76591,0,0,0,4.61694-4.705Z\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                />\n                                <path\n                                    d=\"M12.67989,42.93969a9.87,9.87,0,0,0-5.754-1.895c-.113.22-.223.439-.33008.662a9.45046,9.45046,0,0,1,5.69507,1.749,6.27885,6.27885,0,0,1,2.61,6.305,10.16524,10.16524,0,0,1-.598,2.228c.238-.023.481-.053.725-.087.78308-2.249,1.394-6.184-2.3479-8.962\"\n                                    transform=\"translate(-0.00057 0.01643)\"\n                                />\n                            </g>\n                            <rect\n                                x={-29.33899}\n                                width={58.67798}\n                                height={58.67798}\n                                fillOpacity=\"0\"\n                                onPointerDown={onPointerDown}\n                                onPointerMove={onPointerMove}\n                                onPointerUp={onPointerUp}\n                                style={{ cursor: 'move' }}\n                            />\n                        </g>\n                    </>\n                )}\n            </g>\n        ),\n        [id, x, y, type, onPointerDown, onPointerMove, onPointerUp]\n    );\n};\n\n/**\n * <Facilities /> specific props.\n */\nexport interface FacilitiesAttributes {\n    type: 'airport' | 'maglev' | 'disney' | 'railway' | 'hsr';\n}\n\nconst defaultFacilitiesAttributes: FacilitiesAttributes = {\n    type: 'airport',\n};\n\nconst FacilitiesFields = [\n    {\n        type: 'select',\n        label: 'panel.details.node.FacilitiesAttributes.type',\n        value: (attrs?: FacilitiesAttributes) => (attrs ?? defaultFacilitiesAttributes).type,\n        options: { airport: 'airport', maglev: 'maglev', disney: 'disney', railway: 'railway', hsr: 'hsr' },\n        onChange: (val: string | number, attrs_: FacilitiesAttributes | undefined) => {\n            // set default value if switched from another type\n            const attrs = attrs_ ?? defaultFacilitiesAttributes;\n            // set value\n            attrs.type = val as 'airport' | 'maglev' | 'disney' | 'railway' | 'hsr';\n            // return modified attrs\n            return attrs;\n        },\n    },\n];\n\nconst FacilitiesIcon = (\n    <svg viewBox=\"0 0 24 24\" height={40} width={40} focusable={false}>\n        <g transform=\"translate(12, 0)scale(0.4)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"currentColor\" />\n            <path\n                id=\"airport\"\n                d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                transform=\"translate(-28.9697,0.14347)\"\n                fill=\"white\"\n            />\n        </g>\n    </svg>\n);\n\nconst facilities: Node<FacilitiesAttributes> = {\n    component: Facilities,\n    icon: FacilitiesIcon,\n    defaultAttrs: defaultFacilitiesAttributes,\n    // TODO: fix this\n    // @ts-ignore-error\n    fields: FacilitiesFields,\n    metadata: {\n        displayName: 'panel.details.node.facilities.displayName',\n        tags: [],\n    },\n};\n\nexport default facilities;\n","import { MiscNodeType } from '../../constants/nodes';\nimport virtual from './virtual';\nimport shmetroNumLineBadge from './shmetro-num-line-badge';\nimport shmetroTextLineBadge from './shmetro-text-line-badge';\nimport facilities from './facilities';\n\nconst miscNodes = {\n    [MiscNodeType.Virtual]: virtual,\n    [MiscNodeType.ShmetroNumLineBadge]: shmetroNumLineBadge,\n    [MiscNodeType.ShmetroTextLineBadge]: shmetroTextLineBadge,\n    [MiscNodeType.Facilities]: facilities,\n};\n\nexport default miscNodes;\n","import { RmgFieldsField } from '@railmapgen/rmg-components';\nimport { MiscEdgeId } from './constants';\nimport { GeneratePathFunction } from './lines';\nimport { ShmetroVirtualIntAttributes } from '../components/edges/shmetro-virtual-int';\nimport { GzmtrVirtualIntAttributes } from '../components/edges/gzmtr-virtual-int';\n\nexport interface EdgeComponentProps<T> {\n    id: MiscEdgeId;\n    attrs: T;\n    x1: number;\n    x2: number;\n    y1: number;\n    y2: number;\n    /**\n     * Indicate whether or not this line is created in progress.\n     * If yes, we need to set pointer-events to none\n     * so elementsFromPoint will return the underlying station instead of this line.\n     * https://stackoverflow.com/a/49174322\n     */\n    newLine: boolean;\n    handleClick: (edge: MiscEdgeId, e: React.MouseEvent<SVGPathElement, MouseEvent>) => void;\n}\nexport interface Edge<T> {\n    /**\n     * The core edge component.\n     */\n    component: (props: EdgeComponentProps<T>) => JSX.Element;\n    /**\n     * The icon displayed in the tools panel.\n     */\n    icon: JSX.Element;\n    /**\n     * Default attributes for this component.\n     */\n    defaultAttrs: T;\n    /**\n     * Changeable actions in the details panel.\n     * In a slightly different RmgFieldsField format.\n     */\n    fields: (Omit<RmgFieldsField, 'value' | 'onChange'> & {\n        value: (attrs?: T) => string;\n        onChange: (val: string | number, attrs_: T | undefined) => T;\n    })[];\n    /**\n     * TODO: split to path generation type and style type.\n     * If you export the internal path generation function, RMP\n     * will try to reconcile this line with other lines to form\n     * a single line/path as long as the user set the same Reconcile ID.\n     */\n    generatePath?: GeneratePathFunction<T>;\n    /**\n     * Metadata for this node.\n     */\n    metadata: {\n        /**\n         * The name displayed in the tools panel. In react-i18next index format.\n         */\n        displayName: string;\n        /**\n         * Tags of this station.\n         */\n        tags: string[];\n    };\n}\n\nexport enum MiscEdgeType {\n    ShmetroVirtualInt = 'shmetro-virtual-int',\n    GzmtrVirtualInt = 'gzmtr-virtual-int',\n}\nexport interface MiscEdgeAttributes {\n    [MiscEdgeType.ShmetroVirtualInt]?: ShmetroVirtualIntAttributes;\n    [MiscEdgeType.GzmtrVirtualInt]?: GzmtrVirtualIntAttributes;\n}\n","import { RmgFieldsField } from '@railmapgen/rmg-components';\nimport { FacilitiesAttributes } from '../components/nodes/facilities';\nimport { ShmetroNumLineBadgeAttributes } from '../components/nodes/shmetro-num-line-badge';\nimport { ShmetroTextLineBadgeAttributes } from '../components/nodes/shmetro-text-line-badge';\nimport { VirtualAttributes } from '../components/nodes/virtual';\nimport { MiscNodeId } from './constants';\n\nexport interface NodeComponentProps<T> {\n    id: MiscNodeId;\n    attrs: T;\n    x: number;\n    y: number;\n    handlePointerDown: (node: MiscNodeId, e: React.PointerEvent<SVGElement>) => void;\n    handlePointerMove: (node: MiscNodeId, e: React.PointerEvent<SVGElement>) => void;\n    handlePointerUp: (node: MiscNodeId, e: React.PointerEvent<SVGElement>) => void;\n}\nexport interface Node<T> {\n    /**\n     * The core node component.\n     */\n    component: (props: NodeComponentProps<T>) => JSX.Element;\n    /**\n     * The icon displayed in the tools panel.\n     */\n    icon: JSX.Element;\n    /**\n     * Default attributes for this component.\n     */\n    defaultAttrs: T;\n    /**\n     * Changeable actions in the details panel.\n     * In a slightly different RmgFieldsField format.\n     */\n    fields: (Omit<RmgFieldsField, 'value' | 'onChange'> & {\n        value: (attrs?: T) => string;\n        onChange: (val: string | number, attrs_: T | undefined) => T;\n    })[];\n    /**\n     * Metadata for this node.\n     */\n    metadata: {\n        /**\n         * The name displayed in the tools panel. In react-i18next index format.\n         */\n        displayName: string;\n        /**\n         * Tags of this station.\n         */\n        tags: string[];\n    };\n}\n\nexport enum MiscNodeType {\n    Virtual = 'virtual',\n    ShmetroNumLineBadge = 'shmetro-num-line-badge',\n    ShmetroTextLineBadge = 'shmetro-text-line-badge',\n    Facilities = 'facilities',\n}\nexport interface MiscNodeAttributes {\n    [MiscNodeType.Virtual]?: VirtualAttributes;\n    [MiscNodeType.ShmetroNumLineBadge]?: ShmetroNumLineBadgeAttributes;\n    [MiscNodeType.ShmetroTextLineBadge]?: ShmetroTextLineBadgeAttributes;\n    [MiscNodeType.Facilities]?: FacilitiesAttributes;\n}\n"],"names":["component","props","id","x1","y1","x2","y2","newLine","handleClick","onClick","React","e","stroke","strokeWidth","strokeLinecap","pointerEvents","undefined","strokeOpacity","icon","viewBox","height","width","focusable","defaultAttrs","fields","metadata","displayName","tags","strokeDasharray","MiscEdgeType","shmetroVirtualInt","gzmtrVirtualInt","x","y","handlePointerDown","handlePointerMove","handlePointerUp","onPointerDown","onPointerMove","onPointerUp","transform","r","fill","fillOpacity","style","cursor","cx","cy","defaultShmetroNumLineBadgeAttributes","num","color","CityCode","MonoColour","Color","dispatch","useRootDispatch","hardRefresh","setRefresh","saveGraph","graph","current","export","selectedFirst","useRootSelector","state","runtime","selected","at","window","isModalOpen","setIsModalOpen","theme","hasNode","getNodeAttribute","MiscNodeType","isOpen","defaultTheme","onClose","onUpdate","nextTheme","attrs","mergeNodeAttributes","handleChangeColor","ShmetroNumLineBadgeFields","type","label","value","validator","val","Number","isNaN","onChange","attrs_","textAnchor","fontSize","defaultShmetroTextLineBadgeAttributes","names","ShmetroTextLineBadgeFields","toString","textLineEl","bBox","setBBox","getBBox","ref","defaultFacilitiesAttributes","FacilitiesFields","options","airport","maglev","disney","railway","hsr","d","clipPath","points","virtual","shmetroNumLineBadge","shmetroTextLineBadge","facilities"],"sourceRoot":""}