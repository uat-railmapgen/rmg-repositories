{"version":3,"file":"static/js/WindowHeader.518a5895.chunk.js","mappings":"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","sources":["components/page-header/gallery-modal.tsx","components/page-header/open-actions.tsx","components/page-header/terms-and-conditions.tsx","components/page-header/download-actions.tsx","components/page-header/about.tsx","components/page-header/zoom-popover.tsx","components/page-header/window-header.tsx","util/helpers.ts"],"sourcesContent":["import React from 'react';\nimport {\n    Button,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    VStack,\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { RMPSave } from '../../util/save';\nimport RMP_Shanghai from '../../util/RMP_Shanghai.json';\nimport RMP_Beijing from '../../util/RMP_Beijing.json';\nimport RMP_Santiago from '../../util/RMP_Santiago.json';\n\nexport const GalleryModal = (props: {\n    isOpen: boolean;\n    handleOpenTemplates: (rmpSave: RMPSave) => void;\n    onClose: () => void;\n}) => {\n    const { isOpen, handleOpenTemplates, onClose } = props;\n    const { t } = useTranslation();\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.open.gallery')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <VStack>\n                        <Button\n                            minWidth={200}\n                            onClick={() => {\n                                handleOpenTemplates(RMP_Shanghai as RMPSave);\n                                onClose();\n                            }}\n                        >\n                            {t('header.open.shanghai')}\n                        </Button>\n                        <Button\n                            minWidth={200}\n                            onClick={() => {\n                                handleOpenTemplates(RMP_Beijing as RMPSave);\n                                onClose();\n                            }}\n                        >\n                            {t('header.open.beijing')}\n                        </Button>\n                        <Button\n                            minWidth={200}\n                            onClick={() => {\n                                handleOpenTemplates(RMP_Santiago as RMPSave);\n                                onClose();\n                            }}\n                        >\n                            {t('header.open.santiago')}\n                        </Button>\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { IconButton, Menu, MenuButton, MenuItem, MenuList } from '@chakra-ui/react';\nimport { MdInsertDriveFile, MdNoteAdd, MdUpload } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport { useRootDispatch } from '../../redux';\nimport { AppState, saveGraph, setFullState } from '../../redux/app/app-slice';\nimport { clearSelected, setRefresh } from '../../redux/runtime/runtime-slice';\nimport { upgrade } from '../../util/save';\nimport { StationAttributes, StationType } from '../../constants/stations';\nimport { LineType } from '../../constants/lines';\nimport stations from '../station/stations';\nimport lines from '../line/lines';\nimport { ShmetroBasic2020StationAttributes } from '../station/shmetro-basic-2020';\nimport { RMPSave } from '../../util/save';\nimport { GalleryModal } from './gallery-modal';\nimport { GzmtrBasicStationAttributes } from '../station/gzmtr-basic';\nimport { InterchangeInfo } from '../station/interchange-field';\nimport { GzmtrIntStationAttributes } from '../station/gzmtr-int';\n\nexport default function OpenActions() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const graph = React.useRef(window.graph);\n    const fileRMGInputRef = React.useRef<HTMLInputElement | null>(null);\n    const fileInputRef = React.useRef<HTMLInputElement | null>(null);\n\n    const [isGalleryModalOpen, setIsGalleryModalOpen] = React.useState(false);\n\n    const refreshAndSave = React.useCallback(() => {\n        dispatch(setRefresh());\n        dispatch(saveGraph(graph.current.export()));\n    }, [dispatch, setRefresh, saveGraph, graph]);\n\n    const handleNew = () => {\n        dispatch(clearSelected());\n        graph.current.clear();\n        const state: AppState = { graph: '{}', svgViewBoxZoom: 100, svgViewBoxMin: { x: 0, y: 0 } };\n        dispatch(setFullState(state));\n        refreshAndSave();\n    };\n\n    const handleUploadRMG = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        console.log('OpenActions.handleUploadRMG():: received file', file);\n\n        if (file?.type !== 'application/json') {\n            // dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.invalidType') }));\n            console.error('OpenActions.handleUploadRMG():: Invalid file type! Only file in JSON format is accepted.');\n        } else {\n            try {\n                const paramStr = await readFileAsText(file);\n                const param = JSON.parse(paramStr);\n                const stnList = param.stn_list;\n                const theme = param.theme;\n\n                // generate stn id\n                const stnIdMap = Object.fromEntries(\n                    Object.keys(stnList)\n                        .filter(id => !['linestart', 'lineend'].includes(id))\n                        .map(id => [id, `stn_${nanoid(10)}`])\n                );\n                // update stnIdMap if stations exist in the graph\n                Object.entries(stnList)\n                    .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n                    .forEach(([id, stnInfo]) => {\n                        const nodes = graph.current.filterNodes(\n                            (node, attr) =>\n                                // @ts-ignore-error\n                                Object.values(StationType).includes(attr.type) &&\n                                (attr[attr.type] as StationAttributes).names[0] === (stnInfo as any).name[0]\n                        );\n                        if (nodes.length !== 0) stnIdMap[id] = nodes[0];\n                    });\n\n                // only import stations that don't appear in the graph\n                Object.entries(stnList)\n                    .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n                    .filter(\n                        ([id, stnInfo]) =>\n                            graph.current.filterNodes(\n                                (node, attr) =>\n                                    // @ts-ignore-error\n                                    Object.values(StationType).includes(attr.type) &&\n                                    (attr[attr.type] as StationAttributes).names[0] === (stnInfo as any).name[0]\n                            ).length === 0\n                    )\n                    .forEach(([id, stnInfo], i) => {\n                        // determine station type\n                        let type: StationType = StationType.ShmetroBasic;\n                        if (param.style === 'shmetro') {\n                            if ((stnInfo as any).transfer.info.flat().length > 0) type = StationType.ShmetroInt;\n                            else type = StationType.ShmetroBasic2020;\n                        } else if (param.style === 'gzmtr' || param.style === 'mtr') {\n                            if ((stnInfo as any).transfer.info.flat().length > 0) type = StationType.GzmtrInt;\n                            else type = StationType.GzmtrBasic;\n                        }\n\n                        // read default attrs\n                        const attr = {\n                            // deep copy to prevent mutual reference\n                            ...JSON.parse(JSON.stringify(stations[type].defaultAttrs)),\n                            names: (stnInfo as any).name,\n                        };\n\n                        // add style specific attrs from RMG save\n                        if (type === StationType.ShmetroBasic2020)\n                            (attr as ShmetroBasic2020StationAttributes).color = theme;\n                        else if (type === StationType.GzmtrBasic) {\n                            (attr as GzmtrBasicStationAttributes).color = param.theme;\n                            (attr as GzmtrBasicStationAttributes).lineCode = param.line_num;\n                            (attr as GzmtrBasicStationAttributes).stationCode = (stnInfo as any).num;\n                        } else if (type === StationType.GzmtrInt) {\n                            const transfer = JSON.parse(\n                                JSON.stringify((stnInfo as any).transfer.info)\n                            ) as InterchangeInfo[][];\n                            // override line code and station code to default as they are not provided in RMG save\n                            transfer.forEach(lv1 =>\n                                lv1.forEach(transferInfo => {\n                                    transferInfo[4] = '1';\n                                    transferInfo[5] = '01';\n                                })\n                            );\n                            // add current line and station code to transfer[0][0]\n                            transfer[0].unshift([\n                                ...param.theme,\n                                param.line_num,\n                                (stnInfo as any).num,\n                            ] as unknown as InterchangeInfo);\n                            (attr as GzmtrIntStationAttributes).transfer = transfer;\n                        }\n\n                        graph.current.addNode(stnIdMap[id], {\n                            visible: true,\n                            zIndex: 0,\n                            x: 100 + i * 50,\n                            y: 1000,\n                            type,\n                            [type]: attr,\n                        });\n                    });\n\n                // import lines\n                Object.entries(stnList)\n                    .filter(([id, _]) => !['linestart', 'lineend'].includes(id))\n                    .forEach(([id, stnInfo]) => {\n                        (stnInfo as any).children\n                            .filter((child: string) => !['linestart', 'lineend'].includes(child))\n                            .forEach((child: string) => {\n                                graph.current.addDirectedEdgeWithKey(\n                                    `line_${nanoid(10)}`,\n                                    stnIdMap[id],\n                                    stnIdMap[child],\n                                    {\n                                        visible: true,\n                                        zIndex: 0,\n                                        color: theme,\n                                        type: LineType.Diagonal,\n                                        // deep copy to prevent mutual reference\n                                        [LineType.Diagonal]: JSON.parse(\n                                            JSON.stringify(lines[LineType.Diagonal].defaultAttrs)\n                                        ),\n                                        reconcileId: '',\n                                    }\n                                );\n                            });\n                    });\n\n                refreshAndSave();\n            } catch (err) {\n                // dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.unknownError') }));\n                console.error(\n                    'OpenActions.handleUploadRMG():: Unknown error occurred while parsing the uploaded file',\n                    err\n                );\n            }\n        }\n\n        // clear field for next upload\n        event.target.value = '';\n    };\n\n    const handleUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        console.log('OpenActions.handleUpload():: received file', file);\n\n        if (file?.type !== 'application/json') {\n            // dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.invalidType') }));\n            console.error('OpenActions.handleUpload():: Invalid file type! Only file in JSON format is accepted.');\n        } else {\n            try {\n                const paramStr = await readFileAsText(file);\n                const { version, ...save } = JSON.parse(upgrade(paramStr));\n\n                // details panel will complain unknown nodes or edges if last state is not cleared\n                dispatch(clearSelected());\n                graph.current.clear();\n                graph.current.import(save.graph);\n                const state: AppState = { ...save, graph: JSON.stringify(save.graph) };\n                dispatch(setFullState(state));\n\n                refreshAndSave();\n            } catch (err) {\n                // dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.unknownError') }));\n                console.error(\n                    'OpenActions.handleUpload():: Unknown error occurred while parsing the uploaded file',\n                    err\n                );\n            }\n        }\n\n        // clear field for next upload\n        event.target.value = '';\n    };\n\n    const handleOpenTemplates = async (rmpSave: RMPSave) => {\n        const { version, ...save } = rmpSave;\n\n        // details panel will complain unknown nodes or edges if last state is not cleared\n        dispatch(clearSelected());\n        graph.current.clear();\n        graph.current.import(save.graph);\n        const state: AppState = { ...save, graph: JSON.stringify(save.graph) };\n        dispatch(setFullState(state));\n\n        refreshAndSave();\n    };\n\n    return (\n        <Menu>\n            <MenuButton as={IconButton} size=\"sm\" variant=\"ghost\" icon={<MdUpload />} />\n            <MenuList>\n                <MenuItem icon={<MdNoteAdd />} onClick={handleNew}>\n                    {t('header.open.new')}\n                </MenuItem>\n\n                <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\".json\"\n                    hidden={true}\n                    onChange={handleUpload}\n                    data-testid=\"file-upload\"\n                />\n                <MenuItem icon={<MdUpload />} onClick={() => fileInputRef?.current?.click()}>\n                    {t('header.open.config')}\n                </MenuItem>\n\n                <input\n                    ref={fileRMGInputRef}\n                    type=\"file\"\n                    accept=\".json\"\n                    hidden={true}\n                    onChange={handleUploadRMG}\n                    data-testid=\"file-upload\"\n                />\n                <MenuItem icon={<MdUpload />} onClick={() => fileRMGInputRef?.current?.click()}>\n                    {t('header.open.configRMG')}\n                </MenuItem>\n\n                <MenuItem icon={<MdInsertDriveFile />} onClick={() => setIsGalleryModalOpen(true)}>\n                    {t('header.open.gallery')}\n                </MenuItem>\n                <GalleryModal\n                    isOpen={isGalleryModalOpen}\n                    handleOpenTemplates={handleOpenTemplates}\n                    onClose={() => setIsGalleryModalOpen(false)}\n                />\n            </MenuList>\n        </Menu>\n    );\n}\n\nconst readFileAsText = (file: File) => {\n    return new Promise((resolve: (text: string) => void) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.readAsText(file);\n    });\n};\n","import { useTranslation } from 'react-i18next';\nimport {\n    Icon,\n    Link,\n    ListItem,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalCloseButton,\n    ModalBody,\n    OrderedList,\n} from '@chakra-ui/react';\nimport { MdOpenInNew } from 'react-icons/md';\n\nconst TermsAndConditionsModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.download.termsAndConditions')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <OrderedList>\n                        <ListItem>\n                            The layout of the elements on the signage or rail map, is designed by{' '}\n                            <Link color=\"teal.500\" href=\"https://www.shmetro.com/\" isExternal={true}>\n                                Shanghai Shentong Metro Group <Icon as={MdOpenInNew} />\n                            </Link>\n                            {', '}\n                            <Link color=\"teal.500\" href=\"https://www.gzmtr.com/\" isExternal={true}>\n                                Guangzhou Metro Group <Icon as={MdOpenInNew} />\n                            </Link>\n                            {' or '}\n                            <Link color=\"teal.500\" href=\"https://www.mtr.com.hk/\" isExternal={true}>\n                                MTR Corporation <Icon as={MdOpenInNew} />\n                            </Link>\n                            , depending on your selection. You shall grant appropriate permit or license from the\n                            relevant company above before using the generated images for commercial purposes, if it is\n                            required to do so.\n                            <br />\n                            标志版或路线图的元素或布局，基于你所选择的风格，为\n                            <Link color=\"teal.500\" href=\"https://www.shmetro.com/\" isExternal={true}>\n                                上海申通地铁集团 <Icon as={MdOpenInNew} />\n                            </Link>\n                            ，\n                            <Link color=\"teal.500\" href=\"https://www.gzmtr.com/\" isExternal={true}>\n                                广州地铁集团公司 <Icon as={MdOpenInNew} />\n                            </Link>\n                            或\n                            <Link color=\"teal.500\" href=\"https://www.mtr.com.hk/\" isExternal={true}>\n                                港铁公司 <Icon as={MdOpenInNew} />\n                            </Link>\n                            所设计。在产生的图像用作商业用途前，你应向相关公司取得适当之许可证或授权。\n                        </ListItem>\n                        <ListItem>\n                            The elements including shapes and lines on the image are drawn by{' '}\n                            <Link color=\"teal.500\" href=\"https://www.github.com/thekingofcity\" isExternal={true}>\n                                thekingofcity <Icon as={MdOpenInNew} />\n                            </Link>\n                            {' and '}\n                            <Link color=\"teal.500\" href=\"https://www.github.com/wongchito\" isExternal={true}>\n                                Chito Wong <Icon as={MdOpenInNew} />\n                            </Link>\n                            , based on the design standards or rules of the companies listed above. You may use them for\n                            any purposes, but it is recommended to state the name and the link of software alongside.\n                            <br />\n                            图像的元素，包括图形及线条，均由\n                            <Link color=\"teal.500\" href=\"https://www.github.com/thekingofcity\" isExternal={true}>\n                                thekingofcity <Icon as={MdOpenInNew} />\n                            </Link>\n                            及\n                            <Link color=\"teal.500\" href=\"https://www.github.com/wongchito\" isExternal={true}>\n                                Chito Wong <Icon as={MdOpenInNew} />\n                            </Link>\n                            基于上述公司设计标准或准则绘制。你可将其用于任何目的，但我们建议你于使用同时附以我们的名字以及本网站地址。\n                        </ListItem>\n                        <ListItem>\n                            Due to copyright, licensing and other legal restrictions, Rail Map Painter uses{' '}\n                            <Link color=\"teal.500\" href=\"https://github.com/ButTaiwan/genyo-font\" isExternal={true}>\n                                GenYoMin provided by ButTaiwan <Icon as={MdOpenInNew} />\n                            </Link>\n                            , and Vegur instead of MTRSung and Myriad Pro respectively to display and generate MTR-style\n                            signage. You shall grant appropriate permit or license from the manufacturers before using\n                            those generated images for commercial purposes.\n                            <br />\n                            由于著作权及其他法律限制，铁路路线图绘制器使用由\n                            <Link color=\"teal.500\" href=\"https://github.com/ButTaiwan/genyo-font\" isExternal={true}>\n                                ButTaiwan提供的源樣明體 <Icon as={MdOpenInNew} />\n                            </Link>\n                            ，以及Vegur，以代替港铁样式标志牌所使用的地铁宋及Myriad\n                            Pro。在产生之图像用作商业用途前，你应向字型生产厂商取得适当之许可证或授权。\n                        </ListItem>\n                        <ListItem>\n                            The exported images in PNG or SVG format may be modified, published, or used for other\n                            purposes except commercial use, under the conditions above.\n                            <br />\n                            输出的PNG或SVG图像可基于上述条款，在非商业使用时，用于修改、发行或其他用途。\n                        </ListItem>\n                        <ListItem>\n                            All flag emojis shown on Windows platforms are designed by{' '}\n                            <Link color=\"teal.500\" href=\"https://openmoji.org/\" isExternal={true}>\n                                OpenMoji <Icon as={MdOpenInNew} />\n                            </Link>{' '}\n                            – the open-source emoji and icon project. License:\n                            <Link\n                                color=\"teal.500\"\n                                href=\"https://creativecommons.org/licenses/by-sa/4.0/\"\n                                isExternal={true}\n                            >\n                                CC BY-SA 4.0 <Icon as={MdOpenInNew} />\n                            </Link>\n                            <br />\n                            于Windows作业系统上显示的国旗Emoji为\n                            <Link color=\"teal.500\" href=\"https://openmoji.org/\" isExternal={true}>\n                                OpenMoji <Icon as={MdOpenInNew} />\n                            </Link>\n                            所设计。许可证：\n                            <Link\n                                color=\"teal.500\"\n                                href=\"https://creativecommons.org/licenses/by-sa/4.0/\"\n                                isExternal={true}\n                            >\n                                CC BY-SA 4.0 <Icon as={MdOpenInNew} />\n                            </Link>\n                        </ListItem>\n                        <ListItem>\n                            We reserve the rights, without prior notice, to modify, add, or remove these terms. The\n                            Chinese translation is for reference only. In case of any discrepancy between the English\n                            version and the Chinese version, the English version shall prevail.\n                            <br />\n                            我们保留修改、新增或移除上述条款之权利，而无需另行通知。中文译本仅供参考，文义如与英文有歧异，概以英文本为准。\n                        </ListItem>\n                    </OrderedList>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default TermsAndConditionsModal;\n","import React from 'react';\nimport {\n    Button,\n    Checkbox,\n    HStack,\n    Icon,\n    IconButton,\n    Menu,\n    MenuButton,\n    MenuList,\n    MenuItem,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    Text,\n    Link,\n} from '@chakra-ui/react';\nimport { MdDownload, MdOpenInNew } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport store from '../../redux';\nimport { calculateCanvasSize } from '../../util/helpers';\nimport { stringifyParam } from '../../util/save';\nimport TermsAndConditionsModal from './terms-and-conditions';\n\nexport default function DownloadActions() {\n    const { t } = useTranslation();\n\n    const graph = React.useRef(window.graph);\n\n    const [format, setFormat] = React.useState('png' as 'png' | 'svg');\n    const formatOptions = {\n        png: t('header.download.png'),\n        svg: t('header.download.svg'),\n    };\n    const [scale, setScale] = React.useState(100);\n    const scaleOptions = Object.fromEntries(\n        [25, 33, 50, 67, 75, 80, 90, 100, 110, 125, 150, 175, 200, 250, 300, 400, 500].map(v => [v, `${v}%`])\n    );\n    const [isTransparent, setIsTransparent] = React.useState(false);\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('header.download.format'),\n            value: format,\n            options: formatOptions,\n            onChange: value => setFormat(value === 'png' ? 'png' : 'svg'),\n        },\n    ];\n    const pngFields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('header.download.scale'),\n            value: scale,\n            options: scaleOptions,\n            onChange: value => setScale(value as number),\n        },\n        {\n            type: 'switch',\n            label: t('header.download.transparent'),\n            isChecked: isTransparent,\n            onChange: setIsTransparent,\n        },\n    ];\n    const [isDownloadModalOpen, setIsDownloadModalOpen] = React.useState(false);\n    const [isTermsAndConditionsModalOpen, setIsTermsAndConditionsModalOpen] = React.useState(false);\n    const [isAttachSelected, setIsAttachSelected] = React.useState(false);\n    const [isTermsAndConditionsSelected, setIsTermsAndConditionsSelected] = React.useState(false);\n\n    const handleDownloadJson = () => {\n        const param = stringifyParam(store.getState().app);\n        downloadAs(`RMP_${new Date().valueOf()}.json`, 'application/json', param);\n    };\n    // thanks to this article that includes every steps in converting svg to png\n    // https://levelup.gitconnected.com/draw-an-svg-to-canvas-and-download-it-as-image-in-javascript-f7f7713cf81f\n    const handleDownload = () => {\n        setIsDownloadModalOpen(false);\n\n        // get the minimum and maximum of the graph\n        const { xMin, yMin, xMax, yMax } = calculateCanvasSize(graph.current);\n        const [width, height] = [xMax - xMin, yMax - yMin];\n\n        const elem = document.getElementById('canvas')!.cloneNode(true) as SVGSVGElement;\n        // remove virtual nodes\n        [...elem.children].filter(e => e.id.startsWith('misc_node_virtual')).forEach(e => elem.removeChild(e));\n        // append rmp info if user does not want to share rmp info\n        if (!isAttachSelected) elem.appendChild(generateRmpInfo(xMax - 600, yMax - 60));\n        // transform svg to contain all the nodes in the graph\n        // otherwise the later drawImage won't be able to display them all\n        elem.setAttribute('viewBox', `${xMin} ${yMin} ${width} ${height}`);\n        // Chrome will stretch the image if the following width and height are not set\n        elem.setAttribute('width', width.toString());\n        elem.setAttribute('height', height.toString());\n        // copy attributes from css to each elem in the new cloned svg\n        Object.entries({\n            '.rmp-name__zh': ['font-family'],\n            '.rmp-name__en': ['font-family'],\n            '.rmp-name-station': ['paint-order', 'stroke', 'stroke-width'],\n        }).forEach(([className, styleSet]) => {\n            const e = document.querySelector(className);\n            const style = window.getComputedStyle(e!);\n            elem.querySelectorAll(className).forEach(el => {\n                styleSet.forEach(styleName => {\n                    el.setAttribute(styleName, style.getPropertyValue(styleName));\n                });\n                el.removeAttribute('class');\n            });\n        });\n\n        if (format === 'svg') {\n            downloadAs(`RMP_${new Date().valueOf()}.svg`, 'image/svg+xml', elem.outerHTML);\n            return;\n        }\n\n        // append to document to render the svg\n        document.body.appendChild(elem);\n        // convert it to blob\n        const src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(elem.outerHTML)));\n        // release after use\n        document.body.removeChild(elem);\n\n        // create canvas to be drawn on\n        const canvas = document.createElement('canvas');\n        const [canvasWidth, canvasHeight] = [(width * scale) / 100, (height * scale) / 100];\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n        // white background\n        if (!isTransparent) {\n            ctx.fillStyle = '#fff';\n            ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n        }\n\n        const img = new Image();\n        img.onload = () => {\n            ctx.drawImage(img, 0, 0, canvasWidth, canvasHeight);\n            canvas.toBlob(blob => downloadBlobAs(`RMP_${new Date().valueOf()}.png`, blob!), 'image/png');\n        };\n        img.src = src; // draw src on canvas\n    };\n\n    return (\n        <Menu>\n            <MenuButton as={IconButton} size=\"sm\" variant=\"ghost\" icon={<MdDownload />} />\n            <MenuList>\n                <MenuItem onClick={handleDownloadJson}>{t('header.download.config')}</MenuItem>\n                <MenuItem onClick={() => setIsDownloadModalOpen(true)}>{t('header.download.image')}</MenuItem>\n            </MenuList>\n\n            <Modal size=\"xl\" isOpen={isDownloadModalOpen} onClose={() => setIsDownloadModalOpen(false)}>\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>{t('header.download.image')}</ModalHeader>\n                    <ModalCloseButton />\n\n                    <ModalBody>\n                        <RmgFields fields={fields} />\n                        {format === 'png' && <RmgFields fields={pngFields} />}\n                        <br />\n                        <Checkbox isChecked={isAttachSelected} onChange={e => setIsAttachSelected(e.target.checked)}>\n                            <Text>\n                                {t('header.download.shareInfo1')}\n                                <Link\n                                    color=\"teal.500\"\n                                    onClick={() => window.open('https://railmapgen.github.io/rmp', '_blank')}\n                                >\n                                    {t('header.about.rmp')} <Icon as={MdOpenInNew} />\n                                </Link>\n                                {t('header.download.shareInfo2')}\n                            </Text>\n                        </Checkbox>\n                        <Checkbox\n                            isChecked={isTermsAndConditionsSelected}\n                            onChange={e => setIsTermsAndConditionsSelected(e.target.checked)}\n                        >\n                            <Text>\n                                {t('header.download.termsAndConditionsInfo')}\n                                <Link color=\"teal.500\" onClick={() => setIsTermsAndConditionsModalOpen(true)}>\n                                    {t('header.download.termsAndConditions')} <Icon as={MdOpenInNew} />\n                                </Link>\n                                {t('header.download.period')}\n                            </Text>\n                        </Checkbox>\n                    </ModalBody>\n\n                    <ModalFooter>\n                        <HStack>\n                            <Button\n                                colorScheme=\"teal\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                disabled={!isTermsAndConditionsSelected}\n                                onClick={handleDownload}\n                            >\n                                {t('header.download.confirm')}\n                            </Button>\n                        </HStack>\n                    </ModalFooter>\n\n                    <TermsAndConditionsModal\n                        isOpen={isTermsAndConditionsModalOpen}\n                        onClose={() => setIsTermsAndConditionsModalOpen(false)}\n                    />\n                </ModalContent>\n            </Modal>\n        </Menu>\n    );\n}\n\nconst downloadAs = (filename: string, type: string, data: any) => {\n    const blob = new Blob([data], { type });\n    downloadBlobAs(filename, blob);\n};\n\nconst downloadBlobAs = (filename: string, blob: Blob) => {\n    const url = window.URL.createObjectURL(blob);\n\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n};\n\nconst generateRmpInfo = (x: number, y: number) => {\n    const info = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    info.setAttribute('transform', `translate(${x}, ${y})scale(2)`);\n\n    const logo = document.createElementNS('http://www.w3.org/2000/svg', 'image');\n    // FIXME: return after image is loaded\n    // logo.setAttribute('href', 'https://uat-railmapgen.github.io/rmp/logo192.png');\n    // logo.setAttribute('href', logoImg);\n    logo.setAttribute('width', '40');\n    logo.setAttribute('height', '40');\n    logo.setAttribute('x', '-50');\n    logo.setAttribute('y', '-20');\n\n    const rmp = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    rmp.setAttribute('font-size', '20');\n    rmp.appendChild(document.createTextNode('Rail Map Painter'));\n\n    const link = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    link.setAttribute('y', '15');\n    link.appendChild(document.createTextNode('https://railmapgen.github.io/rmp/'));\n\n    info.appendChild(logo);\n    info.appendChild(rmp);\n    info.appendChild(link);\n\n    return info;\n};\n","import rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Avatar,\n    Box,\n    Flex,\n    Heading,\n    Image,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    Tag,\n    TagLabel,\n    Text,\n    VStack,\n} from '@chakra-ui/react';\n\nconst AboutModal = (props: { isOpen: boolean; onClose: () => void }) => {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n    const appVersion = rmgRuntime.getAppVersion();\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('header.about.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody paddingBottom={10}>\n                    <Flex direction=\"row\">\n                        <Image boxSize=\"128px\" src={process.env.PUBLIC_URL + '/logo192.png'} />\n                        <Flex direction=\"column\" width=\"100%\" alignItems=\"center\" justifyContent=\"center\">\n                            <Text fontSize=\"xl\" as=\"b\">\n                                {t('header.about.rmp')}\n                            </Text>\n                            <Text>{appVersion}</Text>\n                            <Text> </Text>\n                            <Text fontSize=\"sm\">{t('header.about.railmapgen')}</Text>\n                        </Flex>\n                    </Flex>\n\n                    <Box margin={5}>\n                        <Text fontSize=\"xl\">{t('header.about.desc')}</Text>\n                    </Box>\n\n                    <Heading as=\"h5\" size=\"sm\" mt={3} mb={2}>\n                        {t('header.about.contributors')}\n                    </Heading>\n\n                    <Heading as=\"h6\" size=\"xs\" my={2}>\n                        {t('header.about.coreContributors')}\n                    </Heading>\n\n                    <VStack>\n                        <Tag\n                            size=\"lg\"\n                            minW=\"80%\"\n                            onClick={() => window.open('https://github.com/thekingofcity', '_blank')}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src=\"https://github.com/thekingofcity.png\" size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel>\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    thekingofcity\n                                </Text>\n                                <Text fontSize=\"sm\">{t('header.about.content1')}</Text>\n                                <Text fontSize=\"sm\" align=\"right\">\n                                    {t('header.about.content2')}\n                                </Text>\n                            </TagLabel>\n                        </Tag>\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default AboutModal;\n","import React from 'react';\nimport { IconButton, Popover, PopoverBody, PopoverContent, PopoverTrigger } from '@chakra-ui/react';\nimport { MdZoomOut, MdZoomIn } from 'react-icons/md';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootSelector, useRootDispatch } from '../../redux/index';\nimport { setSvgViewBoxZoom } from '../../redux/app/app-slice';\n\n/**\n * A zoom control displayed in popover component.\n * This will greatly decrease the width of the header in mobile device.\n */\nexport const ZoomPopover = () => {\n    const [isOpen, setIsOpen] = React.useState(false);\n\n    const { svgViewBoxZoom } = useRootSelector(state => state.app);\n    const dispatch = useRootDispatch();\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'slider',\n            label: '',\n            value: 400 - svgViewBoxZoom,\n            min: 10,\n            max: 390,\n            step: 10,\n            onChange: value => dispatch(setSvgViewBoxZoom(400 - value)),\n            leftIcon: <MdZoomOut />,\n            rightIcon: <MdZoomIn />,\n            minW: 160,\n        },\n    ];\n\n    return (\n        <Popover isOpen={isOpen} onOpen={() => setIsOpen(true)} onClose={() => setIsOpen(false)}>\n            <PopoverTrigger>\n                <IconButton\n                    aria-label=\"zoom\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    icon={<MdZoomOut />}\n                    onClick={() => setIsOpen(!isOpen)}\n                />\n            </PopoverTrigger>\n            <PopoverContent>\n                <PopoverBody>\n                    <RmgFields fields={fields} noLabel />\n                </PopoverBody>\n            </PopoverContent>\n        </Popover>\n    );\n};\n","import React from 'react';\nimport { Heading, HStack, IconButton, Menu, MenuButton, MenuItem, MenuList } from '@chakra-ui/react';\nimport { MdHelp, MdTranslate } from 'react-icons/md';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { RmgEnvBadge, RmgWindowHeader } from '@railmapgen/rmg-components';\nimport { LanguageCode } from '@railmapgen/rmg-translate';\nimport rmgRuntime, { RmgEnv } from '@railmapgen/rmg-runtime';\nimport OpenActions from './open-actions';\nimport DownloadActions from './download-actions';\nimport AboutModal from './about';\nimport { ZoomPopover } from './zoom-popover';\n\nexport default function WindowHeader() {\n    const { t, i18n } = useTranslation();\n\n    const [isAboutModalOpen, setIsAboutModalOpen] = React.useState(false);\n\n    const environment = rmgRuntime.getEnv();\n    const appVersion = rmgRuntime.getAppVersion();\n\n    const handleChangeLanguage = async (language: LanguageCode) => {\n        rmgRuntime.setLanguage(language);\n        const t = await i18n.changeLanguage(language);\n        document.documentElement.lang = language;\n        document.title = t('header.about.rmp');\n    };\n\n    return (\n        <RmgWindowHeader>\n            <Heading as=\"h4\" size=\"md\" whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">\n                {t('header.about.rmp')}\n            </Heading>\n            <RmgEnvBadge\n                environment={environment}\n                version={appVersion}\n                popoverHeader={\n                    environment === RmgEnv.PRD ? undefined : (\n                        <Trans i18nKey=\"header.popoverHeader\" environment={environment}>\n                            You're on {{ environment }} environment!\n                        </Trans>\n                    )\n                }\n                popoverBody={\n                    environment === RmgEnv.PRD ? undefined : (\n                        <Trans i18nKey=\"header.popoverBody\">\n                            This is a testing environment where we test the latest beta RMP.\n                        </Trans>\n                    )\n                }\n            />\n\n            <HStack ml=\"auto\">\n                <ZoomPopover />\n\n                <OpenActions />\n\n                <DownloadActions />\n\n                <Menu>\n                    <MenuButton as={IconButton} icon={<MdTranslate />} variant=\"ghost\" size=\"sm\" />\n                    <MenuList>\n                        <MenuItem onClick={() => handleChangeLanguage(LanguageCode.English)}>English</MenuItem>\n                        <MenuItem onClick={() => handleChangeLanguage(LanguageCode.ChineseSimp)}>简体中文</MenuItem>\n                        <MenuItem onClick={() => handleChangeLanguage(LanguageCode.ChineseTrad)}>繁體中文</MenuItem>\n                    </MenuList>\n                </Menu>\n\n                <IconButton\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    aria-label=\"Help\"\n                    icon={<MdHelp />}\n                    onClick={() => setIsAboutModalOpen(true)}\n                />\n            </HStack>\n\n            <AboutModal isOpen={isAboutModalOpen} onClose={() => setIsAboutModalOpen(false)} />\n        </RmgWindowHeader>\n    );\n}\n","import { MultiDirectedGraph } from 'graphology';\nimport { NodeAttributes, EdgeAttributes, GraphAttributes } from '../constants/constants';\n\nexport const getMousePosition = (e: React.MouseEvent) => {\n    const bbox = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - bbox.left;\n    const y = e.clientY - bbox.top;\n    // console.log(e.clientX, bbox.left, e.clientY, bbox.top, x, y);\n    return { x, y };\n};\n\nexport const roundToNearestN = (x: number, n: number) => Math.round(x / n) * n;\n\nexport const calculateCanvasSize = (graph: MultiDirectedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>) => {\n    let [xMin, yMin, xMax, yMax] = [Number.MAX_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MIN_VALUE];\n\n    graph.forEachNode((node, attr) => {\n        xMin = Math.min(attr.x, xMin);\n        yMin = Math.min(attr.y, yMin);\n        xMax = Math.max(attr.x, xMax);\n        yMax = Math.max(attr.y, yMax);\n    });\n\n    xMin -= 150;\n    yMin -= 150;\n    xMax += 150;\n    yMax += 150;\n\n    return { xMin, yMin, xMax, yMax };\n};\n"],"names":["GalleryModal","props","isOpen","handleOpenTemplates","onClose","t","useTranslation","minWidth","onClick","RMP_Shanghai","RMP_Beijing","RMP_Santiago","OpenActions","dispatch","useRootDispatch","graph","React","window","fileRMGInputRef","fileInputRef","isGalleryModalOpen","setIsGalleryModalOpen","refreshAndSave","setRefresh","saveGraph","current","export","handleUploadRMG","event","file","target","files","console","log","type","error","readFileAsText","paramStr","param","JSON","parse","stnList","stn_list","theme","stnIdMap","Object","fromEntries","keys","filter","id","includes","map","nanoid","entries","forEach","stnInfo","nodes","filterNodes","node","attr","values","StationType","names","name","length","i","style","transfer","info","flat","stringify","stations","defaultAttrs","color","lineCode","line_num","stationCode","num","lv1","transferInfo","unshift","addNode","visible","zIndex","x","y","children","child","addDirectedEdgeWithKey","LineType","lines","value","handleUpload","upgrade","version","save","clearSelected","clear","import","state","setFullState","rmpSave","as","IconButton","size","variant","icon","svgViewBoxZoom","svgViewBoxMin","ref","accept","hidden","onChange","click","Promise","resolve","reader","FileReader","onloadend","result","readAsText","scrollBehavior","href","isExternal","MdOpenInNew","DownloadActions","format","setFormat","formatOptions","png","svg","scale","setScale","scaleOptions","v","isTransparent","setIsTransparent","fields","label","options","pngFields","isChecked","isDownloadModalOpen","setIsDownloadModalOpen","isTermsAndConditionsModalOpen","setIsTermsAndConditionsModalOpen","isAttachSelected","setIsAttachSelected","isTermsAndConditionsSelected","setIsTermsAndConditionsSelected","stringifyParam","store","app","downloadAs","Date","valueOf","e","checked","open","colorScheme","disabled","calculateCanvasSize","xMin","yMin","xMax","yMax","width","height","elem","document","getElementById","cloneNode","startsWith","removeChild","appendChild","generateRmpInfo","setAttribute","toString","className","styleSet","querySelector","getComputedStyle","querySelectorAll","el","styleName","getPropertyValue","removeAttribute","body","src","btoa","unescape","encodeURIComponent","outerHTML","canvas","createElement","canvasWidth","canvasHeight","ctx","getContext","fillStyle","fillRect","img","Image","onload","drawImage","toBlob","blob","downloadBlobAs","filename","data","Blob","url","URL","createObjectURL","a","download","revokeObjectURL","createElementNS","logo","rmp","createTextNode","link","appVersion","rmgRuntime","paddingBottom","direction","boxSize","process","alignItems","justifyContent","fontSize","margin","mt","mb","my","minW","cursor","ml","mr","fontWeight","align","ZoomPopover","setIsOpen","useRootSelector","min","max","step","setSvgViewBoxZoom","leftIcon","rightIcon","onOpen","noLabel","WindowHeader","i18n","isAboutModalOpen","setIsAboutModalOpen","environment","handleChangeLanguage","language","changeLanguage","documentElement","lang","title","whiteSpace","overflow","textOverflow","popoverHeader","RmgEnv","undefined","Trans","i18nKey","popoverBody","LanguageCode","getMousePosition","bbox","currentTarget","getBoundingClientRect","clientX","left","clientY","top","roundToNearestN","n","Math","round","Number","MAX_VALUE","MIN_VALUE","forEachNode"],"sourceRoot":""}