{"version":3,"file":"static/js/TicketView.51f78df5.chunk.js","mappings":"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","sources":["components/ticket-view/multi-lang-entry-card.tsx","components/ticket-view/country-section.tsx","components/ticket-view/city-section.tsx","components/ticket-view/lines-section.tsx","components/modal/submit-modal.tsx","components/ticket-view/ticket-view.tsx"],"sourcesContent":["import { RmgCard, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport React from 'react';\nimport { Box, HStack, IconButton } from '@chakra-ui/react';\nimport { LanguageCode } from '@railmapgen/rmg-palette-resources';\nimport { MdAdd, MdDelete } from 'react-icons/md';\nimport { EntityId, EntityState } from '@reduxjs/toolkit';\nimport { TranslationEntity, translationEntityAdapter, translationEntitySelector } from '../../redux/ticket/util';\n\ninterface MultiLangEntryCardProps {\n    entries?: EntityState<TranslationEntity>;\n    onUpdate: (id: EntityId, changes: Partial<TranslationEntity>) => void;\n    onAdd: (lang: LanguageCode) => void;\n    onRemove: (id: EntityId) => void;\n}\n\nexport default function MultiLangEntryCard(props: MultiLangEntryCardProps) {\n    const { onUpdate, onAdd, onRemove } = props;\n    const entries = props.entries ?? translationEntityAdapter.getInitialState();\n\n    const getFields = (id: EntityId): RmgFieldsField[] => {\n        const entity = translationEntitySelector.selectById(entries, id);\n\n        if (!entity) {\n            return [];\n        }\n\n        const { lang, name } = entity;\n        const languageOptions = Object.entries(LanguageCode).reduce<Record<string, string>>((acc, cur) => {\n            if (cur[1] !== lang && cur[1] in entries) {\n                return acc;\n            } else {\n                return { ...acc, [cur[1]]: cur[0] };\n            }\n        }, {});\n\n        return [\n            {\n                type: 'select',\n                label: 'Language',\n                value: lang,\n                options: languageOptions,\n                onChange: value => onUpdate(id, { lang: value as LanguageCode }),\n            },\n            {\n                type: 'input',\n                label: 'Name',\n                value: name,\n                onChange: value => onUpdate(id, { name: value }),\n                validator: value => value !== '',\n            },\n        ];\n    };\n\n    const handleAddEntry = () => {\n        const lang = Object.values(LanguageCode).filter(\n            l => !Object.values(entries.entities).find(entity => entity?.lang === l)\n        )[0];\n        onAdd(lang);\n    };\n\n    return (\n        <RmgCard direction=\"column\">\n            {translationEntitySelector.selectIds(entries).map((id, i) => (\n                <HStack key={id} sx={{ '& > div:first-of-type': { flex: 1 } }} data-testid={'entry-card-stack-' + id}>\n                    <RmgFields fields={getFields(id)} noLabel={i > 0} />\n\n                    {i === entries.ids.length - 1 ? (\n                        <IconButton\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            aria-label=\"Add name in another language\"\n                            onClick={handleAddEntry}\n                            icon={<MdAdd />}\n                        />\n                    ) : (\n                        <Box minW={8} />\n                    )}\n\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label=\"Remove name\"\n                        onClick={() => onRemove(id)}\n                        icon={<MdDelete />}\n                    />\n                </HStack>\n            ))}\n        </RmgCard>\n    );\n}\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport MultiLangEntryCard from './multi-lang-entry-card';\nimport {\n    addCountryName,\n    removeCountryName,\n    setCountry,\n    setNewCountry,\n    updateCountryName,\n} from '../../redux/ticket/ticket-slice';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { CountryCode, countryList } from '@railmapgen/rmg-palette-resources';\n\nexport default function CountrySection() {\n    const dispatch = useRootDispatch();\n\n    const { country, newCountry, countryName } = useRootSelector(state => state.ticket);\n\n    const countryOptions = {\n        ...countryList.reduce<Record<string, string>>((acc, cur) => {\n            if (cur.id === CountryCode.UN) {\n                // exclude customise\n                return acc;\n            } else {\n                return { ...acc, [cur.id]: cur.name.en! };\n            }\n        }, {}),\n        new: 'Add a new country/region...',\n    };\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: 'Country/region',\n            value: country,\n            options: countryOptions,\n            onChange: value => dispatch(setCountry(value as CountryCode | 'new')),\n        },\n        {\n            type: 'input',\n            label: 'Country code',\n            placeholder: 'e.g. CN, HK, JP (ISO 3166-1 alpha-2)',\n            value: newCountry,\n            onChange: value => dispatch(setNewCountry(value)),\n            hidden: country !== 'new',\n        },\n    ];\n\n    return (\n        <Box as=\"section\">\n            <Heading as=\"h5\" size=\"sm\" mb={2}>\n                Country / Region\n            </Heading>\n\n            <RmgFields fields={fields} />\n            {country === 'new' && (\n                <MultiLangEntryCard\n                    entries={countryName}\n                    onUpdate={(id, changes) => dispatch(updateCountryName({ id, changes }))}\n                    onAdd={lang => dispatch(addCountryName(lang))}\n                    onRemove={id => dispatch(removeCountryName(id))}\n                />\n            )}\n        </Box>\n    );\n}\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport MultiLangEntryCard from './multi-lang-entry-card';\nimport { addCityName, removeCityName, setCity, updateCityName } from '../../redux/ticket/ticket-slice';\nimport { useRootDispatch, useRootSelector } from '../../redux';\n\nexport default function CitySection() {\n    const dispatch = useRootDispatch();\n\n    const { city, cityName } = useRootSelector(state => state.ticket);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: 'City code',\n            placeholder: 'e.g. hongkong, guangzhou, shanghai',\n            value: city,\n            onChange: value => dispatch(setCity(value)),\n            validator: value => value !== '' && !value.match(/[^a-z]/),\n        },\n    ];\n\n    return (\n        <Box as=\"section\">\n            <Heading as=\"h5\" size=\"sm\" mt={3} mb={2}>\n                City\n            </Heading>\n\n            <RmgFields fields={fields} />\n            <MultiLangEntryCard\n                entries={cityName}\n                onUpdate={(id, changes) => dispatch(updateCityName({ id, changes }))}\n                onAdd={lang => dispatch(addCityName(lang))}\n                onRemove={id => dispatch(removeCityName(id))}\n            />\n        </Box>\n    );\n}\n","import React, { useState } from 'react';\nimport { Box, Button, Flex, Heading, HStack, IconButton } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField, RmgLineBadge } from '@railmapgen/rmg-components';\nimport { LanguageCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport {\n    addLine,\n    addLineName,\n    copyLine,\n    removeLine,\n    removeLineName,\n    updateLineBgColour,\n    updateLineFgColour,\n    updateLineId,\n    updateLineName,\n} from '../../redux/ticket/ticket-slice';\nimport MultiLangEntryCard from './multi-lang-entry-card';\nimport { MdAdd, MdContentCopy, MdDelete, MdEdit } from 'react-icons/md';\nimport { ColourHex } from '../../util/constants';\nimport { translationEntitySelector } from '../../redux/ticket/util';\n\nexport default function LinesSection() {\n    const dispatch = useRootDispatch();\n\n    const lines = useRootSelector(state => state.ticket.lines);\n\n    const [selectedLine, setSelectedLine] = useState(Object.keys(lines)[0]);\n\n    const getFields = (entryId: string): RmgFieldsField[] => {\n        const line = lines[entryId];\n\n        if (!line) {\n            return [];\n        }\n\n        return [\n            {\n                type: 'input',\n                label: 'Line code',\n                placeholder: 'e.g. twl, gz1, sh1',\n                value: line.id,\n                onChange: value => dispatch(updateLineId({ entryId, lineId: value })),\n                validator: value => value !== '' && !value.match(/[^a-z0-9]/),\n            },\n            {\n                type: 'input',\n                label: 'Background colour',\n                variant: 'color',\n                value: line.colour,\n                onChange: value => dispatch(updateLineBgColour({ entryId, bgColour: value as ColourHex })),\n            },\n            {\n                type: 'select',\n                label: 'Foreground colour',\n                value: line.fg,\n                options: {\n                    [MonoColour.white]: 'White',\n                    [MonoColour.black]: 'Black',\n                },\n                onChange: value => dispatch(updateLineFgColour({ entryId, fgColour: value as MonoColour })),\n            },\n        ];\n    };\n\n    return (\n        <Box as=\"section\">\n            <Flex mt={3} mb={2} alignItems=\"center\">\n                <Heading as=\"h5\" size=\"sm\" mr=\"auto\">\n                    Lines\n                </Heading>\n\n                <Button size=\"xs\" variant=\"ghost\" leftIcon={<MdAdd />} mr={1} onClick={() => dispatch(addLine())}>\n                    Add line\n                </Button>\n            </Flex>\n\n            <HStack flexWrap=\"wrap\" sx={{ '& .chakra-badge': { mb: 1 } }}>\n                {Object.entries(lines).map(([entryId, line]) => {\n                    const enNameEntity = translationEntitySelector\n                        .selectAll(line.nameEntity)\n                        .find(entity => entity.lang === LanguageCode.English);\n                    return (\n                        <RmgLineBadge\n                            key={entryId}\n                            name={enNameEntity?.name ?? ''}\n                            bg={line.colour}\n                            fg={line.fg}\n                            actions={\n                                <>\n                                    <IconButton\n                                        size=\"xs\"\n                                        variant=\"ghost\"\n                                        color={line.fg}\n                                        aria-label={'Edit ' + enNameEntity}\n                                        icon={<MdEdit />}\n                                        onClick={() => setSelectedLine(entryId)}\n                                    />\n                                    <IconButton\n                                        size=\"xs\"\n                                        variant=\"ghost\"\n                                        color={line.fg}\n                                        aria-label={'Copy ' + enNameEntity}\n                                        icon={<MdContentCopy />}\n                                        onClick={() => dispatch(copyLine(entryId))}\n                                    />\n                                    <IconButton\n                                        size=\"xs\"\n                                        variant=\"ghost\"\n                                        color={line.fg}\n                                        aria-label={'Remove ' + enNameEntity}\n                                        icon={<MdDelete />}\n                                        onClick={() => dispatch(removeLine(entryId))}\n                                    />\n                                </>\n                            }\n                        />\n                    );\n                })}\n            </HStack>\n\n            <RmgFields fields={getFields(selectedLine)} />\n            <MultiLangEntryCard\n                entries={lines[selectedLine]?.nameEntity}\n                onUpdate={(id, changes) => dispatch(updateLineName({ entryId: selectedLine, id, changes }))}\n                onAdd={lang => dispatch(addLineName({ entryId: selectedLine, lang }))}\n                onRemove={id => dispatch(removeLineName({ entryId: selectedLine, id }))}\n            />\n        </Box>\n    );\n}\n","import {\n    Button,\n    Heading,\n    HStack,\n    Icon,\n    Link,\n    ListItem,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    OrderedList,\n    Text,\n    UnorderedList,\n} from '@chakra-ui/react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { getGitHubIssueCityBlock, getGitHubIssueLinesBlock, GITHUB_ISSUE_PREAMBLE } from '../../util/constants';\nimport { MdContentCopy, MdOpenInNew } from 'react-icons/md';\nimport { RmgDebouncedTextarea } from '@railmapgen/rmg-components';\nimport { useRootSelector } from '../../redux';\nimport { ticketSelectors } from '../../redux/ticket/ticket-slice';\n\ninterface SubmitModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function SubmitModal(props: SubmitModalProps) {\n    const { isOpen, onClose } = props;\n\n    const [countryErrors, setCountryErrors] = useState<string[]>([]);\n    const [cityErrors, setCityErrors] = useState<string[]>([]);\n    const [lineErrors, setLineErrors] = useState<Record<string, string[]>>({});\n    const [isIgnoreErrors, setIsIgnoreErrors] = useState(false);\n\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const ticket = useRootSelector(state => state.ticket);\n    const cityEntry = ticketSelectors.getCityEntry(ticket);\n    const paletteList = ticketSelectors.getPalettes(ticket);\n\n    useEffect(() => {\n        if (isOpen) {\n            setCountryErrors(ticketSelectors.getCountryErrors(ticket));\n            setCityErrors(ticketSelectors.getCityErrors(ticket));\n            setLineErrors(ticketSelectors.getLineErrors(ticket));\n        } else {\n            setIsIgnoreErrors(false);\n        }\n    }, [isOpen]);\n\n    const issueBody = [\n        '**Justification:** (Replace the content within these brackets, or we will not proceed your request.)',\n        GITHUB_ISSUE_PREAMBLE,\n        getGitHubIssueCityBlock(cityEntry),\n        getGitHubIssueLinesBlock(paletteList),\n    ].join('\\n\\n');\n\n    const fullSearchParams = new URLSearchParams({\n        template: 'new-palettes-request.md',\n        label: 'resources',\n        title: 'Resources: New palettes of ' + cityEntry?.name?.en,\n        body: issueBody,\n    });\n\n    const manualSearchParams = new URLSearchParams({\n        template: 'new-palettes-request.md',\n        label: 'resources',\n        title: 'Resources: New palettes of ' + cityEntry?.name?.en,\n    });\n\n    const handleCopy = async () => {\n        if (textareaRef?.current) {\n            textareaRef.current.select();\n            await navigator.clipboard.writeText(issueBody);\n        }\n    };\n\n    const isContainError =\n        countryErrors.length > 0 || cityErrors.length > 0 || Object.values(lineErrors).flat().length > 0;\n\n    return (\n        <Modal blockScrollOnMount={false} isOpen={isOpen} onClose={onClose} scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Submit palettes</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    {isContainError && (\n                        <Text>\n                            Your inputs contain the following errors. Please consider fixing it before submitting.\n                        </Text>\n                    )}\n\n                    {countryErrors.length > 0 && (\n                        <>\n                            <Heading as=\"h5\" size=\"sm\" my={2}>\n                                Country / Region\n                            </Heading>\n                            <UnorderedList aria-label=\"List of country errors\">\n                                {countryErrors.map((e, i) => (\n                                    <ListItem key={i}>{e}</ListItem>\n                                ))}\n                            </UnorderedList>\n                        </>\n                    )}\n\n                    {cityErrors.length > 0 && (\n                        <>\n                            <Heading as=\"h5\" size=\"sm\" my={2}>\n                                City\n                            </Heading>\n                            <UnorderedList aria-label=\"List of city errors\">\n                                {cityErrors.map((e, i) => (\n                                    <ListItem key={i}>{e}</ListItem>\n                                ))}\n                            </UnorderedList>\n                        </>\n                    )}\n\n                    {Object.values(lineErrors).flat().length > 0 && (\n                        <>\n                            <Heading as=\"h5\" size=\"sm\" my={2}>\n                                Lines\n                            </Heading>\n                            <UnorderedList aria-label=\"List of line errors\">\n                                {Object.entries(lineErrors).map(([item, errors]) => (\n                                    <ListItem key={item}>\n                                        {item}\n                                        <UnorderedList>\n                                            {errors.map((e, i) => (\n                                                <ListItem key={i}>{e}</ListItem>\n                                            ))}\n                                        </UnorderedList>\n                                    </ListItem>\n                                ))}\n                            </UnorderedList>\n                        </>\n                    )}\n\n                    {(!isContainError || isIgnoreErrors) && (\n                        <>\n                            <Text>If the button below doesn't work for you, please follow the instructions below:</Text>\n                            <OrderedList>\n                                <ListItem>\n                                    Open{' '}\n                                    <Link\n                                        color=\"teal.500\"\n                                        href={\n                                            'https://github.com/railmapgen/rmg-palette/issues/new?' +\n                                            manualSearchParams.toString()\n                                        }\n                                        isExternal={true}\n                                    >\n                                        Issue: New Palettes Request <Icon as={MdOpenInNew} />\n                                    </Link>\n                                    .\n                                </ListItem>\n                                <ListItem>\n                                    Paste following text to the issue body and add anything you want to say.{' '}\n                                    <Button size=\"xs\" leftIcon={<MdContentCopy />} onClick={handleCopy}>\n                                        Copy\n                                    </Button>\n                                    <RmgDebouncedTextarea\n                                        ref={textareaRef}\n                                        isReadOnly={true}\n                                        defaultValue={issueBody}\n                                        onClick={({ target }) => (target as HTMLTextAreaElement).select()}\n                                    />\n                                </ListItem>\n                            </OrderedList>\n                        </>\n                    )}\n                </ModalBody>\n\n                <ModalFooter>\n                    {!isIgnoreErrors && isContainError ? (\n                        <HStack>\n                            <Button onClick={() => setIsIgnoreErrors(true)}>Submit anyway</Button>\n                            <Button colorScheme=\"teal\" onClick={onClose}>\n                                Go back\n                            </Button>\n                        </HStack>\n                    ) : (\n                        <Button\n                            colorScheme=\"teal\"\n                            onClick={() =>\n                                window.open(\n                                    'https://github.com/railmapgen/rmg-palette/issues/new?' +\n                                        fullSearchParams.toString(),\n                                    '_blank'\n                                )\n                            }\n                        >\n                            1-click open issue\n                        </Button>\n                    )}\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import { Button, Flex, HStack } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport CountrySection from './country-section';\nimport CitySection from './city-section';\nimport LinesSection from './lines-section';\nimport { resetTicket } from '../../redux/ticket/ticket-slice';\nimport { useRootDispatch } from '../../redux';\nimport SubmitModal from '../modal/submit-modal';\nimport { useNavigate } from 'react-router-dom';\nimport { RmgPage } from '@railmapgen/rmg-components';\n\nexport default function TicketView() {\n    const dispatch = useRootDispatch();\n    const navigate = useNavigate();\n\n    const [isSubmitModalOpen, setIsSubmitModalOpen] = useState(false);\n\n    return (\n        <RmgPage\n            px={2}\n            pt={2}\n            sx={{\n                width: { base: '100%', md: 520 },\n            }}\n        >\n            <Flex direction=\"column\" flex={1} overflowY=\"auto\">\n                <CountrySection />\n                <CitySection />\n                <LinesSection />\n            </Flex>\n\n            <Flex my={2}>\n                <Button size=\"sm\" onClick={() => navigate('/')}>\n                    Go back\n                </Button>\n\n                <HStack ml=\"auto\">\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => dispatch(resetTicket())}>\n                        Reset\n                    </Button>\n                    <Button size=\"sm\" colorScheme=\"teal\" onClick={() => setIsSubmitModalOpen(true)}>\n                        Submit\n                    </Button>\n                </HStack>\n            </Flex>\n\n            <SubmitModal isOpen={isSubmitModalOpen} onClose={() => setIsSubmitModalOpen(false)} />\n        </RmgPage>\n    );\n}\n"],"names":["MultiLangEntryCard","props","onUpdate","onAdd","onRemove","entries","translationEntityAdapter","getFields","id","entity","translationEntitySelector","lang","name","languageOptions","Object","LanguageCode","reduce","acc","cur","type","label","value","options","onChange","validator","handleAddEntry","values","filter","l","entities","find","direction","map","i","sx","flex","fields","noLabel","ids","length","size","variant","onClick","icon","minW","CountrySection","dispatch","useRootDispatch","useRootSelector","state","ticket","country","newCountry","countryName","countryList","CountryCode","en","new","setCountry","placeholder","setNewCountry","hidden","as","mb","changes","updateCountryName","addCountryName","removeCountryName","CitySection","city","cityName","setCity","match","mt","updateCityName","addCityName","removeCityName","LinesSection","lines","useState","keys","selectedLine","setSelectedLine","alignItems","mr","leftIcon","addLine","flexWrap","entryId","line","enNameEntity","nameEntity","bg","colour","fg","actions","color","copyLine","removeLine","updateLineId","lineId","updateLineBgColour","bgColour","MonoColour","updateLineFgColour","fgColour","updateLineName","addLineName","removeLineName","SubmitModal","isOpen","onClose","countryErrors","setCountryErrors","cityErrors","setCityErrors","lineErrors","setLineErrors","isIgnoreErrors","setIsIgnoreErrors","textareaRef","useRef","cityEntry","ticketSelectors","paletteList","useEffect","issueBody","GITHUB_ISSUE_PREAMBLE","getGitHubIssueCityBlock","getGitHubIssueLinesBlock","join","fullSearchParams","URLSearchParams","template","title","body","manualSearchParams","handleCopy","current","select","navigator","clipboard","writeText","isContainError","flat","blockScrollOnMount","scrollBehavior","my","e","item","errors","href","toString","isExternal","MdOpenInNew","ref","isReadOnly","defaultValue","target","colorScheme","window","open","TicketView","navigate","useNavigate","isSubmitModalOpen","setIsSubmitModalOpen","px","pt","width","base","md","overflowY","ml","resetTicket"],"sourceRoot":""}