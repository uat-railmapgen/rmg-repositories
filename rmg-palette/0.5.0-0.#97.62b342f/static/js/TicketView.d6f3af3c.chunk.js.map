{"version":3,"file":"static/js/TicketView.d6f3af3c.chunk.js","mappings":"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","sources":["components/hooks/use-translated-name.tsx","components/ticket-view/multi-lang-entry-card.tsx","components/ticket-view/country-section.tsx","components/ticket-view/city-section.tsx","components/ticket-view/lines-section.tsx","components/modal/submit-modal.tsx","components/ticket-view/ticket-view.tsx"],"sourcesContent":["import { useTranslation } from 'react-i18next';\nimport { LanguageCode, Translation } from '@railmapgen/rmg-palette-resources';\n\nexport default function useTranslatedName(): (name: Translation) => string {\n    const { i18n } = useTranslation();\n\n    return (name: Translation) => {\n        return (\n            i18n.languages.map(lang => name[lang as LanguageCode]).find(name => name !== undefined) ??\n            name[LanguageCode.English] ??\n            '(Translation Error)'\n        );\n    };\n}\n","import { RmgCard, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport React from 'react';\nimport { Box, HStack, IconButton } from '@chakra-ui/react';\nimport { LanguageCode } from '@railmapgen/rmg-palette-resources';\nimport { MdAdd, MdDelete } from 'react-icons/md';\nimport { EntityId, EntityState } from '@reduxjs/toolkit';\nimport { TranslationEntity, translationEntityAdapter, translationEntitySelector } from '../../redux/ticket/util';\nimport { useTranslation } from 'react-i18next';\n\ninterface MultiLangEntryCardProps {\n    entries?: EntityState<TranslationEntity>;\n    onUpdate: (id: EntityId, changes: Partial<TranslationEntity>) => void;\n    onAdd: (lang: LanguageCode) => void;\n    onRemove: (id: EntityId) => void;\n}\n\nexport default function MultiLangEntryCard(props: MultiLangEntryCardProps) {\n    const { onUpdate, onAdd, onRemove } = props;\n    const entries = props.entries ?? translationEntityAdapter.getInitialState();\n\n    const { t } = useTranslation();\n\n    const getFields = (id: EntityId): RmgFieldsField[] => {\n        const entity = translationEntitySelector.selectById(entries, id);\n\n        if (!entity) {\n            return [];\n        }\n\n        const { lang, name } = entity;\n        const languageOptions = Object.entries(LanguageCode).reduce<Record<string, string>>((acc, cur) => {\n            if (cur[1] !== lang && cur[1] in entries) {\n                return acc;\n            } else {\n                return { ...acc, [cur[1]]: cur[0] };\n            }\n        }, {});\n\n        return [\n            {\n                type: 'select',\n                label: t('Language'),\n                value: lang,\n                options: languageOptions,\n                onChange: value => onUpdate(id, { lang: value as LanguageCode }),\n            },\n            {\n                type: 'input',\n                label: t('Name'),\n                value: name,\n                onChange: value => onUpdate(id, { name: value }),\n                validator: value => value !== '',\n            },\n        ];\n    };\n\n    const handleAddEntry = () => {\n        const lang = Object.values(LanguageCode).filter(\n            l => !Object.values(entries.entities).find(entity => entity?.lang === l)\n        )[0];\n        onAdd(lang);\n    };\n\n    return (\n        <RmgCard direction=\"column\">\n            {translationEntitySelector.selectIds(entries).map((id, i) => (\n                <HStack key={id} sx={{ '& > div:first-of-type': { flex: 1 } }} data-testid={'entry-card-stack-' + id}>\n                    <RmgFields fields={getFields(id)} noLabel={i > 0} />\n\n                    {i === entries.ids.length - 1 ? (\n                        <IconButton\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            aria-label={t('Add a name in another language')}\n                            title={t('Add a name in another language')}\n                            onClick={handleAddEntry}\n                            icon={<MdAdd />}\n                        />\n                    ) : (\n                        <Box minW={8} />\n                    )}\n\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label={t('Remove this name')}\n                        title={t('Remove this name')}\n                        onClick={() => onRemove(id)}\n                        icon={<MdDelete />}\n                    />\n                </HStack>\n            ))}\n        </RmgCard>\n    );\n}\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport MultiLangEntryCard from './multi-lang-entry-card';\nimport {\n    addCountryName,\n    removeCountryName,\n    setCountry,\n    setNewCountry,\n    updateCountryName,\n} from '../../redux/ticket/ticket-slice';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { CountryCode, countryList } from '@railmapgen/rmg-palette-resources';\nimport { useTranslation } from 'react-i18next';\nimport useTranslatedName from '../hooks/use-translated-name';\n\nexport default function CountrySection() {\n    const { t } = useTranslation();\n    const translateName = useTranslatedName();\n\n    const dispatch = useRootDispatch();\n\n    const { country, newCountry, countryName } = useRootSelector(state => state.ticket);\n\n    const countryOptions = {\n        ...countryList.reduce<Record<string, string>>((acc, cur) => {\n            if (cur.id === CountryCode.UN) {\n                // exclude customise\n                return acc;\n            } else {\n                return { ...acc, [cur.id]: translateName(cur.name) };\n            }\n        }, {}),\n        new: t('Add a country/region...'),\n    };\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('Country / Region'),\n            value: country,\n            options: countryOptions,\n            onChange: value => dispatch(setCountry(value as CountryCode | 'new')),\n        },\n        {\n            type: 'input',\n            label: t('Country/region code'),\n            placeholder: 'e.g. CN, HK, JP (ISO 3166-1 alpha-2)',\n            value: newCountry,\n            onChange: value => dispatch(setNewCountry(value)),\n            hidden: country !== 'new',\n        },\n    ];\n\n    return (\n        <Box as=\"section\">\n            <Heading as=\"h5\" size=\"sm\" mb={2}>\n                {t('Country / Region')}\n            </Heading>\n\n            <RmgFields fields={fields} />\n            {country === 'new' && (\n                <MultiLangEntryCard\n                    entries={countryName}\n                    onUpdate={(id, changes) => dispatch(updateCountryName({ id, changes }))}\n                    onAdd={lang => dispatch(addCountryName(lang))}\n                    onRemove={id => dispatch(removeCountryName(id))}\n                />\n            )}\n        </Box>\n    );\n}\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport MultiLangEntryCard from './multi-lang-entry-card';\nimport { addCityName, removeCityName, setCity, updateCityName } from '../../redux/ticket/ticket-slice';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { useTranslation } from 'react-i18next';\n\nexport default function CitySection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const { city, cityName } = useRootSelector(state => state.ticket);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('City code'),\n            placeholder: 'e.g. hongkong, guangzhou, shanghai',\n            value: city,\n            onChange: value => dispatch(setCity(value)),\n            validator: value => value !== '' && !value.match(/[^a-z]/),\n        },\n    ];\n\n    return (\n        <Box as=\"section\">\n            <Heading as=\"h5\" size=\"sm\" mt={3} mb={2}>\n                {t('City')}\n            </Heading>\n\n            <RmgFields fields={fields} />\n            <MultiLangEntryCard\n                entries={cityName}\n                onUpdate={(id, changes) => dispatch(updateCityName({ id, changes }))}\n                onAdd={lang => dispatch(addCityName(lang))}\n                onRemove={id => dispatch(removeCityName(id))}\n            />\n        </Box>\n    );\n}\n","import React, { useState } from 'react';\nimport { Box, Button, Flex, Heading, HStack, IconButton } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField, RmgLineBadge } from '@railmapgen/rmg-components';\nimport { MonoColour, Translation } from '@railmapgen/rmg-palette-resources';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport {\n    addLine,\n    addLineName,\n    copyLine,\n    removeLine,\n    removeLineName,\n    updateLineBgColour,\n    updateLineFgColour,\n    updateLineId,\n    updateLineName,\n} from '../../redux/ticket/ticket-slice';\nimport MultiLangEntryCard from './multi-lang-entry-card';\nimport { MdAdd, MdContentCopy, MdDelete, MdEdit } from 'react-icons/md';\nimport { ColourHex } from '../../util/constants';\nimport { translationEntitySelector } from '../../redux/ticket/util';\nimport { useTranslation } from 'react-i18next';\nimport useTranslatedName from '../hooks/use-translated-name';\n\nexport default function LinesSection() {\n    const { t } = useTranslation();\n    const translateName = useTranslatedName();\n    const dispatch = useRootDispatch();\n\n    const lines = useRootSelector(state => state.ticket.lines);\n\n    const [selectedLine, setSelectedLine] = useState(Object.keys(lines)[0]);\n\n    const getFields = (entryId: string): RmgFieldsField[] => {\n        const line = lines[entryId];\n\n        if (!line) {\n            return [];\n        }\n\n        return [\n            {\n                type: 'input',\n                label: t('Line code'),\n                placeholder: 'e.g. twl, gz1, sh1',\n                value: line.id,\n                onChange: value => dispatch(updateLineId({ entryId, lineId: value })),\n                validator: value => value !== '' && !value.match(/[^a-z0-9]/),\n            },\n            {\n                type: 'input',\n                label: t('Background colour'),\n                variant: 'color',\n                value: line.colour,\n                onChange: value => dispatch(updateLineBgColour({ entryId, bgColour: value as ColourHex })),\n            },\n            {\n                type: 'select',\n                label: t('Foreground colour'),\n                value: line.fg,\n                options: {\n                    [MonoColour.white]: t('White'),\n                    [MonoColour.black]: t('Black'),\n                },\n                onChange: value => dispatch(updateLineFgColour({ entryId, fgColour: value as MonoColour })),\n            },\n        ];\n    };\n\n    return (\n        <Box as=\"section\">\n            <Flex mt={3} mb={2} alignItems=\"center\">\n                <Heading as=\"h5\" size=\"sm\" mr=\"auto\">\n                    {t('Lines')}\n                </Heading>\n\n                <Button size=\"xs\" variant=\"ghost\" leftIcon={<MdAdd />} mr={1} onClick={() => dispatch(addLine())}>\n                    {t('Add a line')}\n                </Button>\n            </Flex>\n\n            <HStack flexWrap=\"wrap\" sx={{ '& .chakra-badge': { mb: 1 } }}>\n                {Object.entries(lines).map(([entryId, line]) => {\n                    const nameTranslation = translationEntitySelector\n                        .selectAll(line.nameEntity)\n                        .reduce<Translation>((acc, cur) => ({ ...acc, [cur.lang]: cur.name }), {});\n                    const nameToShow = translateName(nameTranslation);\n\n                    return (\n                        <RmgLineBadge\n                            key={entryId}\n                            name={nameToShow}\n                            bg={line.colour}\n                            fg={line.fg}\n                            actions={\n                                <>\n                                    <IconButton\n                                        size=\"xs\"\n                                        variant=\"ghost\"\n                                        color={line.fg}\n                                        aria-label={t('Edit') + ' ' + nameToShow}\n                                        title={t('Edit') + ' ' + nameToShow}\n                                        icon={<MdEdit />}\n                                        onClick={() => setSelectedLine(entryId)}\n                                    />\n                                    <IconButton\n                                        size=\"xs\"\n                                        variant=\"ghost\"\n                                        color={line.fg}\n                                        aria-label={t('Copy') + ' ' + nameToShow}\n                                        title={t('Copy') + ' ' + nameToShow}\n                                        icon={<MdContentCopy />}\n                                        onClick={() => dispatch(copyLine(entryId))}\n                                    />\n                                    <IconButton\n                                        size=\"xs\"\n                                        variant=\"ghost\"\n                                        color={line.fg}\n                                        aria-label={t('Remove') + ' ' + nameToShow}\n                                        title={t('Remove') + ' ' + nameToShow}\n                                        icon={<MdDelete />}\n                                        onClick={() => dispatch(removeLine(entryId))}\n                                    />\n                                </>\n                            }\n                        />\n                    );\n                })}\n            </HStack>\n\n            <RmgFields fields={getFields(selectedLine)} />\n            <MultiLangEntryCard\n                entries={lines[selectedLine]?.nameEntity}\n                onUpdate={(id, changes) => dispatch(updateLineName({ entryId: selectedLine, id, changes }))}\n                onAdd={lang => dispatch(addLineName({ entryId: selectedLine, lang }))}\n                onRemove={id => dispatch(removeLineName({ entryId: selectedLine, id }))}\n            />\n        </Box>\n    );\n}\n","import {\n    Button,\n    Heading,\n    HStack,\n    Icon,\n    Link,\n    ListItem,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    OrderedList,\n    Text,\n    UnorderedList,\n} from '@chakra-ui/react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport {\n    getGitHubIssueCityBlock,\n    getGitHubIssueLinesBlock,\n    GITHUB_ISSUE_PREAMBLE,\n    INVALID_REASON,\n    InvalidReasonType,\n} from '../../util/constants';\nimport { MdContentCopy, MdOpenInNew } from 'react-icons/md';\nimport { RmgDebouncedTextarea } from '@railmapgen/rmg-components';\nimport { useRootSelector } from '../../redux';\nimport { ticketSelectors } from '../../redux/ticket/ticket-slice';\nimport { useTranslation } from 'react-i18next';\nimport useTranslatedName from '../hooks/use-translated-name';\n\ninterface SubmitModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function SubmitModal(props: SubmitModalProps) {\n    const { isOpen, onClose } = props;\n\n    const { t } = useTranslation();\n    const translateName = useTranslatedName();\n\n    const [countryErrors, setCountryErrors] = useState<InvalidReasonType[]>([]);\n    const [cityErrors, setCityErrors] = useState<InvalidReasonType[]>([]);\n    const [lineErrors, setLineErrors] = useState<Record<string, InvalidReasonType[]>>({});\n    const [isIgnoreErrors, setIsIgnoreErrors] = useState(false);\n\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const ticket = useRootSelector(state => state.ticket);\n    const cityEntry = ticketSelectors.getCityEntry(ticket);\n    const paletteList = ticketSelectors.getPalettes(ticket);\n\n    useEffect(() => {\n        if (isOpen) {\n            setCountryErrors(ticketSelectors.getCountryErrors(ticket));\n            setCityErrors(ticketSelectors.getCityErrors(ticket));\n            setLineErrors(ticketSelectors.getLineErrors(ticket));\n        } else {\n            setIsIgnoreErrors(false);\n        }\n    }, [isOpen]);\n\n    const issueBody = [\n        '**Justification:** (Replace the content within these brackets, or we will not proceed your request.)',\n        GITHUB_ISSUE_PREAMBLE,\n        getGitHubIssueCityBlock(cityEntry),\n        getGitHubIssueLinesBlock(paletteList),\n    ].join('\\n\\n');\n\n    const fullSearchParams = new URLSearchParams({\n        template: 'new-palettes-request.md',\n        label: 'resources',\n        title: 'Resources: New palettes of ' + cityEntry?.name?.en,\n        body: issueBody,\n    });\n\n    const manualSearchParams = new URLSearchParams({\n        template: 'new-palettes-request.md',\n        label: 'resources',\n        title: 'Resources: New palettes of ' + cityEntry?.name?.en,\n    });\n\n    const handleCopy = async () => {\n        if (textareaRef?.current) {\n            textareaRef.current.select();\n            await navigator.clipboard.writeText(issueBody);\n        }\n    };\n\n    const isContainError =\n        countryErrors.length > 0 || cityErrors.length > 0 || Object.values(lineErrors).flat().length > 0;\n\n    return (\n        <Modal blockScrollOnMount={false} isOpen={isOpen} onClose={onClose} scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('Submit palettes')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    {isContainError && (\n                        <Text>\n                            {t(\n                                'Your inputs contain the following errors. Please consider fixing it before submitting.'\n                            )}\n                        </Text>\n                    )}\n\n                    {countryErrors.length > 0 && (\n                        <>\n                            <Heading as=\"h5\" size=\"sm\" my={2}>\n                                {t('Country / Region')}\n                            </Heading>\n                            <UnorderedList aria-label=\"List of country errors\">\n                                {countryErrors.map((e, i) => (\n                                    <ListItem key={i}>{translateName(INVALID_REASON[e])}</ListItem>\n                                ))}\n                            </UnorderedList>\n                        </>\n                    )}\n\n                    {cityErrors.length > 0 && (\n                        <>\n                            <Heading as=\"h5\" size=\"sm\" my={2}>\n                                {t('City')}\n                            </Heading>\n                            <UnorderedList aria-label=\"List of city errors\">\n                                {cityErrors.map((e, i) => (\n                                    <ListItem key={i}>{translateName(INVALID_REASON[e])}</ListItem>\n                                ))}\n                            </UnorderedList>\n                        </>\n                    )}\n\n                    {Object.values(lineErrors).flat().length > 0 && (\n                        <>\n                            <Heading as=\"h5\" size=\"sm\" my={2}>\n                                {t('Lines')}\n                            </Heading>\n                            <UnorderedList aria-label=\"List of line errors\">\n                                {Object.entries(lineErrors).map(([item, errors]) => (\n                                    <ListItem key={item}>\n                                        {item}\n                                        <UnorderedList>\n                                            {errors.map((e, i) => (\n                                                <ListItem key={i}>{translateName(INVALID_REASON[e])}</ListItem>\n                                            ))}\n                                        </UnorderedList>\n                                    </ListItem>\n                                ))}\n                            </UnorderedList>\n                        </>\n                    )}\n\n                    {(!isContainError || isIgnoreErrors) && (\n                        <>\n                            <Text>\n                                {t(\"If the button below doesn't work for you, please follow the instructions below:\")}\n                            </Text>\n                            <OrderedList>\n                                <ListItem>\n                                    {t('Open')}{' '}\n                                    <Link\n                                        color=\"teal.500\"\n                                        href={\n                                            'https://github.com/railmapgen/rmg-palette/issues/new?' +\n                                            manualSearchParams.toString()\n                                        }\n                                        isExternal={true}\n                                    >\n                                        Issue: New Palettes Request <Icon as={MdOpenInNew} />\n                                    </Link>\n                                </ListItem>\n                                <ListItem>\n                                    {t('Paste following text to the issue body and add anything you want to say.')}{' '}\n                                    <Button size=\"xs\" leftIcon={<MdContentCopy />} onClick={handleCopy}>\n                                        {t('Copy')}\n                                    </Button>\n                                    <RmgDebouncedTextarea\n                                        ref={textareaRef}\n                                        isReadOnly={true}\n                                        defaultValue={issueBody}\n                                        onClick={({ target }) => (target as HTMLTextAreaElement).select()}\n                                    />\n                                </ListItem>\n                            </OrderedList>\n                        </>\n                    )}\n                </ModalBody>\n\n                <ModalFooter>\n                    {!isIgnoreErrors && isContainError ? (\n                        <HStack>\n                            <Button onClick={() => setIsIgnoreErrors(true)}>{t('Submit anyway')}</Button>\n                            <Button colorScheme=\"teal\" onClick={onClose}>\n                                {t('Go back')}\n                            </Button>\n                        </HStack>\n                    ) : (\n                        <Button\n                            colorScheme=\"teal\"\n                            onClick={() =>\n                                window.open(\n                                    'https://github.com/railmapgen/rmg-palette/issues/new?' +\n                                        fullSearchParams.toString(),\n                                    '_blank'\n                                )\n                            }\n                        >\n                            {t('1-click open issue')}\n                        </Button>\n                    )}\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import { Button, Flex, HStack } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport CountrySection from './country-section';\nimport CitySection from './city-section';\nimport LinesSection from './lines-section';\nimport { resetTicket } from '../../redux/ticket/ticket-slice';\nimport { useRootDispatch } from '../../redux';\nimport SubmitModal from '../modal/submit-modal';\nimport { useNavigate } from 'react-router-dom';\nimport { RmgPage } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\nexport default function TicketView() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const navigate = useNavigate();\n\n    const [isSubmitModalOpen, setIsSubmitModalOpen] = useState(false);\n\n    return (\n        <RmgPage\n            px={2}\n            pt={2}\n            sx={{\n                width: { base: '100%', md: 520 },\n            }}\n        >\n            <Flex direction=\"column\" flex={1} overflowY=\"auto\">\n                <CountrySection />\n                <CitySection />\n                <LinesSection />\n            </Flex>\n\n            <Flex my={2}>\n                <Button size=\"sm\" onClick={() => navigate('/')}>\n                    {t('Go back')}\n                </Button>\n\n                <HStack ml=\"auto\">\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => dispatch(resetTicket())}>\n                        {t('Reset')}\n                    </Button>\n                    <Button size=\"sm\" colorScheme=\"teal\" onClick={() => setIsSubmitModalOpen(true)}>\n                        {t('Submit')}\n                    </Button>\n                </HStack>\n            </Flex>\n\n            <SubmitModal isOpen={isSubmitModalOpen} onClose={() => setIsSubmitModalOpen(false)} />\n        </RmgPage>\n    );\n}\n"],"names":["useTranslatedName","i18n","useTranslation","name","languages","map","lang","find","undefined","LanguageCode","MultiLangEntryCard","props","onUpdate","onAdd","onRemove","entries","translationEntityAdapter","t","getFields","id","entity","translationEntitySelector","languageOptions","Object","reduce","acc","cur","type","label","value","options","onChange","validator","handleAddEntry","values","filter","l","entities","direction","i","sx","flex","fields","noLabel","ids","length","size","variant","title","onClick","icon","minW","CountrySection","translateName","dispatch","useRootDispatch","useRootSelector","state","ticket","country","newCountry","countryName","countryOptions","countryList","CountryCode","new","setCountry","placeholder","setNewCountry","hidden","as","mb","changes","updateCountryName","addCountryName","removeCountryName","CitySection","city","cityName","setCity","match","mt","updateCityName","addCityName","removeCityName","LinesSection","lines","useState","keys","selectedLine","setSelectedLine","alignItems","mr","leftIcon","addLine","flexWrap","entryId","line","nameTranslation","nameEntity","nameToShow","bg","colour","fg","actions","color","copyLine","removeLine","updateLineId","lineId","updateLineBgColour","bgColour","MonoColour","updateLineFgColour","fgColour","updateLineName","addLineName","removeLineName","SubmitModal","isOpen","onClose","countryErrors","setCountryErrors","cityErrors","setCityErrors","lineErrors","setLineErrors","isIgnoreErrors","setIsIgnoreErrors","textareaRef","useRef","cityEntry","ticketSelectors","paletteList","useEffect","issueBody","GITHUB_ISSUE_PREAMBLE","getGitHubIssueCityBlock","getGitHubIssueLinesBlock","join","fullSearchParams","URLSearchParams","template","en","body","manualSearchParams","handleCopy","current","select","navigator","clipboard","writeText","isContainError","flat","blockScrollOnMount","scrollBehavior","my","e","INVALID_REASON","item","errors","href","toString","isExternal","MdOpenInNew","ref","isReadOnly","defaultValue","target","colorScheme","window","open","TicketView","navigate","useNavigate","isSubmitModalOpen","setIsSubmitModalOpen","px","pt","width","base","md","overflowY","ml","resetTicket"],"sourceRoot":""}