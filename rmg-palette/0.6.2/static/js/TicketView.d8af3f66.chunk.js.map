{"version":3,"file":"static/js/TicketView.d8af3f66.chunk.js","mappings":"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","sources":["components/hooks/use-translated-name.tsx","components/ticket-view/multi-lang-entry-card.tsx","components/ticket-view/country-section.tsx","components/ticket-view/city-section.tsx","components/ticket-view/lines-section.tsx","components/modal/submit-modal.tsx","components/ticket-view/ticket-view.tsx"],"sourcesContent":["import { useTranslation } from 'react-i18next';\nimport { LanguageCode, Translation } from '@railmapgen/rmg-palette-resources';\n\nexport default function useTranslatedName(): (name: Translation) => string {\n    const { i18n } = useTranslation();\n\n    return (name: Translation) => {\n        return (\n            i18n.languages.map(lang => name[lang as LanguageCode]).find(name => name !== undefined) ??\n            name[LanguageCode.English] ??\n            '(Translation Error)'\n        );\n    };\n}\n","import { RmgCard, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport React from 'react';\nimport { Box, HStack, IconButton } from '@chakra-ui/react';\nimport { LanguageCode } from '@railmapgen/rmg-palette-resources';\nimport { MdAdd, MdDelete } from 'react-icons/md';\nimport { EntityId, EntityState } from '@reduxjs/toolkit';\nimport { TranslationEntity, translationEntityAdapter, translationEntitySelector } from '../../redux/ticket/util';\nimport { useTranslation } from 'react-i18next';\n\ninterface MultiLangEntryCardProps {\n    entries?: EntityState<TranslationEntity>;\n    onUpdate: (id: EntityId, changes: Partial<TranslationEntity>) => void;\n    onAdd: (lang: LanguageCode) => void;\n    onRemove: (id: EntityId) => void;\n}\n\nexport default function MultiLangEntryCard(props: MultiLangEntryCardProps) {\n    const { onUpdate, onAdd, onRemove } = props;\n    const entries = props.entries ?? translationEntityAdapter.getInitialState();\n\n    const { t } = useTranslation();\n\n    const getFields = (id: EntityId): RmgFieldsField[] => {\n        const entity = translationEntitySelector.selectById(entries, id);\n\n        if (!entity) {\n            return [];\n        }\n\n        const { lang, name } = entity;\n        const languageOptions = Object.entries(LanguageCode).reduce<Record<string, string>>((acc, cur) => {\n            if (cur[1] !== lang && cur[1] in entries) {\n                return acc;\n            } else {\n                return { ...acc, [cur[1]]: cur[0] };\n            }\n        }, {});\n\n        return [\n            {\n                type: 'select',\n                label: t('Language'),\n                value: lang,\n                options: languageOptions,\n                onChange: value => onUpdate(id, { lang: value as LanguageCode }),\n            },\n            {\n                type: 'input',\n                label: t('Name'),\n                value: name,\n                onChange: value => onUpdate(id, { name: value }),\n                validator: value => value !== '',\n            },\n        ];\n    };\n\n    const handleAddEntry = () => {\n        const lang = Object.values(LanguageCode).filter(\n            l => !Object.values(entries.entities).find(entity => entity?.lang === l)\n        )[0];\n        onAdd(lang);\n    };\n\n    return (\n        <RmgCard direction=\"column\">\n            {translationEntitySelector.selectIds(entries).map((id, i) => (\n                <HStack key={id} sx={{ '& > div:first-of-type': { flex: 1 } }} data-testid={'entry-card-stack-' + id}>\n                    <RmgFields fields={getFields(id)} noLabel={i > 0} />\n\n                    {i === entries.ids.length - 1 ? (\n                        <IconButton\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            aria-label={t('Add a name in another language')}\n                            title={t('Add a name in another language')}\n                            onClick={handleAddEntry}\n                            icon={<MdAdd />}\n                        />\n                    ) : (\n                        <Box minW={8} />\n                    )}\n\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label={t('Remove this name')}\n                        title={t('Remove this name')}\n                        onClick={() => onRemove(id)}\n                        icon={<MdDelete />}\n                    />\n                </HStack>\n            ))}\n        </RmgCard>\n    );\n}\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport MultiLangEntryCard from './multi-lang-entry-card';\nimport {\n    addCountryName,\n    removeCountryName,\n    setCountry,\n    setNewCountry,\n    updateCountryName,\n} from '../../redux/ticket/ticket-slice';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { CountryCode, countryList } from '@railmapgen/rmg-palette-resources';\nimport { useTranslation } from 'react-i18next';\nimport useTranslatedName from '../hooks/use-translated-name';\n\nexport default function CountrySection() {\n    const { t, i18n } = useTranslation();\n    const translateName = useTranslatedName();\n\n    const dispatch = useRootDispatch();\n\n    const { country, newCountry, countryName } = useRootSelector(state => state.ticket);\n\n    const countryOptions = {\n        ...countryList\n            .map(country => [country.id, translateName(country.name)]) // translate country name\n            .sort((a, b) => a[1].localeCompare(b[1], i18n.languages[0])) // sort\n            .reduce<Record<string, string>>((acc, cur) => {\n                if (cur[0] === CountryCode.UN) {\n                    // exclude customise\n                    return acc;\n                } else {\n                    return { ...acc, [cur[0]]: cur[1] };\n                }\n            }, {}), // associate to obj\n        new: t('Add a country/region...'),\n    };\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('Country / Region'),\n            value: country,\n            options: countryOptions,\n            onChange: value => dispatch(setCountry(value as CountryCode | 'new')),\n        },\n        {\n            type: 'input',\n            label: t('Country/region code'),\n            placeholder: 'e.g. CN, HK, JP (ISO 3166-1 alpha-2)',\n            value: newCountry,\n            onChange: value => dispatch(setNewCountry(value)),\n            hidden: country !== 'new',\n        },\n    ];\n\n    return (\n        <Box as=\"section\">\n            <Heading as=\"h5\" size=\"sm\" mb={2}>\n                {t('Country / Region')}\n            </Heading>\n\n            <RmgFields fields={fields} />\n            {country === 'new' && (\n                <MultiLangEntryCard\n                    entries={countryName}\n                    onUpdate={(id, changes) => dispatch(updateCountryName({ id, changes }))}\n                    onAdd={lang => dispatch(addCountryName(lang))}\n                    onRemove={id => dispatch(removeCountryName(id))}\n                />\n            )}\n        </Box>\n    );\n}\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport MultiLangEntryCard from './multi-lang-entry-card';\nimport { addCityName, removeCityName, setCity, updateCityName } from '../../redux/ticket/ticket-slice';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { useTranslation } from 'react-i18next';\n\nexport default function CitySection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const { city, cityName } = useRootSelector(state => state.ticket);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('City code'),\n            placeholder: 'e.g. hongkong, guangzhou, shanghai',\n            value: city,\n            onChange: value => dispatch(setCity(value)),\n            validator: value => value !== '' && !value.match(/[^a-z]/),\n        },\n    ];\n\n    return (\n        <Box as=\"section\">\n            <Heading as=\"h5\" size=\"sm\" mt={3} mb={2}>\n                {t('City')}\n            </Heading>\n\n            <RmgFields fields={fields} />\n            <MultiLangEntryCard\n                entries={cityName}\n                onUpdate={(id, changes) => dispatch(updateCityName({ id, changes }))}\n                onAdd={lang => dispatch(addCityName(lang))}\n                onRemove={id => dispatch(removeCityName(id))}\n            />\n        </Box>\n    );\n}\n","import React, { useState } from 'react';\nimport { Box, Button, Flex, Heading, HStack, IconButton } from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField, RmgLineBadge } from '@railmapgen/rmg-components';\nimport { MonoColour, Translation } from '@railmapgen/rmg-palette-resources';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport {\n    addLine,\n    addLineName,\n    copyLine,\n    removeLine,\n    removeLineName,\n    updateLineBgColour,\n    updateLineFgColour,\n    updateLineId,\n    updateLineName,\n} from '../../redux/ticket/ticket-slice';\nimport MultiLangEntryCard from './multi-lang-entry-card';\nimport { MdAdd, MdContentCopy, MdDelete, MdEdit } from 'react-icons/md';\nimport { ColourHex } from '../../util/constants';\nimport { translationEntitySelector } from '../../redux/ticket/util';\nimport { useTranslation } from 'react-i18next';\nimport useTranslatedName from '../hooks/use-translated-name';\n\nexport default function LinesSection() {\n    const { t } = useTranslation();\n    const translateName = useTranslatedName();\n    const dispatch = useRootDispatch();\n\n    const lines = useRootSelector(state => state.ticket.lines);\n\n    const [selectedLine, setSelectedLine] = useState(Object.keys(lines)[0]);\n\n    const getFields = (entryId: string): RmgFieldsField[] => {\n        const line = lines[entryId];\n\n        if (!line) {\n            return [];\n        }\n\n        return [\n            {\n                type: 'input',\n                label: t('Line code'),\n                placeholder: 'e.g. twl, gz1, sh1',\n                value: line.id,\n                onChange: value => dispatch(updateLineId({ entryId, lineId: value })),\n                validator: value => value !== '' && !value.match(/[^a-z0-9]/),\n            },\n            {\n                type: 'input',\n                label: t('Background colour'),\n                variant: 'color',\n                value: line.colour,\n                onChange: value => dispatch(updateLineBgColour({ entryId, bgColour: value as ColourHex })),\n            },\n            {\n                type: 'select',\n                label: t('Foreground colour'),\n                value: line.fg,\n                options: {\n                    [MonoColour.white]: t('White'),\n                    [MonoColour.black]: t('Black'),\n                },\n                onChange: value => dispatch(updateLineFgColour({ entryId, fgColour: value as MonoColour })),\n            },\n        ];\n    };\n\n    return (\n        <Box as=\"section\">\n            <Flex mt={3} mb={2} alignItems=\"center\">\n                <Heading as=\"h5\" size=\"sm\" mr=\"auto\">\n                    {t('Lines')}\n                </Heading>\n\n                <Button size=\"xs\" variant=\"ghost\" leftIcon={<MdAdd />} mr={1} onClick={() => dispatch(addLine())}>\n                    {t('Add a line')}\n                </Button>\n            </Flex>\n\n            <HStack flexWrap=\"wrap\" sx={{ '& .chakra-badge': { mb: 1 } }}>\n                {Object.entries(lines).map(([entryId, line]) => {\n                    const nameTranslation = translationEntitySelector\n                        .selectAll(line.nameEntity)\n                        .reduce<Translation>((acc, cur) => ({ ...acc, [cur.lang]: cur.name }), {});\n                    const nameToShow = translateName(nameTranslation);\n\n                    return (\n                        <RmgLineBadge\n                            key={entryId}\n                            name={nameToShow}\n                            bg={line.colour}\n                            fg={line.fg}\n                            actions={\n                                <>\n                                    <IconButton\n                                        size=\"xs\"\n                                        variant=\"ghost\"\n                                        color={line.fg}\n                                        aria-label={t('Edit') + ' ' + nameToShow}\n                                        title={t('Edit') + ' ' + nameToShow}\n                                        icon={<MdEdit />}\n                                        onClick={() => setSelectedLine(entryId)}\n                                    />\n                                    <IconButton\n                                        size=\"xs\"\n                                        variant=\"ghost\"\n                                        color={line.fg}\n                                        aria-label={t('Copy') + ' ' + nameToShow}\n                                        title={t('Copy') + ' ' + nameToShow}\n                                        icon={<MdContentCopy />}\n                                        onClick={() => dispatch(copyLine(entryId))}\n                                    />\n                                    <IconButton\n                                        size=\"xs\"\n                                        variant=\"ghost\"\n                                        color={line.fg}\n                                        aria-label={t('Remove') + ' ' + nameToShow}\n                                        title={t('Remove') + ' ' + nameToShow}\n                                        icon={<MdDelete />}\n                                        onClick={() => dispatch(removeLine(entryId))}\n                                    />\n                                </>\n                            }\n                        />\n                    );\n                })}\n            </HStack>\n\n            <RmgFields fields={getFields(selectedLine)} />\n            <MultiLangEntryCard\n                entries={lines[selectedLine]?.nameEntity}\n                onUpdate={(id, changes) => dispatch(updateLineName({ entryId: selectedLine, id, changes }))}\n                onAdd={lang => dispatch(addLineName({ entryId: selectedLine, lang }))}\n                onRemove={id => dispatch(removeLineName({ entryId: selectedLine, id }))}\n            />\n        </Box>\n    );\n}\n","import {\n    Button,\n    Heading,\n    HStack,\n    Icon,\n    Link,\n    ListItem,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    OrderedList,\n    Text,\n    UnorderedList,\n} from '@chakra-ui/react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport {\n    getGitHubIssueDetailsBlock,\n    GITHUB_ISSUE_PREAMBLE,\n    INVALID_REASON,\n    InvalidReasonType,\n} from '../../util/constants';\nimport { MdContentCopy, MdOpenInNew } from 'react-icons/md';\nimport { RmgDebouncedTextarea } from '@railmapgen/rmg-components';\nimport { useRootSelector } from '../../redux';\nimport { ticketSelectors } from '../../redux/ticket/ticket-slice';\nimport { useTranslation } from 'react-i18next';\nimport useTranslatedName from '../hooks/use-translated-name';\n\ninterface SubmitModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function SubmitModal(props: SubmitModalProps) {\n    const { isOpen, onClose } = props;\n\n    const { t } = useTranslation();\n    const translateName = useTranslatedName();\n\n    const [countryErrors, setCountryErrors] = useState<InvalidReasonType[]>([]);\n    const [cityErrors, setCityErrors] = useState<InvalidReasonType[]>([]);\n    const [lineErrors, setLineErrors] = useState<Record<string, InvalidReasonType[]>>({});\n    const [isIgnoreErrors, setIsIgnoreErrors] = useState(false);\n\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const ticket = useRootSelector(state => state.ticket);\n    const countryEntry = ticketSelectors.getCountryEntry(ticket);\n    const cityEntry = ticketSelectors.getCityEntry(ticket);\n    const paletteList = ticketSelectors.getPalettes(ticket);\n\n    useEffect(() => {\n        if (isOpen) {\n            setCountryErrors(ticketSelectors.getCountryErrors(ticket));\n            setCityErrors(ticketSelectors.getCityErrors(ticket));\n            setLineErrors(ticketSelectors.getLineErrors(ticket));\n        } else {\n            setIsIgnoreErrors(false);\n        }\n    }, [isOpen]);\n\n    const issueBody = [\n        `**Justification:** ${t(\n            'Please provide any source or justification or we will not proceed with your request.'\n        )} (REPLACE ME)`,\n        GITHUB_ISSUE_PREAMBLE,\n        getGitHubIssueDetailsBlock('country', countryEntry),\n        getGitHubIssueDetailsBlock('city', cityEntry),\n        getGitHubIssueDetailsBlock('lines', paletteList),\n    ].join('\\n\\n');\n\n    const fullSearchParams = new URLSearchParams({\n        template: 'new-palettes-request.md',\n        label: 'resources',\n        title: 'Resources: New palettes of ' + cityEntry?.name?.en,\n        body: issueBody,\n    });\n\n    const manualSearchParams = new URLSearchParams({\n        template: 'new-palettes-request.md',\n        label: 'resources',\n        title: 'Resources: New palettes of ' + cityEntry?.name?.en,\n    });\n\n    const handleCopy = async () => {\n        if (textareaRef?.current) {\n            textareaRef.current.select();\n            await navigator.clipboard.writeText(issueBody);\n        }\n    };\n\n    const isContainError =\n        countryErrors.length > 0 || cityErrors.length > 0 || Object.values(lineErrors).flat().length > 0;\n\n    return (\n        <Modal blockScrollOnMount={false} isOpen={isOpen} onClose={onClose} scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('Submit palettes')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    {isContainError && (\n                        <Text>\n                            {t(\n                                'Your inputs contain the following errors. Please consider fixing it before submitting.'\n                            )}\n                        </Text>\n                    )}\n\n                    {countryErrors.length > 0 && (\n                        <>\n                            <Heading as=\"h5\" size=\"sm\" my={2}>\n                                {t('Country / Region')}\n                            </Heading>\n                            <UnorderedList aria-label=\"List of country errors\">\n                                {countryErrors.map((e, i) => (\n                                    <ListItem key={i}>{translateName(INVALID_REASON[e])}</ListItem>\n                                ))}\n                            </UnorderedList>\n                        </>\n                    )}\n\n                    {cityErrors.length > 0 && (\n                        <>\n                            <Heading as=\"h5\" size=\"sm\" my={2}>\n                                {t('City')}\n                            </Heading>\n                            <UnorderedList aria-label=\"List of city errors\">\n                                {cityErrors.map((e, i) => (\n                                    <ListItem key={i}>{translateName(INVALID_REASON[e])}</ListItem>\n                                ))}\n                            </UnorderedList>\n                        </>\n                    )}\n\n                    {Object.values(lineErrors).flat().length > 0 && (\n                        <>\n                            <Heading as=\"h5\" size=\"sm\" my={2}>\n                                {t('Lines')}\n                            </Heading>\n                            <UnorderedList aria-label=\"List of line errors\">\n                                {Object.entries(lineErrors).map(([item, errors]) => (\n                                    <ListItem key={item}>\n                                        {item}\n                                        <UnorderedList>\n                                            {errors.map((e, i) => (\n                                                <ListItem key={i}>{translateName(INVALID_REASON[e])}</ListItem>\n                                            ))}\n                                        </UnorderedList>\n                                    </ListItem>\n                                ))}\n                            </UnorderedList>\n                        </>\n                    )}\n\n                    {(!isContainError || isIgnoreErrors) && (\n                        <>\n                            <Text>\n                                {t(\"If the button below doesn't work for you, please follow the instructions below:\")}\n                            </Text>\n                            <OrderedList>\n                                <ListItem>\n                                    {t('Open')}{' '}\n                                    <Link\n                                        color=\"teal.500\"\n                                        href={\n                                            'https://github.com/railmapgen/rmg-palette/issues/new?' +\n                                            manualSearchParams.toString()\n                                        }\n                                        isExternal={true}\n                                    >\n                                        Issue: New Palettes Request <Icon as={MdOpenInNew} />\n                                    </Link>\n                                </ListItem>\n                                <ListItem>\n                                    {t('Paste following text to the issue body and add anything you want to say.')}{' '}\n                                    <Button size=\"xs\" leftIcon={<MdContentCopy />} onClick={handleCopy}>\n                                        {t('Copy')}\n                                    </Button>\n                                    <RmgDebouncedTextarea\n                                        ref={textareaRef}\n                                        isReadOnly={true}\n                                        defaultValue={issueBody}\n                                        onClick={({ target }) => (target as HTMLTextAreaElement).select()}\n                                    />\n                                </ListItem>\n                            </OrderedList>\n                        </>\n                    )}\n                </ModalBody>\n\n                <ModalFooter>\n                    {!isIgnoreErrors && isContainError ? (\n                        <HStack>\n                            <Button onClick={() => setIsIgnoreErrors(true)}>{t('Submit anyway')}</Button>\n                            <Button colorScheme=\"teal\" onClick={onClose}>\n                                {t('Go back')}\n                            </Button>\n                        </HStack>\n                    ) : (\n                        <Button\n                            colorScheme=\"teal\"\n                            onClick={() =>\n                                window.open(\n                                    'https://github.com/railmapgen/rmg-palette/issues/new?' +\n                                        fullSearchParams.toString(),\n                                    '_blank'\n                                )\n                            }\n                        >\n                            {t('1-click open issue')}\n                        </Button>\n                    )}\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import { Button, Flex, HStack } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport CountrySection from './country-section';\nimport CitySection from './city-section';\nimport LinesSection from './lines-section';\nimport { resetTicket } from '../../redux/ticket/ticket-slice';\nimport { useRootDispatch } from '../../redux';\nimport SubmitModal from '../modal/submit-modal';\nimport { useNavigate } from 'react-router-dom';\nimport { RmgPage } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\nexport default function TicketView() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n    const navigate = useNavigate();\n\n    const [isSubmitModalOpen, setIsSubmitModalOpen] = useState(false);\n\n    return (\n        <RmgPage\n            px={2}\n            pt={2}\n            sx={{\n                width: { base: '100%', md: 520 },\n            }}\n        >\n            <Flex direction=\"column\" flex={1} overflowY=\"auto\">\n                <CountrySection />\n                <CitySection />\n                <LinesSection />\n            </Flex>\n\n            <Flex my={2}>\n                <Button size=\"sm\" onClick={() => navigate('/')}>\n                    {t('Go back')}\n                </Button>\n\n                <HStack ml=\"auto\">\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => dispatch(resetTicket())}>\n                        {t('Reset')}\n                    </Button>\n                    <Button size=\"sm\" colorScheme=\"teal\" onClick={() => setIsSubmitModalOpen(true)}>\n                        {t('Submit')}\n                    </Button>\n                </HStack>\n            </Flex>\n\n            <SubmitModal isOpen={isSubmitModalOpen} onClose={() => setIsSubmitModalOpen(false)} />\n        </RmgPage>\n    );\n}\n"],"names":["useTranslatedName","i18n","useTranslation","name","languages","map","lang","find","undefined","LanguageCode","MultiLangEntryCard","props","onUpdate","onAdd","onRemove","entries","translationEntityAdapter","t","getFields","id","entity","translationEntitySelector","languageOptions","Object","reduce","acc","cur","type","label","value","options","onChange","validator","handleAddEntry","values","filter","l","entities","direction","i","sx","flex","fields","noLabel","ids","length","size","variant","title","onClick","icon","minW","CountrySection","translateName","dispatch","useRootDispatch","useRootSelector","state","ticket","country","newCountry","countryName","countryOptions","countryList","sort","a","b","localeCompare","CountryCode","new","setCountry","placeholder","setNewCountry","hidden","as","mb","changes","updateCountryName","addCountryName","removeCountryName","CitySection","city","cityName","setCity","match","mt","updateCityName","addCityName","removeCityName","LinesSection","lines","useState","keys","selectedLine","setSelectedLine","alignItems","mr","leftIcon","addLine","flexWrap","entryId","line","nameTranslation","nameEntity","nameToShow","bg","colour","fg","actions","color","copyLine","removeLine","updateLineId","lineId","updateLineBgColour","bgColour","MonoColour","updateLineFgColour","fgColour","updateLineName","addLineName","removeLineName","SubmitModal","isOpen","onClose","countryErrors","setCountryErrors","cityErrors","setCityErrors","lineErrors","setLineErrors","isIgnoreErrors","setIsIgnoreErrors","textareaRef","useRef","countryEntry","ticketSelectors","cityEntry","paletteList","useEffect","issueBody","GITHUB_ISSUE_PREAMBLE","getGitHubIssueDetailsBlock","join","fullSearchParams","URLSearchParams","template","en","body","manualSearchParams","handleCopy","current","select","navigator","clipboard","writeText","isContainError","flat","blockScrollOnMount","scrollBehavior","my","e","INVALID_REASON","item","errors","href","toString","isExternal","MdOpenInNew","ref","isReadOnly","defaultValue","target","colorScheme","window","open","TicketView","navigate","useNavigate","isSubmitModalOpen","setIsSubmitModalOpen","px","pt","width","base","md","overflowY","ml","resetTicket"],"sourceRoot":""}