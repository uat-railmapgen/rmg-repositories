{"version":3,"file":"static/js/8049.291e8d14.chunk.js","mappings":"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","sources":["svgs/railmap/methods/shmetro-loop.ts","svgs/shmetro/destination-shmetro.tsx","svgs/railmap/methods/shmetro-coline.ts","svgs/shmetro/runin-shmetro.tsx","svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/main/coline/coline-shmetro.tsx","svgs/railmap/main/main-shmetro.tsx","svgs/indoor/station-shmetro.tsx","svgs/railmap/main/loop/loop-branches-shmetro.tsx","svgs/railmap/main/loop/loop-coline-shmetro.tsx","svgs/railmap/main/loop/loop-shmetro.tsx","svgs/railmap/railmap-shmetro.tsx","svgs/indoor/indoor-shmetro.tsx","svgs/shmetro/index.tsx"],"sourcesContent":["import { ShortDirection, StationDict } from '../../../constants/constants';\n\n/**\n * Split the loopline into four sides according to left_and_right_factor and bottom_factor.\n * It assumes parameters will follow these rules:\n *     1. loopline.length > bottom_factor + left_and_right_factor * 2\n *     2. bottom_factor >= 0\n *     3. left_and_right_factor >= 0\n *     4. left_and_right_factor + bottom_factor > 0\n *\n * @param loopline The loop line aka branches[0].\n * @param current_stn_id Current station id.\n * @param bottom_factor How many stations the bottom side will have.\n * @param left_and_right_factor How many stations the left and right side will have.\n * @returns Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n * it will also be consecutive. Note that the length of right, bottom, and left can be 0.\n */\nexport const split_loop_stns = (\n    loopline: string[],\n    current_stn_id: string,\n    bottom_factor: number,\n    left_and_right_factor: number\n) => {\n    const top_factor = loopline.length - left_and_right_factor * 2 - bottom_factor;\n    const current_stn_idx = loopline.findIndex(val => val === current_stn_id);\n    const non_undefined_loopline = [...loopline, ...loopline, ...loopline];\n    const split_a = loopline.length + current_stn_idx - Math.floor(top_factor / 2) + (top_factor % 2 === 0 ? 1 : 0);\n    const split_b = loopline.length + current_stn_idx + Math.floor(top_factor / 2);\n    return {\n        top: non_undefined_loopline.slice(split_a, split_b + 1),\n        left: non_undefined_loopline.slice(split_a - left_and_right_factor, split_a),\n        right: non_undefined_loopline.slice(split_b + 1, split_b + 1 + left_and_right_factor),\n        bottom: non_undefined_loopline.slice(\n            split_b + 1 + left_and_right_factor,\n            split_b + 1 + left_and_right_factor + bottom_factor\n        ),\n    };\n};\n\n/**\n * Split the loopline with one branch into four sides according to left_and_right_factor and bottom_factor.\n * Note that the top side must start from the branch_stn_id.\n *\n * It assumes parameters will follow these rules:\n *     1. loopline.length > bottom_factor + left_and_right_factor * 2\n *     2. bottom_factor >= 0\n *     3. left_and_right_factor >= 0\n *     4. left_and_right_factor + bottom_factor > 0\n *\n * @param loopline The loop line aka branches[0].\n * @param branch_stn_id Branch station id.\n * @param bottom_factor How many stations the bottom side will have.\n * @param left_and_right_factor How many stations the left and right side will have.\n * @returns Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n * it will also be consecutive. Note that the length of right, bottom, and left can be 0.\n */\nexport const split_loop_stns_with_branch = (\n    loopline: string[],\n    branch_stn_id: string,\n    bottom_factor: number,\n    left_and_right_factor: number\n) => {\n    const top_factor = loopline.length - left_and_right_factor * 2 - bottom_factor;\n    const non_undefined_loopline = [...loopline, ...loopline, ...loopline];\n    const split_a = loopline.length + loopline.findIndex(val => val === branch_stn_id);\n    const another_branch_stn_id = non_undefined_loopline[split_a + top_factor - 1];\n    const split_b =\n        loopline.length +\n        loopline.findIndex(val => val === another_branch_stn_id) +\n        (split_a + top_factor > loopline.length * 2 ? loopline.length : 0);\n    return {\n        top: non_undefined_loopline.slice(split_a, split_b + 1),\n        left: non_undefined_loopline.slice(split_a - left_and_right_factor, split_a),\n        right: non_undefined_loopline.slice(split_b + 1, split_b + 1 + left_and_right_factor),\n        bottom: non_undefined_loopline.slice(\n            split_b + 1 + left_and_right_factor,\n            split_b + 1 + left_and_right_factor + bottom_factor\n        ),\n    };\n};\n\n/**\n * Split the loopline with two branches into four sides according to left_and_right_factor and arc.\n * Note that the top side must start from one of the branch_stn_ids and end at another.\n * Also the top side will be the major or the minor arc between branch_stn_ids.\n *\n * It assumes parameters will follow these rules:\n *     1. loopline.length > the major or the minor arc length between branch_stn_ids +\n *                          left_and_right_factor * 2\n *     2. left_and_right_factor >= 0\n *\n * @param loopline The loop line aka branches[0].\n * @param branch_stn_ids Branches station id.\n * @param left_and_right_factor How many stations the left and right side will have.\n * @param arc Which arc will be the top side, the major or the minor.\n * @returns Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n * it will also be consecutive. Note that the length of right, bottom, and left can be 0.\n */\nexport const split_loop_stns_with_branches = (\n    loopline: string[],\n    branch_stn_ids: [string, string],\n    left_and_right_factor: number,\n    arc: 'major' | 'minor'\n) => {\n    let split_a = loopline.findIndex(val => val === branch_stn_ids[0]);\n    let split_b = loopline.findIndex(val => val === branch_stn_ids[1]);\n    // swap a and b if a is bigger than b\n    [split_a, split_b, branch_stn_ids[0], branch_stn_ids[1]] =\n        split_a > split_b\n            ? [split_b, split_a, branch_stn_ids[1], branch_stn_ids[0]]\n            : [split_a, split_b, branch_stn_ids[0], branch_stn_ids[1]];\n    const top_a = loopline.slice(split_a, split_b + 1);\n    const top_b = loopline.filter(stn => !top_a.filter(stn => !branch_stn_ids.includes(stn)).includes(stn));\n    // which arc we use on the top will result to different bottom factor\n    const bottom_factor =\n        loopline.length -\n        (arc === 'major' ? Math.max : Math.min)(top_a.length, top_b.length) -\n        left_and_right_factor * 2;\n    const branch_stn_id =\n        arc === 'major'\n            ? top_a.length > top_b.length\n                ? branch_stn_ids[0]\n                : branch_stn_ids[1]\n            : top_a.length > top_b.length\n            ? branch_stn_ids[1]\n            : branch_stn_ids[0];\n    return split_loop_stns_with_branch(loopline, branch_stn_id, bottom_factor, left_and_right_factor);\n};\n\nexport type LoopStns = ReturnType<typeof split_loop_stns>;\n\n/**\n * Calculate the xshares and yshares of the loop stations.\n *\n * @param loopline The loop line aka branches[0].\n * @param loop_stns Object returned from split_loop_stns.\n * @returns Values sit between 0 and 1.\n */\nexport const get_xshares_yshares_of_loop = (loopline: string[], loop_stns: LoopStns) => {\n    const x_shares = Object.fromEntries(loopline.map(stn_id => [stn_id, -1]));\n    const y_shares = Object.fromEntries(loopline.map(stn_id => [stn_id, -1]));\n\n    const [Y_TOP, Y_BOTTOM, X_LEFT, X_RIGHT] = [0, 1, 0, 1];\n\n    // loop's inner padding for xs\n    const e = 0; // 0 <= e <= 1\n\n    loop_stns.top.forEach((stn_id, i) => {\n        x_shares[stn_id] = e / 2 + ((1 - e) / (loop_stns.top.length + 1)) * (i + 1);\n        y_shares[stn_id] = Y_TOP;\n    });\n    loop_stns.right.forEach((stn_id, i) => {\n        x_shares[stn_id] = X_RIGHT;\n        y_shares[stn_id] = e / 2 + ((1 - e) / (loop_stns.right.length + 1)) * (i + 1);\n    });\n    loop_stns.bottom.forEach((stn_id, i) => {\n        x_shares[stn_id] = 1 - e / 2 - ((1 - e) / (loop_stns.bottom.length + 1)) * (i + 1);\n        y_shares[stn_id] = Y_BOTTOM;\n    });\n    loop_stns.left.forEach((stn_id, i) => {\n        x_shares[stn_id] = X_LEFT;\n        y_shares[stn_id] = 1 - e / 2 - ((1 - e) / (loop_stns.left.length + 1)) * (i + 1);\n    });\n\n    return {\n        x_shares: x_shares,\n        y_shares: y_shares,\n    };\n};\n\n/**\n * Get pivot stations from the loop line.\n */\nexport const get_pivot_stations = (\n    branches: string[][],\n    direction: ShortDirection,\n    stn_list: StationDict,\n    current_stn_id: string\n) => {\n    const loop_line = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n    const _ = [...loop_line, ...loop_line, ...loop_line];\n    const non_undefined_loop_line = direction === 'r' ? _ : _.reverse();\n    const current_stn_idx = non_undefined_loop_line.findIndex(stn_id => current_stn_id === stn_id) + loop_line.length;\n    return non_undefined_loop_line\n        .slice(current_stn_idx + 1)\n        .filter(stn_id => stn_list[stn_id].loop_pivot)\n        .slice(undefined, 2);\n};\n","import React, { forwardRef, memo, useEffect, useMemo, useRef, useState } from 'react';\nimport { useRootSelector } from '../../redux';\nimport { isColineBranch } from '../../redux/param/coline-action';\nimport { CanvasType, ColineInfo, ColourHex, MonoColour, Name, ShortDirection } from '../../constants/constants';\nimport { get_pivot_stations } from '../railmap/methods/shmetro-loop';\nimport SvgWrapper from '../common/svg-wrapper';\n\nconst CANVAS_TYPE = CanvasType.Destination;\n\nexport default function DestinationSHMetro() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const { svgWidth: svgWidths, svg_height: svgHeight, theme } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsSHMetro />\n            <DestSHMetro />\n        </SvgWrapper>\n    );\n}\n\nconst DefsSHMetro = memo(() => (\n    <defs>\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"slope\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n    </defs>\n));\n\nconst DestSHMetro = () => {\n    const { routes, branches } = useRootSelector(store => store.helper);\n    const {\n        line_name,\n        theme,\n        current_stn_idx: current_stn_id,\n        direction,\n        stn_list,\n        info_panel_type,\n        loop,\n        coline,\n    } = useRootSelector(store => store.param);\n\n    // get valid destination of each branch\n    const get_valid_destinations = (routes: string[][], direction: ShortDirection, current_stn_id: string) => [\n        ...new Set(\n            routes\n                .filter(route => route.includes(current_stn_id))\n                .map(route => {\n                    const res = route.filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n                    return direction === 'l' ? res[0] : res.reverse()[0];\n                })\n        ),\n    ];\n    // get the name from the destination id(s)\n    const get_dest_names = (dest_ids: string[], one_line: boolean) =>\n        !one_line\n            ? dest_ids.map(id => stn_list[id].name.map(s => s.replace('\\\\', '')) as Name)\n            : [\n                  // only one line in `sh` type\n                  [\n                      dest_ids.map(id => stn_list[id].name[0]).join('，'),\n                      dest_ids.map(id => stn_list[id].name[1]).join(', '),\n                  ].map(s => s.replace('\\\\', '')) as Name,\n              ];\n\n    // get destination id(s)\n    const valid_dest_ids = !loop\n        ? get_valid_destinations(routes, direction, current_stn_id)\n        : get_pivot_stations(branches, direction, stn_list, current_stn_id);\n    // get coline destination id(s)\n    // note that for loop, coline branches' destination id(s) are needed\n    const coline_dest_ids = (!loop ? valid_dest_ids : get_valid_destinations(routes, direction, current_stn_id)).filter(\n        valid_dest_id =>\n            branches\n                .slice(1)\n                .filter(branch => isColineBranch(branch, stn_list))\n                .some(branch => branch.includes(valid_dest_id))\n    );\n    // filter out coline destination id(s)\n    const regular_dest_ids = valid_dest_ids.filter(valid_dest_id => !coline_dest_ids.includes(valid_dest_id));\n\n    // destination names of loop line, `sh2020` type will always be two lines\n    const dest_names = get_dest_names(regular_dest_ids, !loop && !(info_panel_type === 'sh2020'));\n    console.log(dest_names);\n    const coline_dest_names = get_dest_names(coline_dest_ids, true);\n\n    // this will give the space for at most two lines of dest_names\n    const coline_dy = 250;\n    // get coline info from coline_dest_ids\n    const colines = Object.fromEntries(\n        coline_dest_ids\n            .map(coline_dest_id => [\n                coline_dest_id,\n                Object.values(coline)\n                    .filter(co => co.from === coline_dest_id || co.to === coline_dest_id)\n                    .at(0),\n            ])\n            .filter(([key, val]) => val)\n    ) as {\n        [k: string]: ColineInfo;\n    };\n    return (\n        <>\n            <Dest\n                dest_names={dest_names}\n                line_name={line_name}\n                line_color={[theme[2], theme[3]]}\n                coline={coline_dest_ids.length ? true : false}\n                upper={coline_dest_ids.length ? true : false}\n            />\n            {coline_dest_ids.length &&\n                // multiple coline dest is not supported yet\n                coline_dest_ids.map(coline_dest_id => (\n                    <g key={`coline_${coline_dest_id}`} transform={`translate(0,${-coline_dy})`}>\n                        <Dest\n                            dest_names={[coline_dest_names.at(0)!]}\n                            line_name={colines[coline_dest_id]?.colors.at(0)!.slice(4) as Name}\n                            line_color={[\n                                colines[coline_dest_id]?.colors.at(0)![2],\n                                colines[coline_dest_id]?.colors.at(0)![3],\n                            ]}\n                            coline\n                            upper={false}\n                        />\n                    </g>\n                ))}\n        </>\n    );\n};\n\nconst Dest = (props: {\n    dest_names: Name[];\n    line_name: Name;\n    line_color: [ColourHex, MonoColour]; // override coline color\n    coline: boolean; // hide the marker if it is a coline\n    upper: boolean; // coline needs the line in the upper position\n}) => {\n    const { dest_names, line_name, line_color, coline, upper } = props;\n    const {\n        current_stn_idx: current_stn_id,\n        direction,\n        platform_num,\n        svgWidth,\n        svg_height,\n    } = useRootSelector(store => store.param);\n\n    const terminalEl = useRef<SVGGElement | null>(null);\n    const [terminalBBox, setTerminalBBox] = useState({ width: 0 } as SVGRect);\n    useEffect(\n        () => setTerminalBBox(terminalEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(dest_names), JSON.stringify(current_stn_id)]\n    );\n\n    const [middle, MARGIN, PADDING, LINEBOX_WIDTH, PLATFORM_WIDTH] = [svgWidth.destination / 2, 10, 36, 264, 325];\n    // Alignment Priority:\n    // 1. Centre of canvas\n    // 2. Centre of remaining\n    const platformX =\n        middle - MARGIN - PADDING - terminalBBox.width >= PLATFORM_WIDTH / 2 &&\n        middle - MARGIN - PADDING - LINEBOX_WIDTH >= PLATFORM_WIDTH / 2\n            ? middle\n            : direction === 'l'\n            ? (svgWidth.destination + terminalBBox.width - LINEBOX_WIDTH) / 2\n            : (svgWidth.destination - terminalBBox.width + LINEBOX_WIDTH) / 2;\n\n    // the platform screen doors flash light\n    // #20\n    // $('g#station_info_shmetro > rect').attr({ transform: `translate(${this._svgDestWidth / 2},${250 + dh})` })\n\n    return (\n        <g transform={`translate(0,${svg_height - 300})`}>\n            <path\n                stroke={line_color[0]}\n                strokeWidth={12}\n                d={\n                    direction === 'l'\n                        ? `M${svgWidth.destination - 24},16 H 36`\n                        : `M24,16 H ${svgWidth.destination - 36}`\n                }\n                transform={`translate(0,${!upper ? 220 : -20})`}\n                markerEnd={!coline ? 'url(#slope)' : undefined}\n            />\n\n            <Terminal ref={terminalEl} dest_names={dest_names} />\n            {platform_num !== '' && (\n                <g transform={`translate(${platformX},0)`}>\n                    <PlatformNum />\n                </g>\n            )}\n\n            {line_name[0].match(/^[\\w\\d]+(号)?线/) ? (\n                <LineNameBoxNumber line_name={line_name} line_color={line_color} />\n            ) : (\n                <LineNameBoxText line_name={line_name} line_color={line_color} />\n            )}\n        </g>\n    );\n};\n\nconst Terminal = forwardRef((props: { dest_names: Name[] }, ref: React.Ref<SVGGElement>) => {\n    const { dest_names } = props;\n    const { direction, svgWidth } = useRootSelector(store => store.param);\n\n    return (\n        <g ref={ref} transform={`translate(${direction === 'l' ? 36 : svgWidth.destination - 36},145)`}>\n            {/* this is not a generalized implementation, only dest length of 1 and 2 are supported */}\n            <g transform={`translate(0,${dest_names.length === 2 ? -20 : 20})`}>\n                <path\n                    d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\"\n                    fill=\"black\"\n                    transform={`rotate(${direction === 'l' ? 0 : 180})scale(0.8)`}\n                />\n            </g>\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${direction === 'l' ? 128 + 20 : -128 - 20},25)`}\n            >\n                {dest_names.map((name, i) => (\n                    <React.Fragment key={i}>\n                        <text className=\"rmg-name__zh\" fontSize={70} dy={i * -100 + 7} key={`zh${i}`}>\n                            {'往' + name[0]}\n                        </text>\n                        <text className=\"rmg-name__en\" fontSize={25} dy={i * -100 + 40} key={`en${i}`}>\n                            {'To ' + name[1]}\n                        </text>\n                    </React.Fragment>\n                ))}\n            </g>\n        </g>\n    );\n});\n\nconst PlatformNum = () => {\n    const { platform_num } = useRootSelector(store => store.param);\n\n    // Total width: 325\n    return useMemo(\n        () => (\n            <g transform={`translate(${-325 / 2 + 60},150)`}>\n                <circle r={60} fill=\"none\" stroke=\"black\" strokeWidth={2} />\n                <text className=\"rmg-name__en\" dominantBaseline=\"central\" fontSize={120} textAnchor=\"middle\">\n                    {platform_num}\n                </text>\n                <text className=\"rmg-name__zh\" fontSize={100} dominantBaseline=\"central\" x={65}>\n                    站台\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [platform_num]\n    );\n};\n\nconst LineNameBoxText = (props: { line_name: Name; line_color: [ColourHex, MonoColour] }) => {\n    const { line_name, line_color } = props;\n    const { direction, svgWidth } = useRootSelector(store => store.param);\n\n    const boxX = direction === 'l' ? svgWidth.destination - 42 : 42;\n\n    // get the exact station name width so that the\n    // line color rectangle can be the right width.\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...line_name]\n    );\n\n    const rectDx = (direction === 'l' ? -bBox.width : 0) - 6;\n    const stnNameEnDx = ((direction === 'l' ? -1 : 1) * bBox.width) / 2;\n\n    return useMemo(\n        () => (\n            <g transform={`translate(${boxX},92)`}>\n                <rect fill={line_color[0]} x={rectDx} width={bBox.width + 10} height={120} />\n                <g textAnchor={direction === 'r' ? 'start' : 'end'} transform=\"translate(0,68)\" fill={line_color[1]}>\n                    <g ref={stnNameEl}>\n                        <text className=\"rmg-name__zh\" fontSize={68}>\n                            {line_name[0]}\n                        </text>\n                    </g>\n                    <text className=\"rmg-name__en\" fontSize={30} textAnchor=\"middle\" x={stnNameEnDx} dy={42}>\n                        {line_name[1]}\n                    </text>\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [bBox, ...line_name, ...line_color, direction, svgWidth.destination]\n    );\n};\n\nconst LineNameBoxNumber = (props: { line_name: Name; line_color: [ColourHex, MonoColour] }) => {\n    const { line_name, line_color } = props;\n    const { direction, svgWidth } = useRootSelector(store => store.param);\n\n    const [lineNumber, lineNameRes] = line_name[0].match(/^[\\w\\d]+|.+/g) as string[];\n\n    // Number width: 108\n    // Text width: 136\n    // Gap: 20\n    // Left: 108/2 + 20 + 136 = 210\n    // Right: 108/2 = 54\n    const boxX = direction === 'l' ? svgWidth.destination - 36 - 210 : 36 + 54;\n\n    // Total width: 264\n    return useMemo(\n        () => (\n            <g transform={`translate(${boxX},92)`}>\n                <rect fill={line_color[0]} x={-54} width={108} height={120} />\n                <text\n                    className=\"rmg-name__zh\"\n                    fill={line_color[1]}\n                    fontSize={96}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    transform=\"translate(0,60)\"\n                    letterSpacing={-5}\n                >\n                    {lineNumber}\n                </text>\n                <g textAnchor=\"start\" transform=\"translate(74,68)\">\n                    <text className=\"rmg-name__zh\" fontSize={68}>\n                        {lineNameRes}\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={30} dy={42}>\n                        {line_name[1]}\n                    </text>\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [boxX, ...line_name, ...line_color, direction, svgWidth.destination]\n    );\n};\n","import { ColineInfo, InterchangeInfo } from '../../../constants/constants';\nimport { drawLine } from './share';\n\nexport interface ColineLinePath {\n    main: {\n        linePath: string[];\n        colors: InterchangeInfo[];\n    }[];\n    pass: {\n        linePath: string[];\n        colors: InterchangeInfo[];\n    }[];\n}\n\n/**\n * Return all stations from ColineInfo's `from` and `to` with coline color preserved.\n */\nexport const calculateColineStations = (colineInfoList: ColineInfo[], branches: string[][]) =>\n    colineInfoList\n        .map(coLine => {\n            const involvedBranches = branches.filter(\n                branch => branch.includes(coLine.from) && branch.includes(coLine.to)\n            );\n\n            // the current coLineInfo fall on two separate branches,\n            // which should not be possible in current design.\n            if (involvedBranches.length !== 1) return { linePath: [], colors: coLine.colors };\n\n            const branch = involvedBranches.flat();\n            const a = branch.indexOf(coLine.from);\n            const b = branch.indexOf(coLine.to);\n            const linePath = a < b ? branch.slice(a, b + 1) : branch.slice(b, a + 1);\n            return {\n                linePath: linePath,\n                colors: coLine.colors,\n            };\n        })\n        .filter(branchWithColine => branchWithColine.linePath.length !== 0);\n\n/**\n * Return coline segments with stations in main/pass order.\n */\nexport const calculateColine = (\n    branchWithColine: ReturnType<typeof calculateColineStations>,\n    stnStates: {\n        [stnId: string]: 0 | 1 | -1;\n    }\n) =>\n    branchWithColine\n        .map(branchWithColine => {\n            const linePaths = drawLine(branchWithColine.linePath, stnStates);\n            return {\n                main: [\n                    {\n                        linePath: linePaths.main,\n                        colors: branchWithColine.colors,\n                    },\n                ],\n                pass: [\n                    {\n                        linePath: linePaths.pass,\n                        colors: branchWithColine.colors,\n                    },\n                ],\n            };\n        })\n        // .map(branchWithColine =>\n        //     (\n        //         Object.entries(drawLine(branchWithColine.linePath, stnStates)) as [\n        //             keyof ReturnType<typeof drawLine>,\n        //             string[]\n        //         ][]\n        //     )\n        //         .map(([type, linePath]) => ({ [type]: { linePath: linePath, colors: branchWithColine.colors } }))\n        //         .reduce((acc, cur) => ({ ...acc, ...cur }), { main: [], pass: [] } as ColineLinePath)\n        // )\n        .reduce(\n            (acc, cur) => {\n                acc.main = [...acc.main, ...cur.main];\n                acc.pass = [...acc.pass, ...cur.pass];\n                return acc;\n            },\n            { main: [], pass: [] } as ColineLinePath\n        );\n","import React, { memo, useMemo } from 'react';\nimport { CanvasType, Name, StationDict } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport { isColineBranch } from '../../redux/param/coline-action';\nimport { calculateColineStations } from '../railmap/methods/shmetro-coline';\nimport SvgWrapper from '../common/svg-wrapper';\n\nconst LINE_WIDTH = 12;\n\nconst CANVAS_TYPE = CanvasType.RunIn;\n\nconst RunInSHMetro = () => {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const { branches, routes, depsStr: deps } = useRootSelector(store => store.helper);\n    const {\n        svgWidth: svgWidths,\n        svg_height,\n        current_stn_idx,\n        direction,\n        loop,\n        theme,\n    } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n    // get the height\n    const dh = svg_height - 300;\n\n    const prevStnIds = useMemo(\n        () => {\n            let prevStnIds = routes\n                .filter(route => route.includes(current_stn_idx))\n                .map(route => route[route.indexOf(current_stn_idx) + (direction === 'l' ? 1 : -1)])\n                // .flat()\n                // remove duplicate\n                .reduce((acc, cur) => (acc.includes(cur) ? acc : acc.concat(cur)), [] as string[]);\n            if (\n                loop && // if it is a loop\n                branches[0].includes(current_stn_idx) && // and this station is on the loop line\n                prevStnIds.length === 1 && // and it is the first station of that direction\n                ['linestart', 'lineend'].includes(prevStnIds[0])\n            ) {\n                // get the station from the other end\n                prevStnIds = direction === 'l' ? [branches[0][1]] : [branches[0][branches[0].length - 2]];\n            }\n            return prevStnIds;\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps, current_stn_idx, direction, loop]\n    );\n\n    const nextStnIds = useMemo(\n        () => {\n            let nextStnIds = routes\n                .filter(route => route.includes(current_stn_idx))\n                .map(route => route[route.indexOf(current_stn_idx) + (direction === 'l' ? -1 : 1)])\n                // .flat()\n                // remove duplicate\n                .reduce((acc, cur) => (acc.includes(cur) ? acc : acc.concat(cur)), [] as string[]);\n            if (\n                loop && // if it is a loop\n                branches[0].includes(current_stn_idx) && // and this station is on the loop line\n                nextStnIds.length === 1 && // and it is the last station of that direction\n                ['linestart', 'lineend'].includes(nextStnIds[0])\n            ) {\n                // get the station from the other end\n                nextStnIds = direction === 'l' ? [branches[0][branches[0].length - 2]] : [branches[0][1]];\n            }\n            return nextStnIds;\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps, current_stn_idx, direction, loop]\n    );\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svg_height}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsSHMetro />\n            <g transform={`translate(0,${dh})`}>\n                <GeneralStation prevStnIds={prevStnIds} nextStnIds={nextStnIds} />\n            </g>\n        </SvgWrapper>\n    );\n};\n\nexport default RunInSHMetro;\n\nconst DefsSHMetro = memo(() => (\n    <defs>\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"slope\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n\n        {/* Outline filter of white pass color in Pujiang Line */}\n        <filter\n            id=\"pujiang_outline_runin\"\n            colorInterpolationFilters=\"sRGB\"\n            // TODO: remove the absolute value while make the filter works correctly\n            filterUnits=\"userSpaceOnUse\"\n            x=\"0\"\n            y=\"-1000\"\n            width=\"5000\"\n            height=\"2000\"\n        >\n            <feMorphology operator=\"erode\" in=\"SourceAlpha\" radius=\"0\" result=\"e1\" />\n            <feMorphology operator=\"erode\" in=\"SourceAlpha\" radius=\"1\" result=\"e2\" />\n            <feComposite in=\"e1\" in2=\"e2\" operator=\"xor\" result=\"outline\" />\n            <feComposite in=\"outline\" in2=\"SourceGraphic\" operator=\"over\" result=\"output\" />\n        </filter>\n    </defs>\n));\n\ninterface RunInGeneralProps {\n    prevStnIds: string[];\n    nextStnIds: string[];\n}\n\nconst GeneralStation = (props: RunInGeneralProps) => {\n    const { prevStnIds, nextStnIds } = props;\n    const { info_panel_type, svgWidth, stn_list } = useRootSelector(store => store.param);\n\n    const middle = svgWidth.runin / 2;\n    const terminal = nextStnIds.length === 1 && ['linestart', 'lineend'].includes(nextStnIds[0]);\n    const original = prevStnIds.length === 1 && ['linestart', 'lineend'].includes(prevStnIds[0]);\n\n    const nextNames = nextStnIds.map(stnId => stn_list[stnId].name);\n    const prevNames = prevStnIds.map(stnId => stn_list[stnId].name);\n\n    const nextBranchLineDy =\n        (nextStnIds.length > 1\n            ? (nextNames[0][0].split('\\\\').length - 1) * -50 + (nextNames[0][1].split('\\\\').length - 1) * -30\n            : 0) + 10;\n    const prevBranchLineDy =\n        (prevStnIds.length > 1\n            ? (prevNames[0][0].split('\\\\').length - 1) * -50 + (prevNames[0][1].split('\\\\').length - 1) * -30\n            : 0) + 10;\n\n    return (\n        <>\n            <BranchLine\n                prevStnIds={prevStnIds}\n                nextStnIds={nextStnIds}\n                nextBranchLineDy={nextBranchLineDy}\n                prevBranchLineDy={prevBranchLineDy}\n            />\n\n            {terminal && info_panel_type !== 'sh2020' ? (\n                <TerminalStation mode=\"terminal\" prevStnIds={prevStnIds} nextStnIds={nextStnIds} />\n            ) : original && info_panel_type !== 'sh2020' ? (\n                <TerminalStation mode=\"original\" prevStnIds={prevStnIds} nextStnIds={nextStnIds} />\n            ) : (\n                <>\n                    {/* General Station */}\n                    <Line prevStnIds={prevStnIds} nextStnIds={nextStnIds} />\n\n                    <g transform={`translate(${middle},160)`} textAnchor=\"middle\">\n                        <CurrentText />\n                    </g>\n                </>\n            )}\n\n            {(original || !terminal) && <NextStn stnIds={props.nextStnIds} />}\n            {(terminal || !original) && <PrevStn stnIds={props.prevStnIds} />}\n        </>\n    );\n};\n\nconst TerminalStation = (props: { mode: 'terminal' | 'original'; prevStnIds: string[]; nextStnIds: string[] }) => {\n    const { mode, prevStnIds, nextStnIds } = props;\n    const { current_stn_idx, theme, svgWidth, direction, coline } = useRootSelector(store => store.param);\n    const { branches } = useRootSelector(store => store.helper);\n\n    const textProps = {\n        l: { original: { x: svgWidth.runin - 36, anchor: 'end' }, terminal: { x: 36, anchor: 'start' } },\n        r: { original: { x: 36, anchor: 'start' }, terminal: { x: svgWidth.runin - 36, anchor: 'end' } },\n    };\n\n    const colineStns = calculateColineStations(Object.values(coline), branches);\n    const nextColineColorFrom = mode === 'terminal' ? prevStnIds : nextStnIds;\n    const nextColineColor =\n        nextStnIds.length > 1\n            ? 'var(--rmg-theme-colour)' // BranchLine will handle color of next line well\n            : colineStns\n                  .filter(co => co.linePath.includes(current_stn_idx) && co.linePath.includes(nextColineColorFrom[0]))\n                  // TODO-coline: handle multiple coline colors\n                  .map(co => co.colors[0][2])[0] ?? 'var(--rmg-theme-colour)';\n\n    return (\n        <>\n            {mode === 'original' && (\n                <path\n                    transform={`translate(0,${coline.length ? '198' : '220'})${coline.length ? 'scale(1,2)' : ''}`}\n                    stroke={nextColineColor}\n                    strokeWidth={12}\n                    d={direction === 'l' ? `M ${svgWidth.runin - 24},16 H 36` : `M24,16 H ${svgWidth.runin - 36}`}\n                    markerEnd=\"url(#slope)\"\n                />\n            )}\n\n            {mode === 'terminal' && (\n                <g filter={theme[2] === '#999999' ? 'url(#pujiang_outline_runin)' : undefined}>\n                    <path\n                        transform={`translate(0,${coline.length ? '198' : '220'})${coline.length ? 'scale(1,2)' : ''}`}\n                        stroke=\"var(--rmg-grey)\"\n                        strokeWidth={12}\n                        d={`M24,16 H ${svgWidth.runin - 24}`}\n                    />\n                </g>\n            )}\n\n            <g\n                transform={`translate(${textProps[direction][mode].x},160)`}\n                textAnchor={textProps[direction][mode].anchor}\n            >\n                <CurrentText />\n            </g>\n        </>\n    );\n};\n\nconst Line = (props: RunInGeneralProps) => {\n    const { prevStnIds, nextStnIds } = props;\n    const {\n        direction,\n        svgWidth,\n        theme,\n        coline,\n        current_stn_idx,\n        stn_list: stnList,\n    } = useRootSelector(store => store.param);\n    const { branches } = useRootSelector(store => store.helper);\n    const middle = svgWidth.runin / 2;\n\n    // determine the end with linestart/lineend or .length === 0\n    const isEnd = (stnIds: string[]) => stnIds.includes('linestart') || stnIds.includes('lineend');\n\n    const colineStns = calculateColineStations(Object.values(coline), branches);\n\n    // whether the next line is single color(var(--rmg-theme-colour) or coline color) or multiple colors\n    // let nextColineMode: 'single' | 'multiple' = 'single';\n    // TODO-coline: if coline is allowed in other segments, then this should be considered more precisely\n    const nextColineMode =\n        nextStnIds.length > 1\n            ? // needs to be single since BranchLine is in effect\n              'single'\n            : isEnd(nextStnIds)\n            ? colineStns.filter(co => [current_stn_idx, prevStnIds[0]].every(stnId => co.linePath.includes(stnId)))\n                  .length > 0\n                ? // if this the terminal station, look back to see if it falls in coline\n                  'multiple'\n                : 'single'\n            : [current_stn_idx, nextStnIds[0]].every(stnId => branches[0].includes(stnId)) && // is in the main line\n              // and has coline from current_stn_idx to nextStnIds[0]\n              colineStns.filter(co => [current_stn_idx, nextStnIds[0]].every(stnId => co.linePath.includes(stnId)))\n                  .length > 0\n            ? 'multiple'\n            : 'single';\n\n    const nextColineColorFrom = isEnd(nextStnIds) ? prevStnIds : nextStnIds;\n    const nextColineColor =\n        nextStnIds.length > 1\n            ? 'var(--rmg-theme-colour)' // BranchLine will handle color of next line well\n            : colineStns\n                  .filter(co => co.linePath.includes(current_stn_idx) && co.linePath.includes(nextColineColorFrom[0]))\n                  // TODO-coline: handle multiple coline colors\n                  .map(co => co.colors[0][2])[0] ?? 'var(--rmg-theme-colour)';\n\n    // curr and next/pass segment is in the coline branch\n    const isInColineBranch = (\n        branches: string[][],\n        current_stn_idx: string,\n        nextOrPassStnIds: string[],\n        stnList: StationDict\n    ) =>\n        branches\n            .slice(1)\n            .filter(branch => [current_stn_idx, nextOrPassStnIds[0]].every(stnId => branch.includes(stnId)))\n            .filter(branch => isColineBranch(branch, stnList)).length > 0;\n\n    // change color to coline color only if it has coline and the curr and next stations are in the coline branch\n    const nextColor =\n        Object.keys(coline).length > 0 && isInColineBranch(branches, current_stn_idx, nextStnIds, stnList)\n            ? nextColineColor\n            : 'var(--rmg-theme-colour)';\n\n    // stretch the next line element if curr and next stations aren't in main line with coline\n    const nextLineStretch =\n        Object.keys(coline).length > 0 &&\n        nextStnIds.length === 1 && // BranchLine will add branch next line so no stretch is needed\n        (isEnd(prevStnIds) || isEnd(nextStnIds)\n            ? true // terminal station with coline(prevent linestart/lineend)\n            : !(\n                  [current_stn_idx, nextStnIds[0]].every(stnId => branches[0].includes(stnId)) &&\n                  colineStns.filter(co => co.linePath.includes(current_stn_idx) && co.linePath.includes(nextStnIds[0]))\n                      .length !== 0\n              )); // no stretch if it is in main line with coline\n\n    // stretch the pass line element if BranchLine is not in effect\n    const passLineStretch = Object.keys(coline).length > 0 && prevStnIds.length === 1;\n\n    return (\n        <g transform=\"translate(0,220)\" strokeWidth={12}>\n            <>\n                {nextColor !== 'var(--rmg-theme-colour)' && (\n                    <marker id={`slope_${nextColor}`} viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n                        <path d=\"M0,0L1,1H-1z\" fill={nextColor} />\n                    </marker>\n                )}\n                <path\n                    stroke={nextColor}\n                    d={`M ${middle},16 H ${direction === 'l' ? 36 : svgWidth.runin - 36}`}\n                    // markerEnd=\"url(#slope)\"\n                    markerEnd={nextColor === 'var(--rmg-theme-colour)' ? 'url(#slope)' : `url(#slope_${nextColor})`}\n                    transform={nextLineStretch ? 'translate(0,-22)scale(1,2)' : undefined}\n                />\n            </>\n            {nextColineMode === 'multiple' && (\n                <>\n                    <marker id={`slope_${nextColineColor}`} viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n                        <path d=\"M0,0L1,1H-1z\" fill={nextColineColor} />\n                    </marker>\n                    <path\n                        stroke={nextColineColor}\n                        d={`M ${middle},16 H ${\n                            direction === 'l' ? 36 + LINE_WIDTH : svgWidth.runin - (36 + LINE_WIDTH)\n                        }`}\n                        markerEnd={`url(#slope_${nextColineColor})`}\n                        transform=\"translate(0,-12)\"\n                    />\n                </>\n            )}\n\n            <g\n                filter={theme[2] === '#999999' ? 'url(#pujiang_outline_runin)' : undefined}\n                transform={`translate(0,${passLineStretch ? -22 : 0})scale(1,${passLineStretch ? 2 : 1})`}\n            >\n                <path\n                    stroke=\"var(--rmg-grey)\"\n                    d={`M ${middle},16 H ${direction === 'l' ? svgWidth.runin - 24 : 24} `}\n                />\n            </g>\n        </g>\n    );\n};\n\ninterface RunInBranchLineProps {\n    prevStnIds: string[];\n    nextStnIds: string[];\n    nextBranchLineDy: number;\n    prevBranchLineDy: number;\n}\n\nconst BranchLine = (props: RunInBranchLineProps) => {\n    const { prevStnIds, nextStnIds, nextBranchLineDy, prevBranchLineDy } = props;\n\n    const { direction, svgWidth, current_stn_idx, coline, theme } = useRootSelector(store => store.param);\n    const { branches } = useRootSelector(store => store.helper);\n    const middle = svgWidth.runin / 2;\n\n    const LINE_BRANCH_Y = 125;\n\n    // draw a line between these dots\n    const dotToPos = (dot: [number, number]) => `${dot[0]},${dot[1]}`;\n    const dotsToPath = (dots: [number, number][]) =>\n        `M${dotToPos(dots.at(0)!)} ` +\n        dots\n            .slice(1)\n            .map(dot => `L${dotToPos(dot)}`)\n            .join(' ');\n\n    let nextDots = (\n        direction === 'l'\n            ? [\n                  [svgWidth.runin / 3, LINE_BRANCH_Y],\n                  [svgWidth.runin / 6, nextBranchLineDy],\n                  [36, nextBranchLineDy],\n              ]\n            : [\n                  [(svgWidth.runin / 3) * 2, LINE_BRANCH_Y],\n                  [(svgWidth.runin / 6) * 5, nextBranchLineDy],\n                  [svgWidth.runin - 36, nextBranchLineDy],\n              ]\n    ) as [number, number][];\n    let prevDots = (\n        direction === 'l'\n            ? [\n                  [(svgWidth.runin / 3) * 2, LINE_BRANCH_Y],\n                  [(svgWidth.runin / 6) * 5, prevBranchLineDy],\n                  [svgWidth.runin - 24, prevBranchLineDy],\n              ]\n            : [\n                  [svgWidth.runin / 3, LINE_BRANCH_Y],\n                  [svgWidth.runin / 6, prevBranchLineDy],\n                  [24, prevBranchLineDy],\n              ]\n    ) as [number, number][];\n\n    let nextColor = 'var(--rmg-theme-colour)';\n\n    if (Object.keys(coline).length > 0) {\n        const colineStns = calculateColineStations(Object.values(coline), branches);\n\n        // If the next stns have coline branch here,\n        // uplift branch a little bit with coline color.\n        if (\n            nextStnIds.length > 1 &&\n            colineStns.filter(\n                stns =>\n                    stns.linePath.includes(current_stn_idx) && nextStnIds.some(stnId => stns.linePath.includes(stnId))\n            )\n        ) {\n            // no idea why strokeWidth is 12 but only when dy = -11 will be perfect\n            nextDots[0][1] -= LINE_WIDTH - 1;\n            nextDots.unshift([middle, LINE_BRANCH_Y - LINE_WIDTH + 1]);\n            nextColor = colineStns\n                .filter(\n                    stns =>\n                        stns.linePath.includes(current_stn_idx) &&\n                        nextStnIds.some(stnId => stns.linePath.includes(stnId))\n                )\n                // TODO-coline: known undefined issues when coline is removed if the station is removed via removeInvalidColineOnRemoveStation\n                .at(0)!\n                .colors.at(0)![2];\n        }\n\n        // If the prev stns have coline branch here,\n        // uplift branch a little bit.\n        if (\n            prevStnIds.length > 1 &&\n            colineStns.filter(\n                stns =>\n                    stns.linePath.includes(current_stn_idx) && prevStnIds.some(stnId => stns.linePath.includes(stnId))\n            )\n        ) {\n            // no idea why strokeWidth is 12 but only when dy = -11 will be perfect\n            prevDots[0][1] -= LINE_WIDTH - 1;\n            prevDots.unshift([middle, LINE_BRANCH_Y - LINE_WIDTH + 1]);\n        }\n    }\n\n    return (\n        <g\n            transform=\"translate(0,110)\"\n            strokeWidth={12}\n            fill=\"none\"\n            filter={theme[2] === '#999999' ? 'url(#pujiang_outline_runin)' : undefined}\n        >\n            {/* An extension of the line/path with coline color. */}\n            <marker id=\"slope_branch\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n                <path d=\"M0,0L1,1H-1z\" fill={nextColor} />\n            </marker>\n\n            {nextStnIds.length > 1 && (\n                <path stroke={nextColor} d={dotsToPath(nextDots)} markerEnd=\"url(#slope_branch)\" />\n            )}\n            {prevStnIds.length > 1 && <path stroke=\"var(--rmg-grey)\" d={dotsToPath(prevDots)} />}\n        </g>\n    );\n};\n\nconst CurrentText = () => {\n    const param = useRootSelector(store => store.param);\n    const { name } = param.stn_list[param.current_stn_idx];\n    return useMemo(\n        () => (\n            <>\n                <text className=\"rmg-name__zh\" fontSize={112}>\n                    {name[0].replace('\\\\', '')}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={36} dy={50}>\n                    {name[1].replace('\\\\', '')}\n                </text>\n            </>\n        ),\n        [...name]\n    );\n};\n\nconst NextText = (props: { nextName: Name } & React.SVGProps<SVGGElement>) => {\n    const { nextName, ...others } = props;\n    return (\n        <g {...others}>\n            {useMemo(\n                () => (\n                    <>\n                        {nextName[0].split('\\\\').map((name, i, array) => (\n                            <text\n                                className=\"rmg-name__zh\"\n                                fontSize={48}\n                                key={name}\n                                dy={(array.length - 1 - i) * -50 - (nextName[1].split('\\\\').length - 1) * 30}\n                            >\n                                {name}\n                            </text>\n                        ))}\n                        {nextName[1].split('\\\\').map((name, i, array) => (\n                            <text\n                                className=\"rmg-name__en\"\n                                fontSize={24}\n                                key={name}\n                                dy={28 + (array.length - 1 - i) * -30}\n                            >\n                                {name}\n                            </text>\n                        ))}\n                    </>\n                ),\n                [...nextName]\n            )}\n        </g>\n    );\n};\n\nconst PrevStn = (props: { stnIds: string[] }) => {\n    const param = useRootSelector(store => store.param);\n    const nextNames = props.stnIds.map(stnId => param.stn_list[stnId].name);\n    const prevHintDy =\n        (props.stnIds.length > 1 ? 15 : 125) +\n        nextNames.map(name => name[0].split('\\\\').length).reduce((acc, cur) => acc + cur, -nextNames.length) * -50 +\n        nextNames.map(name => name[1].split('\\\\').length).reduce((acc, cur) => acc + cur, -nextNames.length) * -30;\n    const nextBranchTextDy =\n        (props.stnIds.length > 1\n            ? (nextNames[0][0].split('\\\\').length - 1) * -50 + (nextNames[0][1].split('\\\\').length - 1) * -30\n            : 0) + 70;\n\n    return (\n        <g\n            fill=\"gray\"\n            textAnchor={param.direction === 'l' ? 'end' : 'start'}\n            transform={`translate(${param.direction === 'l' ? param.svgWidth.runin - 36 : 36},0)`}\n        >\n            <NextText nextName={nextNames[0]} transform=\"translate(0,183)\" />\n            {props.stnIds.length > 1 && (\n                <NextText nextName={nextNames[1]} transform={`translate(0,${nextBranchTextDy})`} />\n            )}\n            <g transform={`translate(0, ${prevHintDy})`}>\n                <text className=\"rmg-name__zh\" fontSize={22}>\n                    上一站\n                </text>\n                <text className=\"rmg-name__en\" fontSize={12} dx={param.direction === 'l' ? -70 : 70}>\n                    Past Stop\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst NextStn = (props: { stnIds: string[] }) => {\n    const param = useRootSelector(store => store.param);\n    const nextNames = props.stnIds.map(stnId => param.stn_list[stnId].name);\n    const nextHintDy =\n        (props.stnIds.length > 1 ? 15 : 125) +\n        nextNames.map(name => name[0].split('\\\\').length).reduce((acc, cur) => acc + cur, -nextNames.length) * -50 +\n        nextNames.map(name => name[1].split('\\\\').length).reduce((acc, cur) => acc + cur, -nextNames.length) * -30;\n    const nextBranchTextDy =\n        (props.stnIds.length > 1\n            ? (nextNames[0][0].split('\\\\').length - 1) * -50 + (nextNames[0][1].split('\\\\').length - 1) * -30\n            : 0) + 70;\n\n    return (\n        <g\n            textAnchor={param.direction === 'l' ? 'start' : 'end'}\n            transform={`translate(${param.direction === 'l' ? 36 : param.svgWidth.runin - 36},0)`}\n        >\n            <NextText nextName={param.stn_list[props.stnIds[0]].name} transform=\"translate(0,183)\" />\n            {props.stnIds.length > 1 && (\n                <NextText\n                    nextName={param.stn_list[props.stnIds[1]].name}\n                    transform={`translate(0,${nextBranchTextDy})`}\n                />\n            )}\n            <g transform={`translate(0, ${nextHintDy})`}>\n                <text className=\"rmg-name__zh\" fontSize={22}>\n                    下一站\n                </text>\n                <text className=\"rmg-name__en\" fontSize={12} dx={param.direction === 'l' ? 70 : -70}>\n                    Next Stop\n                </text>\n            </g>\n        </g>\n    );\n};\n","import React from 'react';\nimport { InterchangeInfo, Name, Facilities, ColourHex } from '../../../../constants/constants';\nimport { useRootSelector } from '../../../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    color?: ColourHex; // Control the station color if coline is in effect.\n    bank?: -1 | 0 | 1; // Loopline requires station element to be horizontal. Default to 0 (no bank to other side).\n    direction?: 'l' | 'r'; // Loopline requires station element to change direction. Default to current param.\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { stnId, stnState, color, bank: bank_, direction: direction_override } = props;\n    const { direction: direction_param, info_panel_type, stn_list, loop } = useRootSelector(store => store.param);\n    const stnInfo = stn_list[stnId];\n    const direction = direction_override ?? direction_param;\n\n    // shift station name if the line bifurcate here\n    // no shift for loop as there is no vertical line covering the station\n    const branchNameDX = loop\n        ? 0\n        : ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n          (direction === 'r' ? -1 : 1);\n\n    let stationIconStyle = '';\n    let stationIconColor: { [pos: string]: string } = {};\n    if (info_panel_type === 'sh2020') {\n        if (stnInfo.services.length === 3) stationIconStyle = 'stn_sh_2020_direct';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'stn_sh_2020_express';\n        else stationIconStyle = 'stn_sh_2020';\n        stationIconColor.fill = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    } else {\n        // param.info_panel_type === 'sh' or others (from other styles)\n        if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n        else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n            stationIconStyle = 'int2_sh';\n        else stationIconStyle = 'stn_sh';\n        stationIconColor.stroke = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    }\n\n    const bank = bank_ ?? 0;\n    const dx = (direction === 'l' ? 6 : -6) + branchNameDX + bank * 30;\n    const dy = (info_panel_type === 'sh2020' ? -20 : -6) + Math.abs(bank) * (info_panel_type === 'sh2020' ? 25 : 11);\n    const dr = bank ? 0 : direction === 'l' ? -45 : 45;\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                {...stationIconColor} // different styles use either `fill` or `stroke`\n                // sh and sh2020 have different headings of int_sh, so -1 | 1 is multiplied\n                transform={\n                    `translate(${bank * (info_panel_type === 'sh2020' ? 5 : 0)},0)` +\n                    `rotate(${bank * 90 * (info_panel_type === 'sh2020' ? 1 : -1)})`\n                }\n            />\n            <g transform={`translate(${dx},${dy})rotate(${dr})`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={stnState}\n                    direction={direction}\n                    facility={stnInfo.facility}\n                    bank={bank}\n                    oneLine={stnInfo.one_line}\n                    intPadding={stnInfo.int_padding}\n                />\n            </g>\n            {stnState === 0 ? <CurrentStationText /> : undefined}\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    facility: Facilities;\n    bank: -1 | 0 | 1;\n    oneLine: boolean;\n    intPadding: number;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, stnState, direction, facility, bank, oneLine, intPadding } = props;\n\n    // legacy ref to get the exact station name width\n    const stnNameEl = React.useRef<SVGGElement | null>(null);\n\n    // simplify the calculation times\n    const directionPolarity = direction === 'l' ? 1 : -1;\n\n    // main elements icon's dx will change if there is a facility icon or not\n    const mainDx = facility !== Facilities.none ? 30 : 0;\n\n    // interchange will have a line under the name, and should be stretched when placed horizontal in loop\n    const lineDx = bank ? -12 : 0;\n\n    const intEl = React.useRef<SVGGElement | null>(null);\n    const [intWidth, setIntWidth] = React.useState(0);\n    React.useEffect(() => setIntWidth(intEl.current?.getBBox().width ?? 0), [...JSON.stringify(infos)]);\n    const intDx = intPadding - intWidth;\n\n    return (\n        <>\n            {infos.flat().length > 0 && (\n                <>\n                    <line\n                        x1={(lineDx + mainDx) * directionPolarity}\n                        x2={intDx * directionPolarity}\n                        stroke={stnState === -1 ? 'gray' : 'black'}\n                        strokeWidth={0.5}\n                    />\n                    <IntBoxGroup\n                        ref={intEl}\n                        intInfos={infos}\n                        direction={direction}\n                        transform={`translate(${intDx * directionPolarity},-10.75)`}\n                    />\n                </>\n            )}\n\n            {facility !== Facilities.none && <use xlinkHref={'#' + facility} x={10 * directionPolarity} y={-30} />}\n\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${mainDx * directionPolarity},-14)`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={name}\n                    oneLine={oneLine}\n                    directionPolarity={directionPolarity}\n                    fill={stnState === -1 ? 'gray' : stnState === 0 ? 'red' : 'black'}\n                />\n\n                {/* deal out-of-station here as it is a y axis element. leave out-of-system in IntBoxGroup */}\n                {infos[1]?.length > 0 && (\n                    <g transform={`translate(${(intDx + intWidth / 2) * directionPolarity},-30)`}>\n                        <OSIText osiInfos={infos[1]} />\n                    </g>\n                )}\n\n                {/* deal out-of-system here as it's dx is fixed and has nothing to do with IntBoxGroup */}\n                {[...(infos[2] || [])].length > 0 && (\n                    <g transform={`translate(${(intPadding + 5) * directionPolarity},0)`}>\n                        <OSysIText osysiInfos={infos[2]} direction={props.direction} />\n                    </g>\n                )}\n            </g>\n        </>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (\n        props: { stnName: Name; oneLine: boolean; directionPolarity: 1 | -1 } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { stnName, oneLine, directionPolarity, ...others } = props;\n\n        const zhEl = React.useRef<SVGGElement | null>(null);\n        const [enDx, setEnDx] = React.useState(0);\n        React.useEffect(() => {\n            if (oneLine) setEnDx(zhEl.current!.getBBox().width + 5);\n            else setEnDx(0);\n        }, [...stnName, oneLine]);\n\n        const [ZH_HEIGHT, EN_HEIGHT] = [20, 8];\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            <g ref={zhEl}>\n                                {stnName[0].split('\\\\').map((txt, i, arr) => (\n                                    <text\n                                        key={i}\n                                        className=\"rmg-name__zh\"\n                                        dy={\n                                            (arr.length - 1 - i) * -ZH_HEIGHT +\n                                            (oneLine ? EN_HEIGHT : (stnName[1].split('\\\\').length - 1) * -EN_HEIGHT)\n                                        }\n                                    >\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                            <g fontSize={8} transform={`translate(${enDx * directionPolarity},0)`}>\n                                {stnName[1].split('\\\\').map((txt, i, arr) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={(arr.length - 2 - i) * -EN_HEIGHT + 2}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    [...stnName, oneLine, enDx, directionPolarity]\n                )}\n            </g>\n        );\n    }\n);\n\nconst CurrentStationText = () => {\n    const { stn_list } = useRootSelector(store => store.param);\n    const servicesPresent = new Set(\n        Object.values(stn_list)\n            .map(stn => stn.services)\n            .flat()\n    );\n    const dy = [-1, 35, 50, 75][servicesPresent.size];\n\n    return (\n        <g transform={`translate(0, ${dy})`}>\n            <text className=\"rmg-name__zh\" fill=\"red\" textAnchor=\"middle\">\n                本站\n            </text>\n        </g>\n    );\n};\n\nconst IntBoxGroup = React.forwardRef(\n    (\n        props: { intInfos: InterchangeInfo[][]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { intInfos, direction, ...others } = props;\n\n        // also known as non out-of-system transfers\n        const boxInfos = [\n            ...intInfos[0],\n            ...(intInfos[1] || []),\n            // some dirty tricks here as shmetro shows maglev icon even it is a out-of-system transfer\n            // and display a maglev icon is much easier in boxInfos than in OSysIText\n            ...(intInfos[2]?.filter(info => Boolean(info[4].match(/^磁(悬)*浮/))) || []),\n        ];\n\n        let dx = 0; // update in every boxInfos\n\n        return (\n            <g ref={ref} fontSize={14} textAnchor=\"middle\" {...others}>\n                {boxInfos.map((info, i) => {\n                    const isLineNumber = Boolean(info[4].match(/^[\\w\\d]+(号)?线/));\n                    const isMaglev = Boolean(info[4].match(/^磁(悬)*浮/));\n\n                    if (props.direction === 'r') {\n                        dx -= (isLineNumber || isMaglev ? 20 : info[4].length * 14 + 12) + (i === 0 ? 0 : 5);\n                    }\n\n                    let el = <g />;\n                    if (isMaglev) {\n                        el = (\n                            <g transform={`translate(${dx},-16)scale(0.1428571429)`} key={i}>\n                                <IntBoxMaglev info={info} />\n                            </g>\n                        );\n                    } else if (isLineNumber) {\n                        el = (\n                            <g transform={`translate(${dx},0)`} key={i}>\n                                <IntBoxNumber info={info} />\n                            </g>\n                        );\n                    } else {\n                        el = (\n                            <g transform={`translate(${dx},0)`} key={i}>\n                                <IntBoxLetter info={info} />\n                            </g>\n                        );\n                    }\n\n                    if (props.direction === 'l') {\n                        dx += isLineNumber || isMaglev ? 20 + 5 : info[4].length * 14 + 12 + 5;\n                    }\n                    return el;\n                })}\n            </g>\n        );\n    }\n);\n\nconst IntBoxMaglev = React.memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_maglev\" fill={props.info[2]} stroke={props.info[2]} />\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxNumber = React.memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = React.memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station interchanges\n    const lineNames = props.osiInfos.map(info => info[4]).join('，');\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; direction: 'l' | 'r' }) => {\n    // get the all names from out of system transfers\n    const lineNames = props.osysiInfos.map(info => info[4]).join('，');\n    const lineNamesEn = props.osysiInfos.map(info => info[5]).join(', ');\n\n    return React.useMemo(\n        () => (\n            <g textAnchor={props.direction === 'l' ? 'start' : 'end'} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={3}>\n                    转乘{lineNames}\n                </text>\n                <text className=\"rmg-name__en\" dy={10} fontSize=\"75%\">\n                    To {lineNamesEn}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.direction]\n    );\n};\n","import React from 'react';\nimport { drawLine } from '../../methods/share';\nimport { calculateColine, calculateColineStations } from '../../methods/shmetro-coline';\nimport { AtLeastOneOfPartial, InterchangeInfo, Services } from '../../../../constants/constants';\nimport { useRootSelector } from '../../../../redux';\nimport { _linePath, StationGroupProps } from '../main-shmetro';\nimport StationSHMetro from '../station/station-shmetro';\n\ninterface Props {\n    xs: { [stnId: string]: number };\n    servicesPresent: Services[];\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\ninterface ColineServicesPath {\n    main: {\n        path: string;\n        colors: InterchangeInfo[];\n    }[];\n    pass: {\n        path: string;\n        colors: InterchangeInfo[];\n    }[];\n    service: Services;\n}\n\ntype ColinePath = AtLeastOneOfPartial<Record<Services, ColineServicesPath>>;\nconst defaultTheme = ['shanghai', 'sh4', '#5F259F', '#fff', '4号线', 'Line 4'] as InterchangeInfo;\n\nexport const ColineSHMetro = (props: Props) => {\n    const { xs, servicesPresent, stnStates } = props;\n\n    const {\n        svg_height,\n        direction,\n        stn_list,\n        current_stn_idx,\n        branchSpacingPct,\n        info_panel_type,\n        coline: colineInfo,\n    } = useRootSelector(store => store.param);\n    const { branches, depsStr: deps } = useRootSelector(store => store.helper);\n\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(stn_list).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    const branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: stn_list[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -3 : 3 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    // filter out all positive yShares to draw the railmap w/ coline and its branches\n    const colineYShares = Object.entries(yShares)\n        .filter(([k, v]) => v <= 0)\n        .reduce((acc, [k, v]) => ({ ...acc, [k]: v }), {} as typeof yShares);\n    const colineYs = Object.keys(colineYShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: (-colineYShares[cur] * branchSpacingPct * svg_height) / 300 }),\n        {} as typeof yShares\n    );\n\n    // coline color and all stations in the coline segments\n    const colineStns = React.useMemo(\n        () =>\n            calculateColine(\n                calculateColineStations(\n                    Object.values(colineInfo).filter(co => co.display),\n                    branches\n                ),\n                stnStates\n            ),\n        [JSON.stringify(colineInfo), current_stn_idx, direction, deps]\n    );\n\n    const colinePaths = servicesPresent.reduce(\n        (acc, service) => ({\n            ...acc,\n            [service]: (Object.keys(colineStns) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n                (acc, cur) => ({\n                    ...acc,\n                    [cur]: colineStns[cur]\n                        .map(colineStn => ({\n                            path: _linePath(\n                                colineStn.linePath,\n                                cur,\n                                xs,\n                                colineYs,\n                                direction,\n                                service,\n                                servicesPresent.length,\n                                stn_list,\n                                'diagonal'\n                            ),\n                            colors: colineStn.colors,\n                        }))\n                        .filter(colineStn => colineStn.path !== ''),\n                }),\n                {} as ColineServicesPath\n            ),\n        }),\n        {} as ColinePath\n    );\n\n    // only display coline stations when coline in effect\n    const colineStations = calculateColineStations(\n        Object.values(colineInfo).filter(co => co.display),\n        branches\n    )\n        .map(co => co.linePath)\n        .flat();\n\n    const LINE_WIDTH = 12;\n    const COLINE_GAP = info_panel_type === 'sh2020' ? 3 : 0;\n    return (\n        <>\n            <g id=\"coline\" transform={`translate(0,${LINE_WIDTH + COLINE_GAP})`}>\n                <CoLine paths={colinePaths} direction={direction} />\n                <ColineStationInMainLine\n                    colineStns={colineStns}\n                    branches={branches}\n                    xs={xs}\n                    ys={colineYs}\n                    stnStates={stnStates}\n                    lineWidth={LINE_WIDTH}\n                    colineGap={COLINE_GAP}\n                />\n                <ColineStationGroup\n                    stnIds={Object.entries(yShares)\n                        .filter(([k, v]) => v < 0)\n                        .reduce((acc, [k, v]) => [...acc, k], [] as string[])\n                        .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                        .filter(stnId => stn_list[stnId].services.length !== 0)\n                        .filter(stnId => colineStations.includes(stnId))}\n                    xs={xs}\n                    ys={colineYs}\n                    stnStates={stnStates}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default ColineSHMetro;\n\nconst CoLine = (props: { paths: ColinePath; direction: 'l' | 'r' }) => {\n    const { paths, direction } = props;\n\n    return (\n        <>\n            {(Object.keys(paths) as Services[]).map((service, i) => (\n                <g key={`servicePath${i}`} transform={`translate(0,${i * 25})`}>\n                    <g>\n                        {paths[service]?.pass.map((colinePath, j) => (\n                            <React.Fragment key={j}>\n                                <path\n                                    key={j}\n                                    stroke=\"var(--rmg-grey)\"\n                                    strokeWidth={12}\n                                    fill=\"none\"\n                                    d={colinePath.path}\n                                    strokeLinejoin=\"round\"\n                                    filter={service === Services.local ? undefined : `url(#contrast-${service})`}\n                                />\n                            </React.Fragment>\n                        ))}\n\n                        {paths[service]?.main.map((colinePath, j) => (\n                            <React.Fragment key={j}>\n                                {colinePath.colors.length > 1 && (\n                                    <linearGradient\n                                        id={`grad${j}`}\n                                        y1=\"-100%\"\n                                        y2=\"100%\"\n                                        x1=\"0\"\n                                        x2=\"0\"\n                                        // gradientTransform=\"rotate(90)\"\n                                        gradientUnits=\"userSpaceOnUse\"\n                                    >\n                                        {colinePath.colors.map((color, i) => (\n                                            <React.Fragment key={i}>\n                                                {/* more about React.Fragment on https://stackoverflow.com/a/59390967 */}\n                                                <stop // from\n                                                    offset={`${(100 / colinePath.colors.length) * (i + 0)}%`}\n                                                    stopColor={color[2]}\n                                                />\n                                                <stop // to\n                                                    offset={`${(100 / colinePath.colors.length) * (i + 1)}%`}\n                                                    stopColor={color[2]}\n                                                />\n                                            </React.Fragment>\n                                        ))}\n                                    </linearGradient>\n                                )}\n\n                                {direction === 'l' && (\n                                    <marker\n                                        id={`arrow_left_${j}_${colinePath.colors.map(c => c[2]).join('_')}`}\n                                        refY={0.5}\n                                        refX={1}\n                                    >\n                                        <path\n                                            d=\"M1,0L0,1H1z\"\n                                            fill={\n                                                colinePath.colors.length > 1\n                                                    ? `url(#grad${j})`\n                                                    : colinePath.colors[0][2]\n                                            }\n                                        />\n                                    </marker>\n                                )}\n                                {direction === 'r' && (\n                                    <marker\n                                        id={`arrow_right_${j}_${colinePath.colors.map(c => c[2]).join('_')}`}\n                                        refY={0.5}\n                                    >\n                                        <path\n                                            d=\"M0,0L1,1H-1z\"\n                                            fill={\n                                                colinePath.colors.length > 1\n                                                    ? `url(#grad${j})`\n                                                    : colinePath.colors[0][2]\n                                            }\n                                        />\n                                    </marker>\n                                )}\n\n                                <path\n                                    key={j}\n                                    // stroke={colinePath.colors.length > 1 ? `url(#grad${j})` : colinePath.colors[0][2]}\n                                    stroke={(colinePath.colors.at(-1) ?? defaultTheme)[2]}\n                                    strokeWidth={12}\n                                    fill=\"none\"\n                                    d={colinePath.path}\n                                    markerStart={\n                                        direction === 'l'\n                                            ? `url(#arrow_left_${j}_${colinePath.colors.map(c => c[2]).join('_')})`\n                                            : undefined\n                                    }\n                                    markerEnd={\n                                        direction === 'r'\n                                            ? `url(#arrow_right_${j}_${colinePath.colors.map(c => c[2]).join('_')})`\n                                            : undefined\n                                    }\n                                    strokeLinejoin=\"round\"\n                                    filter={service === Services.local ? undefined : `url(#contrast-${service})`}\n                                />\n                            </React.Fragment>\n                        ))}\n                    </g>\n                </g>\n            ))}\n        </>\n    );\n};\n\ninterface ColineStationInMainLineProps {\n    colineStns: ReturnType<typeof calculateColine>;\n    branches: string[][];\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n    lineWidth: number;\n    colineGap: number;\n}\n\n/**\n * A small rect overlay on the main branch where coline is present.\n */\nconst ColineStationInMainLine = (props: ColineStationInMainLineProps) => {\n    const { colineStns, branches, xs, ys, stnStates, lineWidth: LINE_WIDTH, colineGap: COLINE_GAP } = props;\n    const { line_name, theme, info_panel_type } = useRootSelector(store => store.param);\n\n    // data to draw the station elements.\n    const colineStations = [...colineStns.main, ...colineStns.pass]\n        // Merge main and pass station together to minimize the code duplication\n        // and its state can obtained by stnStates.\n        .map(stns =>\n            stns.linePath.map(stnId => ({\n                curStn: stnId,\n                x: xs[stnId],\n                y: ys[stnId],\n                color: stns.colors.at(-1) ?? [...theme, ...line_name],\n            }))\n        )\n        .flat()\n        .reduce(\n            // remove current station as it appears in both main and pass\n            (acc, cur) => (acc.find(x => x.curStn === cur.curStn) ? acc : acc.concat(cur)),\n            [] as {\n                curStn: string;\n                x: number;\n                y: number;\n                color: InterchangeInfo;\n            }[]\n        )\n        // only take the coline stations in the first branch(general main line)\n        // as coline stations in lower branches will be taken care by ColineStationGroup\n        .filter(stn => branches[0].includes(stn.curStn));\n    console.log(colineStations);\n\n    return (\n        <g id=\"stations_in_mainline\">\n            {colineStations.map(colineStation => {\n                const { curStn, x, y, color } = colineStation;\n                const height = (stnStates[curStn] === -1 ? 0 : LINE_WIDTH) + COLINE_GAP + LINE_WIDTH;\n                const dy = (stnStates[curStn] === -1 ? 0 : -LINE_WIDTH) - COLINE_GAP - LINE_WIDTH / 2;\n                return (\n                    <g key={curStn} transform={`translate(${x},${y})`}>\n                        {info_panel_type === 'sh2020' ? (\n                            <rect\n                                stroke=\"none\"\n                                height={height}\n                                width={12}\n                                x={-6}\n                                y={dy}\n                                fill={stnStates[curStn] === -1 ? 'var(--rmg-grey)' : color[2]}\n                            />\n                        ) : (\n                            <use\n                                xlinkHref=\"#int2_sh\"\n                                stroke=\"var(--rmg-theme-colour)\"\n                                transform={`translate(0,${-LINE_WIDTH})`}\n                            />\n                        )}\n                    </g>\n                );\n            })}\n        </g>\n    );\n};\n\n/**\n * Complete station component for stations in lower branches.\n */\nconst ColineStationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates, stnIds } = props;\n    const { branches, depsStr: deps } = useRootSelector(store => store.helper);\n    const { line_name, theme, coline } = useRootSelector(store => store.param);\n\n    // get colors of stations in coline branches, they use different colors than var(--rmg-theme-colour)\n    const colines = React.useMemo(\n        () => calculateColineStations(Object.values(coline), branches),\n        [JSON.stringify(coline), deps]\n    );\n    const colors = stnIds.reduce(\n        (acc, stnId) => ({\n            ...acc,\n            [stnId]: colines\n                .filter(coline => coline.linePath.includes(stnId))\n                .map(coline => coline.colors)\n                .flat()\n                // TODO-coline: support multiple colines\n                .at(0) ?? [...theme, ...line_name],\n        }),\n        {} as { [stnId: string]: InterchangeInfo }\n    );\n\n    return (\n        <g id=\"stations_in_coline\">\n            {stnIds.map(stnId => (\n                <g key={stnId} transform={`translate(${xs[stnId]},${ys[stnId]})`}>\n                    <StationSHMetro stnId={stnId} stnState={stnStates[stnId]} color={colors[stnId][2]} />\n                </g>\n            ))}\n        </g>\n    );\n};\n","import React from 'react';\nimport { adjacencyList, criticalPathMethod, drawLine, getStnState, getXShareMTR } from '../methods/share';\nimport StationSHMetro from './station/station-shmetro';\nimport ColineSHMetro from './coline/coline-shmetro';\nimport { AtLeastOneOfPartial, Services, StationDict } from '../../../constants/constants';\nimport { useRootSelector } from '../../../redux';\n\ninterface servicesPath {\n    main: string[];\n    pass: string[];\n    service: Services;\n}\n\ntype Paths = AtLeastOneOfPartial<Record<Services, servicesPath>>;\n\nconst MainSHMetro = () => {\n    const { routes, branches, depsStr: deps } = useRootSelector(store => store.helper);\n    const param = useRootSelector(store => store.param);\n    const { svg_height, stn_list, branchSpacingPct, coline, direction } = useRootSelector(store => store.param);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        () => 0,\n        () => 0\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    // const yShares = React.useMemo(\n    //     () => {\n    //         console.log('computing y shares');\n    //         return Object.keys(param.stn_list).reduce(\n    //             (acc, cur) => ({ ...acc, [cur]: branches[0].includes(cur) ? 0 : 3 }),\n    //             {} as { [stnId: string]: number }\n    //         );\n    //     },\n    //     // eslint-disable-next-line react-hooks/exhaustive-deps\n    //     [deps]\n    // );\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(stn_list).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    const branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: stn_list[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -3 : 3 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n\n    // filter out all negative yShares to draw the traditional railmap w/o coline and its branches\n    const lineYShares = Object.entries(yShares)\n        .filter(([k, v]) => v >= 0)\n        .reduce((acc, [k, v]) => ({ ...acc, [k]: v }), {} as typeof yShares);\n    const lineYs = Object.keys(lineYShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: (-lineYShares[cur] * branchSpacingPct * svg_height) / 300 }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const servicesAll = Object.values(Services);\n    const servicesPresent = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat() // all services in all stations\n        .reduce(\n            (acc, cur) => {\n                acc[servicesAll.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        ) // set the flag in order\n        .map((bool, i) => [servicesAll[i], bool] as [Services, boolean]) // zip\n        .filter(s => s[1]) // get the existing service\n        .map(s => s[0]); // maintain the services' order\n\n    const linePaths = branches\n        .map(branch => drawLine(branch, stnStates))\n        .reduce(\n            (acc, cur) => {\n                acc.main.push(cur.main);\n                acc.pass.push(cur.pass);\n                return acc;\n            },\n            { main: [], pass: [] } as { main: string[][]; pass: string[][] }\n        );\n\n    const paths = servicesPresent.reduce(\n        (acc, service) => ({\n            ...acc,\n            [service]: (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n                (acc, cur) => ({\n                    ...acc,\n                    [cur]: linePaths[cur]\n                        .map(stns =>\n                            _linePath(\n                                stns,\n                                cur,\n                                xs,\n                                lineYs,\n                                direction,\n                                service,\n                                servicesPresent.length,\n                                stn_list\n                                // info_panel_type === 'sh2020' ? 'rightangle' : 'diagonal'\n                            )\n                        )\n                        .filter(path => path !== ''),\n                }),\n                {} as servicesPath\n            ),\n        }),\n        {} as Paths\n    );\n\n    return (\n        <g\n            id=\"main\"\n            transform={`translate(0,${param.svg_height * (Object.keys(coline).length > 0 ? 0.5 : 0.7 + 0.1)})`}\n        >\n            <Line paths={paths} direction={param.direction} />\n            <StationGroup\n                stnIds={Object.keys(lineYShares)\n                    .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                    .filter(stnId => stn_list[stnId].services.length !== 0)}\n                xs={xs}\n                ys={lineYs}\n                stnStates={stnStates}\n            />\n            {Object.keys(coline).length > 0 && (\n                <ColineSHMetro xs={xs} servicesPresent={servicesPresent} stnStates={stnStates} />\n            )}\n            {servicesPresent.length > 1 && <ServicesElements servicesLevel={servicesPresent} lineXs={lineXs} />}\n        </g>\n    );\n};\n\nexport default MainSHMetro;\n\nconst Line = (props: { paths: Paths; direction: 'l' | 'r' }) => {\n    const { theme } = useRootSelector(store => store.param);\n    const { paths, direction } = props;\n\n    return (\n        <>\n            {(Object.keys(paths) as Services[]).map((service, i) => (\n                <g\n                    key={`servicePath${i}`}\n                    transform={`translate(0,${i * 25})`}\n                    // the following line is a special case for pujiang line\n                    // where its pass line color should be white with outline\n                    // surrounding it, see #161 for details.\n                    filter={theme[2] === '#999999' ? 'url(#pujiang_outline_railmap)' : undefined}\n                >\n                    <g>\n                        {paths[service]?.pass.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"var(--rmg-grey)\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_gray)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_gray)' : undefined}\n                                strokeLinejoin=\"round\"\n                            />\n                        ))}\n                    </g>\n                    <g>\n                        {paths[service]?.main.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"var(--rmg-theme-colour)\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={direction === 'l' ? 'url(#arrow_theme_left)' : undefined}\n                                markerEnd={direction === 'r' ? 'url(#arrow_theme_right)' : undefined}\n                                strokeLinejoin=\"round\"\n                                filter={service === Services.local ? undefined : `url(#contrast-${service})`}\n                            />\n                        ))}\n                    </g>\n                </g>\n            ))}\n        </>\n    );\n};\n\nexport const _linePath = (\n    stnIds: string[],\n    type: 'main' | 'pass',\n    xs: { [stnId: string]: number },\n    ys: { [stnId: string]: number },\n    direction: 'l' | 'r',\n    services: Services,\n    servicesMax: number,\n    stn_list: StationDict, // only used to determine startFromTerminal or endAtTerminal\n    bend: 'rightangle' | 'diagonal' = 'rightangle'\n) => {\n    var [prevY, prevX] = [] as number[];\n    var path: { [key: string]: number[] } = {};\n\n    const servicesDelta = {\n        local: 0,\n        express: 20,\n        direct: 40,\n    }[services]; // TODO: enum Services could be a better idea?\n    const servicesPassDelta = servicesMax > 1 ? 50 : 0;\n\n    // extra short line on either end\n    let e1 = 30;\n    // check if path starts from or ends at the terminal\n    // and change e1 to 0 if it matches\n    if (stnIds.length > 0) {\n        let startFromTerminal = false,\n            endAtTerminal = false;\n        if (stn_list[stnIds.at(-1) || 0].children.some(stnId => ['linestart', 'lineend'].includes(stnId))) {\n            endAtTerminal = true;\n        } else if (stn_list[stnIds.at(0) || 0].parents.some(stnId => ['linestart', 'lineend'].includes(stnId))) {\n            startFromTerminal = true;\n        }\n        e1 = startFromTerminal || endAtTerminal ? e1 : 0;\n    }\n\n    // diagonal use e2 to make soft line\n    const e2 = 30;\n\n    stnIds.forEach(stnId => {\n        var x = xs[stnId];\n        var y = ys[stnId];\n        if (!prevY && prevY !== 0) {\n            [prevX, prevY] = [x, y];\n            path['start'] = [x, y];\n            return;\n        }\n        if (y === 0) {\n            // merge back to main line\n            if (y !== prevY) {\n                path['bifurcate'] = [prevX, prevY];\n            }\n        } else {\n            // on the branch line\n            if (y !== prevY) {\n                path['bifurcate'] = [x, y];\n            }\n        }\n        path['end'] = [x, y];\n        [prevX, prevY] = [x, y];\n    });\n\n    // generate path\n    if (!path.hasOwnProperty('start')) {\n        // no line generated\n        // keys in path: none\n        return '';\n    } else if (!path.hasOwnProperty('end')) {\n        // little line (only beyond terminal station)\n        // keys in path: start\n        let [x, y] = path['start'];\n        if (type === 'main') {\n            // current at terminal(end) station, draw the litte main line\n            if (direction === 'l') {\n                return `M ${x - e1 - servicesDelta},${y} H ${x}`;\n            } else {\n                return `M ${x},${y} H ${x + e1 + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            // current at terminal(start) station, draw the litte pass line\n            if (direction === 'l') {\n                return `M ${x},${y} L ${x + e1 + servicesPassDelta},${y}`;\n            } else {\n                return `M ${x - e1 - servicesPassDelta},${y} L ${x},${y}`;\n            }\n        }\n    } else if (!path.hasOwnProperty('bifurcate')) {\n        // general main line\n        // keys in path: start, end\n        let [x, y] = path['start'],\n            h = path['end'][0];\n        if (type === 'main') {\n            if (direction === 'l') {\n                return `M ${x - e1 - servicesDelta},${y} H ${h}`;\n            } else {\n                return `M ${x},${y} H ${h + e1 + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                return `M ${x - e1},${y} H ${h + e1 + servicesPassDelta}`;\n            } else {\n                return `M ${x - e1 - servicesPassDelta},${y} H ${h + e1}`;\n            }\n        }\n    } else {\n        // main line bifurcate here to become the branch line\n        // and path return here are only branch line\n        // keys in path: start, bifurcate, end\n        // TODO: make diagonal available to `sh`\n\n        let [x, y] = path['start'];\n        let xb = path['bifurcate'][0];\n        let [xm, ym] = path['end'];\n        if (type === 'main') {\n            if (direction === 'l') {\n                if (ym > y) {\n                    console.log(path);\n                    // main line, left direction, center to upper\n                    if (bend === 'rightangle') return `M ${x - e1},${y} H ${xm} V ${ym}`;\n                    // center to upper/rightangle, lower to center/diagonal\n                    else return `M ${x},${y} H ${x + e2} L ${xb - e2},${ym} H ${xm}`;\n                } else {\n                    // wrong marker\n                    // main line, left direction, upper to center\n                    if (bend === 'rightangle') return `M ${x},${y} V ${ym} H ${xm}`;\n                    // upper to center/rightangle, center to lower/diagonal\n                    else return `M ${x - e1},${y} H ${xb + e2} L ${xm - e2},${ym} H ${xm}`;\n                }\n            } else {\n                if (ym > y) {\n                    // wrong marker\n                    // main line, right direction, upper to center\n                    if (bend === 'rightangle') return `M ${x},${y} H ${xm} V ${ym}`;\n                    // upper to center/rightangle, center to lower/diagonal\n                    else return `M ${x},${y} H ${x + e2} L ${xb - e2},${ym} H ${xm + e1}`;\n                } else {\n                    // main line, right direction, center to upper\n                    if (bend === 'rightangle') return `M ${x},${y} V ${ym} H ${xm + e1}`;\n                    // center to upper/rightangle, lower to center/diagonal\n                    else return `M ${x},${y} H ${xb + e2} L ${xm - e2},${ym} H ${xm}`;\n                }\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                if (ym > y) {\n                    // pass line, left direction, center to upper\n                    if (bend === 'rightangle') return `M ${x - e1},${y} H ${xm} V ${ym}`;\n                    // center to upper/rightangle, lower to center/diagonal\n                    else return `M ${x},${y} H ${x + e2} L ${xb - e2},${ym} H ${xm + e1}`;\n                } else {\n                    // pass line, left direction, upper to center\n                    if (bend === 'rightangle') return `M ${x},${y} V ${ym} H ${xm + e1}`;\n                    // upper to center/rightangle, center to lower/diagonal\n                    else return `M ${x - e1},${y} H ${xb + e2} L ${xm - e2},${ym} H ${xm}`;\n                }\n            } else {\n                if (ym > y) {\n                    // pass line, right direction, upper to center\n                    if (bend === 'rightangle') return `M ${x - e1},${y} H ${xm} V ${ym}`;\n                    // upper to center/rightangle, center to lower/diagonal\n                    return `M ${x},${y} H ${x + e2} L ${xb - e2},${ym} H ${xm + e1}`;\n                } else {\n                    // pass line, right direction, center to upper\n                    if (bend === 'rightangle') return `M ${x},${y} V ${ym} H ${xm + e1}`;\n                    // center to upper/rightangle, lower to center/diagonal\n                    return `M ${x - e1},${y} H ${xb + e2} L ${xm - e2},${ym} H ${xm}`;\n                }\n            }\n        }\n    }\n};\n\nexport interface StationGroupProps {\n    stnIds: string[];\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates, stnIds } = props;\n\n    return (\n        <g>\n            {stnIds.map(stnId => (\n                <g key={stnId} transform={`translate(${xs[stnId]},${ys[stnId]})`}>\n                    <StationSHMetro stnId={stnId} stnState={stnStates[stnId]} />\n                </g>\n            ))}\n        </g>\n    );\n};\n\nconst ServicesElements = (props: { servicesLevel: Services[]; lineXs: number[] }) => {\n    const { svg_height, direction, svgWidth } = useRootSelector(store => store.param);\n    const dy = -svg_height + 130;\n\n    const servicesLevel = props.servicesLevel.map(\n        service =>\n            ({\n                local: '普通车',\n                express: '大站车',\n                direct: '直达车',\n            }[service])\n    );\n\n    // let dx = props.direction === 'r' ? 5 : param.svgWidth.railmap - 55;\n    const labelX = direction === 'r' ? props.lineXs[0] - 42 : props.lineXs[1] + 42;\n\n    let dx_hint = props.servicesLevel.length === 2 ? 350 : 500;\n\n    return React.useMemo(\n        () => (\n            <g>\n                {servicesLevel.map((service, i) => (\n                    <g key={service} transform={`translate(${labelX},${i * 25})`}>\n                        <rect x={-27.5} height={10} width={55} fill={'white'} stroke={'black'} y={-5}></rect>\n                        <text\n                            className=\"rmg-name__zh\"\n                            fontSize={9}\n                            y={3}\n                            textAnchor=\"middle\"\n                        >{`${service}运行线`}</text>\n                    </g>\n                ))}\n                <g transform={`translate(${direction === 'r' ? 30 : svgWidth.railmap - dx_hint},${dy})`}>\n                    <text className=\"rmg-name__zh\">图例：</text>\n                    {servicesLevel.map((serviceLevel, i) => (\n                        <g key={`serviceLevel${i}`} transform={`translate(${i * 150 + 50},0)`}>\n                            <line\n                                x1=\"0\"\n                                x2=\"35\"\n                                y1=\"-5\"\n                                y2=\"-5\"\n                                stroke=\"var(--rmg-theme-colour)\"\n                                strokeWidth=\"12\"\n                                filter={i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : ''}\n                            />\n                            <use x=\"17.5\" y=\"-5\" xlinkHref=\"#stn_sh\" fill=\"var(--rmg-theme-colour)\" />\n                            <text x=\"40\" className=\"rmg-name__zh\">{`${serviceLevel}停靠站`}</text>\n                        </g>\n                    ))}\n                </g>\n            </g>\n        ),\n        [svg_height, direction, svgWidth, props.servicesLevel, props.lineXs]\n    );\n};\n\nexport const DirectionElements = () => {\n    const { direction, svgWidth, coline } = useRootSelector(store => store.param);\n    // arrow will be black stroke with white fill in coline\n    const isColine = Object.keys(coline).length ? true : false;\n\n    return React.useMemo(\n        () => (\n            <g transform={`translate(${direction === 'l' ? 50 : svgWidth.railmap - 150},50)`}>\n                <text className=\"rmg-name__zh\">列车前进方向</text>\n                <path\n                    d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\"\n                    stroke={!isColine ? undefined : 'var(--rmg-black)'}\n                    strokeWidth={!isColine ? undefined : 5}\n                    fill={!isColine ? 'var(--rmg-theme-colour)' : 'var(--rmg-white)'}\n                    transform={`translate(${direction === 'l' ? -30 : 125},-5)rotate(${\n                        direction === 'l' ? 0 : 180\n                    })scale(0.15)`}\n                />\n            </g>\n        ),\n        [direction, coline, svgWidth.railmap]\n    );\n};\n","import React from 'react';\nimport { ColourHex, InterchangeInfo, Name, Services } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\n\nexport type NameDirection = 'upward' | 'downward' | 'left' | 'right';\n\ninterface Props {\n    stnId: string;\n    nameDirection: NameDirection;\n    services: Services[];\n    color?: ColourHex; // Control the station color if coline is in effect.\n}\n\nexport const StationSHMetro = (props: Props) => {\n    const { stnId, nameDirection, services, color } = props;\n    const stnInfo = useRootSelector(store => store.param.stn_list[stnId]);\n\n    const transfer = [...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])];\n    let stationIconStyle = '';\n    if (stnInfo.services.length === 3) stationIconStyle = 'direct_indoor_sh';\n    else if (stnInfo.services.length === 2) stationIconStyle = 'express_indoor_sh';\n    else if (transfer.length > 0) stationIconStyle = 'int2_indoor_sh';\n    else stationIconStyle = 'stn_indoor_sh';\n\n    const dr = nameDirection === 'left' || nameDirection === 'right' ? 90 : 0;\n    return (\n        <>\n            <StationNameGElement\n                name={stnInfo.name}\n                infos={stnInfo.transfer.info}\n                nameDirection={nameDirection}\n                services={services}\n            />\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                stroke={transfer.length > 0 ? 'var(--rmg-black)' : color ?? 'var(--rmg-theme-colour)'}\n                transform={`rotate(${dr})`}\n            />\n            {/* This should be in IntBoxGroupProps, put here because the station icon will cover this */}\n            {stnInfo.services.length > 1 && (\n                <text className=\"rmg-name__zh\" writingMode=\"tb\" fontSize=\"60%\" dy=\"-12\">\n                    {`大站车${stnInfo.services.length > 2 ? ' 直达车' : ''}停靠`}\n                </text>\n            )}\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    nameDirection: NameDirection;\n    services: Services[];\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, nameDirection, services } = props;\n    const dy = { upward: 60, downward: -30, left: 0, right: 0 }[nameDirection];\n    const osi_dx = { upward: 0, downward: 0, left: 85, right: -85 }[nameDirection];\n    const osi_dy = {\n        upward: -185,\n        downward: 150 + (services.length === 3 ? 40 : 0),\n        left: -30,\n        right: -30,\n    }[nameDirection];\n    const osysi_dx =\n        // only compute when there is a out-of-system transfer\n        infos[2]?.length > 0\n            ? {\n                  upward: 0,\n                  downward: 0,\n                  left: infos[0].length + infos[1].length !== 0 ? 85 : 25,\n                  right: infos[0].length + infos[1].length !== 0 ? -85 : -25,\n              }[nameDirection]\n            : 0;\n    const osysi_dy =\n        // only compute when there is a out-of-system transfer\n        infos[2]?.length > 0\n            ? {\n                  upward: infos[1]?.length ? -210 : infos[0].length ? -180 : -100,\n                  downward: (infos[1]?.length ? 190 : infos[0].length ? 160 : 100) + (services.length === 3 ? 40 : 0),\n                  left: infos[1]?.length ? -60 : infos[0].length ? -30 : 0,\n                  right: infos[1]?.length ? -60 : infos[0].length ? -30 : 0,\n              }[nameDirection]\n            : 0;\n    return (\n        <g transform={`translate(0,${dy})`}>\n            {nameDirection === 'upward' || nameDirection === 'downward' ? (\n                <>\n                    <line\n                        x1={-30}\n                        x2={30}\n                        y1={nameDirection === 'upward' ? -23 : -10}\n                        y2={nameDirection === 'upward' ? -23 : -10}\n                        stroke=\"black\"\n                    />\n                    <line\n                        y1={nameDirection === 'upward' ? -23 : -10}\n                        y2={nameDirection === 'upward' ? -23 - 25 : 20}\n                        stroke=\"black\"\n                    />\n                </>\n            ) : (\n                <>\n                    <line\n                        x1={nameDirection === 'left' ? -50 : 15}\n                        x2={nameDirection === 'left' ? -15 : 50}\n                        y1={0}\n                        y2={0}\n                        stroke=\"black\"\n                    />\n                    <line\n                        x1={nameDirection === 'left' ? -50 : 50}\n                        x2={nameDirection === 'left' ? -50 : 50}\n                        y1={-30}\n                        y2={30}\n                        stroke=\"black\"\n                    />\n                </>\n            )}\n\n            {[...infos[0], ...(infos[1] || [])].length > 0 && (\n                <IntBoxGroup\n                    intInfos={[...infos[0], ...(infos[1] || [])]}\n                    arrowDirection={nameDirection}\n                    services={services}\n                />\n            )}\n\n            <StationName stnName={name} nameDirection={nameDirection} fill=\"black\" />\n\n            {infos[1]?.length > 0 && (\n                <g transform={`translate(${osi_dx},${osi_dy})`}>\n                    <OSIText osiInfos={infos[1]} nameDirection={nameDirection} />\n                </g>\n            )}\n\n            {infos[2]?.length > 0 && (\n                <g transform={`translate(${osysi_dx},${osysi_dy})`}>\n                    <OSysIText osysiInfos={infos[2]} nameDirection={nameDirection} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (\n        props: { stnName: Name; nameDirection: NameDirection } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { stnName, nameDirection, ...others } = props;\n        const name = stnName[0].split('\\\\');\n        const nameENLn = stnName[1].split('\\\\').length;\n        const dx = { upward: 0, downward: 0, left: -60, right: 60 }[nameDirection];\n        const dy = {\n            upward: -2,\n            downward: -30 - 12 * (nameENLn - 1),\n            left: -10 * (nameENLn - 1),\n            right: -10 * (nameENLn - 1),\n        }[nameDirection];\n        const anchor = { upward: 'middle', downward: 'middle', left: 'end', right: 'start' }[nameDirection];\n\n        return (\n            <g ref={ref} {...others} textAnchor={anchor} transform={`translate(${dx},${dy})`}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {name.map((txt, i, array) => (\n                                <text\n                                    key={i}\n                                    className=\"rmg-name__zh\"\n                                    dy={nameDirection === 'upward' ? 16 * i : (array.length - 1 - i) * -16}\n                                >\n                                    {txt}\n                                </text>\n                            ))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text\n                                        key={i}\n                                        className=\"rmg-name__en\"\n                                        dy={\n                                            12 * (i + 1) +\n                                            (nameDirection === 'upward' ? (name.length > 1 ? name.length * 7.5 : 0) : 0)\n                                        }\n                                    >\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\ninterface IntBoxGroupProps {\n    intInfos: InterchangeInfo[];\n    arrowDirection: NameDirection;\n    services: Services[];\n}\n\nconst IntBoxGroup = (props: IntBoxGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, arrowDirection, services } = props;\n\n    // name each different linearGradient that will fill the arrow\n    const intNameId = intInfos.map(intInfo => intInfo[2]).reduce((name, color) => name + color, '');\n\n    // get the interchange line names\n    const lineNames = [\n        intInfos\n            .filter(intInfo => intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4].replace(/^(\\d+)(.*)$/, '$1'))\n            .join('，')\n            .concat('号线'),\n        intInfos\n            .filter(intInfo => !intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4])\n            .join('，'),\n    ]\n        .filter(name => name && name !== '号线')\n        .join('，');\n    const lineNamesEn = [\n        'Line '.concat(\n            intInfos\n                .filter(intInfo => intInfo[5].match(/^L|line$/))\n                .map(intInfo => intInfo[5].replace('Line', '').replace('line', '').trim())\n                .join(',')\n        ),\n        intInfos\n            .filter(intInfo => !intInfo[5].match(/^L|line$/))\n            .map(intInfo => intInfo[5])\n            .join('，'),\n    ]\n        .filter(name => name && name !== 'Line ')\n        .join(',');\n\n    // for services contains three level (normal, express, direct)\n    // additional length is required on transfer arrow otherwise\n    // the station icon will be longer than the arrow itself\n    const arrowLength = services.length === 3 ? 80 : 45;\n    const transfer_dy = { upward: -145, downward: 125 + (services.length === 3 ? 40 : 0), left: 7, right: 7 }[\n        arrowDirection\n    ];\n\n    // bunch of constants for all four directions\n    const arrow_dx = { upward: 0, downward: 0, left: 20, right: -20 }[arrowDirection];\n    const arrow_dy = { upward: -74, downward: 44, left: 0, right: 0 }[arrowDirection];\n    const arrow_dr = { upward: 0, downward: 180, left: 90, right: -90 }[arrowDirection];\n    const transfer_dx = { upward: 0, downward: 0, left: 85, right: -85 }[arrowDirection];\n    const transfer_anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[arrowDirection];\n    return (\n        <g>\n            <path\n                id=\"int_indoor_arrow_sh\"\n                stroke=\"var(--rmg-black)\"\n                strokeWidth={1}\n                transform={`translate(${arrow_dx},${arrow_dy})rotate(${arrow_dr})`}\n                fill={intInfos.length === 1 ? intInfos[0][2] : `url(#grad${intNameId})`}\n                d={`M -7.5,0 v -${arrowLength} h -7.5 l 15,-15 l 15,15 h -7.5 v ${arrowLength} Z`}\n            />\n\n            {intInfos.length > 1 && (\n                <>\n                    <linearGradient\n                        id={`grad${intNameId}`}\n                        y1=\"0\"\n                        y2=\"0\"\n                        x1={arrowDirection === 'upward' ? '25%' : '75%'}\n                        x2={arrowDirection === 'upward' ? '75%' : '25%'}\n                    >\n                        {intInfos.map((intInfo, i) => (\n                            <React.Fragment key={i}>\n                                {/* more about React.Fragment on https://stackoverflow.com/a/59390967 */}\n                                <stop // start from\n                                    offset={`${(100 / intInfos.length) * (i + 0)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                                <stop // to\n                                    offset={`${(100 / intInfos.length) * (i + 1)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                            </React.Fragment>\n                        ))}\n                    </linearGradient>\n\n                    {/* a range inplementation [0, 1, 2 ... intInfos.length - 1] */}\n                    {/* {[...Array(intInfos.length - 1).keys()].map(i => (<line\n                        x1={-7.5 + (15 / intInfos.length) * (i + 1)}\n                        x2={-7.5 + (15 / intInfos.length) * (i + 1)}\n                        y1=\"-74\"\n                        y2={-104 - 7.5 - 7.5 / (intInfos.length - 1) * (i+1)}\n                        stroke=\"black\"\n                    />))} */}\n                </>\n            )}\n\n            <g transform={`translate(${transfer_dx},${transfer_dy})`} textAnchor={`${transfer_anchor}`}>\n                <text className=\"rmg-name__zh\" dy={-7}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={5} fontSize={9.6}>\n                    {`Interchange ${lineNamesEn}`}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[]; nameDirection: NameDirection }) => {\n    const anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[props.nameDirection];\n    return React.useMemo(\n        () => (\n            <g textAnchor={`${anchor}`} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${props.osiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osiInfos.toString(), props.nameDirection]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; nameDirection: NameDirection }) => {\n    const anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[props.nameDirection];\n    return React.useMemo(\n        () => (\n            <g textAnchor={`${anchor}`}>\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`转乘${props.osysiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={7.5} fontSize={9.6}>\n                    {`To ${props.osysiInfos.map(info => info[5]).join(', ')}`}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.nameDirection]\n    );\n};\n","import { useRootSelector } from '../../../../redux';\nimport { CanvasType, ColourHex, Services } from '../../../../constants/constants';\nimport StationSHMetro from '../station/station-shmetro';\nimport { StationSHMetro as StationSHMetroIndoor } from '../../../indoor/station-shmetro';\nimport React from 'react';\n\nexport const get_loop_branches = (\n    branches: string[][],\n    branch_stn_ids: string[],\n    svg_width: number,\n    padding: number,\n    left_and_right_factor: number,\n    bottom_factor: number\n) => {\n    const loopline = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n\n    const loop_branches = branches.slice(1, 3).map(branch => branch.slice(1, branch.length - 1));\n    // calculate the length of top stations + branch(es) stations\n    const critical_path_length =\n        loop_branches.reduce(\n            (acc, cur) =>\n                acc + cur.filter(stn_id => !['linestart', 'lineend', ...branch_stn_ids].includes(stn_id)).length,\n            0\n        ) +\n        loopline.length -\n        bottom_factor -\n        left_and_right_factor * 2;\n    // interval for each station on the top side with branches\n    // note the interval of station for the top side will be smaller because of e = 0.1 in get_xshares_yshares_of_loop\n    const x_interval = (svg_width - ((svg_width * padding) / 100) * 2) / (1 + critical_path_length);\n    // split lines_xs for branches, used to shrink loop line's lines_xs\n    const line_xs_branches = [\n        (svg_width * padding) / 100 + (loop_branches.at(0) ?? []).length * x_interval,\n        svg_width * (1 - padding / 100) - (loop_branches.at(1) ?? []).length * x_interval,\n    ] as [number, number];\n    const xs_branches = {\n        ...Object.fromEntries(\n            (loop_branches.at(0) ?? []).map((stn, i) => [stn, (svg_width * padding) / 100 + i * x_interval])\n        ),\n        ...Object.fromEntries(\n            (loop_branches.at(1) ?? []).map((stn, i) => [stn, line_xs_branches[1] + (1 + i) * x_interval])\n        ),\n    };\n    return { loop_branches, line_xs_branches, xs_branches };\n};\n\nexport const LoopBranches = (props: {\n    loop_branches: string[][];\n    edges: [number, number, number, number];\n    xs: {\n        [k: string]: number;\n    };\n    ys: {\n        [k: string]: number;\n    };\n    canvas: CanvasType.RailMap | CanvasType.Indoor;\n}) => {\n    const { loop_branches, edges, xs, ys, canvas } = props;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM] = edges;\n\n    const { branches } = useRootSelector(store => store.helper);\n    const { current_stn_idx: current_stn_id, direction, coline } = useRootSelector(store => store.param);\n\n    const e = canvas === CanvasType.RailMap ? 30 : 0;\n    const branches_paths = [\n        `M ${X_LEFT},${Y_TOP} H ${Number(xs[loop_branches.at(0)?.at(0) ?? '']) - e}`,\n        `M ${X_RIGHT},${Y_TOP} H ${Number(xs[loop_branches.at(1)?.at(-1) ?? '']) + e}`,\n    ];\n\n    const loopline = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n    const branches_coline_color = Object.values(coline)\n        .filter(co => ![co.from, co.to].every(stn_id => loopline.includes(stn_id)))\n        .map(co => co.colors);\n\n    return (\n        <>\n            {loop_branches.map((loop_branch, i) => (\n                <React.Fragment key={loop_branch.at(0)}>\n                    {branches_coline_color\n                        // remove duplicate\n                        .filter((c, i, self) => i === self.findIndex(t => t.at(0)?.at(2) === c.at(0)?.at(2)))\n                        // generate marker with coline color\n                        .map(color => (\n                            <marker key={color[0][2]} id={`arrow_theme_${color[0][2]}`} refX={1} refY={0.5}>\n                                <path d=\"M0,1H2L1,0z\" fill={color[0][2]} />\n                            </marker>\n                        ))}\n                    <path\n                        stroke={branches_coline_color.at(i)?.at(0)?.at(2) ?? 'var(--rmg-theme-colour)'}\n                        strokeWidth={12}\n                        fill=\"none\"\n                        d={branches_paths[i]}\n                        markerEnd={\n                            canvas === CanvasType.RailMap &&\n                            ((direction === 'l' && i === 0) || (direction === 'r' && i === 1))\n                                ? branches_coline_color.at(i)\n                                    ? `url(#arrow_theme_${branches_coline_color[i][0][2]})`\n                                    : 'url(#arrow_theme)'\n                                : undefined\n                        }\n                    />\n                    {loop_branch\n                        .filter(stn_id => !['linestart', 'lineend'].includes(stn_id))\n                        .map(stn_id => (\n                            <React.Fragment key={stn_id}>\n                                {canvas === CanvasType.RailMap && (\n                                    <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                                        <StationSHMetro\n                                            stnId={stn_id}\n                                            stnState={current_stn_id === stn_id ? 0 : 1}\n                                            bank={0}\n                                            direction={direction}\n                                            color={branches_coline_color.at(i)?.at(0)?.at(2) as ColourHex | undefined}\n                                        />\n                                    </g>\n                                )}\n\n                                {canvas === CanvasType.Indoor && (\n                                    <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                                        <StationSHMetroIndoor\n                                            stnId={stn_id}\n                                            nameDirection={\n                                                loop_branches\n                                                    .filter(branch => branch.includes(stn_id))\n                                                    .map(branch =>\n                                                        branch.indexOf(stn_id) % 2 === 0 ? 'downward' : 'upward'\n                                                    )[0] as 'upward' | 'downward'\n                                            }\n                                            services={[Services.local]}\n                                            color={branches_coline_color.at(i)?.at(0)?.at(2) as ColourHex | undefined}\n                                        />\n                                    </g>\n                                )}\n                            </React.Fragment>\n                        ))}\n                </React.Fragment>\n            ))}\n        </>\n    );\n};\n","import { useRootSelector } from '../../../../redux';\nimport { isColineBranch } from '../../../../redux/param/coline-action';\nimport { CanvasType } from '../../../../constants/constants';\n\nexport const LoopColine = (props: {\n    edges: [number, number, number, number];\n    loop_stns: {\n        top: string[];\n        left: string[];\n        right: string[];\n        bottom: string[];\n    };\n    xs: {\n        [stn_id: string]: number;\n    };\n    ys: {\n        [stn_id: string]: number;\n    };\n    canvas: CanvasType.RailMap | CanvasType.Indoor;\n}) => {\n    const { edges, loop_stns, xs, ys, canvas } = props;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM] = edges;\n    const { info_panel_type, stn_list, coline } = useRootSelector(store => store.param);\n\n    const { branches } = useRootSelector(store => store.helper);\n\n    // find the coline color on the main/loop line\n    const coline_main_color = Object.values(coline)\n        .filter(co =>\n            [co.from, co.to].every(stn_id =>\n                branches\n                    .slice(1, 3)\n                    .filter(branch => isColineBranch(branch, stn_list))\n                    .flat()\n                    .includes(stn_id)\n            )\n        )\n        .map(co => co.colors)\n        .at(0); // only one coline in loop line is supported\n\n    const LINE_WIDTH = 12;\n    const COLINE_GAP = canvas === CanvasType.RailMap && info_panel_type === 'sh2020' ? 3 : 0;\n    return (\n        <g id=\"coline_main\">\n            <path d={`M ${X_LEFT},${Y_TOP} H${X_RIGHT}`} strokeWidth={12} stroke={coline_main_color?.at(0)?.at(2)} />\n            {\n                // additional station cover on the rail map\n                canvas === CanvasType.RailMap &&\n                    Object.keys(coline).length > 0 &&\n                    loop_stns.top.map(stn_id => (\n                        <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                            {info_panel_type === 'sh2020' ? (\n                                <>\n                                    <rect\n                                        stroke=\"none\"\n                                        height={24}\n                                        width={12}\n                                        x={-6}\n                                        y={-COLINE_GAP - 1}\n                                        fill={coline_main_color?.at(0)?.at(2)}\n                                    />\n                                    <rect\n                                        stroke=\"none\"\n                                        height={COLINE_GAP + LINE_WIDTH}\n                                        width={12}\n                                        x={-6}\n                                        y={LINE_WIDTH - 2}\n                                        fill=\"var(--rmg-theme-colour)\"\n                                    />\n                                </>\n                            ) : (\n                                <use\n                                    xlinkHref=\"#int2_sh\"\n                                    stroke=\"var(--rmg-theme-colour)\"\n                                    transform={`translate(0,${1 + LINE_WIDTH})`}\n                                />\n                            )}\n                        </g>\n                    ))\n            }\n        </g>\n    );\n};\n","import React from 'react';\nimport StationSHMetro from '../station/station-shmetro';\nimport { NameDirection, StationSHMetro as StationSHMetroIndoor } from '../../../indoor/station-shmetro';\nimport { CanvasType, Services, ShortDirection } from '../../../../constants/constants';\nimport { useRootSelector } from '../../../../redux';\nimport { isColineBranch } from '../../../../redux/param/coline-action';\nimport {\n    get_xshares_yshares_of_loop,\n    LoopStns,\n    split_loop_stns,\n    split_loop_stns_with_branch,\n    split_loop_stns_with_branches,\n} from '../../methods/shmetro-loop';\nimport { get_loop_branches, LoopBranches } from './loop-branches-shmetro';\nimport { LoopColine } from './loop-coline-shmetro';\n\nconst LoopSHMetro = (props: { bank_angle: boolean; canvas: CanvasType.RailMap | CanvasType.Indoor }) => {\n    const { bank_angle, canvas } = props;\n    const { branches } = useRootSelector(store => store.helper);\n    const {\n        current_stn_idx: current_stn_id,\n        svgWidth: svg_width,\n        svg_height,\n        padding,\n        branchSpacingPct,\n        direction,\n        info_panel_type,\n        stn_list,\n        loop_info: { left_and_right_factor, bottom_factor },\n        coline,\n    } = useRootSelector(store => store.param);\n\n    const loopline = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n    const branch_stn_ids = branches\n        .slice(0, 3) // drop additional branches\n        .flat()\n        .filter(\n            (\n                o => v =>\n                    (o[v] = (o[v] || 0) + 1) === 2\n            )({} as { [stn_id: string]: number })\n        ) // count each occurrence\n        .filter(stn_id => !['linestart', 'lineend'].includes(stn_id)); // find branch stations\n\n    // find which arc would be displayed on the top side from coline info\n    const arc =\n        Object.values(coline)\n            .filter(co =>\n                [co.from, co.to].every(stn_id =>\n                    branches\n                        .slice(1, 3)\n                        .filter(branch => isColineBranch(branch, stn_list))\n                        .flat()\n                        .includes(stn_id)\n                )\n            )\n            .map(co => {\n                const from_idx = loopline.findIndex(stn_id => stn_id === co.from);\n                const to_idx = loopline.findIndex(stn_id => stn_id === co.to);\n                return Math.abs(to_idx - from_idx) > loopline.length - 2 - Math.abs(to_idx - from_idx)\n                    ? 'major'\n                    : 'minor';\n            })\n            .at(0) ?? 'minor';\n\n    // use different split methods for different numbers of branches\n    const loop_stns = branch_stn_ids.at(1)\n        ? split_loop_stns_with_branches(loopline, branch_stn_ids as [string, string], left_and_right_factor, arc)\n        : branch_stn_ids.at(0)\n        ? split_loop_stns_with_branch(loopline, branch_stn_ids[0], bottom_factor, left_and_right_factor)\n        : split_loop_stns(loopline, current_stn_id, bottom_factor, left_and_right_factor);\n    const { x_shares: x_shares_loop, y_shares: y_shares_loop } = get_xshares_yshares_of_loop(loopline, loop_stns);\n\n    // calculate xs and ys for branches\n    const { loop_branches, line_xs_branches, xs_branches } = get_loop_branches(\n        branches,\n        branch_stn_ids,\n        svg_width[canvas],\n        padding,\n        left_and_right_factor,\n        loop_stns.bottom.length // respect to the new bottom_factor if there are 2 branches for critical_path_length\n    );\n\n    // all y_shares in branches will be 0\n    const y_shares = { ...y_shares_loop, ...Object.fromEntries(loop_branches.flat().map(stn => [stn, 0])) };\n    // before: branch_spacing / 400 * svg_height (Chito)\n    const verticalPadding = (branchSpacingPct * svg_height) / 300;\n    const line_ys = [\n        225 + verticalPadding,\n        svg_height - 75 - (canvas === CanvasType.RailMap ? 0 : 125) - verticalPadding,\n    ] as [number, number];\n    const ys = Object.keys(y_shares).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: line_ys[0] + y_shares[cur] * (line_ys[1] - line_ys[0]),\n        }),\n        {} as typeof y_shares\n    );\n    const line_xs = [\n        // in railmap and bank, we need to add extra padding for the 45-degree angle\n        // also if there are branches, we need to leave additional spaces\n        Math.max(\n            (svg_width[canvas] * padding) / 100 + (bank_angle && canvas === CanvasType.RailMap ? 100 : 0),\n            line_xs_branches[0]\n        ),\n        Math.min(\n            svg_width[canvas] * (1 - padding / 100) - (bank_angle && canvas === CanvasType.RailMap ? 100 : 0),\n            line_xs_branches[1]\n        ),\n    ] as [number, number];\n    const xs_loop = Object.keys(x_shares_loop).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: line_xs[0] + x_shares_loop[cur] * (line_xs[1] - line_xs[0]),\n        }),\n        {} as typeof x_shares_loop\n    );\n\n    // bank the right, bottom, left side if bank_angle\n    const bank = (bank_angle ? { l: 1, r: -1 }[direction] : 0) as -1 | 0 | 1;\n    [...loop_stns.right, ...loop_stns.left].forEach(stn_id => {\n        xs_loop[stn_id] -= (ys[stn_id] - line_ys[0]) * bank;\n    });\n    loop_stns.bottom.forEach(stn_id => {\n        xs_loop[stn_id] -= (line_ys[1] - line_ys[0]) * bank;\n    });\n\n    const xs = { ...xs_branches, ...xs_loop };\n\n    // generate loop path used in svg\n    const path = _linePath(loop_stns, xs, ys, bank, [...line_xs, ...line_ys], direction);\n\n    // coline stuff\n    const LINE_WIDTH = 12;\n    const COLINE_GAP = canvas === CanvasType.RailMap && info_panel_type === 'sh2020' ? 3 : 0;\n    // move up to display the full station name and int\n    if (Object.keys(coline).length > 0) {\n        loop_stns.top.forEach(stn_id => {\n            ys[stn_id] -= COLINE_GAP + LINE_WIDTH;\n        });\n    }\n\n    // FIXME: branches with only one station could not display properly\n    const dy = loop_branches.length ? 0 : ((line_ys[1] - line_ys[0]) * bank) / 2;\n    return (\n        <g id=\"loop\" transform={`translate(${dy},0)`}>\n            <path stroke=\"var(--rmg-theme-colour)\" strokeWidth={12} fill=\"none\" d={path} strokeLinejoin=\"round\" />\n            {/* Order matters. The LoopColine should cover the station in RailMap. */}\n            {canvas === CanvasType.RailMap && (\n                <LoopStationGroup canvas={canvas} loop_stns={loop_stns} xs={xs} ys={ys} />\n            )}\n            <g transform={`translate(0,${Object.keys(coline).length > 0 ? -LINE_WIDTH - COLINE_GAP : 0})`}>\n                <LoopBranches\n                    loop_branches={loop_branches}\n                    edges={[...line_xs, ...line_ys]}\n                    xs={xs}\n                    ys={ys}\n                    canvas={canvas}\n                />\n                {Object.keys(coline).length > 0 && (\n                    <LoopColine\n                        edges={[...line_xs, ...line_ys]}\n                        loop_stns={loop_stns}\n                        xs={xs}\n                        ys={ys}\n                        canvas={canvas}\n                    />\n                )}\n            </g>\n            {/* Order matters. The station should cover LoopColine's main path in Indoor. */}\n            {canvas === CanvasType.Indoor && <LoopStationGroup canvas={canvas} loop_stns={loop_stns} xs={xs} ys={ys} />}\n        </g>\n    );\n};\n\nexport default LoopSHMetro;\n\nexport const _linePath = (\n    loop_stns: LoopStns,\n    xs: { [stn_id: string]: number },\n    ys: { [stn_id: string]: number },\n    bank: -1 | 0 | 1,\n    // use these edges to mock when there is no station on the edge\n    edges: [number, number, number, number],\n    direction: ShortDirection\n) => {\n    const [X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM] = edges;\n\n    // calculate the corner point when two sides needs to be joined\n    const corner = (prev_x: number, prev_y: number, x: number, y: number, side: keyof LoopStns): [number, number] => {\n        return {\n            right: [x + (y - Y_TOP) * bank, prev_y] as [number, number],\n            bottom: [prev_x - (Y_BOTTOM - prev_y) * bank, y] as [number, number],\n            left: [x - (Y_BOTTOM - y) * bank, prev_y] as [number, number],\n            top: [prev_x + (prev_y - Y_TOP) * bank, y] as [number, number],\n        }[side];\n    };\n\n    const stn_pos = [] as [number, number][];\n    loop_stns.top.forEach(stn_id => {\n        stn_pos.push([xs[stn_id], ys[stn_id]]);\n    });\n    (['right', 'bottom', 'left'] as Exclude<keyof LoopStns, 'top'>[]).forEach(side => {\n        if (loop_stns[side].length > 0) {\n            stn_pos.push(\n                corner(stn_pos.at(-1)![0], stn_pos.at(-1)![1], xs[loop_stns[side][0]], ys[loop_stns[side][0]], side)\n            );\n            loop_stns[side].forEach(stn_id => {\n                stn_pos.push([xs[stn_id], ys[stn_id]]);\n            });\n        } else {\n            // simulate a fake station on the side\n            // this station lays on the previous side corner\n            const extra = {\n                right: [X_RIGHT, stn_pos.at(-1)![1]] as [number, number],\n                bottom: [\n                    stn_pos.at(-1)![0] + (Y_BOTTOM - stn_pos.at(-1)![1]) * -bank,\n                    stn_pos.at(-1)![1] + (Y_BOTTOM - stn_pos.at(-1)![1]),\n                ] as [number, number],\n                left: [\n                    X_LEFT + (bank === 0 ? 0 : (Y_BOTTOM - Y_TOP) * (direction === 'l' ? -1 : 1)),\n                    stn_pos.at(-1)![1],\n                ] as [number, number],\n            };\n            stn_pos.push(extra[side]);\n        }\n    });\n    stn_pos.push(corner(stn_pos.at(-1)![0], stn_pos.at(-1)![1], xs[loop_stns.top[0]], ys[loop_stns.top[0]], 'top'));\n\n    const path = stn_pos\n        .slice(1)\n        .map(([x, y]) => `L${x},${y} `)\n        .join(' ');\n    return `M${stn_pos[0][0]},${stn_pos[0][1]} ${path} Z`;\n};\n\nconst LoopStationGroup = (props: {\n    canvas: CanvasType.RailMap | CanvasType.Indoor;\n    loop_stns: LoopStns;\n    xs: {\n        [k: string]: number;\n    };\n    ys: {\n        [k: string]: number;\n    };\n}) => {\n    const { canvas, loop_stns, xs, ys } = props;\n    const { current_stn_idx: current_stn_id } = useRootSelector(store => store.param);\n\n    const railmap_bank: Record<keyof LoopStns, -1 | 0 | 1> = {\n        top: 0,\n        bottom: 0,\n        left: -1,\n        right: 1,\n    };\n    const railmap_direction: Record<keyof LoopStns, 'l' | 'r' | undefined> = {\n        left: 'r',\n        right: 'l',\n        top: undefined,\n        bottom: undefined,\n    };\n    const indoor_name_direction = (side: keyof LoopStns, i: number) =>\n        ({\n            top: i % 2 === 0 ? 'upward' : 'downward',\n            bottom: i % 2 === 0 ? 'upward' : 'downward',\n            left: 'left',\n            right: 'right',\n        }[side] as NameDirection);\n    return (\n        <g id=\"loop_stations\">\n            {canvas === CanvasType.RailMap &&\n                Object.entries(loop_stns).map(([side, stn_ids]) =>\n                    stn_ids.map(stn_id => (\n                        <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                            <StationSHMetro\n                                stnId={stn_id}\n                                stnState={current_stn_id === stn_id ? 0 : 1}\n                                bank={railmap_bank[side as keyof LoopStns]}\n                                direction={railmap_direction[side as keyof LoopStns]}\n                            />\n                        </g>\n                    ))\n                )}\n            {canvas === CanvasType.Indoor &&\n                Object.entries(loop_stns).map(([side, stn_ids]) =>\n                    stn_ids.map((stn_id, i) => (\n                        <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                            <StationSHMetroIndoor\n                                stnId={stn_id}\n                                nameDirection={indoor_name_direction(side as keyof LoopStns, i)}\n                                services={[Services.local]}\n                            />\n                        </g>\n                    ))\n                )}\n        </g>\n    );\n};\n","import * as React from 'react';\nimport { CanvasType } from '../../constants/constants';\nimport MainSHMetro, { DirectionElements } from './main/main-shmetro';\nimport LoopSHMetro from './main/loop/loop-shmetro';\nimport { useRootSelector } from '../../redux';\nimport SvgWrapper from '../common/svg-wrapper';\n\nconst CANVAS_TYPE = CanvasType.RailMap;\n\nexport default function RailMapSHMetro() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgHeight,\n        theme,\n        loop,\n        loop_info: { bank },\n    } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsSHMetro />\n\n            {loop ? <LoopSHMetro bank_angle={bank} canvas={CanvasType.RailMap} /> : <MainSHMetro />}\n\n            <DirectionElements />\n        </SvgWrapper>\n    );\n}\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} r={5} />\n        <path id=\"int2_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\" />\n        <path\n            id=\"express_sh\"\n            fill=\"var(--rmg-white)\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"direct_sh\"\n            fill=\"var(--rmg-white)\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V50 a 5,5 0 1 1 -10,0Z\"\n        />\n        <rect id=\"stn_sh_2020\" stroke=\"none\" height={24} width={12} x={-6} y={-18} />\n        <rect id=\"stn_sh_2020_express\" stroke=\"none\" height={49} width={12} x={-6} y={-18} />\n        <rect id=\"stn_sh_2020_direct\" stroke=\"none\" height={74} width={12} x={-6} y={-18} />\n\n        <rect id=\"intbox_number\" height={22} width={20} y={-11} />\n\n        <g id=\"intbox_maglev\" transform=\"translate(-25,0)\">\n            <rect id=\"maglev_5\" height={144} width={130} y=\"40\" x=\"30\" strokeWidth={10} />\n            <path\n                id=\"maglev_3\"\n                fill=\"var(--rmg-white)\"\n                d=\"m90,55a40,5 0 0 0 -40,3a5,5 0 0 0 -5,5a5,60 0 0 0 -3,60a5,5 0 0 0 5,5l96,0a5,5 0 0 0 5,-5a5,60 0 0 0 -3,-60a5,5 0 0 0 -5,-5a40,5 0 0 0 -40,-3l-5,-10l-5,10\"\n            />\n            <path\n                id=\"maglev_4\"\n                fill=\"var(--rmg-white)\"\n                d=\"m90,140l-40,0a10,5 0 0 1 -10,-5l0,25a10,15 0 0 0 10,15l15,0l0,-10l-15,0l0,-15l90,0l0,15l-15,0l0,10l15,0a10,15 0 0 0 10,-15l0,-25a10,5 0 0 1 -10,5l-50,0\"\n            />\n            <rect id=\"maglev_1\" height=\"25\" width=\"40\" y=\"80\" x=\"50\" />\n            <rect id=\"maglev_2\" height=\"25\" width=\"40\" y=\"80\" x=\"100\" />\n        </g>\n\n        <g id=\"airport\" transform=\"scale(0.5)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" />\n            <path\n                id=\"airport\"\n                d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                transform=\"translate(-28.9697,0.14347)\"\n                fill=\"var(--rmg-white)\"\n            />\n        </g>\n        <g id=\"disney\" transform=\"scale(0.5)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" />\n            <path\n                fill=\"var(--rmg-white)\"\n                d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                transform=\"translate(-28.9697 0.13398)\"\n            />\n        </g>\n        {/* Special thanks to Wikimedia Commons, see https://commons.wikimedia.org/wiki/File:China_Railways.svg */}\n        <g id=\"railway\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" transform=\"translate(0,-2)scale(0.5)\" />\n            <path\n                fill=\"var(--rmg-white)\"\n                d=\"M169,273.5c0-19,14.7-34.8,33.7-36.3c18.9-1.5,38.1-2.2,57.4-2.2c19.3,0,38.4,0.8,57.3,2.2  c19,1.5,33.7,17.3,33.7,36.3v47.3l-51.3,14.7c-11.2,3.2-18.9,13.4-18.9,25v147.8c0,17.4,12.2,32.3,29.3,35.7l110.6,22.1  c4.9,1,8.4,5.2,8.4,10.2V599H91v-22.7c0-5,3.5-9.2,8.4-10.2L209.9,544c17-3.4,29.3-18.3,29.3-35.7V360.5c0-11.6-7.7-21.8-18.9-25  L169,320.8V273.5z M309.4,31.7c0.2-1.2,0.3-2.4,0.3-3.6c0-14-11.1-25.4-24.9-26C276.6,1.4,268.3,1,260,1c-8.3,0-16.6,0.4-24.7,1.1  c-13.9,0.6-24.9,12-24.9,26c0,1.2,0.1,2.5,0.3,3.6C90.6,54.8,0,160.3,0,287c0,97.2,53.4,182,132.4,226.6l36.8-48.1  C104.3,432.4,59.8,364.9,59.8,287c0-110.6,89.6-200.2,200.2-200.2S460.2,176.4,460.2,287c0,77.9-44.5,145.4-109.4,178.5  c15,19.6,25.6,33.5,36.8,48.1C466.6,469,520,384.2,520,287C520,160.3,429.4,54.8,309.4,31.7z\"\n                transform=\"translate(-10,0)scale(0.04)\"\n            />\n        </g>\n\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"arrow_gray\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-grey)\" />\n        </marker>\n        <marker id=\"arrow_theme_left\" refX={1} refY={0.5}>\n            <path d=\"M1,0L0,1H1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n        <marker id=\"arrow_theme_right\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n        <marker id=\"arrow_theme\" refX={1} refY={0.5}>\n            <path d=\"M0,1H2L1,0z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n\n        {/* Contrast filters for lines. */}\n        <filter id=\"contrast-direct\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncG type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncB type=\"linear\" slope={0.5} intercept={0.25} />\n            </feComponentTransfer>\n        </filter>\n        <filter id=\"contrast-express\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncG type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncB type=\"linear\" slope={0.75} intercept={0.125} />\n            </feComponentTransfer>\n        </filter>\n\n        <filter\n            id=\"pujiang_outline_railmap\"\n            colorInterpolationFilters=\"sRGB\"\n            // TODO: remove the absolute value while make the filter works correctly\n            filterUnits=\"userSpaceOnUse\"\n            x=\"0\"\n            y=\"-1000\"\n            width=\"5000\"\n            height=\"2000\"\n        >\n            {/* Replace pass gray color with white.\n                https://stackoverflow.com/questions/41639049/replace-one-color-using-svg-filters */}\n            <feComponentTransfer in=\"SourceGraphic\">\n                <feFuncR\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n                <feFuncG\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n                <feFuncB\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n            </feComponentTransfer>\n            <feColorMatrix\n                type=\"matrix\"\n                values=\"1 0 0 0 0\n                                                 0 1 0 0 0\n                                                 0 0 1 0 0\n                                                 1 1 1 1 -3\"\n                result=\"selectedColor1\"\n            />\n\n            {/* Draw an outline line around the pass line.\n                https://stackoverflow.com/questions/49693471/svg-border-outline-for-group-of-elements\n                Also see #181 why we do not simply outline the pass line element. */}\n            <feMorphology operator=\"erode\" in=\"selectedColor1\" radius=\"0\" result=\"e1\" />\n            <feMorphology operator=\"erode\" in=\"selectedColor1\" radius=\"1\" result=\"e2\" />\n            <feComposite in=\"e1\" in2=\"e2\" operator=\"xor\" result=\"uncoloredOutline\" />\n            {/* As the pass line is colored in white, we need to recolor the outline with black. */}\n            <feFlood floodColor=\"rgb(0,0,0)\" />\n            <feComposite operator=\"in\" in2=\"uncoloredOutline\" result=\"outline\" />\n            {/* Put the outline on the white not gray pass line. */}\n            <feComposite in=\"outline\" in2=\"selectedColor1\" operator=\"over\" result=\"result\" />\n            {/* Put the white pass line with outline on the original line. */}\n            <feComposite in=\"result\" in2=\"SourceGraphic\" operator=\"over\" />\n        </filter>\n    </defs>\n));\n","import React, { useMemo } from 'react';\nimport { adjacencyList, criticalPathMethod, getStnState, getXShareMTR } from '../railmap/methods/share';\nimport StationSHMetro from './station-shmetro';\nimport { StationsSHMetro } from '../railmap/methods/mtr';\nimport { CanvasType, Services, StationDict } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport LoopSHMetro from '../railmap/main/loop/loop-shmetro';\nimport SvgWrapper from '../common/svg-wrapper';\n\nconst CANVAS_TYPE = CanvasType.Indoor;\n\nexport default function IndoorWrapperSHMetro() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const { svgWidth: svgWidths, svg_height: svgHeight, theme, loop } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsSHMetro />\n            {loop ? <LoopSHMetro bank_angle={false} canvas={CanvasType.Indoor} /> : <IndoorSHMetro />}\n            <InfoElements />\n        </SvgWrapper>\n    );\n}\n\nexport const DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_indoor_sh\" fill=\"var(--rmg-white)\" strokeWidth={5} r={8} transform=\"scale(1.5)\" />\n        <path\n            id=\"int2_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"express_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"direct_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V40 a 5,5 0 1 1 -10,0Z\"\n        />\n    </defs>\n));\n\nconst leftWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0;\n    if (stnList[stnId].parents.length === 2) res += 1;\n    if (stnList[stnList[stnId].parents[0]].children.length === 2) res += 1;\n    return res;\n};\n\nconst rightWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0;\n    if (stnList[stnId].children.length === 2) res += 1;\n    if (stnList[stnList[stnId].children[0]].parents.length === 2) res += 1;\n    return res;\n};\n\nconst IndoorSHMetro = () => {\n    const { routes, branches, depsStr: deps } = useRootSelector(store => store.helper);\n    const param = useRootSelector(store => store.param);\n\n    const adjMat = adjacencyList(param.stn_list, leftWideFactor, rightWideFactor);\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.indoor * param.padding) / 100,\n        param.svgWidth.indoor * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => StationsSHMetro.getYShares(param.stn_list, branches),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: (yShares[cur] * param.branchSpacingPct * param.svg_height) / 200 }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const servicesAll = Object.values(Services);\n    const servicesPresent = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat() // all services in all stations\n        .reduce(\n            (acc, cur) => {\n                acc[servicesAll.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        ) // set the flag in order\n        .map((bool, i) => [servicesAll[i], bool] as [Services, boolean]) // zip\n        .filter(s => s[1]) // get the existing service\n        .map(s => s[0]); // maintain the services' order\n\n    const linePaths = StationsSHMetro.drawLine(\n        branches,\n        stnStates,\n        param.stn_list,\n        lineXs,\n        xs,\n        ys,\n        (param.branchSpacingPct * param.svg_height) / 200,\n        criticalPath,\n        0\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height / 2})`}>\n            <Lines paths={linePaths} services={servicesPresent} />\n            <StationGroup xs={xs} ys={ys} services={servicesPresent} />\n        </g>\n    );\n};\n\nconst Lines = (props: { paths: { main: string[]; pass: string[] }; services: Services[] }) => {\n    return (\n        <g fill=\"none\" strokeWidth={12} stroke=\"var(--rmg-theme-colour)\">\n            {props.services.map((service, i) => (\n                <g key={`indoor_line_${i}`} transform={`translate(0, ${i * 30})`}>\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n            ))}\n        </g>\n    );\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    services: Services[]; // determine if all station text should be upward\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { branches } = useRootSelector(store => store.helper);\n    const param = useRootSelector(store => store.param);\n    const { xs, ys, services } = props;\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .filter(stnId => param.stn_list[stnId].services.length !== 0)\n                .map(stnId => (\n                    <g key={stnId} transform={`translate(${xs[stnId]},${ys[stnId]})`}>\n                        <StationSHMetro\n                            stnId={stnId}\n                            nameDirection={\n                                branches\n                                    .filter(branch => branch.includes(stnId))\n                                    .map(branch =>\n                                        branch.indexOf(stnId) % 2 === 0 || services.length > 1 ? 'downward' : 'upward'\n                                    )[0] as 'upward' | 'downward'\n                            }\n                            services={services}\n                        />\n                    </g>\n                ))}\n        </g>\n    );\n};\n\nconst InfoElements = () => {\n    const param = useRootSelector(store => store.param);\n\n    return React.useMemo(\n        () => (\n            <>\n                <g transform={`translate(${param.svgWidth.indoor / 2},50)`}>\n                    <text textAnchor=\"middle\" fontSize=\"30\" className=\"rmg-name__zh\">\n                        轨道交通{param.line_name[0]}运营线路示意图\n                    </text>\n                </g>\n                <g transform={`translate(${param.svgWidth.indoor / 2},${param.svg_height - 270})`}>\n                    <text textAnchor=\"middle\" fontSize=\"18\" className=\"rmg-name__zh\" dx=\"-30\" dy=\"230\">\n                        友情提示：请留意您需要换乘线路的首末班时间，以免耽误您的出行，末班车进站前三分钟停售该末班车车票。\n                    </text>\n                    <text textAnchor=\"middle\" fontSize=\"12\" className=\"rmg-name__en\" dx=\"10\" dy=\"250\">\n                        Please pay attention to the interchange schedule if you want to transfer to other lines. Stop\n                        selling tickets 3 minutes before the last train services.\n                    </text>\n                    <g transform=\"translate(-600,215)\">\n                        <rect x=\"-5\" y=\"-25\" width=\"100\" height=\"70\" fill=\"none\" stroke=\"black\" rx=\"5\"></rect>\n                        <line x1=\"28\" x2=\"28\" y1=\"-20\" y2=\"40\" stroke=\"black\"></line>\n                        <text className=\"rmg-name__zh\" dx=\"3\" fontSize=\"18\">\n                            图\n                        </text>\n                        <text className=\"rmg-name__zh\" dx=\"3\" dy=\"18\" fontSize=\"18\">\n                            例\n                        </text>\n                        <text className=\"rmg-name__en\" dy=\"35\" fontSize=\"8\">\n                            legend\n                        </text>\n                        <use\n                            transform=\"translate(45,10)\"\n                            xlinkHref=\"#int2_indoor_sh\"\n                            stroke=\"var(--rmg-theme-colour)\"\n                        />\n                        <text className=\"rmg-name__zh\" dx=\"60\" dy=\"10\" fontSize=\"10\">\n                            换乘站\n                        </text>\n                        <text className=\"rmg-name__en\" dx=\"60\" dy=\"20\" fontSize=\"6\">\n                            Interchange\n                        </text>\n                        <text className=\"rmg-name__en\" dx=\"60\" dy=\"30\" fontSize=\"6\">\n                            Station\n                        </text>\n                    </g>\n                </g>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.svgWidth.indoor, param.svg_height, param.line_name]\n    );\n};\n\n/* Some unused functions to split branches from the main line.\n * Note the branches here has a slightly different meaning.\n * It refers to all the line sections that have a parallel line\n * rather than the upper or the bottom branch section.\n *\n * Currently these functions only can be used on a line that\n * branches in the middle and ends at the linestart, which also\n * means that linestart has two children in the adjMat.\n */\n/*\nconst getPathLength = (adjMat: ReturnType<typeof adjacencyList>, from: string, to: string): number => {\n    let cnt = 0, cur = from\n    while (Object.keys(adjMat[cur]).length > 0) {\n        cnt += 1\n        // we choose the first for all the cases so that the length for different branches will end in the same node\n        cur = Object.keys(adjMat[cur])[0]\n    }\n    return cnt\n}\nconst getIntersectionStn = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n\n    let a = start[0], b = start[1]\n    const lenA = getPathLength(adjMat, a, 'lineend')\n    const lenB = getPathLength(adjMat, b, 'lineend')\n    if (lenA < lenB) {\n        for (let i = 0; i < lenB - lenA; i++) b = Object.keys(adjMat[b])[0]\n    } else {\n        for (let i = 0; i < lenA - lenB; i++) a = Object.keys(adjMat[a])[0]\n    }\n    while (a !== b) {\n        a = Object.keys(adjMat[a])[0]\n        b = Object.keys(adjMat[b])[0]\n    }\n    return a\n}\nconst getBranchesAndMainLine = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n    const intersection = getIntersectionStn(adjMat)\n    return {\n        'branches': [\n            criticalPathMethod(start[0], intersection, adjMat).nodes,\n            criticalPathMethod(start[1], intersection, adjMat).nodes\n        ],\n        'main': criticalPathMethod(intersection, 'lineend', adjMat).nodes\n    }\n}\nconst getYShares = (adjMat: ReturnType<typeof adjacencyList>,\n    branchesAndMainLine: ReturnType<typeof getBranchesAndMainLine>,\n    stnId: string) => {\n    const branches = branchesAndMainLine.branches\n    const main = branchesAndMainLine.main\n\n    if (main.includes(stnId)) {\n        return 3\n    } else if (branches[0].includes(stnId)) {\n        return 0\n    } else {\n        return 6\n    }\n}\n*/\n","import { CanvasType } from '../../constants/constants';\nimport { ReactNode } from 'react';\nimport DestinationSHMetro from './destination-shmetro';\nimport RunInSHMetro from './runin-shmetro';\nimport RailMapSHMetro from '../railmap/railmap-shmetro';\nimport IndoorSHMetro from '../indoor/indoor-shmetro';\n\nconst shmetroSvgs: Partial<Record<CanvasType, ReactNode>> = {\n    destination: <DestinationSHMetro />,\n    runin: <RunInSHMetro />,\n    railmap: <RailMapSHMetro />,\n    indoor: <IndoorSHMetro />,\n};\n\nexport default shmetroSvgs;\n"],"names":["split_loop_stns_with_branch","loopline","branch_stn_id","bottom_factor","left_and_right_factor","top_factor","length","non_undefined_loopline","split_a","findIndex","val","another_branch_stn_id","split_b","top","slice","left","right","bottom","CANVAS_TYPE","CanvasType","DestinationSHMetro","canvasScale","useRootSelector","state","app","store","param","svgWidths","svgWidth","svgHeight","svg_height","theme","type","DefsSHMetro","DestSHMetro","memo","id","viewBox","refY","d","fill","helper","routes","branches","line_name","current_stn_id","current_stn_idx","direction","stn_list","info_panel_type","loop","coline","get_valid_destinations","Set","filter","route","includes","map","res","stn_id","reverse","get_dest_names","dest_ids","one_line","name","join","s","replace","valid_dest_ids","loop_line","_","non_undefined_loop_line","loop_pivot","undefined","get_pivot_stations","coline_dest_ids","valid_dest_id","branch","isColineBranch","some","dest_names","console","log","coline_dest_names","colines","Object","fromEntries","coline_dest_id","values","co","from","to","at","Dest","line_color","upper","transform","colors","props","platform_num","terminalEl","useRef","useState","width","terminalBBox","setTerminalBBox","useEffect","current","getBBox","JSON","stringify","middle","destination","platformX","PLATFORM_WIDTH","stroke","strokeWidth","markerEnd","Terminal","ref","PlatformNum","match","LineNameBoxNumber","LineNameBoxText","forwardRef","textAnchor","i","className","fontSize","dy","useMemo","r","dominantBaseline","x","boxX","stnNameEl","React","bBox","setBBox","rectDx","stnNameEnDx","height","lineNumber","lineNameRes","letterSpacing","calculateColineStations","colineInfoList","coLine","involvedBranches","linePath","flat","a","indexOf","b","branchWithColine","deps","depsStr","dh","prevStnIds","reduce","acc","cur","concat","nextStnIds","GeneralStation","colorInterpolationFilters","filterUnits","y","operator","in","radius","result","in2","runin","terminal","original","nextNames","stnId","prevNames","nextBranchLineDy","split","prevBranchLineDy","BranchLine","TerminalStation","mode","Line","CurrentText","NextStn","stnIds","PrevStn","textProps","l","anchor","colineStns","nextColineColorFrom","nextColineColor","stnList","isEnd","nextColineMode","every","nextColor","keys","nextOrPassStnIds","isInColineBranch","nextLineStretch","passLineStretch","LINE_BRANCH_Y","dotToPos","dot","dotsToPath","dots","nextDots","prevDots","stns","LINE_WIDTH","unshift","NextText","nextName","others","array","prevHintDy","nextBranchTextDy","dx","nextHintDy","stnState","color","bank_","bank","direction_override","direction_param","stnInfo","branchNameDX","stationIconStyle","stationIconColor","services","transfer","info","Math","abs","dr","xlinkHref","StationNameGElement","infos","facility","oneLine","intPadding","int_padding","CurrentStationText","directionPolarity","mainDx","Facilities","lineDx","intEl","intWidth","setIntWidth","intDx","x1","x2","IntBoxGroup","intInfos","StationName","stnName","OSIText","osiInfos","OSysIText","osysiInfos","zhEl","enDx","setEnDx","txt","arr","stn","size","boxInfos","Boolean","isLineNumber","isMaglev","el","IntBoxMaglev","IntBoxNumber","IntBoxLetter","prevProps","nextProps","toString","textCount","lineNames","lineNamesEn","defaultTheme","xs","servicesPresent","stnStates","branchSpacingPct","colineInfo","yShares","branchOfStn","children","colineYShares","entries","k","v","colineYs","linePaths","drawLine","main","pass","calculateColine","display","colinePaths","service","colineStn","path","_linePath","colineStations","COLINE_GAP","CoLine","paths","ColineStationInMainLine","ys","lineWidth","colineGap","ColineStationGroup","colinePath","j","strokeLinejoin","Services","y1","y2","gradientUnits","offset","stopColor","c","refX","markerStart","curStn","find","colineStation","adjMat","adjacencyList","criticalPath","criticalPathMethod","realCP","nodes","xShares","getXShareMTR","lineXs","railmap","padding","len","lineYShares","lineYs","getStnState","servicesAll","stationInfo","bool","push","StationGroup","ServicesElements","servicesLevel","servicesMax","bend","prevY","prevX","servicesDelta","local","express","direct","servicesPassDelta","e1","startFromTerminal","endAtTerminal","parents","e2","forEach","hasOwnProperty","xb","xm","ym","h","labelX","dx_hint","serviceLevel","DirectionElements","isColine","StationSHMetro","nameDirection","writingMode","upward","downward","osi_dx","osi_dy","osysi_dx","osysi_dy","arrowDirection","nameENLn","intNameId","intInfo","trim","arrowLength","transfer_dy","arrow_dx","arrow_dy","arrow_dr","transfer_dx","transfer_anchor","LoopBranches","loop_branches","edges","canvas","X_LEFT","X_RIGHT","Y_TOP","e","branches_paths","Number","branches_coline_color","loop_branch","self","t","LoopColine","loop_stns","coline_main_color","o","bank_angle","svg_width","loop_info","branch_stn_ids","arc","from_idx","to_idx","top_a","top_b","max","min","split_loop_stns_with_branches","floor","split_loop_stns","x_shares","y_shares","get_xshares_yshares_of_loop","x_shares_loop","y_shares_loop","critical_path_length","x_interval","line_xs_branches","xs_branches","get_loop_branches","verticalPadding","line_ys","line_xs","xs_loop","LoopStationGroup","Y_BOTTOM","corner","prev_x","prev_y","side","stn_pos","extra","railmap_bank","railmap_direction","indoor_name_direction","RailMapSHMetro","cx","cy","slope","intercept","tableValues","floodColor","IndoorWrapperSHMetro","IndoorSHMetro","InfoElements","leftWideFactor","rightWideFactor","indoor","StationsSHMetro","Lines","rx"],"sourceRoot":""}