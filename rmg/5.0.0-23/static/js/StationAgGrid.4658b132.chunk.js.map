{"version":3,"file":"static/js/StationAgGrid.4658b132.chunk.js","mappings":"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","sources":["components/ag-grid/gzmtr-station-code.tsx","components/ag-grid/station-ag-grid.tsx"],"sourcesContent":["import React from 'react';\nimport { ColourHex } from '../../constants/constants';\nimport { Flex } from '@chakra-ui/react';\n\ninterface GzmtrStationCodeProps {\n    lineNumber: string;\n    stationNumber: string;\n    lineColour: ColourHex;\n}\n\nexport default function GzmtrStationCode(props: GzmtrStationCodeProps) {\n    const { lineNumber, stationNumber, lineColour } = props;\n\n    const styles = {\n        h: '24px',\n\n        div: {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            padding: '3px',\n            minWidth: '24px',\n            border: '2px solid',\n            borderColor: lineColour,\n\n            '&:first-of-type': {\n                borderRadius: '12px 0 0 12px',\n            },\n\n            '&:last-of-type': {\n                borderRadius: '0 12px 12px 0',\n                marginLeft: '-2px',\n            },\n        },\n    };\n\n    return (\n        <Flex sx={styles}>\n            <div>{lineNumber}</div>\n            <div>{stationNumber}</div>\n        </Flex>\n    );\n}\n","import { RmgAgGrid, RmgLineBadge, RmgMultiLineString } from '@railmapgen/rmg-components';\nimport React, { useEffect, useRef } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { ColDef, SelectionChangedEvent } from 'ag-grid-community';\nimport { Name, RmgStyle, SidePanelMode, StationInfo, StationTransfer } from '../../constants/constants';\nimport { useTranslation } from 'react-i18next';\nimport { HStack } from '@chakra-ui/react';\nimport { setIsShareTrackEnabled, setSelectedStation, setSidePanelMode } from '../../redux/app/action';\nimport { getRowSpanForColine } from '../../redux/param/coline-action';\nimport GzmtrStationCode from './gzmtr-station-code';\n\ninterface StationAgGridProps {\n    branchIndex: number;\n}\n\ninterface RmgAgGridColDef<T> extends ColDef {\n    field?: Extract<keyof T, string>;\n}\n\ntype RowDataType = StationInfo & { id: string; rowSpan: [number, string | undefined] };\n\nexport default function StationAgGrid(props: StationAgGridProps) {\n    const { branchIndex } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const sidePanelMode = useAppSelector(state => state.app.sidePanelMode);\n    const { style, theme, stn_list: stationList, line_num: lineNumber, coline } = useAppSelector(state => state.param);\n    const branches = useAppSelector(state => state.helper.branches);\n    const stationIds = branches[branchIndex].filter(id => !['linestart', 'lineend'].includes(id));\n\n    const gridRef = useRef<AgGridReact>(null);\n    const isGridReadyRef = useRef(false);\n\n    useEffect(() => {\n        // deselect row when side panel is closed\n        // only take effect when one row is selected\n        if (isGridReadyRef.current && gridRef.current) {\n            const selectedRows = gridRef.current.api.getSelectedRows();\n            if (selectedRows.length === 1 && sidePanelMode !== SidePanelMode.STATION) {\n                gridRef.current.api.deselectAll();\n            }\n        }\n    }, [isGridReadyRef.current, sidePanelMode]);\n\n    const rowData: RowDataType[] = stationIds.map(id => ({\n        ...stationList[id],\n        id,\n        rowSpan: dispatch(getRowSpanForColine(id, branchIndex)),\n    }));\n\n    const defaultColDef = {\n        resizable: true,\n    };\n\n    const columnDefs: RmgAgGridColDef<RowDataType>[] = [\n        {\n            headerName: t('StationAgGrid.num'),\n            field: 'num',\n            cellRenderer: ({ value }: { value: string }) => (\n                <GzmtrStationCode lineNumber={lineNumber} stationNumber={value} lineColour={theme[2]} />\n            ),\n            pinned: 'left',\n            minWidth: 110,\n            hide: ![RmgStyle.GZMTR].includes(style),\n        },\n        {\n            headerName: t('StationAgGrid.zhName'),\n            field: 'name',\n            valueFormatter: ({ value, data }: { value: Name; data: RowDataType }) =>\n                value[0] +\n                (style === RmgStyle.GZMTR && data.secondaryName && data.secondaryName[0]\n                    ? ` (${data.secondaryName[0]})`\n                    : ''),\n        },\n        {\n            headerName: t('StationAgGrid.enName'),\n            field: 'name',\n            cellRenderer: ({ value, data }: { value: Name; data: RowDataType }) => (\n                <RmgMultiLineString\n                    text={\n                        value[1] +\n                        (style === RmgStyle.GZMTR && data.secondaryName && data.secondaryName[1]\n                            ? ` (${data.secondaryName[1]})`\n                            : '')\n                    }\n                />\n            ),\n            minWidth: 300,\n        },\n        {\n            headerName: t('StationAgGrid.interchange'),\n            field: 'transfer',\n            cellRenderer: ({ value }: { value: StationTransfer }) => (\n                <HStack>\n                    {value.info.flat().map((it, i) => (\n                        <RmgLineBadge key={i} name={[it[4], it[5]]} bg={it[2]} fg={it[3]} showShortName />\n                    ))}\n                </HStack>\n            ),\n        },\n        {\n            headerName: t('StationAgGrid.coline'),\n            field: 'rowSpan',\n            rowSpan: ({ data: { rowSpan } }: { data: RowDataType }) => rowSpan[0],\n            cellClassRules: {\n                'rmg-ag-grid--spanned-cell': ({ value }) => value[0] > 0,\n            },\n            cellRenderer: ({ value }: { value: RowDataType['rowSpan'] }) => (\n                <HStack>\n                    {coline[value[1] as string]?.colors?.map((it, i) => (\n                        <RmgLineBadge key={i} name={[it[4], it[5]]} bg={it[2]} fg={it[3]} showShortName />\n                    ))}\n                </HStack>\n            ),\n            hide: ![RmgStyle.SHMetro].includes(style),\n        },\n    ];\n\n    const handleSelectionChanged = ({ api }: SelectionChangedEvent) => {\n        const selectedRowIds = api.getSelectedRows()?.map(row => row.id as string);\n        console.log('StationAgGrid.handleSelectionChanged():: Row selection changed', selectedRowIds);\n\n        if (selectedRowIds?.length) {\n            dispatch(setSidePanelMode(SidePanelMode.STATION));\n            dispatch(setSelectedStation(selectedRowIds[0]));\n            dispatch(setIsShareTrackEnabled(undefined));\n        } else {\n            // unselect\n            dispatch(setSidePanelMode(SidePanelMode.CLOSE));\n            dispatch(setSelectedStation('linestart'));\n            dispatch(setIsShareTrackEnabled(undefined));\n        }\n    };\n\n    return (\n        <RmgAgGrid>\n            <AgGridReact\n                ref={gridRef}\n                rowData={rowData}\n                defaultColDef={defaultColDef}\n                columnDefs={columnDefs}\n                getRowId={({ data }) => data.id}\n                headerHeight={36}\n                rowHeight={36}\n                suppressCellFocus={true}\n                suppressMovableColumns={true}\n                suppressRowTransform={true}\n                rowSelection={'single'}\n                onSelectionChanged={handleSelectionChanged}\n                onGridReady={() => (isGridReadyRef.current = true)}\n                debug={process.env.NODE_ENV !== 'production'}\n            />\n        </RmgAgGrid>\n    );\n}\n"],"names":["GzmtrStationCode","props","lineNumber","stationNumber","styles","h","div","display","justifyContent","alignItems","padding","minWidth","border","borderColor","lineColour","borderRadius","marginLeft","sx","StationAgGrid","branchIndex","t","useTranslation","dispatch","useAppDispatch","sidePanelMode","useAppSelector","state","app","param","style","theme","stationList","stn_list","line_num","coline","stationIds","helper","branches","filter","id","includes","gridRef","useRef","isGridReadyRef","useEffect","current","api","getSelectedRows","length","SidePanelMode","deselectAll","rowData","map","rowSpan","getRowSpanForColine","columnDefs","headerName","field","cellRenderer","value","pinned","hide","RmgStyle","valueFormatter","data","secondaryName","text","info","flat","it","i","name","bg","fg","showShortName","cellClassRules","colors","AgGridReact","ref","defaultColDef","resizable","getRowId","headerHeight","rowHeight","suppressCellFocus","suppressMovableColumns","suppressRowTransform","rowSelection","onSelectionChanged","selectedRowIds","row","console","log","setSidePanelMode","setSelectedStation","setIsShareTrackEnabled","undefined","onGridReady","debug","process"],"sourceRoot":""}