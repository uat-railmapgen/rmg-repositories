{"version":3,"file":"static/js/destinationSHMetro.057820bf.chunk.js","mappings":"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","sources":["svgs/destination/destination-shmetro.tsx","svgs/railmap/methods/shmetro-loop.ts"],"sourcesContent":["import React, { memo, useMemo, forwardRef, useRef, useState, useEffect } from 'react';\nimport { useAppSelector } from '../../redux';\nimport { Name, ShortDirection } from '../../constants/constants';\nimport { get_pivot_stations } from '../railmap/methods/shmetro-loop';\n\nexport default memo(function DestinationSHMetro() {\n    return (\n        <>\n            <DefsSHMetro />\n            <InfoSHMetro />\n        </>\n    );\n});\n\nconst DefsSHMetro = memo(() => (\n    <defs>\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"slope\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n    </defs>\n));\n\nconst InfoSHMetro = () => {\n    const { routes, branches } = useAppSelector(store => store.helper);\n    const {\n        line_name,\n        current_stn_idx: current_stn_id,\n        direction,\n        stn_list,\n        platform_num,\n        info_panel_type,\n        svgWidth,\n        svg_height,\n        loop,\n    } = useAppSelector(store => store.param);\n\n    // get valid destination of each branch\n    const get_valid_destinations = (routes: string[][], direction: ShortDirection, current_stn_id: string) => [\n        ...new Set(\n            routes\n                .filter(route => route.includes(current_stn_id))\n                .map(route => {\n                    const res = route.filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n                    return direction === 'l' ? res[0] : res.reverse()[0];\n                })\n        ),\n    ];\n\n    // get destination id(s)\n    const validDests = !loop\n        ? get_valid_destinations(routes, direction, current_stn_id)\n        : get_pivot_stations(branches, direction, stn_list, current_stn_id);\n    // get the name from the destination id(s)\n    const destNames: Name[] = loop\n        ? // destination names of loop line will always be two lines\n          validDests.map(id => stn_list[id].name.map(s => s.replace('\\\\', ' ')) as Name)\n        : info_panel_type === 'sh2020'\n        ? // destination names of `sh2020` type will always be two lines\n          validDests.map(id => stn_list[id].name.map(s => s.replace('\\\\', ' ')) as Name)\n        : [\n              // only one line in `sh` type\n              [\n                  validDests.map(id => stn_list[id].name[0]).join('，'),\n                  validDests\n                      .map(id => stn_list[id].name[1])\n                      .join(', ')\n                      .replace('\\\\', ' '),\n              ],\n          ];\n\n    const terminalEl = useRef<SVGGElement | null>(null);\n    const [terminalBBox, setTerminalBBox] = useState({ width: 0 } as SVGRect);\n    useEffect(\n        () => setTerminalBBox(terminalEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(destNames), JSON.stringify(current_stn_id)]\n    );\n\n    const [middle, MARGIN, PADDING, LINEBOX_WIDTH, PLATFORM_WIDTH] = [svgWidth.destination / 2, 10, 36, 264, 325];\n    // Alignment Priority:\n    // 1. Centre of canvas\n    // 2. Centre of remaining\n    const platformX =\n        middle - MARGIN - PADDING - terminalBBox.width >= PLATFORM_WIDTH / 2 &&\n        middle - MARGIN - PADDING - LINEBOX_WIDTH >= PLATFORM_WIDTH / 2\n            ? middle\n            : direction === 'l'\n            ? (svgWidth.destination + terminalBBox.width - LINEBOX_WIDTH) / 2\n            : (svgWidth.destination - terminalBBox.width + LINEBOX_WIDTH) / 2;\n\n    // the platform screen doors flash light\n    // #20\n    // $('g#station_info_shmetro > rect').attr({ transform: `translate(${this._svgDestWidth / 2},${250 + dh})` })\n\n    return (\n        <g transform={`translate(0,${svg_height - 300})`}>\n            <path\n                stroke=\"var(--rmg-theme-colour)\"\n                strokeWidth={12}\n                d={\n                    direction === 'l'\n                        ? `M${svgWidth.destination - 24},16 H 36`\n                        : `M24,16 H ${svgWidth.destination - 36}`\n                }\n                transform=\"translate(0,220)\"\n                markerEnd=\"url(#slope)\"\n            />\n\n            <Terminal ref={terminalEl} destNames={destNames} />\n            {platform_num !== '' && (\n                <g transform={`translate(${platformX},0)`}>\n                    <PlatformNum />\n                </g>\n            )}\n\n            {line_name[0].match(/^[\\w\\d]+/) ? <LineNameBoxNumber /> : <LineNameBoxText />}\n        </g>\n    );\n};\n\nconst Terminal = forwardRef((props: { destNames: Name[] }, ref: React.Ref<SVGGElement>) => {\n    const { destNames } = props;\n    const { direction, svgWidth } = useAppSelector(store => store.param);\n\n    return (\n        <g ref={ref} transform={`translate(${direction === 'l' ? 36 : svgWidth.destination - 36},145)`}>\n            {/* this is not a generalized implementation, only dest length of 1 and 2 are supported */}\n            <g transform={`translate(0,${destNames.length === 2 ? -20 : 20})`}>\n                <path\n                    d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\"\n                    fill=\"black\"\n                    transform={`rotate(${direction === 'l' ? 0 : 180})scale(0.8)`}\n                />\n            </g>\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${direction === 'l' ? 128 + 20 : -128 - 20},25)`}\n            >\n                {destNames.map((name, i) => (\n                    <React.Fragment key={i}>\n                        <text className=\"rmg-name__zh\" fontSize={70} dy={i * -100 + 7} key={`zh${i}`}>\n                            {'往' + name[0]}\n                        </text>\n                        <text className=\"rmg-name__en\" fontSize={25} dy={i * -100 + 40} key={`en${i}`}>\n                            {'To ' + name[1]}\n                        </text>\n                    </React.Fragment>\n                ))}\n            </g>\n        </g>\n    );\n});\n\nconst PlatformNum = () => {\n    const { platform_num } = useAppSelector(store => store.param);\n\n    // Total width: 325\n    return useMemo(\n        () => (\n            <g transform={`translate(${-325 / 2 + 60},150)`}>\n                <circle r={60} fill=\"none\" stroke=\"black\" strokeWidth={2} />\n                <text className=\"rmg-name__en\" dominantBaseline=\"central\" fontSize={120} textAnchor=\"middle\">\n                    {platform_num}\n                </text>\n                <text className=\"rmg-name__zh\" fontSize={100} dominantBaseline=\"central\" x={65}>\n                    站台\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [platform_num]\n    );\n};\n\nconst LineNameBoxText = () => {\n    const { line_name, direction, svgWidth } = useAppSelector(store => store.param);\n\n    const boxX = direction === 'l' ? svgWidth.destination - 42 : 42;\n\n    // get the exact station name width so that the\n    // line color rectangle can be the right width.\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...line_name]\n    );\n\n    const rectDx = (direction === 'l' ? -bBox.width : 0) - 6;\n    const stnNameEnDx = ((direction === 'l' ? -1 : 1) * bBox.width) / 2;\n\n    return useMemo(\n        () => (\n            <g transform={`translate(${boxX},92)`}>\n                <rect fill=\"var(--rmg-theme-colour)\" x={rectDx} width={bBox.width + 10} height={120} />\n                <g\n                    textAnchor={direction === 'r' ? 'start' : 'end'}\n                    transform=\"translate(0,68)\"\n                    fill=\"var(--rmg-theme-fg)\"\n                >\n                    <g ref={stnNameEl}>\n                        <text className=\"rmg-name__zh\" fontSize={68}>\n                            {line_name[0]}\n                        </text>\n                    </g>\n                    <text className=\"rmg-name__en\" fontSize={30} textAnchor=\"middle\" x={stnNameEnDx} dy={42}>\n                        {line_name[1]}\n                    </text>\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [bBox, boxX, direction, line_name]\n    );\n};\n\nconst LineNameBoxNumber = () => {\n    const { line_name, direction, svgWidth } = useAppSelector(store => store.param);\n\n    const [lineNumber, lineNameRes] = line_name[0].match(/^[\\w\\d]+|.+/g) as string[];\n\n    // Number width: 108\n    // Text width: 136\n    // Gap: 20\n    // Left: 108/2 + 20 + 136 = 210\n    // Right: 108/2 = 54\n    const boxX = direction === 'l' ? svgWidth.destination - 36 - 210 : 36 + 54;\n\n    // Total width: 264\n    return useMemo(\n        () => (\n            <g transform={`translate(${boxX},92)`}>\n                <rect fill=\"var(--rmg-theme-colour)\" x={-54} width={108} height={120} />\n                <text\n                    className=\"rmg-name__zh\"\n                    fill=\"var(--rmg-theme-fg)\"\n                    fontSize={96}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    transform=\"translate(0,60)\"\n                    letterSpacing={-5}\n                >\n                    {lineNumber}\n                </text>\n                <g textAnchor=\"start\" transform=\"translate(74,68)\">\n                    <text className=\"rmg-name__zh\" fontSize={68}>\n                        {lineNameRes}\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={30} dy={42}>\n                        {line_name[1]}\n                    </text>\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [boxX, ...line_name, direction, svgWidth.destination]\n    );\n};\n","import { ShortDirection, StationDict } from '../../../constants/constants';\n\n/**\n * Split the loopline into four sides according to left_and_right_factor and bottom_factor.\n * It assumes parameters will follow these rules:\n *     1. loopline.length > bottom_factor + left_and_right_factor * 2\n *     2. bottom_factor >= 0\n *     3. left_and_right_factor >= 0\n *     4. left_and_right_factor + bottom_factor > 0\n *\n * @param loopline The loop line aka branches[0].\n * @param current_stn_id Current station id.\n * @param bottom_factor How many stations the bottom side will have.\n * @param left_and_right_factor How many stations the left and right side will have.\n * @returns Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n * it will also be consecutive. Note that the length of right, bottom, and left can be 0.\n */\nexport const split_loop_stns = (\n    loopline: string[],\n    current_stn_id: string,\n    bottom_factor: number,\n    left_and_right_factor: number\n) => {\n    const top_factor = loopline.length - left_and_right_factor * 2 - bottom_factor;\n    const current_stn_idx = loopline.findIndex(val => val === current_stn_id);\n    const non_undefined_loopline = [...loopline, ...loopline, ...loopline];\n    const split_a = loopline.length + current_stn_idx - Math.floor(top_factor / 2) + (top_factor % 2 === 0 ? 1 : 0);\n    const split_b = loopline.length + current_stn_idx + Math.floor(top_factor / 2);\n    return {\n        top: non_undefined_loopline.slice(split_a, split_b + 1),\n        left: non_undefined_loopline.slice(split_a - left_and_right_factor, split_a),\n        right: non_undefined_loopline.slice(split_b + 1, split_b + 1 + left_and_right_factor),\n        bottom: non_undefined_loopline.slice(\n            split_b + 1 + left_and_right_factor,\n            split_b + 1 + left_and_right_factor + bottom_factor\n        ),\n    };\n};\n\n/**\n * Split the loopline with one branch into four sides according to left_and_right_factor and bottom_factor.\n * Note that the top side must start from the branch_stn_id.\n *\n * It assumes parameters will follow these rules:\n *     1. loopline.length > bottom_factor + left_and_right_factor * 2\n *     2. bottom_factor >= 0\n *     3. left_and_right_factor >= 0\n *     4. left_and_right_factor + bottom_factor > 0\n *\n * @param loopline The loop line aka branches[0].\n * @param branch_stn_id Branch station id.\n * @param bottom_factor How many stations the bottom side will have.\n * @param left_and_right_factor How many stations the left and right side will have.\n * @returns Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n * it will also be consecutive. Note that the length of right, bottom, and left can be 0.\n */\nexport const split_loop_stns_with_branch = (\n    loopline: string[],\n    branch_stn_id: string,\n    bottom_factor: number,\n    left_and_right_factor: number\n) => {\n    const top_factor = loopline.length - left_and_right_factor * 2 - bottom_factor;\n    const non_undefined_loopline = [...loopline, ...loopline, ...loopline];\n    const split_a = loopline.length + loopline.findIndex(val => val === branch_stn_id);\n    const another_branch_stn_id = non_undefined_loopline[split_a + top_factor - 1];\n    const split_b =\n        loopline.length +\n        loopline.findIndex(val => val === another_branch_stn_id) +\n        (split_a + top_factor > loopline.length * 2 ? loopline.length : 0);\n    return {\n        top: non_undefined_loopline.slice(split_a, split_b + 1),\n        left: non_undefined_loopline.slice(split_a - left_and_right_factor, split_a),\n        right: non_undefined_loopline.slice(split_b + 1, split_b + 1 + left_and_right_factor),\n        bottom: non_undefined_loopline.slice(\n            split_b + 1 + left_and_right_factor,\n            split_b + 1 + left_and_right_factor + bottom_factor\n        ),\n    };\n};\n\n/**\n * Split the loopline with two branches into four sides according to left_and_right_factor and arc.\n * Note that the top side must start from one of the branch_stn_ids and end at another.\n * Also the top side will be the major or the minor arc between branch_stn_ids.\n *\n * It assumes parameters will follow these rules:\n *     1. loopline.length > the major or the minor arc length between branch_stn_ids +\n *                          left_and_right_factor * 2\n *     2. left_and_right_factor >= 0\n *\n * @param loopline The loop line aka branches[0].\n * @param branch_stn_ids Branches station id.\n * @param left_and_right_factor How many stations the left and right side will have.\n * @param arc Which arc will be the top side, the major or the minor.\n * @returns Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n * it will also be consecutive. Note that the length of right, bottom, and left can be 0.\n */\nexport const split_loop_stns_with_branches = (\n    loopline: string[],\n    branch_stn_ids: [string, string],\n    left_and_right_factor: number,\n    arc: 'major' | 'minor'\n) => {\n    let split_a = loopline.findIndex(val => val === branch_stn_ids[0]);\n    let split_b = loopline.findIndex(val => val === branch_stn_ids[1]);\n    // swap a and b if a is bigger than b\n    [split_a, split_b, branch_stn_ids[0], branch_stn_ids[1]] =\n        split_a > split_b\n            ? [split_b, split_a, branch_stn_ids[1], branch_stn_ids[0]]\n            : [split_a, split_b, branch_stn_ids[0], branch_stn_ids[1]];\n    const top_a = loopline.slice(split_a, split_b + 1);\n    const top_b = loopline.filter(stn => !top_a.filter(stn => !branch_stn_ids.includes(stn)).includes(stn));\n    // which arc we use on the top will result to different bottom factor\n    const bottom_factor =\n        loopline.length -\n        (arc === 'major' ? Math.max : Math.min)(top_a.length, top_b.length) -\n        left_and_right_factor * 2;\n    const branch_stn_id =\n        arc === 'major'\n            ? top_a.length > top_b.length\n                ? branch_stn_ids[0]\n                : branch_stn_ids[1]\n            : top_a.length > top_b.length\n            ? branch_stn_ids[1]\n            : branch_stn_ids[0];\n    return split_loop_stns_with_branch(loopline, branch_stn_id, bottom_factor, left_and_right_factor);\n};\n\nexport type LoopStns = ReturnType<typeof split_loop_stns>;\n\n/**\n * Calculate the xshares and yshares of the loop stations.\n *\n * @param loopline The loop line aka branches[0].\n * @param loop_stns Object returned from split_loop_stns.\n * @returns Values sit between 0 and 1.\n */\nexport const get_xshares_yshares_of_loop = (loopline: string[], loop_stns: LoopStns) => {\n    const x_shares = Object.fromEntries(loopline.map(stn_id => [stn_id, -1]));\n    const y_shares = Object.fromEntries(loopline.map(stn_id => [stn_id, -1]));\n\n    const [Y_TOP, Y_BOTTOM, X_LEFT, X_RIGHT] = [0, 1, 0, 1];\n\n    // loop's inner padding for xs\n    const e = 0; // 0 <= e <= 1\n\n    loop_stns.top.forEach((stn_id, i) => {\n        x_shares[stn_id] = e / 2 + ((1 - e) / (loop_stns.top.length + 1)) * (i + 1);\n        y_shares[stn_id] = Y_TOP;\n    });\n    loop_stns.right.forEach((stn_id, i) => {\n        x_shares[stn_id] = X_RIGHT;\n        y_shares[stn_id] = e / 2 + ((1 - e) / (loop_stns.right.length + 1)) * (i + 1);\n    });\n    loop_stns.bottom.forEach((stn_id, i) => {\n        x_shares[stn_id] = 1 - e / 2 - ((1 - e) / (loop_stns.bottom.length + 1)) * (i + 1);\n        y_shares[stn_id] = Y_BOTTOM;\n    });\n    loop_stns.left.forEach((stn_id, i) => {\n        x_shares[stn_id] = X_LEFT;\n        y_shares[stn_id] = 1 - e / 2 - ((1 - e) / (loop_stns.left.length + 1)) * (i + 1);\n    });\n\n    return {\n        x_shares: x_shares,\n        y_shares: y_shares,\n    };\n};\n\n/**\n * Get pivot stations from the loop line.\n */\nexport const get_pivot_stations = (\n    branches: string[][],\n    direction: ShortDirection,\n    stn_list: StationDict,\n    current_stn_id: string\n) => {\n    const loop_line = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n    const _ = [...loop_line, ...loop_line, ...loop_line];\n    const non_undefined_loop_line = direction === 'r' ? _ : _.reverse();\n    const current_stn_idx = non_undefined_loop_line.findIndex(stn_id => current_stn_id === stn_id) + loop_line.length;\n    return non_undefined_loop_line\n        .slice(current_stn_idx + 1)\n        .filter(stn_id => stn_list[stn_id].loop_pivot)\n        .slice(undefined, 2);\n};\n"],"names":["memo","DefsSHMetro","InfoSHMetro","id","viewBox","refY","d","fill","useAppSelector","store","helper","routes","branches","param","line_name","current_stn_id","current_stn_idx","direction","stn_list","platform_num","info_panel_type","svgWidth","svg_height","loop","validDests","get_pivot_stations","Set","filter","route","includes","map","res","stn_id","reverse","get_valid_destinations","destNames","name","s","replace","join","terminalEl","useRef","useState","width","terminalBBox","setTerminalBBox","useEffect","current","getBBox","JSON","stringify","middle","destination","platformX","PLATFORM_WIDTH","transform","stroke","strokeWidth","markerEnd","Terminal","ref","PlatformNum","match","LineNameBoxNumber","LineNameBoxText","forwardRef","props","length","textAnchor","i","className","fontSize","dy","useMemo","r","dominantBaseline","x","boxX","stnNameEl","React","bBox","setBBox","rectDx","stnNameEnDx","height","lineNumber","lineNameRes","letterSpacing","split_loop_stns","loopline","bottom_factor","left_and_right_factor","top_factor","findIndex","val","non_undefined_loopline","split_a","Math","floor","split_b","top","slice","left","right","bottom","split_loop_stns_with_branch","branch_stn_id","another_branch_stn_id","split_loop_stns_with_branches","branch_stn_ids","arc","top_a","top_b","stn","max","min","get_xshares_yshares_of_loop","loop_stns","x_shares","Object","fromEntries","y_shares","forEach","e","loop_line","_","non_undefined_loop_line","loop_pivot","undefined"],"sourceRoot":""}