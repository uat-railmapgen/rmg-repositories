{"version":3,"file":"static/js/226.94c39376.chunk.js","mappings":"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","sources":["svgs/common/svg-wrapper.tsx","svgs/gzmtr/psd-number.tsx","svgs/gzmtr/strip-gzmtr.tsx","svgs/gzmtr/station-icon/station-icon.tsx","svgs/gzmtr/station-icon/station-number.tsx","svgs/gzmtr/line-icon/line-icon-type2.tsx","svgs/gzmtr/line-icon/interchange-box.tsx","svgs/gzmtr/line-icon/line-icon.tsx","svgs/gzmtr/station-name/station-name.tsx","svgs/gzmtr/station-name/station-secondary-name.tsx","svgs/gzmtr/station-name/express-tag.tsx","svgs/gzmtr/station-name/station-name-wrapper.tsx","svgs/railmap/main/station/station-gzmtr.tsx","svgs/railmap/main/main-gzmtr.tsx","svgs/railmap/railmap-gzmtr.tsx","svgs/gzmtr/current-station-name.tsx","svgs/gzmtr/info-gzmtr.tsx","svgs/gzmtr/platform-number.tsx","svgs/gzmtr/otis-frame.tsx","svgs/gzmtr/runin-gzmtr.tsx","svgs/gzmtr/index.tsx","svgs/railmap/methods/share.ts"],"sourcesContent":["import { CanvasType, Theme } from '../../constants/constants';\nimport React, { ReactNode } from 'react';\n\ninterface SvgWrapperProps {\n    type: CanvasType;\n    svgWidth: number;\n    svgHeight: number;\n    canvasScale: number;\n    theme: Theme;\n    children: ReactNode;\n}\n\nexport default function SvgWrapper(props: SvgWrapperProps) {\n    const { type, svgWidth, svgHeight, canvasScale, theme, children } = props;\n\n    return (\n        <svg\n            id={type}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            height={svgHeight * canvasScale}\n            viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n            colorInterpolationFilters=\"sRGB\"\n            style={{\n                ['--rmg-svg-width' as any]: svgWidth + 'px',\n                ['--rmg-svg-height' as any]: svgHeight + 'px',\n                ['--rmg-theme-colour' as any]: theme[2],\n                ['--rmg-theme-fg' as any]: theme[3],\n            }}\n        >\n            <rect\n                id=\"canvas-bg\"\n                fill=\"white\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n            {children}\n            <rect\n                id=\"canvas-border\"\n                fill=\"none\"\n                strokeWidth={3}\n                stroke=\"none\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n        </svg>\n    );\n}\n","import { MonoColour } from '@railmapgen/rmg-palette-resources';\nimport React, { SVGProps } from 'react';\n\ninterface PsdNumberProps extends SVGProps<SVGGElement> {\n    num: string;\n    inStrip?: boolean;\n}\n\nexport default function PsdNumber(props: PsdNumberProps) {\n    const { num, inStrip, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={inStrip ? MonoColour.black : 'var(--rmg-theme-fg)'} {...others}>\n            <rect height={40} width={40} rx={4} x={-20} fill={inStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n            <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                屏蔽门\n            </text>\n            <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                Screen Door\n            </text>\n        </g>\n    );\n}\n","import React from 'react';\nimport { PanelTypeGZMTR, PanelTypeShmetro } from '../../constants/constants';\nimport PsdNumber from './psd-number';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <PsdNumber\n                num={props.isShowPSD as string}\n                inStrip={isInStrip}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            />\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import React, { memo } from 'react';\n\ninterface StationIconProps {\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default memo(\n    function StationIcon(props: StationIconProps) {\n        const { passed, large } = props;\n\n        const pathD = large\n            ? 'M0,12.95 V-12.95 H-12.95 a12.95,12.95 0 0,0 0,25.9 h25.9 a12.95,12.95 0 0,0 0,-25.9 H0'\n            : 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\n\n        return <path d={pathD} fill=\"#fff\" strokeWidth={2} stroke={passed ? '#aaa' : 'var(--rmg-theme-colour)'} />;\n    },\n    (prevProps, nextProps) => prevProps.passed === nextProps.passed && prevProps.large === nextProps.large\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport StationIcon from './station-icon';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, passed, large, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g {...others}>\n            <StationIcon passed={passed} large={large} />\n            <g\n                textAnchor=\"middle\"\n                fontSize={13.5}\n                transform={large ? 'scale(1.4)' : ''}\n                fill={passed ? '#aaa' : '#000'}\n            >\n                <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                    <text ref={lineNumEl} className=\"rmg-name__zh\">\n                        {lineNum}\n                    </text>\n                </g>\n                <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                    <text ref={stnNumEl} className=\"rmg-name__zh\">\n                        {stnNum}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\nimport { MAX_WIDTH } from './line-icon';\n\ninterface LineIconType2Props {\n    lineName: Name;\n    commonPart: string;\n}\n\nexport default memo(\n    function LineIconType2(props: LineIconType2Props) {\n        const { lineName, commonPart } = props;\n\n        const wrapperEl = useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = useState({ x: 0, height: 0, width: 0 } as DOMRect);\n        useEffect(() => {\n            wrapperEl.current && setBBox(wrapperEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const scale = MAX_WIDTH / Math.max(MAX_WIDTH, bBox.width);\n        const dx = (-bBox.x - bBox.width / 2) * scale;\n        const dy = (bBox.height * (1 - scale) * 1.2) / 2;\n\n        return (\n            <g ref={wrapperEl} transform={`translate(${dx},${dy})scale(${scale})`}>\n                <text className=\"rmg-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                    {commonPart}\n                    <tspan className=\"rmg-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                        {lineName[0].slice(commonPart.length).trim()}\n                    </tspan>\n                    <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                        {lineName[1].slice(commonPart.length).trim()}\n                    </tspan>\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.lineName.toString() === nextProps.lineName.toString()\n);\n","import React, { SVGProps } from 'react';\n\nexport default function InterchangeBox(props: SVGProps<SVGRectElement>) {\n    return <rect x={-22.5} height={24} width={45} rx={4.5} {...props} />;\n}\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\nimport LineIconType2 from './line-icon-type2';\nimport InterchangeBox from './interchange-box';\nimport { ColourHex, MonoColour } from '@railmapgen/rmg-palette-resources';\n\nexport const MAX_WIDTH = 42;\n\ninterface LineIconProps {\n    lineName: Name;\n    foregroundColour: MonoColour;\n    backgroundColour: ColourHex;\n    passed?: boolean;\n}\n\nexport default memo(\n    function LineIcon(props: LineIconProps) {\n        const { lineName, foregroundColour, backgroundColour, passed } = props;\n\n        const [type, commonPart] = getType(lineName);\n\n        const nameZhEl = useRef<SVGTextElement | null>(null);\n        const nameEnEl = useRef<SVGTextElement | null>(null);\n\n        const [nameZhBBox, setNameZhBBox] = useState({ width: 0 } as DOMRect);\n        const [nameEnBBox, setNameEnBBox] = useState({ width: 0 } as DOMRect);\n\n        useEffect(() => {\n            nameZhEl.current && setNameZhBBox(nameZhEl.current.getBBox());\n            nameEnEl.current && setNameEnBBox(nameEnEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const nameZhScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameZhBBox.width);\n        const nameEnScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameEnBBox.width);\n\n        return (\n            <g textAnchor=\"middle\" fill={passed ? MonoColour.white : foregroundColour}>\n                <InterchangeBox fill={passed ? '#aaa' : backgroundColour} />\n                {type === 2 ? (\n                    <LineIconType2 lineName={lineName} commonPart={commonPart} />\n                ) : (\n                    <>\n                        <text\n                            ref={nameZhEl}\n                            y={getYByType(type, 'zh', nameZhScale)}\n                            className=\"rmg-name__zh\"\n                            fontSize={12}\n                            transform={`scale(${nameZhScale})`}\n                        >\n                            {type === 1 ? (\n                                <>\n                                    <tspan fontSize={16} dy={0.7} className=\"rmg-name__zh\">\n                                        {commonPart}\n                                    </tspan>\n                                    <tspan dy={-0.7} className=\"rmg-name__zh\">\n                                        {lineName[0].slice(commonPart.length)}\n                                    </tspan>\n                                </>\n                            ) : (\n                                lineName[0]\n                            )}\n                        </text>\n                        <text\n                            ref={nameEnEl}\n                            y={getYByType(type, 'en', nameEnScale)}\n                            className=\"rmg-name__en\"\n                            fontSize={8}\n                            transform={`scale(${nameEnScale})`}\n                        >\n                            {lineName[1]}\n                        </text>\n                    </>\n                )}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.lineName.toString() === nextProps.lineName.toString() &&\n        prevProps.foregroundColour === nextProps.foregroundColour &&\n        prevProps.backgroundColour === nextProps.backgroundColour &&\n        prevProps.passed === nextProps.passed\n);\n\n/**\n * type 1: 2号线\n * type 2: APM线\n * type 3: 佛山2号线\n */\nconst getType = (name: Name): [1 | 2 | 3, string] => {\n    const matchResultForType1 = name[0].match(/^(\\d+)\\D+$/);\n    if (matchResultForType1) return [1, matchResultForType1[1]];\n\n    const matchResultForType2 = name.map(text => text.match(/^([\\w\\d]+).+$/));\n    if (matchResultForType2[0] && matchResultForType2[1] && matchResultForType2[0][1] === matchResultForType2[1][1]) {\n        return [2, matchResultForType2[0][1]];\n    }\n\n    return [3, ''];\n};\n\nconst getYByType = (type: ReturnType<typeof getType>[0], field: 'zh' | 'en', scale: number) => {\n    switch (type) {\n        case 1:\n            return (field === 'zh' ? 7.3 : 19.5) * (1 + 1 - scale);\n        case 2:\n            return 0;\n        case 3:\n            if (field === 'zh') {\n                return 8 * (2 - scale);\n            } else {\n                return 19.5 + 19.5 * (19.5 / 8) * (1 - scale) - (scale === 1 ? 0 : 5.5);\n            }\n    }\n};\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate } = props;\n\n        const nameEl = useRef<SVGGElement | null>(null);\n\n        useEffect(() => {\n            onUpdate && onUpdate(nameEl.current!.getBBox());\n        }, [stnName.toString()]);\n\n        return (\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {stnName[0]}\n                </text>\n                <g fontSize={10.5}>\n                    {stnName[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={16 + i * 11}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.stnName.toString() === nextProps.stnName.toString()\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationSecondaryNameProps extends SVGProps<SVGGElement> {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    passed?: boolean;\n}\n\nexport default function StationSecondaryName(props: StationSecondaryNameProps) {\n    const { stnName, onUpdate, passed, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    useEffect(() => {\n        const nextBBox = nameEl.current!.getBBox();\n        setBBox(nextBBox);\n        onUpdate && onUpdate(nextBBox);\n    }, [stnName.toString()]);\n\n    return (\n        <g fill={passed ? '#aaa' : '#000'} {...others}>\n            <g transform=\"translate(0,3)\" fontSize={18}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={13}>\n                    {stnName[0]}\n                </text>\n                <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                    {stnName[1]}\n                </text>\n            </g>\n        </g>\n    );\n}\n","import React, { SVGProps } from 'react';\n\ninterface ExpressTagProps extends SVGProps<SVGGElement> {\n    passed?: boolean;\n}\n\nexport default function ExpressTag(props: ExpressTagProps) {\n    const { passed, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={passed ? '#aaa' : 'var(--rmg-theme-colour)'} {...others}>\n            <text className=\"rmg-name__zh\" fontSize={13}>\n                快车停靠站\n            </text>\n            <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                Express Station\n            </text>\n        </g>\n    );\n}\n","import React, { useState } from 'react';\nimport { Name, StationState } from '../../../constants/constants';\nimport StationName from './station-name';\nimport StationSecondaryName from './station-secondary-name';\nimport ExpressTag from './express-tag';\n\ninterface StationNameWrapperProps {\n    primaryName: Name;\n    secondaryName?: Name;\n    stationState: StationState;\n    flipped?: boolean;\n    express?: boolean;\n}\n\nexport default function StationNameWrapper(props: StationNameWrapperProps) {\n    const { primaryName, secondaryName, stationState, flipped, express } = props;\n\n    const [primaryBBox, setPrimaryBBox] = useState({ width: 0 } as SVGRect);\n    const [secondaryBBox, setSecondaryBBox] = useState({ x: 0, width: -20 } as SVGRect);\n\n    const getFill = (state: StationState) => {\n        switch (state) {\n            case StationState.PASSED:\n                return '#aaa';\n            case StationState.CURRENT:\n                return '#f00';\n            case StationState.FUTURE:\n                return '#000';\n        }\n    };\n\n    const primaryNameEnRows = primaryName[1].split('\\\\').length;\n    const transforms = {\n        g: {\n            x: 0,\n            y: flipped ? 17.5 : -20 - primaryNameEnRows * 14 * Math.cos(-45),\n        },\n        StationSecondaryName: {\n            x: (primaryBBox.width + secondaryBBox.width / 2 + 10) * (flipped ? -1 : 1),\n            y: 2 + 5 * (primaryNameEnRows - 1),\n        },\n        ExpressTag: {\n            x: (primaryBBox.width + secondaryBBox.width + 20 + 35) * (flipped ? -1 : 1),\n            y: 2 + 5 * (primaryNameEnRows - 1),\n        },\n    };\n\n    return (\n        <g\n            textAnchor={flipped ? 'end' : 'start'}\n            fill={getFill(stationState)}\n            transform={`translate(${transforms.g.x},${transforms.g.y})rotate(-45)`}\n        >\n            <StationName stnName={primaryName} onUpdate={setPrimaryBBox} />\n\n            {secondaryName && (\n                <StationSecondaryName\n                    stnName={secondaryName}\n                    onUpdate={setSecondaryBBox}\n                    passed={stationState === StationState.PASSED}\n                    transform={`translate(${transforms.StationSecondaryName.x},${transforms.StationSecondaryName.y})`}\n                />\n            )}\n\n            {express && (\n                <ExpressTag\n                    passed={stationState === StationState.PASSED}\n                    transform={`translate(${transforms.ExpressTag.x},${transforms.ExpressTag.y})`}\n                />\n            )}\n        </g>\n    );\n}\n","import React from 'react';\nimport StationNumber from '../../../gzmtr/station-icon/station-number';\nimport { InterchangeInfo, Services } from '../../../../constants/constants';\nimport { useRootSelector } from '../../../../redux';\nimport LineIcon from '../../../gzmtr/line-icon/line-icon';\nimport StationNameWrapper from '../../../gzmtr/station-name/station-name-wrapper';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    stnY: number;\n}\n\nconst StationGZMTR = (props: Props) => {\n    const { stnId, stnState, stnY } = props;\n\n    const theme = useRootSelector(store => store.param.theme);\n    const lineName = useRootSelector(store => store.param.line_name);\n    const lineNumber = useRootSelector(store => store.param.line_num);\n    const stnInfo = useRootSelector(store => store.param.stn_list[stnId]);\n\n    const isNameShift = stnInfo.parents.length === 2 || stnInfo.children.length === 2;\n    const tickRotation =\n        stnY > 0\n            ? 180\n            : stnInfo.parents.indexOf(stnInfo.branch.left[1] || '') === 1 ||\n              stnInfo.children.indexOf(stnInfo.branch.right[1] || '') === 1\n            ? 180\n            : 0;\n    const nameENLns = stnInfo.name[1].split('\\\\').length;\n    const nameDX = isNameShift\n        ? tickRotation === 180\n            ? 16 + (nameENLns - 1) * 12 * Math.cos(-45)\n            : -9\n        : tickRotation === 180\n        ? -6\n        : (25 + (nameENLns - 1) * 15) * Math.cos(-45);\n\n    return (\n        <>\n            <IntGroup\n                intInfos={\n                    isNameShift\n                        ? (\n                              [\n                                  [theme[0], theme[1], 'var(--rmg-theme-colour)', 'var(--rmg-theme-fg)', ...lineName],\n                              ] as any[] as InterchangeInfo[]\n                          ).concat(stnInfo.transfer.info[0])\n                        : stnInfo.transfer.info[0]\n                }\n                stnState={stnState}\n                tickRotation={tickRotation}\n            />\n            <StationNumber lineNum={lineNumber} stnNum={stnInfo.num} passed={stnState === -1} />\n            <g transform={`translate(${-nameDX},0)`}>\n                <StationNameWrapper\n                    primaryName={stnInfo.name}\n                    secondaryName={stnInfo.secondaryName || undefined}\n                    stationState={stnState}\n                    flipped={tickRotation === 180}\n                    express={stnInfo.services.includes(Services.express)}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationGZMTR;\n\ninterface IntGroupProps {\n    intInfos: InterchangeInfo[];\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n}\n\nconst IntGroup = (props: IntGroupProps) => (\n    <>\n        <IntTicks strokeWidth={4} {...props} />\n        <IntBoxs transform={`translate(0,${props.tickRotation === 180 ? -47 : 23})`} {...props} />\n    </>\n);\n\nconst IntTicks = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, stnState, tickRotation, ...others } = props;\n\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => (\n                <use\n                    key={i}\n                    xlinkHref=\"#inttick\"\n                    stroke={stnState === -1 ? '#aaa' : info[2]}\n                    transform={`translate(${-2 * (intInfos.length - 1) + 4 * i},0)rotate(${\n                        tickRotation === 180 ? 180 : 0\n                    })`}\n                />\n            ))}\n        </g>\n    );\n};\n\nconst IntBoxs = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, tickRotation, stnState, ...other } = props;\n\n    return (\n        <g {...other}>\n            {intInfos.map((info, i) => (\n                <g key={i} transform={`translate(0,${i * 28 * (tickRotation === 180 ? -1 : 1)})`}>\n                    <LineIcon\n                        lineName={[info[4], info[5]]}\n                        foregroundColour={info[3]}\n                        backgroundColour={info[2]}\n                        passed={stnState === -1}\n                    />\n                </g>\n            ))}\n        </g>\n    );\n};\n","import React, { useMemo } from 'react';\nimport StationGZMTR from './station/station-gzmtr';\nimport { adjacencyList, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport { CanvasType, ShortDirection, StationDict } from '../../../constants/constants';\nimport { useRootSelector } from '../../../redux';\nimport LineIcon from '../../gzmtr/line-icon/line-icon';\nimport { ColourHex, MonoColour } from '@railmapgen/rmg-palette-resources';\n\nconst wideFactor = (stnList: StationDict, stnId: string) =>\n    stnList[stnId].parents.length === 2 || stnList[stnId].children.length === 2 ? 0.25 : 0;\n\nconst getXShare = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]): number => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        if (branchOfStn.toString() === branches[0].toString()) {\n            // station on main line, expand to fit\n            let lens = [];\n            if (!leftOpenJaw && !rightOpenJaw) {\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else if (leftOpenJaw) {\n                lens[0] = 0;\n                lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n                lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else {\n                // right open jaw\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n            }\n            return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n        } else {\n            if (!leftOpenJaw && !rightOpenJaw) {\n                let lens = [];\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n                return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n            } else if (leftOpenJaw) {\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len -\n                    criticalPathMethod(stnId, partSink, adjMat).len\n                );\n            } else {\n                // right open jaw\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len +\n                    criticalPathMethod(partSource, stnId, adjMat).len\n                );\n            }\n        }\n    }\n};\n\nconst MainGZMTR = () => {\n    const { branches, routes, depsStr: deps } = useRootSelector(store => store.helper);\n\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgH,\n        y_pc: yPercentage,\n        padding: paddingPercentage,\n        branchSpacingPct,\n        direction,\n        line_name: lineName,\n        current_stn_idx: currentStationIndex,\n        stn_list: stationList,\n    } = useRootSelector(store => store.param);\n\n    const adjMat = adjacencyList(stationList, wideFactor, wideFactor);\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(stationList).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShare(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const lineXs: [number, number] =\n        direction === ShortDirection.right\n            ? [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100 + 65,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 20,\n              ]\n            : [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 65,\n              ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(stationList).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    let branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: stationList[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -2 : 2 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: (-yShares[cur] * branchSpacingPct * svgH) / 200 }),\n        {} as typeof yShares\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(currentStationIndex, routes, direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const linePaths = branches\n        .map(branch => drawLine(branch, stnStates))\n        .reduce(\n            (acc, cur) => {\n                acc.main.push(cur.main);\n                acc.pass.push(cur.pass);\n                return acc;\n            },\n            { main: [], pass: [] } as { main: string[][]; pass: string[][] }\n        );\n\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, xs, ys)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: yPercentage,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <g\n                id=\"line_name\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.right ? `${lineXs[0] - 65}px` : `${lineXs[1] + 65}px`,\n                }}\n            >\n                <LineIcon\n                    lineName={lineName}\n                    foregroundColour={'var(--rmg-theme-fg)' as MonoColour}\n                    backgroundColour={'var(--rmg-theme-colour)' as ColourHex}\n                />\n            </g>\n        </g>\n    );\n};\n\nexport default MainGZMTR;\n\nconst Line = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => (\n        <g fill=\"none\" strokeWidth={4}>\n            <g stroke=\"#aaa\" strokeDasharray={4}>\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n            <g stroke=\"var(--rmg-theme-colour)\">\n                {props.paths.main.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n        </g>\n    ),\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\nconst _linePath = (stnIds: string[], realXs: { [stnId: string]: number }, realYs: { [stnId: string]: number }) => {\n    let prevY: number;\n    var path = [] as string[];\n\n    stnIds.forEach(stnId => {\n        let x = realXs[stnId];\n        let y = realYs[stnId];\n        if (!prevY && prevY !== 0) {\n            prevY = y;\n            path.push(`M ${x},${y}`);\n            return;\n        }\n        if (y === 0) {\n            if (y < prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,0 40,-40', `V ${y}`);\n            if (y > prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,1 40,40', `V ${y}`);\n        } else {\n            if (y < prevY) path.push(`V ${y + 40}`, 'a 40,40 0 0,1 40,-40', `H ${x}`);\n            if (y > prevY) path.push(`V ${y - 40}`, 'a 40,40 0 0,0 40,40', `H ${x}`);\n        }\n        path.push(`H ${x}`);\n        prevY = y;\n    });\n\n    // simplify path\n    return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates } = props;\n\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(stationList)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${xs[stnId]}px,${ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationGZMTR stnId={stnId} stnState={stnStates[stnId]} stnY={ys[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import React, { memo, useMemo } from 'react';\nimport StripGZMTR from '../gzmtr/strip-gzmtr';\nimport MainGZMTR from './main/main-gzmtr';\nimport { CanvasType, Note, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport SvgWrapper from '../common/svg-wrapper';\n\nconst CANVAS_TYPE = CanvasType.RailMap;\n\nconst RailMapGZMTR = () => {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgHeight,\n        direction,\n        psd_num: psdNumber,\n        info_panel_type: infoPanelType,\n        notesGZMTR: notes,\n        current_stn_idx: currentStationIndex,\n        stn_list: stationList,\n        theme,\n    } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n    const curStnInfo = stationList[currentStationIndex];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsGZMTR />\n\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType === PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType === PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            {(direction === ShortDirection.left && curStnInfo.parents.includes('linestart')) ||\n            (direction === ShortDirection.right && curStnInfo.children.includes('lineend')) ? (\n                <TerminusFlag />\n            ) : (\n                <>\n                    <MainGZMTR />\n                    <DirectionIndicator />\n                    {notes.map((note, i) => (\n                        <NoteBox key={i} note={note} />\n                    ))}\n                </>\n            )}\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && (\n                <line x2={svgWidth} transform=\"translate(0,90)\" strokeWidth={3} stroke=\"black\" />\n            )}\n        </SvgWrapper>\n    );\n};\n\nexport default RailMapGZMTR;\n\nconst DefsGZMTR = memo(() => (\n    <defs>\n        <path id=\"arrow_direction\" d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\" fill=\"black\" />\n        <path id=\"inttick\" d=\"M 0,0 v 18\" strokeLinecap=\"square\" />\n    </defs>\n));\n\nconst DirectionIndicator = () => {\n    const { routes } = useRootSelector(store => store.helper);\n    const {\n        direction,\n        direction_gz_x: directionIndicatorX,\n        direction_gz_y: directionIndicatorY,\n        current_stn_idx: currentStationIndex,\n    } = useRootSelector(store => store.param);\n\n    const validDests = useMemo(\n        () => [\n            ...new Set(\n                routes\n                    .reduce(\n                        (acc, cur) =>\n                            cur.includes(currentStationIndex)\n                                ? acc.concat(\n                                      cur\n                                          .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                                          .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                                  )\n                                : acc,\n                        []\n                    )\n                    .filter(id => id !== currentStationIndex)\n            ),\n        ],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const textGroupProps: TextGroupProps = {\n        textAnchor: direction === ShortDirection.left ? 'start' : 'end',\n        transform: `translate(${direction === ShortDirection.left ? 65 : -65},-5)`,\n        destIds: validDests,\n    };\n\n    return (\n        <g\n            id=\"direction_gz\"\n            style={{ ['--x-percentage' as any]: directionIndicatorX, ['--y-percentage' as any]: directionIndicatorY }}\n        >\n            <use\n                xlinkHref=\"#arrow_direction\"\n                style={{ ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg' }}\n            />\n\n            {validDests.length !== 2 ? (\n                <DirectionIndicatorTextGroup {...textGroupProps} />\n            ) : (\n                <DirectionIndicatorTextGroup2 {...textGroupProps} />\n            )}\n        </g>\n    );\n};\n\ntype TextGroupProps = {\n    destIds: string[];\n} & React.SVGProps<SVGGElement>;\n\nconst DirectionIndicatorTextGroup = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const stationList = useRootSelector(store => store.param.stn_list);\n    return (\n        <g {...others}>\n            <text className=\"rmg-name__zh\" fontSize={28}>\n                {destIds.map(stnId => stationList[stnId].name[0]).join('/') + '方向'}\n            </text>\n            <text className=\"rmg-name__en\" fontSize={14} dy={22}>\n                {'Towards ' + destIds.map(stnId => stationList[stnId].name[1].replace('\\\\', ' ')).join('/')}\n            </text>\n        </g>\n    );\n};\n\nconst DirectionIndicatorTextGroup2 = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n\n    const direction = useRootSelector(store => store.param.direction);\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    const charCounts = destIds.map(stnId => stationList[stnId].name[0].length);\n    const minCharCounts = Math.min(...charCounts);\n    const charSpacing =\n        minCharCounts > 1 && charCounts[0] !== charCounts[1]\n            ? Math.abs(charCounts[0] - charCounts[1]) / (minCharCounts - 1)\n            : 0;\n\n    return (\n        <g {...others}>\n            {destIds.map((id, i) => (\n                <React.Fragment key={id}>\n                    <text\n                        className=\"rmg-name__zh\"\n                        fontSize={25}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-21 + 42 * i}\n                        letterSpacing={charCounts[i] > charCounts[1 - i] ? '0em' : `${charSpacing}em`}\n                    >\n                        {stationList[id].name[0]}\n                    </text>\n                    <text\n                        className=\"rmg-name__en\"\n                        fontSize={11.5}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-1 + 42 * i}\n                    >\n                        {'Towards ' + stationList[id].name[1].replace('\\\\', ' ')}\n                    </text>\n                </React.Fragment>\n            ))}\n            <text\n                className=\"rmg-name__zh\"\n                fontSize={28}\n                x={direction === ShortDirection.left ? 25 * (Math.max(...charCounts) + 1) : 0}\n                y={5}\n            >\n                方向\n            </text>\n        </g>\n    );\n};\n\nconst TerminusFlag = React.memo(() => (\n    <g id=\"terminus_gz\" textAnchor=\"middle\">\n        <text className=\"rmg-name__zh\" fontSize={90}>\n            终 点 站\n        </text>\n        <text dy={70} className=\"rmg-name__en\" fontSize={36}>\n            Terminal\n        </text>\n        <g strokeWidth={8} stroke=\"#000\">\n            <path d=\"M -160,68 h -160\" />\n            <path d=\"M 160,68 h 160\" />\n        </g>\n    </g>\n));\n\nconst NoteBox = React.memo(\n    (props: { note: Note }) => {\n        const noteTextEl = React.useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = React.useState({ width: 0, height: 0, y: 0 } as DOMRect);\n        React.useEffect(\n            () => setBBox(noteTextEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.note[0], props.note[1]]\n        );\n\n        return (\n            <g\n                className=\"note-box\"\n                style={{ ['--x-percentage' as any]: props.note[2], ['--y-percentage' as any]: props.note[3] }}\n            >\n                {props.note[4] && (\n                    <rect\n                        height={bBox.height + 4}\n                        width={bBox.width + 4}\n                        x={-2}\n                        y={bBox.y - 2}\n                        fill=\"none\"\n                        stroke=\"black\"\n                        strokeWidth={0.5}\n                    />\n                )}\n                <g ref={noteTextEl}>\n                    <g fontSize={16} letterSpacing={1.2}>\n                        {props.note[0].split('\\n').map((txt, i) => (\n                            <text key={i} className=\"rmg-name__zh\" y={i * 18}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n\n                    <g\n                        fontSize={10}\n                        letterSpacing={0.33}\n                        transform={`translate(0,${18 * props.note[0].split('\\n').length})`}\n                    >\n                        {props.note[1].split('\\n').map((txt, i) => (\n                            <text\n                                key={i}\n                                className=\"rmg-name__en\"\n                                y={i * 11}\n                                textLength={\n                                    i < (props.note[1].match(/\\n/g)?.length || 0)\n                                        ? bBox.width\n                                        : navigator.userAgent.includes('Firefox')\n                                        ? -1\n                                        : 0\n                                }\n                                lengthAdjust=\"spacing\"\n                            >\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.note.toString() === nextProps.note.toString()\n);\n","import React, { memo, SVGProps, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../constants/constants';\n\ninterface CurrentStationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n}\n\nexport default memo(\n    function CurrentStationName(props: CurrentStationNameProps) {\n        const { stnName, onUpdate } = props;\n\n        const nameEl = useRef<SVGGElement | null>(null);\n\n        useEffect(() => {\n            onUpdate?.(nameEl.current!.getBBox());\n        }, [stnName.toString()]);\n\n        return (\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={90}>\n                    {stnName[0]}\n                </text>\n                <g fontSize={36}>\n                    {stnName[1].split('\\\\').map((txt, i) => (\n                        <text className=\"rmg-name__en\" key={i} dy={70 + i * 36}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.stnName.toString() === nextProps.stnName.toString()\n);\n\ninterface CurrentStationSecondaryNameProps extends SVGProps<SVGGElement> {\n    secondaryName: Name;\n}\n\nexport const CurrentStationSecondaryName = (props: CurrentStationSecondaryNameProps) => {\n    const { secondaryName, transform } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(() => setBBox(nameEl.current!.getBBox()), [secondaryName.toString()]);\n\n    return (\n        <g transform={transform}>\n            <g transform=\"translate(0,4.5)\" fontSize={36}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={26}>\n                    {secondaryName[0]}\n                </text>\n                <text dy={22} className=\"rmg-name__en\" fontSize={14}>\n                    {secondaryName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport StationNumber from './station-icon/station-number';\nimport { CanvasType, Name, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport CurrentStationName, { CurrentStationSecondaryName } from './current-station-name';\n\nconst InfoGZMTR = () => {\n    const svgHeight = useRootSelector(store => store.param.svg_height);\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const infoPanelType = useRootSelector(store => store.param.info_panel_type);\n    const lineNumber = useRootSelector(store => store.param.line_num);\n    const currentStationIndex = useRootSelector(store => store.param.current_stn_idx);\n    const curStnInfo = useRootSelector(store => store.param.stn_list[currentStationIndex]);\n\n    const [nameBBox, setNameBBox] = useState({ width: 0 } as SVGRect);\n\n    const nextStnId = curStnInfo[direction === ShortDirection.left ? 'parents' : 'children'];\n\n    const otisTransforms = {\n        name: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 4},45)`,\n        next: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 10},45)`,\n    };\n\n    const transforms = {\n        nameGroup: {\n            x: svgWidths.runin / 2,\n            y:\n                0.5 * svgHeight -\n                50 -\n                (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                (curStnInfo.secondaryName ? 29 : 0),\n        },\n        secondaryName: {\n            x: 0,\n            y: 70 + curStnInfo.name[1].split('\\\\').length * 36,\n        },\n    };\n\n    return (\n        <g>\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.name : ''}>\n                <g textAnchor=\"middle\" transform={`translate(${transforms.nameGroup.x},${transforms.nameGroup.y})`}>\n                    <CurrentStationName stnName={curStnInfo.name} onUpdate={setNameBBox} />\n                    {curStnInfo.secondaryName && (\n                        <CurrentStationSecondaryName\n                            secondaryName={curStnInfo.secondaryName}\n                            transform={`translate(${transforms.secondaryName.x},${transforms.secondaryName.y})`}\n                        />\n                    )}\n                </g>\n\n                <StationNumber\n                    lineNum={lineNumber}\n                    stnNum={curStnInfo.num}\n                    style={{\n                        ['--translate-x' as any]: `${(svgWidths[CanvasType.RunIn] + nameBBox.width) / 2 + 55}px`,\n                        ['--translate-y' as any]: `${\n                            0.5 * svgHeight -\n                            30 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                        transform: 'translate(var(--translate-x, 800px), var(--translate-y, 145px))',\n                    }}\n                    large\n                />\n            </g>\n\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.next : ''}>\n                {!nextStnId || nextStnId.includes('linestart') || nextStnId.includes('lineend') ? (\n                    <></>\n                ) : nextStnId.length === 1 ? (\n                    <BigNext nextId={nextStnId[0]} nameBBox={nameBBox} />\n                ) : (\n                    <BigNext2 nextIds={nextStnId} nameBBox={nameBBox} />\n                )}\n            </g>\n        </g>\n    );\n};\n\nexport default InfoGZMTR;\n\nconst BigNext = (props: { nextId: string; nameBBox: DOMRect }) => {\n    const { nextId, nameBBox } = props;\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const nextInfo = useRootSelector(store => store.param.stn_list[nextId]);\n    const { name, secondaryName } = nextInfo;\n\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEl = React.useRef<SVGGElement | null>(null);\n    useEffect(\n        () => setNextBBox(nextNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [name.toString()]\n    );\n\n    const nextNameZHCount = name[0].length;\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next\">\n                <g\n                    textAnchor=\"middle\"\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? '80px'\n                                : nextNameZHCount <= 2\n                                ? `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 70}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 35 * 1.5}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        下站\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={17} dy={30}>\n                        Next\n                    </text>\n                </g>\n                <g\n                    textAnchor=\"start\"\n                    ref={nextNameEl}\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? nextNameZHCount <= 2\n                                    ? `${115 + 35}px`\n                                    : `${115 + 35 / 2}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        {name[0]}\n                    </text>\n                    <g fontSize={17}>\n                        {name[1].split('\\\\').map((txt: string, i: number) => (\n                            <text className=\"rmg-name__en\" dy={30 + i * 17} key={i}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n                {secondaryName && (\n                    <g\n                        textAnchor=\"middle\"\n                        style={{\n                            ['--translate-x' as any]:\n                                direction === ShortDirection.left\n                                    ? nextNameZHCount <= 2\n                                        ? `${115 + 35}px`\n                                        : `${115 + 35 / 2}px`\n                                    : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                        }}\n                    >\n                        <BigNextSec\n                            secName={secondaryName}\n                            transform={`translate(${nextBBox.width / 2},${30 + name[1].split('\\\\').length * 17 + 5})`}\n                        />\n                    </g>\n                )}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${\n                                  (115 + 35 * ((nextNameZHCount <= 2 ? 1 : 0.5) + nextNameZHCount) + nameBcrX) / 2 - 20\n                              }px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      (nextNameZHCount <= 2 ? 70 + 35 : 35 * 2.5) +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n\nconst BigNextSec = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,2.5)\" fontSize={25}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {secName[0]}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={10} dy={15}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigNext2 = (props: { nextIds: string[]; nameBBox: DOMRect }) => {\n    const { nextIds, nameBBox } = props;\n    const { routes } = useRootSelector(store => store.helper);\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    const nextNames = nextIds.map(id => stationList[id].name);\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEls = useRef<(SVGGElement | null)[]>([]);\n    useEffect(\n        () => {\n            setNextBBox(prevBBox => ({ ...prevBBox, width: 0 }));\n            nextNameEls.current.forEach(el => {\n                let nextBBox = el?.getBBox();\n                setNextBBox(prevBBox => {\n                    if (nextBBox) {\n                        return prevBBox.width > nextBBox.width ? prevBBox : nextBBox;\n                    } else {\n                        return prevBBox;\n                    }\n                });\n            });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [nextNames.toString()]\n    );\n\n    const validEnds = props.nextIds.map(stnId =>\n        routes.reduce(\n            (acc, route) =>\n                // filter routes not containing next station's id\n                route.includes(stnId)\n                    ? acc.concat(\n                          route\n                              .filter(s => !['linestart', 'lineend'].includes(s))\n                              // select first/last station's id\n                              .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                      )\n                    : acc,\n            [] as string[]\n        )\n    );\n\n    const nextNameZHCount = Math.max(...nextNames.map(names => names[0].length));\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next_2\">\n                {nextNames.map((name, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            <g\n                                textAnchor=\"middle\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '72px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 41}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">下站</text>\n                                <text className=\"rmg-name__en\" y={22}>\n                                    Next\n                                </text>\n                            </g>\n                            <g\n                                ref={el => (nextNameEls.current[i] = el)}\n                                textAnchor=\"start\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '113px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">{name[0]}</text>\n                                {name[1].split('\\\\').map((txt, j) => (\n                                    <text key={j} className=\"rmg-name__en\" y={22 + j * 13}>\n                                        {txt}\n                                    </text>\n                                ))}\n                                <text className=\"rmg-name__zh\" y={-35}>\n                                    {validEnds[i].map(s => stationList[s].name[0]).join('/') + '方向'}\n                                </text>\n                                <text className=\"rmg-name__en rmg-name__gzmtr--next2-dest\" y={-20}>\n                                    {'Towards ' +\n                                        validEnds[i]\n                                            .map(s => stationList[s].name[1])\n                                            .join('/')\n                                            .replace('\\\\', ' ')}\n                                </text>\n                            </g>\n                        </React.Fragment>\n                    );\n                })}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${(99 + 27 * (1 + nextNameZHCount) + nameBcrX) / 2 - 20}px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      41 -\n                                      27 +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n","import React, { SVGProps } from 'react';\n\ninterface PlatformNumberProps extends SVGProps<SVGGElement> {\n    num: string | false;\n}\n\nexport default function PlatformNumber(props: PlatformNumberProps) {\n    const { num, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill=\"var(--rmg-theme-fg)\" {...others}>\n            <circle cx={0} cy={0} r={30} fill=\"var(--rmg-theme-colour)\" />\n            <text className=\"rmg-name__en\" fontSize={38} dy={-9.5}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={13} dy={10}>\n                站台\n            </text>\n            <text className=\"rmg-name__en\" fontSize={9} dy={21}>\n                Platform\n            </text>\n        </g>\n    );\n}\n","import React from 'react';\nimport { useRootSelector } from '../../redux';\nimport { CanvasType } from '../../constants/constants';\n\ninterface OtisFrameProps {\n    canvasType: CanvasType;\n}\n\nexport default function OtisFrame(props: OtisFrameProps) {\n    const { canvasType } = props;\n    const { svgWidth: svgWidths, svg_height: svgHeight } = useRootSelector(store => store.param);\n\n    return (\n        <g id=\"otis_frame\" strokeWidth={3} stroke=\"black\">\n            <line y2={svgHeight} transform={`translate(${svgWidths[canvasType] / 2},0)`} />\n            <line x2={svgWidths[canvasType]} transform=\"translate(0,90)\" />\n        </g>\n    );\n}\n","import React from 'react';\nimport StripGZMTR from './strip-gzmtr';\nimport InfoGZMTR from './info-gzmtr';\nimport { useRootSelector } from '../../redux';\nimport { CanvasType, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport PlatformNumber from './platform-number';\nimport SvgWrapper from '../common/svg-wrapper';\nimport OtisFrame from './otis-frame';\n\nconst CANVAS_TYPE = CanvasType.RunIn;\n\nexport default function RunInGZMTR() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgHeight,\n        direction,\n        info_panel_type: infoPanelType,\n        platform_num: platformNumber,\n        psd_num: psdNumber,\n        theme,\n    } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    const otisTransforms = {\n        platform: `translate(${direction === ShortDirection.left ? 50 : -50},45)`,\n    };\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType !== PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType !== PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.platform : ''}>\n                <PlatformNumber\n                    num={platformNumber}\n                    style={{\n                        ['--translate-x' as any]: `${direction === ShortDirection.left ? svgWidth - 100 : 100}px`,\n                        ['--translate-y' as any]: 'calc(var(--rmg-svg-height) / 2 - 30px)',\n                        transform: 'translate(var(--translate-x, 100px), var(--translate-y))',\n                    }}\n                />\n            </g>\n\n            <InfoGZMTR />\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && <OtisFrame canvasType={CANVAS_TYPE} />}\n        </SvgWrapper>\n    );\n}\n","import { ReactNode } from 'react';\nimport { CanvasType } from '../../constants/constants';\nimport RailMapGZMTR from '../railmap/railmap-gzmtr';\nimport RunInGZMTR from './runin-gzmtr';\n\nconst gzmtrSvgs: Partial<Record<CanvasType, ReactNode>> = {\n    runin: <RunInGZMTR />,\n    railmap: <RailMapGZMTR />,\n};\n\nexport default gzmtrSvgs;\n","import { ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n}\n\nexport const drawLine = (branch: string[], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n    let lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n    let linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n    if (lineMainStns.length === 1) {\n        linePassStns = branch;\n    }\n\n    if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n        // if two set disjoint\n        if (linePassStns[0] === branch[0]) {\n            // -1 -1 1 1\n            linePassStns.push(lineMainStns[0]);\n        } else if (\n            lineMainStns[0] === branch[0] &&\n            lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n            linePassStns.length\n        ) {\n            linePassStns = branch;\n            lineMainStns = [];\n        } else {\n            // 1 1 -1 -1\n            linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n        }\n    }\n\n    return {\n        main: lineMainStns,\n        pass: linePassStns,\n    };\n};\n"],"names":["SvgWrapper","props","type","svgWidth","svgHeight","canvasScale","theme","children","id","xmlns","xmlnsXlink","height","viewBox","colorInterpolationFilters","style","fill","width","strokeWidth","stroke","PsdNumber","num","inStrip","others","textAnchor","MonoColour","rx","x","className","fontSize","dy","stripHeight","variant","indicatorLight","React","cy","r","ry","y","transform","isShowLight","isShowPSD","PSD","isInStrip","includes","psdDy","prevProps","nextProps","memo","passed","pathD","large","d","StationNumber","lineNum","stnNum","lineNumEl","useRef","stnNumEl","useState","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","useEffect","current","getBBox","lineNumScale","Math","max","stnNumScale","length","ref","lineName","commonPart","wrapperEl","bBox","setBBox","toString","scale","MAX_WIDTH","dx","slice","trim","InterchangeBox","foregroundColour","backgroundColour","getType","nameZhEl","nameEnEl","nameZhBBox","setNameZhBBox","nameEnBBox","setNameEnBBox","nameZhScale","nameEnScale","getYByType","name","matchResultForType1","match","matchResultForType2","map","text","field","stnName","onUpdate","nameEl","split","txt","i","StationSecondaryName","nextBBox","ExpressTag","StationNameWrapper","primaryName","secondaryName","stationState","flipped","express","primaryBBox","setPrimaryBBox","secondaryBBox","setSecondaryBBox","primaryNameEnRows","transforms","g","cos","state","StationState","getFill","stnId","stnState","stnY","useRootSelector","store","param","line_name","lineNumber","line_num","stnInfo","stn_list","isNameShift","parents","tickRotation","indexOf","branch","left","right","nameENLns","nameDX","IntGroup","intInfos","concat","transfer","info","undefined","services","Services","IntTicks","IntBoxs","xlinkHref","other","wideFactor","stnList","helper","branches","routes","deps","depsStr","svgWidths","svgH","svg_height","yPercentage","y_pc","paddingPercentage","padding","branchSpacingPct","direction","currentStationIndex","current_stn_idx","stationList","adjMat","adjacencyList","xShares","useMemo","console","log","Object","keys","reduce","acc","cur","criticalPath","criticalPathMethod","nodes","len","branchOfStn","filter","partSource","partSink","leftOpenJaw","rightOpenJaw","lens","getXShare","JSON","stringify","realCP","lineXs","ShortDirection","CanvasType","xs","yShares","ys","stnStates","getStnState","linePaths","drawLine","main","push","pass","paths","stns","_linePath","Line","StationGroup","strokeDasharray","path","stnIds","realXs","realYs","prevY","forEach","join","replace","CANVAS_TYPE","app","psdNumber","psd_num","infoPanelType","info_panel_type","notes","notesGZMTR","curStnInfo","DefsGZMTR","PanelTypeGZMTR","TerminusFlag","DirectionIndicator","note","NoteBox","x2","strokeLinecap","directionIndicatorX","direction_gz_x","directionIndicatorY","direction_gz_y","validDests","Set","textGroupProps","destIds","DirectionIndicatorTextGroup","DirectionIndicatorTextGroup2","charCounts","minCharCounts","min","charSpacing","abs","letterSpacing","noteTextEl","textLength","navigator","userAgent","lengthAdjust","CurrentStationSecondaryName","nameBBox","setNameBBox","nextStnId","otisTransforms","next","nameGroup","runin","BigNext","nextId","BigNext2","nextIds","nextInfo","setNextBBox","nextNameEl","nextNameZHCount","nameBcrX","BigNextSec","secName","nextNames","nextNameEls","prevBBox","el","validEnds","route","s","names","j","PlatformNumber","cx","OtisFrame","canvasType","y2","RunInGZMTR","platformNumber","platform_num","platform","railmap","leftW","rightW","a","c","from","to","allLengths","criticalPaths","child","cp","unshift","maxLength","getXShareMTR","currentId","stnId1","stnId2","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","namePoss","leftWideFactor","rightWideFactor","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","stnPred","res","getYShare","e","prevId","prevX","stnDX","stnExtraH","stnSpareH","warn","stations","lineMainStns","linePassStns"],"sourceRoot":""}