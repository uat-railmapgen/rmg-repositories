{"version":3,"file":"static/js/railmapMTR.e255965e.chunk.js","mappings":"uKAKaA,EAAmB,SAACC,EAAmBC,EAAsBC,GACtE,IAAMC,EAAaF,EAAS,GAE5B,GAAIE,EAAWC,SAASJ,GAAY,CAEhC,GAAIC,EAASI,MAAM,GAAGC,MAAK,SAAAC,GAAM,OAAIA,EAAOH,SAASJ,EAApB,IAE7B,OAAO,EAEP,IAAMQ,EAAuBP,EAASI,MAAM,GAAGC,MAAK,SAAAC,GAChD,IAAME,EAA8B,cAAdF,EAAO,GACvBG,EACFP,EAAWQ,QAAQX,GAAaG,EAAWQ,QAAQJ,EAAOF,OAAO,GAAG,IAElEO,EAAyC,YAAxBL,EAAOF,OAAO,GAAG,GAClCQ,EAAoCV,EAAWQ,QAAQX,GAAaG,EAAWQ,QAAQJ,EAAO,IAEpG,OACKE,GAAiBC,GACjBE,GAAkBC,CAE1B,IAED,OAAIL,EAI0F,IAAnFN,EAAYM,EAAqB,IAAIM,SAASH,QAAQH,EAAqB,KAAa,EAAI,EAG5F,CAGlB,CAEG,IAAMO,EAAkBd,EAASI,MAAM,GAAGC,MAAK,SAAAC,GAAM,OAAIA,EAAOH,SAASJ,EAApB,IACrD,OAAIe,EACwC,cAAvBA,EAAgB,IAAuD,YAAjCA,EAAgBV,OAAO,GAAG,GAEG,IAAzEH,EAAYa,EAAgB,IAAID,SAASH,QAAQI,EAAgB,IAAY,KAAO,IAEX,IAAzEb,EAAYa,EAAgB,IAAID,SAASH,QAAQI,EAAgB,IAAY,GAAK,EAItF,CAGlB,EAEYC,EAAgB,SAACC,GAC1B,IAMIC,EAP6D,EAE3DC,EAAc,WADG,EACH,YADG,EACH,kBADG,EACH,YADG,GAEjBC,EAAc,WAFG,EAEH,YAFG,EAEH,kBAFG,EAEH,YAFG,GAGjBC,EAAY,WAHK,EAGL,YAHK,EAGL,kBAHK,EAGL,aAHK,GAIjBC,EAAY,WAJK,EAIL,YAJK,EAIL,kBAJK,EAIL,aAJK,GAOnBC,EAAkB,GAR2C,UAU/CN,GAV+C,IAUjE,2BAA0B,CAAC,IAAlBO,EAAiB,QACtB,GAAKN,EAGD,GAAIM,EAAM,KAAON,EAAU,GAEvBK,EAAME,KAAK,IAAMD,EAAM,QACpB,CACH,IAAME,GAAaF,EAAM,GAAKN,EAAU,IAAM,GAAsB,IAAjBA,EAAU,GAAW,EAAIS,IAC5EJ,EAAME,KAAK,IAAMC,GAEbF,EAAM,GAAKN,EAAU,IAErBK,EAAME,KAAKN,GACXI,EAAME,KAAK,KAAOD,EAAM,GAvBjB,IAwBPD,EAAME,KAAKL,KAGXG,EAAME,KAAKJ,GACXE,EAAME,KAAK,KAAOD,EAAM,GA5BjB,IA6BPD,EAAME,KAAKH,IAGfC,EAAME,KAAK,IAAMD,EAAM,GAC1B,MAtBDD,EAAME,KAAK,IAAMD,EAAMI,KAAK,MAyBhCV,EAAYM,CACf,CAtCgE,+BAwCjE,OAAOD,EAAMK,KAAK,KAAKC,QAAQ,iBAAkB,OACpD,C,uMC5FYC,EAAiB,SAACC,EAAsBC,GACjD,IAAIC,EAAM,EACJC,EAAaH,EAAQC,GAArBE,SACFC,EAAKD,EAASE,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IAe9B,MAd4B,MAAxBL,EAASM,cAEJL,EAAG,IAAMA,EAAG,GAAK,IAAGF,GAAO,KAE5BE,EAAG,IAAiB,IAAVA,EAAG,IAAsB,IAAVA,EAAG,KAAWF,GAAO,KAExC,IAAVE,EAAG,IAAsB,IAAVA,EAAG,IAEgB,cAA9BJ,EAAQC,GAAOS,QAAQ,IAAqD,YAA/BV,EAAQC,GAAOlB,SAAS,KAAkBmB,GAAO,IAIhE,IAAlCF,EAAQC,GAAOS,QAAQF,SAAcN,GAAO,IACW,IAAvDF,EAAQA,EAAQC,GAAOS,QAAQ,IAAI3B,SAASyB,SAAcN,GAAO,IAC9DA,CACV,EAEYS,EAAkB,SAACX,EAAsBC,GAClD,IAAIC,EAAM,EACJC,EAAaH,EAAQC,GAArBE,SACFC,EAAKD,EAASE,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IAc9B,MAb4B,MAAxBL,EAASM,cAEJL,EAAG,IAAMA,EAAG,GAAK,IAAGF,GAAO,KAE5BE,EAAG,IAAiB,IAAVA,EAAG,IAAsB,IAAVA,EAAG,KAAWF,GAAO,KAExC,IAAVE,EAAG,IAAsB,IAAVA,EAAG,IACgB,cAA9BJ,EAAQC,GAAOS,QAAQ,IAAqD,YAA/BV,EAAQC,GAAOlB,SAAS,KAAkBmB,GAAO,IAI/D,IAAnCF,EAAQC,GAAOlB,SAASyB,SAAcN,GAAO,IACU,IAAvDF,EAAQA,EAAQC,GAAOlB,SAAS,IAAI2B,QAAQF,SAAcN,GAAO,IAC9DA,CACV,EAEYU,EAAb,gMACcb,eAAiB,SAACE,GACxB,OAAOF,EAAe,EAAKC,QAASC,EACvC,EAHL,EAKcU,gBAAkB,SAACV,GACzB,OAAOU,EAAgB,EAAKX,QAASC,EACxC,EAPL,8CASI,SACI/B,EACA2C,EACAb,EACAc,EACAC,EACAC,EACAC,EACAC,GAED,IAAD,OADEC,EACF,uDADc,EAERC,EAAY,CACZC,KAAM,GACNC,KAAM,GACNC,WAAY,GACZC,WAAY,IA+DhB,OA5DAtD,EAASuD,SAAQ,SAACjD,EAAQkD,GACtB,IAAMC,EAAyB,cAAdnD,EAAO,IAA8C,YAAxBA,EAAOF,OAAO,GAAG,GAG3DsD,GADJpD,EAASA,EAAOqD,QAAO,SAAA5B,GAAK,OAAK,CAAC,YAAa,WAAW5B,SAAS4B,EAAvC,KACF4B,QAAO,SAAA5B,GAAK,OAAIY,EAAUZ,IAAU,CAAxB,IAClC6B,EAAetD,EAAOqD,QAAO,SAAA5B,GAAK,OAAIY,EAAUZ,IAAU,CAAxB,IAEV,IAAxB2B,EAAapB,SACbsB,EAAetD,GAG6D,IAA5EoD,EAAaC,QAAO,SAAA5B,GAAK,OAAqC,IAAjC6B,EAAalD,QAAQqB,EAAzB,IAAwCO,QAAgBoB,EAAapB,SAE1FsB,EAAa,KAAOtD,EAAO,GAE3BsD,EAAapC,KAAKkC,EAAa,IAE/BA,EAAa,KAAOpD,EAAO,IAC3BoD,EAAaA,EAAapB,OAAS,KAAOhC,EAAOA,EAAOgC,OAAS,IACjEsB,EAAatB,QAEbsB,EAAetD,EACfoD,EAAe,IAGfE,EAAaC,QAAQH,EAAaA,EAAapB,OAAS,KAI5DmB,GACAP,EAAUG,WAAW7B,MAAKT,EAAAA,EAAAA,GAAc2C,EAAatB,KAAI,SAAA0B,GAAE,MAAI,CAACjB,EAAGiB,GAAKhB,EAAGgB,GAAhB,MAC3DZ,EAAUI,WAAW9B,MAAKT,EAAAA,EAAAA,GAAc6C,EAAaxB,KAAI,SAAA0B,GAAE,MAAI,CAACjB,EAAGiB,GAAKhB,EAAGgB,GAAhB,QAE3DZ,EAAUC,KAAK3B,KACX,IAAI,EAAK,CAAEM,QAAAA,EAASiC,aAAcf,IAAMgB,UACpCN,EACAd,EACA5C,EACA6C,EACAC,EACAC,EACAC,EACAC,IAGRC,EAAUE,KAAK5B,KACX,IAAI,EAAK,CAAEM,QAAAA,EAASiC,aAAcf,IAAMgB,UACpCJ,EACAhB,EACA5C,EACA6C,EACAC,EACAC,EACAC,EACAC,IAIf,IAEMC,CACV,KAxFL,GAAiCe,EAAAA,IA2FpBC,EAAb,iJACI,SACIlE,EACA2C,EACAb,EACAc,EACAC,EACAC,EACAC,EACAC,GAED,IAAD,OADEC,EACF,uDADc,EAERC,EAAY,CACZC,KAAM,GACNC,KAAM,GACNC,WAAY,GACZC,WAAY,IAwDhB,OArDAtD,EAASuD,SAAQ,SAACjD,EAAQkD,GAEtB,IAAIE,GADJpD,EAASA,EAAOqD,QAAO,SAAA5B,GAAK,OAAK,CAAC,YAAa,WAAW5B,SAAS4B,EAAvC,KACF4B,QAAO,SAAA5B,GAAK,OAAIY,EAAUZ,IAAU,CAAxB,IAClC6B,EAAetD,EAAOqD,QAAO,SAAA5B,GAAK,OAAIY,EAAUZ,IAAU,CAAxB,IAEV,IAAxB2B,EAAapB,SACbsB,EAAetD,GAG6D,IAA5EoD,EAAaC,QAAO,SAAA5B,GAAK,OAAqC,IAAjC6B,EAAalD,QAAQqB,EAAzB,IAAwCO,QAAgBoB,EAAapB,SAE1FsB,EAAa,KAAOtD,EAAO,GAE3BsD,EAAapC,KAAKkC,EAAa,IAE/BA,EAAa,KAAOpD,EAAO,IAC3BoD,EAAaA,EAAapB,OAAS,KAAOhC,EAAOA,EAAOgC,OAAS,IACjEsB,EAAatB,QAEbsB,EAAetD,EACfoD,EAAe,IAGfE,EAAaC,QAAQH,EAAaA,EAAapB,OAAS,KAIhEY,EAAUC,KAAK3B,KACX,IAAI,EAAK,CAAEM,QAAAA,EAASiC,aAAcf,IAAMgB,UACpCN,EACAd,EACA5C,EACA6C,EACAC,EACAC,EACAC,EACAC,IAGRC,EAAUE,KAAK5B,KACX,IAAI,EAAK,CAAEM,QAAAA,EAASiC,aAAcf,IAAMgB,UACpCJ,EACAhB,EACA5C,EACA6C,EACAC,EACAC,EACAC,EACAC,GAGX,IAEMC,CACV,KAzEL,GAAqCR,E,2QChIxByB,EAAgB,SACzBrC,EACAsC,EACAC,GAEA,OAAOC,OAAOC,KAAKzC,GAAS0C,QACxB,SAACC,EAAKC,GAAN,eAAC,UACMD,GADP,cAEKC,EAAM5C,EAAQ4C,GAAK7D,SAAS2D,QACzB,SAACG,EAAGC,GAAJ,eAAC,UAAeD,GAAhB,cAAoBC,EAAI,EAAIR,EAAMtC,EAAS8C,GAAKP,EAAOvC,EAAS4C,IAAhE,GACA,CAAC,IAJT,GAOA,CAAC,EAER,EAQYG,EAAqB,SAArBA,EAAsBC,EAAcC,EAAYC,GACzD,GAAIF,IAASC,EACT,MAAO,CAAEE,IAAK,EAAGC,MAAO,CAACJ,IAE7B,IAAIK,EAAuB,GACvBC,EAA4B,GAChCd,OAAOC,KAAKS,EAAOF,IAAOvB,SAAQ,SAAA8B,GAC9B,IAAIrC,EAAK6B,EAAmBQ,EAAON,EAAIC,GACnChC,EAAGiC,IAAM,IACbE,EAAW3D,KAAKwD,EAAOF,GAAMO,GAASrC,EAAGiC,KACzCjC,EAAGkC,MAAMrB,QAAQiB,GACjBM,EAAc5D,KAAKwB,EAAGkC,OACzB,IACD,IAAII,EAAYC,KAAKC,IAAL,MAAAD,KAAYJ,GAC5B,MAAO,CACHF,IAAKK,EACLJ,MAAOE,EAAcD,EAAWzE,QAAQ4E,IAE/C,EAEYG,EAAe,SAAC1D,EAAeiD,EAA0ChF,GAClF,IAAI+D,EAAec,EAAmB,YAAa,UAAWG,GAC9D,GAAIjB,EAAamB,MAAM/E,SAAS4B,GAC5B,OAAO8C,EAAmBd,EAAamB,MAAM,GAAInD,EAAOiD,GAAQC,IAMhE,IAHA,IAAIS,EAAc1F,EAAS2D,QAAO,SAAArD,GAAM,OAAIA,EAAOH,SAAS4B,EAApB,IAA4B,GAEhE4D,EAAa5D,GACTgC,EAAamB,MAAM/E,SAASwF,IAChCA,EAAaD,EAAYA,EAAYhF,QAAQiF,GAAc,GAG/D,IADA,IAAIC,EAAW7D,GACPgC,EAAamB,MAAM/E,SAASyF,IAChCA,EAAWF,EAAYA,EAAYhF,QAAQkF,GAAY,GAG3D,IAAIC,EAA6B,cAAfF,EAIdG,EAAO,GAkBX,OAjBKD,GAJ2B,YAAbD,EASRC,GACPC,EAAK,GAAK,EACVA,EAAK,GAAKjB,EAAmBd,EAAamB,MAAM,GAAIU,EAAUZ,GAAQC,IACtEa,EAAK,GAAKjB,EAAmBa,EAAY,GAAI3D,EAAOiD,GAAQC,IAC5Da,EAAK,GAAKjB,EAAmB9C,EAAO6D,EAAUZ,GAAQC,MAGtDa,EAAK,GAAKjB,EAAmBd,EAAamB,MAAM,GAAIS,EAAYX,GAAQC,IACxEa,EAAK,GAAKjB,EAAmBc,EAAY5B,EAAamB,MAAM9E,OAAO,GAAG,GAAI4E,GAAQC,IAClFa,EAAK,GAAKjB,EAAmBc,EAAY5D,EAAOiD,GAAQC,IACxDa,EAAK,GAAKjB,EAAmB9C,EAAO2D,EAAYtF,OAAO,GAAG,GAAI4E,GAAQC,MAdtEa,EAAK,GAAKjB,EAAmBd,EAAamB,MAAM,GAAIS,EAAYX,GAAQC,IACxEa,EAAK,GAAKjB,EAAmBc,EAAYC,EAAUZ,GAAQC,IAC3Da,EAAK,GAAKjB,EAAmBc,EAAY5D,EAAOiD,GAAQC,IACxDa,EAAK,GAAKjB,EAAmB9C,EAAO6D,EAAUZ,GAAQC,KAanDa,EAAK,GAAMA,EAAK,GAAKA,EAAK,IAAOA,EAAK,GAAKA,EAAK,GAE9D,EAoBYC,EAAc,SACvBC,EACAC,EACAC,GACmC,IAAD,EAElC,OADAC,QAAQC,IAAI,+BACL,OAAI,IAAIC,KAAK,MAAgBC,OAAjB,gBAA2BL,MAAUzB,QACpD,SAACC,EAAKC,GAAN,eAAC,UACMD,GADP,cAEKC,EACGA,IAAQsB,EACF,GAEIE,IAAcK,EAAAA,GAAAA,MAtBnB,SAACC,EAAgBC,EAAgBR,GAAwB,IAAD,YACvDA,GADuD,IACzE,2BAA0B,CAAC,IAAlBS,EAAiB,QAClBC,EAAOD,EAAMhG,QAAQ8F,GACrBI,EAAOF,EAAMhG,QAAQ+F,GACzB,IAAc,IAAVE,GAAeA,EAAOC,EAAM,OAAO,CAC1C,CALwE,+BAMzE,OAAO,CACV,CAgB+BC,CAAab,EAAWtB,EAAKuB,GAhCtC,SAACO,EAAgBC,EAAgBR,GAAwB,IAAD,YACzDA,GADyD,IAC3E,2BAA0B,CAAC,IAAlBS,EAAiB,QAClBC,EAAOD,EAAMhG,QAAQ8F,GACrBI,EAAOF,EAAMhG,QAAQ+F,GACzB,IAAc,IAAVG,GAAeA,EAAOD,EAAM,OAAO,CAC1C,CAL0E,+BAM3E,OAAO,CACV,CA0B+BG,CAAed,EAAWtB,EAAKuB,IAEzC,GACC,GAXf,GAaA,CAAC,EAER,EAEYhC,EAAb,WAOI,WAAY8C,GAA8C,IAAD,4BANzDC,QAAU,CAAC,EAM8C,KALzDC,QAAU,CAAC,EAK8C,KAJzDC,SAAW,CAAC,EAI6C,KAHzDpF,QAAU,CAAC,EAG8C,KAFzDiC,aAAe,CAAC,EAEyC,KAQ/ClC,eAAiB,SAACE,GACxB,OAAO,CACV,EAVwD,KAe/CU,gBAAkB,SAACV,GACzB,OAAO,CACV,EAjBwD,KAmEjDoF,eAAiB,SAACpE,GACtB,IAEIqE,EAFK,GACEC,KACY9B,KAAK+B,KAAK,GAC7BC,EAAOxE,EAAgB,EAAIqE,EAE/B,MAAO,CAAEC,GALA,GAKIG,KAJFH,KAIQD,KAAAA,EAAMK,KADdF,EAAOhC,KAAK+B,KAAK,GACGC,KAAAA,EAClC,EA1EwD,KA+EjDG,WAAa,SAAC3E,GAClB,MAAqC,EAAKoE,eAAepE,GAAnDsE,EAAN,EAAMA,GAAIG,EAAV,EAAUA,KAAMJ,EAAhB,EAAgBA,KAAMK,EAAtB,EAAsBA,KAAMF,EAA5B,EAA4BA,KAC5B,MAAM,KAAN,OAAYF,EAAZ,YAAkBA,EAAlB,kBAA8BG,EAA9B,YAAsCJ,EAAtC,cAAgDK,EAAhD,YAAwDF,EAAxD,cAAkEF,EAAlE,YAAwEA,EAAxE,kBAAoFG,EAApF,YAA4FJ,EAC/F,EAlFwD,KAuFjDO,WAAa,SAAC5E,GAClB,MAAqC,EAAKoE,eAAepE,GAAnDsE,EAAN,EAAMA,GAAIG,EAAV,EAAUA,KAAMJ,EAAhB,EAAgBA,KAAMK,EAAtB,EAAsBA,KAAMF,EAA5B,EAA4BA,KAC5B,MAAM,KAAN,OAAYF,EAAZ,YAAkBA,EAAlB,kBAA8BG,EAA9B,aAAuCJ,EAAvC,cAAiDK,EAAjD,aAA0DF,EAA1D,cAAoEF,EAApE,YAA0EA,EAA1E,kBAAsFG,EAAtF,aAA+FJ,EAClG,EAzFGQ,KAAK9F,QAAUiF,EAAKjF,QACpB8F,KAAK7D,aAAegD,EAAKhD,YAC5B,CAVL,wCA0BI,SAAoBhC,EAAe/B,GAC/B,GAAI+B,KAAS6F,KAAKZ,QAAS,OAAOY,KAAKZ,QAAQjF,GAE/C,GACI,CAAC,YAAa,WAAW5B,SAAS4B,IAClC6F,KAAK9F,QAAQC,GAAOS,QAAQF,OAAS,GACrCsF,KAAK9F,QAAQC,GAAOlB,SAASyB,OAAS,EAGtC,OADAsF,KAAKZ,QAAQjF,GAAS,EACf,EAEX,IAAI8F,EAAUD,KAAK9F,QAAQC,GAAOS,QAAQ,GAC1C,GAAIqF,EAAS,CAET,GAA8C,IAA1CD,KAAK9F,QAAQ+F,GAAShH,SAASyB,OAAc,CAE7C,IAAIN,EAAM4F,KAAKE,UAAUD,GAEzB,OADAD,KAAKZ,QAAQjF,GAASC,EACfA,CACV,CAEG,IAAIA,EAAgE,IAAlD4F,KAAK9F,QAAQ+F,GAAShH,SAASH,QAAQqB,GAAe,GAAK,EAE7E,OADA6F,KAAKZ,QAAQjF,GAASC,EACfA,CAEd,CAGG,OADA4F,KAAKZ,QAAQjF,GAAS,EACf,CAEd,GAxDL,uBAsGI,SACIgG,EACAnF,EACA5C,EACAgI,EACAC,EACAlF,EACAC,EACAC,GACD,IAAD,OACE,UAA6B,GAA7B,GAAKiF,EAAL,KAAaC,EAAb,KAAoBC,EAApB,KACIC,EAAO,GAEX,EAAqBT,KAAKT,eAAepE,GACrCuF,EADJ,EAAMd,KAAN,EAAYC,KACc,EACtBc,GAAc3F,EAAO,GAAKA,EAAO,IAAMI,EAAGiC,IAAO,EACjDuD,IAAc5F,EAAO,GAAKA,EAAO,IAAMI,EAAGiC,IAAM,EAAIqD,GAAS,EAiDjE,OAhDIE,EAAYD,EAAY,GACxBpC,QAAQsC,KAAR,+BAAqCD,EAAYD,IAGrDR,EAAOxE,SAAQ,SAAAxB,GACX,IAAI2G,EAAIV,EAAOjG,GACX4G,EAAIV,EAAOlG,GACf,IAAKoG,GAAmB,IAAVA,EAmBV,OAlBCD,EAAyBnG,EAAjBqG,EAAwBM,EAAjBP,EAAoBQ,OACd,IAAlBZ,EAAOzF,OACP+F,EAAK7G,KAAL,YAAekH,EAAf,YAAoBC,IACZ3I,EAAS,GAAGG,SAAS4B,GAGtB/B,EAAS,GAAGG,SAAS4H,EAAO,IAEnCM,EAAK7G,KAAL,YAAekH,EAAf,YAAoBC,KAGhBX,EAAOD,EAAO,IAAM,GACpBM,EAAK7G,KAAL,YAAekH,EAAf,YAAoBC,EAAI1F,IAExBgF,EAAOF,EAAO,IAAM,GACpBM,EAAK7G,KAAL,YAAekH,EAAf,YAAoBC,EAAI1F,KAV5BoF,EAAK7G,KAAL,YAAekH,EAAf,YAAoBC,KAexBA,EAAIR,GACJE,EAAK7G,KACD,YAAM,IAANmH,EACWD,EAAIN,EAAQG,EAAY,EAAK1G,eAAeE,GAASyG,EAAoB,EAARF,EACjEC,EAAY,EAAK9F,gBAAgByF,GAAUM,IAE1DH,EAAK7G,KAAK,EAAKkG,WAAW3E,KACnB4F,EAAIR,IACXE,EAAK7G,KACD,YAAM,IAANmH,EACWD,EAAIN,EAAQG,EAAY,EAAK1G,eAAeE,GAASyG,EAAoB,EAARF,EACjEC,EAAY,EAAK9F,gBAAgByF,GAAUM,IAE1DH,EAAK7G,KAAK,EAAKmG,WAAW5E,KAE9BsF,EAAK7G,KAAL,YAAekH,IACdR,EAAyBnG,EAAjBqG,EAAwBM,EAAjBP,EAAoBQ,CACvC,IAGMN,EAAK1G,KAAK,KAAKC,QAAQ,kBAAmB,QACpD,IAxKL,yBA0DI,SAAkBE,EAAsB9B,GACpCmG,QAAQC,IAAI,sBACZ,IAAIwC,EAAW,IAAIhB,KAAK,CAAE9F,QAAAA,IAQ1B,OANAwC,OAAOC,KAAKzC,GAASyB,SAAQ,SAAAxB,GACrB,CAAC,YAAa,WAAW5B,SAAS4B,IAClCA,KAAS6G,EAAS5B,SACtB4B,EAASd,UAAU/F,EAAO/B,EAC7B,IAEM4I,EAAS5B,OACnB,KArEL,KA2Ka6B,EAAW,SAACvI,EAAkBqC,GAEvC,IAAIe,GADJpD,EAASA,EAAOqD,QAAO,SAAA5B,GAAK,OAAK,CAAC,YAAa,WAAW5B,SAAS4B,EAAvC,KACF4B,QAAO,SAAA5B,GAAK,OAAIY,EAAUZ,IAAU,CAAxB,IAClC6B,EAAetD,EAAOqD,QAAO,SAAA5B,GAAK,OAAIY,EAAUZ,IAAU,CAAxB,IAwBtC,OAtB4B,IAAxB2B,EAAapB,SACbsB,EAAetD,GAG6D,IAA5EoD,EAAaC,QAAO,SAAA5B,GAAK,OAAqC,IAAjC6B,EAAalD,QAAQqB,EAAzB,IAAwCO,QAAgBoB,EAAapB,SAE1FsB,EAAa,KAAOtD,EAAO,GAE3BsD,EAAapC,KAAKkC,EAAa,IAE/BA,EAAa,KAAOpD,EAAO,IAC3BoD,EAAaA,EAAapB,OAAS,KAAOhC,EAAOA,EAAOgC,OAAS,IACjEsB,EAAatB,QAEbsB,EAAetD,EACfoD,EAAe,IAGfE,EAAaC,QAAQH,EAAaA,EAAapB,OAAS,KAIzD,CACHa,KAAMO,EACNN,KAAMQ,EAEb,C,0KC/UKkF,EAAc,SAACC,GACjB,OAAQA,GACJ,KAAKC,EAAAA,GAAAA,GACD,OAAO,IACX,KAAKA,EAAAA,GAAAA,KACD,OAAO,EACX,KAAKA,EAAAA,GAAAA,KACD,OAAO,GACX,KAAKA,EAAAA,GAAAA,MACD,OAAQ,GAEnB,EASD,SAASC,EAAgBC,GACrB,IAAQC,EAA+CD,EAA/CC,gBAAiBC,EAA8BF,EAA9BE,SAAUL,EAAoBG,EAApBH,SAAUM,EAAUH,EAAVG,MAEvCC,EAAcH,EAAgB,GAAGI,MAAM,MAAMjH,OAC7CkH,EAAcL,EAAgB,GAAGI,MAAM,MAAMjH,OAE7CmH,EACFV,IAAaC,EAAAA,GAAAA,MAAiBK,IAAUK,EAAAA,GAAAA,KAClC,MACAX,IAAaC,EAAAA,GAAAA,OAAkBK,IAAUK,EAAAA,GAAAA,MACzC,QACA,SAEJC,EAAa,CACftB,KAAM,CACFuB,OAAQd,EAAYC,IAExBc,EAAG,CACCnB,GACKK,IAAaC,EAAAA,GAAAA,MAAiB,GAAKD,IAAaC,EAAAA,GAAAA,MAAiB,GAAK,IACtEK,IAAUK,EAAAA,GAAAA,MAAkB,EAAIL,IAAUK,EAAAA,GAAAA,MAAkB,EAAI,GACrEf,EACII,IAAaC,EAAAA,GAAAA,IACN,GAAK,IAAMM,EAAc,GAAK,GAAKE,EAAc,GAClDT,IAAaC,EAAAA,GAAAA,KACb,GACA,GAAK,GAAK,IAAMM,EAAc,GAAK,GAAKE,EAAc,GAAK,GAAK,IAIlF,OACI,iCACI,iBACIM,EAAE,UACFC,cAAc,QACdC,OAAQZ,EAAW,kBAAoBD,EAAgB,GACvDc,YAAa,EACbC,UAAS,iBAAYP,EAAWtB,KAAKuB,OAA5B,QAEb,eACIH,WAAYA,EACZS,UAAS,oBAAeP,EAAWE,EAAEnB,EAA5B,YAAiCiB,EAAWE,EAAElB,EAA9C,KACTwB,KAAMf,EAAW,kBAAoB,mBAHzC,UAKKD,EAAgB,GAAGI,MAAM,MAAMnH,KAAI,SAACgI,EAAK5G,GAAN,OAChC,iBAAc6G,GAAI,GAAK7G,EAAG8G,UAAU,eAAeC,SAAU,GAA7D,SACKH,GADM5G,EADqB,IAKnC2F,EAAgB,GAAGI,MAAM,MAAMnH,KAAI,SAACgI,EAAKI,GAAN,OAChC,iBAA4BH,GAAkB,GAAdf,EAAmB,EAAI,EAAIkB,EAAGF,UAAU,eAAeC,SAAU,EAAjG,SACKH,GADMd,EAAckB,EADO,SAQnD,CAED,OAAeC,EAAAA,EAAAA,MACXxB,GACA,SAACyB,EAAWC,GAAZ,OACID,EAAUvB,gBAAgByB,aAAeD,EAAUxB,gBAAgByB,YACnEF,EAAUtB,WAAauB,EAAUvB,UACjCsB,EAAU3B,WAAa4B,EAAU5B,UACjC2B,EAAUrB,QAAUsB,EAAUtB,KAJlC,IC5EW,SAASwB,EAAY3B,GAChC,IAAQ5G,EAAiC4G,EAAjC5G,OAAQ8G,EAAyBF,EAAzBE,SAAU0B,EAAe5B,EAAf4B,WAE1B,OACI,iBACIhB,EAAC,iBAAYxH,EAAZ,8BAAwCA,EAAxC,sBACDgI,UAAU,eACVN,OAAQZ,EAAW,kBAAoB,mBACvCc,UAAS,kBAAaY,GAAc,EAAI,EAA/B,MAGpB,CCNc,SAASC,EAAmB7B,GACvC,IAAQ8B,EAAgE9B,EAAhE8B,oBAAqB9E,EAA2CgD,EAA3ChD,UAAWkD,EAAgCF,EAAhCE,SAAU0B,EAAsB5B,EAAtB4B,WAAYzB,EAAUH,EAAVG,MAExD4B,EAAaD,EAAoB1I,QAAU,EAAI,EAAI,GAAK0I,EAAoB1I,OAElF,OACI,yBACoC,IAA/B0I,EAAoB1I,SACjB,SAAC,EAAD,CACI6G,gBAAiB6B,EAAoB,GACrC5B,SAAUA,EACVL,SAAU+B,EAAa9B,EAAAA,GAAAA,GAAcA,EAAAA,GAAAA,KACrCK,MAAOA,IAId2B,EAAoB1I,OAAS,GAC1B0I,EAAoB5I,KAAI,SAACD,EAAMqB,GAAP,OACpB,cAAW0G,UAAS,sBAAiBY,GAAc,IAAMtH,EAAI,GAAK,IAAMA,EAAI,GAAxD,KAApB,UACI,SAAC,EAAD,CACI2F,gBAAiBhH,EACjBiH,SAAUA,EACVL,SAAU7C,IAAcwD,EAAAA,GAAAA,MAAkBV,EAAAA,GAAAA,MAAiBA,EAAAA,GAAAA,QAJ3DxF,EADY,KAU5B,SAACqH,EAAD,CAAavI,OAAQ2I,EAAY7B,SAAUA,EAAU0B,WAAYA,MAG5E,CC7Bc,SAASI,EAAWhC,GAAyB,IAAD,UAC/C8B,EAAkF9B,EAAlF8B,oBAAqB9E,EAA6DgD,EAA7DhD,UAAWkD,EAAkDF,EAAlDE,SAAU0B,EAAwC5B,EAAxC4B,WAAYK,EAA4BjC,EAA5BiC,WAAYC,EAAgBlC,EAAhBkC,YAEpE5B,EAAW,iBAAG4B,QAAH,IAAGA,GAAH,UAAGA,EAAc,UAAjB,iBAAG,EAAkB7B,MAAM,aAA3B,aAAG,EAA+BjH,cAAlC,QAA4C,EAEvD2I,EAAa,IAAMD,EAAoB1I,OAAS,GAChDqH,EAAa,CACf0B,KAAM,CACF3C,EAAGyC,EACG,EAC+B,IAA/BH,EAAoB1I,OACpB4D,IAAcwD,EAAAA,GAAAA,MACT,GACD,GACJxD,IAAcwD,EAAAA,GAAAA,KACd,IACC,GACPf,EAAGwC,EACGL,EACI,IACC,IACCA,GAAc,EAAI,IAAME,EAAoB1I,OAAS,GAA1D,EAA+D,GAAKkH,EAAc,KAIjG,OACI,yBACKwB,EAAoB5I,KAAI,SAACD,EAAMqB,EAAG8H,GAAV,OACrB,cAAWpB,UAAS,sBAAiBY,GAAc,GAAKtH,EAAI,GAAKA,EAA7C,KAApB,UACI,SAAC,EAAD,CACI2F,gBAAiBhH,EACjBiH,SAAUA,EACVL,SACmB,IAAfuC,EAAIhJ,OACEwI,EACI9B,EAAAA,GAAAA,GACAA,EAAAA,GAAAA,KACJ9C,IAAcwD,EAAAA,GAAAA,MACdV,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,QAXVxF,EADa,KAkBzB,SAACqH,EAAD,CAAavI,OAAQ2I,EAAY7B,SAAUA,EAAU0B,WAAYA,KAEjE,eACIrB,WAAkC,IAAtBE,EAAW0B,KAAK3C,EAAU,SAAWiB,EAAW0B,KAAK3C,EAAI,EAAI,QAAU,MACnFyB,KAAMf,EAAW,kBAAoB,mBACrCc,UAAS,oBAAeP,EAAW0B,KAAK3C,EAA/B,YAAoCiB,EAAW0B,KAAK1C,EAApD,KAHb,WAKI,iBAAM2B,UAAU,eAAeC,SAAU,GAAzC,gBACKa,QADL,IACKA,OADL,EACKA,EAAc,KANvB,OAQKA,QARL,IAQKA,GARL,UAQKA,EAAc,UARnB,iBAQK,EAAkB7B,MAAM,aAR7B,aAQK,EAA+BnH,KAAI,SAACgI,EAAK5G,GAAN,OAChC,iBAAc8G,UAAU,eAAeC,SAAU,EAAGF,GAAI,GAAK,GAAK7G,EAAlE,SACK4G,GADM5G,EADqB,SAQnD,C,oEC3EY+H,EAAgB,mCAAG,0FACxBC,EAAe,EADS,WAGrBA,IAHqB,iCAKEC,SAASC,MAAMC,MALjB,OAKlBC,EALkB,OAMlBC,EAAKD,EAAYE,SANC,YAQdC,EAAOF,EAAGE,QACPC,KATW,wDAaM,gBAAtBD,EAAKE,MAAMC,OAbK,iFAkBxB/F,QAAQC,IAAI,oDAAsDoF,EAAe,QAlBzD,WAmBlBW,EAAAA,EAAAA,IAAU,KAnBQ,qCAsBtB,IAAIC,MAAM,4CAtBY,4CAAH,qDCQ7B,GAAe3B,EAAAA,EAAAA,OACX,SAAqBvB,GACjB,IAAQmD,EAA6BnD,EAA7BmD,QAASC,EAAoBpD,EAApBoD,SAAUC,EAAUrD,EAAVqD,MAErBC,GAASC,EAAAA,EAAAA,QAAoB,MAE7BC,EAAiB,WACX,OAARJ,QAAQ,IAARA,GAAAA,EAAWE,EAAOG,QAASC,UAC9B,GAEDC,EAAAA,EAAAA,YAAU,WACNH,IACAnB,IAAmBuB,OAAOC,MAAM5G,QAAQC,KAAK4G,QAAQN,EACxD,GAAE,CAACL,EAAQzB,WAAY2B,IAexB,OACI,eAAGU,IAAKT,EAAQ/C,WAdE,SAACvD,GACnB,OAAQA,GACJ,KAAKwD,EAAAA,GAAAA,KACD,MAAO,QACX,KAAKA,EAAAA,GAAAA,MACD,MAAO,MACX,QACI,MAAO,SAElB,CAK+BwD,CAAcX,GAA1C,WACI,iBAAMjC,UAAU,sCAAhB,SAAuD+B,EAAQ,KAE9DA,EAAQ,GAAG9C,MAAM,MAAMnH,KAAI,SAACgI,EAAK5G,GAAN,OACxB,iBAAc8G,UAAU,sCAAsCD,IAP3D8C,EAOqE3J,EAPnD,GAAK,GAAK2J,GAO/B,SACK/C,GADM5G,GAPT,IAAC2J,CAMqB,MAOvC,IACD,SAACzC,EAAWC,GAAZ,OACID,EAAU2B,QAAQzB,aAAeD,EAAU0B,QAAQzB,YAAcF,EAAU6B,QAAU5B,EAAU4B,KADnG,I,4DCTW,SAASa,EAAmBlE,GACvC,IAAQkC,EAAiElC,EAAjEkC,YAAaiC,EAAoDnE,EAApDmE,aAAcC,EAAsCpE,EAAtCoE,MAAOf,EAA+BrD,EAA/BqD,MAAOgB,EAAwBrE,EAAxBqE,SAAaC,GAA9D,OAAyEtE,EAAzE,GAOA,GAAwBuE,EAAAA,EAAAA,UAAS,CAAE/E,EAAG,EAAGgF,MAAO,IAAhD,eAAOC,EAAP,KAAaC,EAAb,KAaMC,EAAazC,EAAY,GAAG7B,MAAM,MAAMjH,OACxCqH,EAAa,CACfE,EAAG,CACCnB,EAAG6D,EAASA,IAAU7C,EAAAA,GAAAA,OAAmB,EAAI,EAAK,EAClDf,GACK2E,EACKQ,SACA,SAAsD,IAAMD,EAAa,KAC9EtB,EAASe,EAAQ,IAAM,GAAM,IAEtCS,KAAM,CACFrF,EACIiF,EAAKjF,EACL,GACC6E,IAAaS,EAAAA,GAAAA,KACR,EACAzB,EACAA,IAAU7C,EAAAA,GAAAA,OACN,SACA,GACJ,WACVf,GAAGsF,QACHP,MAAOC,EAAKD,MAAQ,GAAKH,IAAaS,EAAAA,GAAAA,KAAkB,EAAIE,UAC5DC,OAAQD,SAAuB,IAAML,EAAa,IAEtDO,IAAK,CACD1F,EAAG6D,EACGA,IAAU7C,EAAAA,GAAAA,OACN,UAA8BiE,EAAKD,MAAQ,EAC3C,YACFC,EAAKD,MAAQ,GAAK,EAC1B/E,EAAqB,KAAOkF,EAAa,GAAtCI,SAEPI,YAAa,CACT3F,EACI6E,IAAaS,EAAAA,GAAAA,KACP,EACAzB,EACAA,IAAU7C,EAAAA,GAAAA,MACN,EACAwE,SACJ,UACVvF,EAAG,IAIX,OACI,gCAAO6E,GAAP,cACI,eAAGrD,KA3DK,SAACmE,GACb,OAAQA,GACJ,KAAKC,EAAAA,GAAAA,OACD,MAAO,kBACX,KAAKA,EAAAA,GAAAA,QACD,MAAO,OACX,KAAKA,EAAAA,GAAAA,OACD,MAAO,mBAElB,CAkDgBC,CAAQnB,GAAenD,UAAS,oBAAeP,EAAWE,EAAEnB,EAA5B,YAAiCiB,EAAWE,EAAElB,EAA9C,KAAzC,UACK0E,IAAiBkB,EAAAA,GAAAA,UACd,iBACI7F,EAAGiB,EAAWoE,KAAKrF,EACnBC,EAAGgB,EAAWoE,KAAKpF,EACnB+E,MAAO/D,EAAWoE,KAAKL,MACvBS,OAAQxE,EAAWoE,KAAKI,OACxBhE,KAAK,qBAIZoD,IAAaS,EAAAA,GAAAA,OACV,gBACIS,UAAS,WAAMlB,GACfpD,KAAMkD,IAAiBkB,EAAAA,GAAAA,OAAsB,kBAAoB,mBACjE7F,EAAGiB,EAAWyE,IAAI1F,EAClBC,EAAGgB,EAAWyE,IAAIzF,KAI1B,cAAGuB,UAAS,oBAAeP,EAAW0E,YAAY3F,EAAtC,YAA2CiB,EAAW0E,YAAY1F,EAAlE,KAAZ,UACI,SAAC,EAAD,CAAa0D,QAASjB,EAAakB,SAAUsB,EAASrB,MAAOA,WAKhF,CC3Hc,SAASmC,EAAQxF,GAAsB,IAAD,cACzCnJ,EAAwCmJ,EAAxCnJ,UAAWsN,EAA6BnE,EAA7BmE,aAAcvC,EAAe5B,EAAf4B,WAEjC,GAMI6D,EAAAA,EAAAA,KAAgB,SAAAL,GAAK,OAAIA,EAAMM,MAAMC,SAAS9O,EAAzB,IALrBsL,EADJ,EACIA,KACA7I,EAFJ,EAEIA,QACA3B,EAHJ,EAGIA,SAHJ,IAIIoB,SAAYE,EAJhB,EAIgBA,KAAMI,EAJtB,EAIsBA,WAAYuM,EAJlC,EAIkCA,UAAWC,EAJ7C,EAI6CA,UACzCxB,EALJ,EAKIA,SAGEyB,EAA6B,UAAA7M,EAAK,UAAL,SAASG,OACtCE,EAAQrC,SAAS,aACbuJ,EAAAA,GAAAA,KACA7I,EAASV,SAAS,WAClBuJ,EAAAA,GAAAA,WACAuF,OACJA,EACAC,EAAaC,SAAQ,UAAAhN,EAAK,UAAL,eAASG,UAAW0M,GAEzCrF,EAAa,CACfyF,KAAM,CACFC,OAAQL,IAAQtF,EAAAA,GAAAA,MAAkB,EAAI,EACtC4F,OAAQxE,GAAc,EAAI,GAE9ByE,IAAK,CACD7G,EAAGsG,EAAOA,IAAQtF,EAAAA,GAAAA,MAAkB,GAAK,GAAM,EAC/Cf,EAAGqG,EAAM,EAAKlE,GAAmB,GAAN,KAInC,OACI,eAAG,cAAY,uBAAf,WACK,UAAA3I,EAAK,UAAL,eAASG,UACN,iBACIwH,EAAGkF,GAAG,UAAI7M,EAAK,UAAT,OAAI,EAASG,OAAS,UAAY,UACxC2H,YAAa,KACbuF,gBAAiBT,EAAY,EAAI,IACjC/E,OAAQqD,IAAiBkB,EAAAA,GAAAA,OAAsB,kBAAoB,mBACnErE,UAAS,gBAAWP,EAAWyF,KAAKC,OAA3B,YAAqC1F,EAAWyF,KAAKE,OAArD,QAIjB,SAACvE,EAAD,CACIC,oBAAqB7I,EAAK,GAC1B+D,UAAW3D,IAAegE,EAAAA,GAAAA,MAAuBmD,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,KACnEN,SAAUiE,IAAiBkB,EAAAA,GAAAA,OAC3BzD,YAAakE,GAAD,UAAQ7M,EAAK,UAAb,OAAQ,EAASG,QAAUwI,EAAaA,EACpDzB,MACI6F,EAAc3M,IAAegE,EAAAA,GAAAA,MAAuBmD,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,UAAkBuF,KAI/F,UAAA9M,EAAK,UAAL,eAASG,UACN,cAAG4H,UAAS,oBAAeP,EAAW4F,IAAI7G,EAA9B,YAAmCiB,EAAW4F,IAAI5G,EAAlD,KAAZ,UACI,SAACuC,EAAD,CACIF,oBAAqB7I,EAAK,GAC1B+D,UAAW8I,IAAYzM,IAAegE,EAAAA,GAAAA,MAAuBmD,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,MAC/E0B,YAAa0D,EAAU,GACvB1F,SAAUiE,IAAiBkB,EAAAA,GAAAA,OAC3BzD,WAAYkE,GAAOlE,EAAaA,EAChCK,WAAYgE,QAAQH,QAKhC,SAAC5B,EAAD,CACIhC,YAAaC,EACbgC,aAAcA,EACdE,SAAUA,EACVD,MAAOxC,EACPyB,MACI,UAAApK,EAAK,UAAL,SAASG,QAAU4M,EACb3M,IAAegE,EAAAA,GAAAA,KACXmD,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,WACJuF,MAKzB,C,eCsBD,EAhGgB,WAAO,IAAD,EAClB,GAA4CN,EAAAA,EAAAA,KAAgB,SAAAc,GAAK,OAAIA,EAAMC,MAAV,IAAzD1P,EAAR,EAAQA,SAAUiG,EAAlB,EAAkBA,OAAiB0J,EAAnC,EAA0BC,QAE1B,GAUIjB,EAAAA,EAAAA,KAAgB,SAAAc,GAAK,OAAIA,EAAMb,KAAV,IATXiB,EADd,EACIC,SACYC,EAFhB,EAEIC,WACMC,EAHV,EAGIC,KACSC,EAJb,EAIIC,QACAC,EALJ,EAKIA,iBACAnK,EANJ,EAMIA,UACYoK,EAPhB,EAOIC,WACiBC,EARrB,EAQIC,gBACUxQ,EATd,EASI4O,SAGE7J,GAASb,EAAAA,EAAAA,IAAclE,EAAa4B,EAAAA,GAAgBY,EAAAA,IAEpDsB,GAAe2M,EAAAA,EAAAA,UACjB,kBAAM7L,EAAAA,EAAAA,IAAmB,YAAa,UAAWG,EAAjD,GAEA,CAAC2L,KAAKC,UAAU5L,KAEd6L,GAASH,EAAAA,EAAAA,UACX,kBAAM7L,EAAAA,EAAAA,IAAmBd,EAAamB,MAAM,GAAInB,EAAamB,MAAM9E,OAAO,GAAG,GAAI4E,EAAjF,GAEA,CAAC2L,KAAKC,UAAU5L,KAGdiC,GAAUyJ,EAAAA,EAAAA,UACZ,WAEI,OADAvK,QAAQC,IAAI,sBACL9B,OAAOC,KAAKtE,GAAauE,QAC5B,SAACC,EAAKC,GAAN,eAAC,UAAmBD,GAApB,cAA0BC,GAAMe,EAAAA,EAAAA,IAAaf,EAAKM,EAAQhF,IAA1D,GACA,CAAC,EAER,GAED,CAACA,EAAS4K,WAAY+F,KAAKC,UAAU5L,KAEnCpC,EAA2B,CAC5BiN,EAAUiB,EAAAA,GAAAA,SAAsBX,EAAqB,IACtDN,EAAUiB,EAAAA,GAAAA,UAAuB,EAAIX,EAAoB,MAEvDtN,EAAKyB,OAAOC,KAAK0C,GAASzC,QAC5B,SAACC,EAAKC,GAAN,eAAC,UAAmBD,GAApB,cAA0BC,EAAM9B,EAAO,GAAMqE,EAAQvC,GAAOmM,EAAO5L,KAAQrC,EAAO,GAAKA,EAAO,KAA9F,GACA,CAAC,GAGCE,GAAK4N,EAAAA,EAAAA,UACP,kBACIpM,OAAOC,KAAKtE,GAAauE,QACrB,SAACC,EAAKC,GAAN,eAAC,UACMD,GADP,cAEKC,GAAO5E,EAAAA,EAAAA,GAAiB4E,EAAK1E,EAAUC,GAAeoQ,EAAmBN,EAAQ,KAFtF,GAIA,CAAC,EANT,GAQA,CAACJ,EAAMU,EAAkBN,IAGvBpN,GAAY+N,EAAAA,EAAAA,UACd,kBAAM3K,EAAAA,EAAAA,IAAYyK,EAAqBvK,EAAQC,EAA/C,GAEA,CAACsK,EAAqBtK,EAAWD,EAAO2E,aAGtC1D,EAAW5C,OAAOC,KAAKtE,GAAauE,QACtC,SAACC,EAAKX,GAAN,eAAC,UAAkBW,GAAnB,cAAyBX,EA/Ed,SAAC/B,EAAe/B,EAAhB,GAAyF,IAEpGgC,EAFmD+O,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,OAClE,IAAKD,EAAW,OAAOC,EAEvB,GAAIhR,EAAS,GAAGG,SAAS4B,GACrBC,EAAMhC,EAAS,GAAGU,QAAQqB,GAAS,MAChC,CACH,IAAI2D,EAAc1F,EAAS2D,QAAO,SAAArD,GAAM,OAAIA,EAAOH,SAAS4B,EAApB,IAA4B,GACpEC,GAAOhC,EAAS,GAAGU,QAAQgF,EAAY,IAAMA,EAAYhF,QAAQqB,GAAS,GAAK,CAClF,CACD,OAAe,IAARC,EAAYgP,GAAUA,CAChC,CAqEqCC,CAAWnN,EAAI9D,EAAUsQ,IAAvD,GACA,CAAC,GAGCpN,EAAYR,EAAAA,GAAAA,SACd1C,EACA2C,EACA1C,EACA2C,EACAC,EACAC,EACCuN,EAAmBN,EAAQ,IAC5BhM,GAGJ,OACI,eACID,GAAG,OACHoN,OAAK,eACA,iBAA0BjB,IAD1B,qBAEU,uEAFV,GAFT,WAOI,SAACkB,EAAD,CAAO7P,MAAO4B,KACd,SAACkO,EAAD,CAAcvO,GAAIA,EAAIC,GAAIA,EAAIH,UAAWA,EAAWuE,SAAUA,MAGzE,EAIKiK,EAAQE,EAAAA,MACV,SAACnI,GACG,OACI,eAAGiB,KAAK,OAAOF,YAAa,KAA5B,WACI,eAAGD,OAAO,kBAAV,UACKd,EAAM5H,MAAM8B,KAAKhB,KAAI,SAACiG,EAAM7E,GAAP,OAClB,iBAAcsG,EAAGzB,GAAN7E,EADO,IAGrB0F,EAAM5H,MAAMgC,WAAWlB,KAAI,SAACiG,EAAM7E,GAAP,aACxB,iBAAcsG,EAAGzB,EAAMmH,gBAA8C,KAA7B,UAAAnH,EAAKiJ,MAAM,aAAX,eAAkBhP,QAAe,YAAS2M,GAAvEzL,EADa,QAKhC,eAAGwG,OAAO,0BAAV,UACKd,EAAM5H,MAAM6B,KAAKf,KAAI,SAACiG,EAAM7E,GAAP,OAClB,iBAAcsG,EAAGzB,GAAN7E,EADO,IAGrB0F,EAAM5H,MAAM+B,WAAWjB,KAAI,SAACiG,EAAM7E,GAAP,aACxB,iBAAcsG,EAAGzB,EAAMmH,gBAA8C,KAA7B,UAAAnH,EAAKiJ,MAAM,aAAX,eAAkBhP,QAAe,YAAS2M,GAAvEzL,EADa,SAM3C,IACD,SAACkH,EAAWC,GAAZ,OAA0BgG,KAAKC,UAAUlG,EAAUpJ,SAAWqP,KAAKC,UAAUjG,EAAUrJ,MAAvF,IAUE8P,EAAe,SAAClI,GAClB,IAAQrG,EAAgCqG,EAAhCrG,GAAIC,EAA4BoG,EAA5BpG,GAAIH,EAAwBuG,EAAxBvG,UAAWuE,EAAagC,EAAbhC,SAErBjH,GAAc0O,EAAAA,EAAAA,KAAgB,SAAAc,GAAK,OAAIA,EAAMb,MAAMC,QAAhB,IAEzC,OACI,cAAG/K,GAAG,YAAN,SACKQ,OAAOC,KAAKtE,GACR0D,QAAO,SAAA5B,GAAK,OAAK,CAAC,YAAa,WAAW5B,SAAS4B,EAAvC,IACZK,KAAI,SAAAL,GAAK,OACN,cAEImP,MAAO,CACHhH,UAAU,aAAD,OAAerH,EAAGd,GAAlB,cAA8Be,EAAGf,GAAjC,QAHjB,UAMI,SAAC2M,EAAD,CAAS3O,UAAWgC,EAAOsL,aAAc1K,EAAUZ,GAAQ+I,WAAY5D,EAASnF,MAL3EA,EAFH,KAYzB,ECxKD,GAAe0I,EAAAA,EAAAA,OAAK,WAChB,OACI,iCACI,SAAC8G,EAAD,KAEA,SAAC,IAAD,CAAUC,QAAS,MACnB,SAAC,EAAD,MAGX,IAEKD,EAAUF,EAAAA,MAAW,WACvB,OACI,6BACI,eAAGvN,GAAG,UAAUoG,UAAU,sBAA1B,WACI,iBAAMxB,GAAI,SAAUyF,OAAQ,SAAUT,MAAO,YAC7C,iBACI5J,GAAG,UACHgG,EAAE,0tBACFI,UAAU,8BACVC,KAAK,cAGb,eAAGrG,GAAG,SAASoG,UAAU,sBAAzB,WACI,iBAAMxB,GAAI,SAAUgF,MAAO,SAAUS,OAAQ,YAC7C,iBACIhE,KAAK,QACLL,EAAE,8mBACFI,UAAU,oCAGlB,qBAAUpG,GAAG,gBAAgBoG,UAAU,8BAAvC,UACI,iBACIC,KAAK,OACLL,EAAE,mLAGV,eAAGhG,GAAG,MAAMoG,UAAU,sBAAtB,WACI,iBAAMxB,GAAI,SAAUgF,MAAO,SAAUS,OAAQ,YAC7C,eAAGsD,SAAS,sBAAsBvH,UAAU,yBAA5C,WACI,iBACIxB,GAAI,QACJC,EAAG,SACH+E,MAAO,SACPS,OAAQ,OACRjE,UAAU,iDACVC,KAAK,WAET,iBACIL,EAAE,0UACFI,UAAU,8BACVC,KAAK,WAET,oBACIuH,OAAO,uEACPvH,KAAK,WAET,iBACIL,EAAE,4RACFI,UAAU,iCAEd,iBACIJ,EAAE,iLACFI,UAAU,8BACVC,KAAK,WAET,iBACIL,EAAE,yKACFI,UAAU,iCAEd,iBACIJ,EAAE,uIACFI,UAAU,8BACVC,KAAK,WAET,iBACIL,EAAE,4IACFI,UAAU,8BACVC,KAAK,WAET,oBACIuH,OAAO,wEACPvH,KAAK,WAET,iBACIL,EAAE,2KACFI,UAAU,8BACVC,KAAK,WAET,iBACIL,EAAE,6KACFI,UAAU,iCAEd,iBACIJ,EAAE,uPACFI,UAAU,uCAKtB,iBAAMpG,GAAG,UAAUgG,EAAE,UAAUC,cAAc,YAGxD,G,4DC1GD,KAAeU,EAAAA,EAAAA,OAAK,SAAkBvB,GAA6B,IAAD,EAC9D,OACI,iBACIiB,KAAK,0BACLgE,OAAQ,GACR+C,OAAK,GACDxD,MAAO,yBADN,SAEA,qBAA8BxE,EAAMsI,UAFpC,+GAOhB,G,uECbc,SAASG,EAA2BC,EAAGC,GACpD,IAAIhG,EAAuB,qBAAXiG,QAA0BF,EAAEE,OAAOC,WAAaH,EAAE,cAElE,IAAK/F,EAAI,CACP,GAAImG,MAAMC,QAAQL,KAAO/F,GAAK,OAA2B+F,KAAOC,GAAkBD,GAAyB,kBAAbA,EAAEtP,OAAqB,CAC/GuJ,IAAI+F,EAAI/F,GACZ,IAAIrI,EAAI,EAEJ0O,EAAI,WAAc,EAEtB,MAAO,CACLC,EAAGD,EACHE,EAAG,WACD,OAAI5O,GAAKoO,EAAEtP,OAAe,CACxB0J,MAAM,GAED,CACLA,MAAM,EACNC,MAAO2F,EAAEpO,KAEb,EACAP,EAAG,SAAWoP,GACZ,MAAMA,CACR,EACAC,EAAGJ,EAEP,CAEA,MAAM,IAAIK,UAAU,wIACtB,CAEA,IAEIC,EAFAC,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLP,EAAG,WACDtG,EAAKA,EAAG8G,KAAKf,EACf,EACAQ,EAAG,WACD,IAAIQ,EAAO/G,EAAGE,OAEd,OADA0G,EAAmBG,EAAK5G,KACjB4G,CACT,EACA3P,EAAG,SAAW4P,GACZH,GAAS,EACTF,EAAMK,CACR,EACAP,EAAG,WACD,IACOG,GAAoC,MAAhB5G,EAAW,QAAWA,EAAW,QAG5D,CAFE,QACA,GAAI6G,EAAQ,MAAMF,CACpB,CACF,EAEJ,C","sources":["svgs/mtr/line-diagram-utils.ts","svgs/railmap/methods/mtr.ts","svgs/railmap/methods/share.ts","svgs/mtr/station/interchange-tick.tsx","svgs/mtr/station/station-icon.tsx","svgs/mtr/station/interchange-station.tsx","svgs/mtr/station/osi-station.tsx","svgs/mtr/utils.ts","svgs/mtr/station/station-name/station-name.tsx","svgs/mtr/station/station-name/station-name-wrapper.tsx","svgs/mtr/station/station.tsx","svgs/railmap/main/main-mtr.tsx","svgs/railmap/railmap-mtr.tsx","svgs/strip/strip-mtr.tsx","../javascript/esm|/home/runner/work/rmg/rmg/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import { StationDict } from '../../constants/constants';\n\n/**\n * @return - negative: above main line, positive: below main line\n */\nexport const getStationYShare = (stationId: string, branches: string[][], stationList: StationDict): number => {\n    const mainBranch = branches[0];\n\n    if (mainBranch.includes(stationId)) {\n        // on main branch\n        if (branches.slice(1).find(branch => branch.includes(stationId))) {\n            // node shared by multiple branches\n            return 0;\n        } else {\n            const openJawSiblingBranch = branches.slice(1).find(branch => {\n                const isLeftOpenJaw = branch[0] === 'linestart';\n                const hasSiblingBranchOpenJawOnTheLeft =\n                    mainBranch.indexOf(stationId) < mainBranch.indexOf(branch.slice(-1)[0]);\n\n                const isRightOpenJaw = branch.slice(-1)[0] === 'lineend';\n                const hasSiblingBranchOpenJawOnTheRight = mainBranch.indexOf(stationId) > mainBranch.indexOf(branch[0]);\n\n                return (\n                    (isLeftOpenJaw && hasSiblingBranchOpenJawOnTheLeft) ||\n                    (isRightOpenJaw && hasSiblingBranchOpenJawOnTheRight)\n                );\n            });\n\n            if (openJawSiblingBranch) {\n                // on main branch but open jaw\n                // NOTE: determine y share of node by children ordering, not by whether it's a branch or not (like GZMTR)\n                // TODO: Remove requirement on stationList arg\n                return stationList[openJawSiblingBranch[0]].children.indexOf(openJawSiblingBranch[1]) === 1 ? -1 : 1;\n            } else {\n                // pure main branch without siblings or main branch with sidings\n                return 0;\n            }\n        }\n    } else {\n        // on branch/sidings\n        const branchBelongsTo = branches.slice(1).find(branch => branch.includes(stationId));\n        if (branchBelongsTo) {\n            const isSiding = branchBelongsTo[0] !== 'linestart' && branchBelongsTo.slice(-1)[0] !== 'lineend';\n            if (isSiding) {\n                return stationList[branchBelongsTo[0]].children.indexOf(branchBelongsTo[1]) === 1 ? 1.2 : -1.2;\n            } else {\n                return stationList[branchBelongsTo[0]].children.indexOf(branchBelongsTo[1]) === 1 ? 1 : -1;\n            }\n        } else {\n            // fallback\n            return 0;\n        }\n    }\n};\n\nexport const getSidingPath = (coords: [number, number][]): string => {\n    const TURNING_RADIUS = 6;\n    const RIGHT_DOWN_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,1,${TURNING_RADIUS},${TURNING_RADIUS}`;\n    const DOWN_RIGHT_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,0,${TURNING_RADIUS},${TURNING_RADIUS}`;\n    const RIGHT_UP_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,0,${TURNING_RADIUS},-${TURNING_RADIUS}`;\n    const UP_RIGHT_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,1,${TURNING_RADIUS},-${TURNING_RADIUS}`;\n\n    let prevCoord: [number, number] | undefined;\n    let paths: string[] = [];\n\n    for (let coord of coords) {\n        if (!prevCoord) {\n            paths.push('M' + coord.join(','));\n        } else {\n            if (coord[1] === prevCoord[1]) {\n                // horizontal\n                paths.push('H' + coord[0]);\n            } else {\n                const midPointX = (coord[0] + prevCoord[0]) / 2 - (prevCoord[1] === 0 ? 0 : TURNING_RADIUS * 2);\n                paths.push('H' + midPointX);\n\n                if (coord[1] > prevCoord[1]) {\n                    // turn to below\n                    paths.push(RIGHT_DOWN_ARC);\n                    paths.push('V' + (coord[1] - TURNING_RADIUS));\n                    paths.push(DOWN_RIGHT_ARC);\n                } else {\n                    // turn to above\n                    paths.push(RIGHT_UP_ARC);\n                    paths.push('V' + (coord[1] + TURNING_RADIUS));\n                    paths.push(UP_RIGHT_ARC);\n                }\n\n                paths.push('H' + coord[0]);\n            }\n        }\n        // update prev coordinate\n        prevCoord = coord;\n    }\n\n    return paths.join(' ').replace(/( H([\\d.]+))+/g, ' H$2');\n};\n","import { Stations } from './share';\nimport { StationDict, StationInfo } from '../../../constants/constants';\nimport { getSidingPath } from '../../mtr/line-diagram-utils';\n\nexport const leftWideFactor = (stnList: StationDict, stnId: string) => {\n    var res = 0;\n    let { transfer } = stnList[stnId];\n    let ls = transfer.info.map(val => val.length);\n    if (transfer.tick_direc === 'l') {\n        // int3 or above\n        if (!ls[1] && ls[0] > 1) res += 0.8;\n        // osi except osi22\n        if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n    }\n    if (ls[0] === 1 && ls[1] === 2) {\n        // osi22 not end\n        if (stnList[stnId].parents[0] !== 'linestart' && stnList[stnId].children[0] !== 'lineend') res += 0.8;\n    }\n    // let { type, tick_direc } = stnList[stnId].transfer;\n    // if (tick_direc === 'l' && ['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) res += 0.8;\n    if (stnList[stnId].parents.length === 2) res += 0.2;\n    if (stnList[stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n    return res;\n};\n\nexport const rightWideFactor = (stnList: StationDict, stnId: string) => {\n    var res = 0;\n    let { transfer } = stnList[stnId];\n    let ls = transfer.info.map(val => val.length);\n    if (transfer.tick_direc === 'r') {\n        // int3 or above\n        if (!ls[1] && ls[0] > 1) res += 0.8;\n        // osi except osi22\n        if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n    }\n    if (ls[0] === 1 && ls[1] === 2) {\n        if (stnList[stnId].parents[0] !== 'linestart' && stnList[stnId].children[0] !== 'lineend') res += 0.8;\n    }\n    // let { type, tick_direc } = stnList[stnId].transfer;\n    // if (tick_direc === 'r' && ['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) res += 0.8;\n    if (stnList[stnId].children.length === 2) res += 0.2;\n    if (stnList[stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n    return res;\n};\n\nexport class StationsMTR extends Stations {\n    protected leftWideFactor = (stnId: string) => {\n        return leftWideFactor(this.stnList, stnId);\n    };\n\n    protected rightWideFactor = (stnId: string) => {\n        return rightWideFactor(this.stnList, stnId);\n    };\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 0\n    ) {\n        let linePaths = {\n            main: [] as string[],\n            pass: [] as string[],\n            sidingMain: [] as string[],\n            sidingPass: [] as string[],\n        };\n\n        branches.forEach((branch, i) => {\n            const isSiding = branch[0] !== 'linestart' && branch.slice(-1)[0] !== 'lineend';\n\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            if (isSiding) {\n                linePaths.sidingMain.push(getSidingPath(lineMainStns.map(id => [xs[id], ys[id]])));\n                linePaths.sidingPass.push(getSidingPath(linePassStns.map(id => [xs[id], ys[id]])));\n            } else {\n                linePaths.main.push(\n                    new this({ stnList, criticalPath: cp })._linePath(\n                        lineMainStns,\n                        lineXs,\n                        branches,\n                        xs,\n                        ys,\n                        branchSpacing,\n                        cp,\n                        e\n                    )\n                );\n                linePaths.pass.push(\n                    new this({ stnList, criticalPath: cp })._linePath(\n                        linePassStns,\n                        lineXs,\n                        branches,\n                        xs,\n                        ys,\n                        branchSpacing,\n                        cp,\n                        e\n                    )\n                );\n            }\n        });\n\n        return linePaths;\n    }\n}\n\nexport class StationsSHMetro extends StationsMTR {\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 0\n    ) {\n        let linePaths = {\n            main: [] as string[],\n            pass: [] as string[],\n            sidingMain: [] as string[],\n            sidingPass: [] as string[],\n        };\n\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n","import { ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n}\n\nexport const drawLine = (branch: string[], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n    let lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n    let linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n    if (lineMainStns.length === 1) {\n        linePassStns = branch;\n    }\n\n    if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n        // if two set disjoint\n        if (linePassStns[0] === branch[0]) {\n            // -1 -1 1 1\n            linePassStns.push(lineMainStns[0]);\n        } else if (\n            lineMainStns[0] === branch[0] &&\n            lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n            linePassStns.length\n        ) {\n            linePassStns = branch;\n            lineMainStns = [];\n        } else {\n            // 1 1 -1 -1\n            linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n        }\n    }\n\n    return {\n        main: lineMainStns,\n        pass: linePassStns,\n    };\n};\n","import React, { memo } from 'react';\nimport { Direction, InterchangeInfo, Position } from '../../../constants/constants';\n\nconst getRotation = (position: Position): number => {\n    switch (position) {\n        case Position.UP:\n            return 180;\n        case Position.DOWN:\n            return 0;\n        case Position.LEFT:\n            return 90;\n        case Position.RIGHT:\n            return -90;\n    }\n};\n\ninterface InterchangeTickProps {\n    interchangeInfo: InterchangeInfo;\n    isPassed?: boolean;\n    position: Position;\n    repel?: Direction; // osi22\n}\n\nfunction InterchangeTick(props: InterchangeTickProps) {\n    const { interchangeInfo, isPassed, position, repel } = props;\n\n    const zhNameLines = interchangeInfo[4].split('\\\\').length;\n    const enNameLines = interchangeInfo[5].split('\\\\').length;\n\n    const textAnchor =\n        position === Position.LEFT || repel === Direction.left\n            ? 'end'\n            : position === Position.RIGHT || repel === Direction.right\n            ? 'start'\n            : 'middle';\n\n    const transforms = {\n        path: {\n            rotate: getRotation(position),\n        },\n        g: {\n            x:\n                (position === Position.LEFT ? -24 : position === Position.RIGHT ? 24 : 0) +\n                (repel === Direction.left ? -3 : repel === Direction.right ? 3 : 0),\n            y:\n                position === Position.UP\n                    ? -37 - 10 * (zhNameLines - 1) - 7 * (enNameLines - 1)\n                    : position === Position.DOWN\n                    ? 31\n                    : 6 - (20 + 10 * (zhNameLines - 1) + 7 * (enNameLines - 1) - 1) / 2,\n        },\n    };\n\n    return (\n        <>\n            <path\n                d=\"M0,0v17\"\n                strokeLinecap=\"round\"\n                stroke={isPassed ? 'var(--rmg-grey)' : interchangeInfo[2]}\n                strokeWidth={8}\n                transform={`rotate(${transforms.path.rotate})`}\n            />\n            <g\n                textAnchor={textAnchor}\n                transform={`translate(${transforms.g.x},${transforms.g.y})`}\n                fill={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n            >\n                {interchangeInfo[4].split('\\\\').map((txt, i) => (\n                    <text key={i} dy={10 * i} className=\"rmg-name__zh\" fontSize={10}>\n                        {txt}\n                    </text>\n                ))}\n                {interchangeInfo[5].split('\\\\').map((txt, j) => (\n                    <text key={zhNameLines + j} dy={zhNameLines * 10 - 1 + 7 * j} className=\"rmg-name__en\" fontSize={7}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        </>\n    );\n}\n\nexport default memo(\n    InterchangeTick,\n    (prevProps, nextProps) =>\n        prevProps.interchangeInfo.toString() === nextProps.interchangeInfo.toString() &&\n        prevProps.isPassed === nextProps.isPassed &&\n        prevProps.position === nextProps.position &&\n        prevProps.repel === nextProps.repel\n);\n","import React from 'react';\n\ninterface StationIconProps {\n    length: number;\n    isPassed?: boolean;\n    isReversed?: boolean;\n}\n\nexport default function StationIcon(props: StationIconProps) {\n    const { length, isPassed, isReversed } = props;\n\n    return (\n        <path\n            d={`M-8,0 v${length} a8,8 0 0,0 16,0 v-${length} a8,8 0 0,0 -16,0Z`}\n            className=\"rmg-stn__mtr\"\n            stroke={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n            transform={`scale(1,${isReversed ? -1 : 1})`}\n        />\n    );\n}\n","import React from 'react';\nimport { Direction, InterchangeInfo, Position } from '../../../constants/constants';\nimport InterchangeTick from './interchange-tick';\nimport StationIcon from './station-icon';\n\ninterface InterchangeStationProps {\n    interchangeInfoList: InterchangeInfo[];\n    direction?: Direction;\n    isPassed?: boolean;\n    isReversed?: boolean;\n    repel?: Direction;\n}\n\nexport default function InterchangeStation(props: InterchangeStationProps) {\n    const { interchangeInfoList, direction, isPassed, isReversed, repel } = props;\n\n    const iconLength = interchangeInfoList.length <= 1 ? 0 : 18 * interchangeInfoList.length;\n\n    return (\n        <g>\n            {interchangeInfoList.length === 1 && (\n                <InterchangeTick\n                    interchangeInfo={interchangeInfoList[0]}\n                    isPassed={isPassed}\n                    position={isReversed ? Position.UP : Position.DOWN}\n                    repel={repel}\n                />\n            )}\n\n            {interchangeInfoList.length > 1 &&\n                interchangeInfoList.map((info, i) => (\n                    <g key={i} transform={`translate(0,${isReversed ? -18 * (i + 1) : 18 * (i + 1)})`}>\n                        <InterchangeTick\n                            interchangeInfo={info}\n                            isPassed={isPassed}\n                            position={direction === Direction.right ? Position.RIGHT : Position.LEFT}\n                        />\n                    </g>\n                ))}\n\n            <StationIcon length={iconLength} isPassed={isPassed} isReversed={isReversed} />\n        </g>\n    );\n}\n","import React from 'react';\nimport { Direction, InterchangeInfo, Name, Position } from '../../../constants/constants';\nimport InterchangeTick from './interchange-tick';\nimport StationIcon from './station-icon';\n\ninterface OsiStationProps {\n    interchangeInfoList: InterchangeInfo[];\n    direction: Direction;\n    isPassed?: boolean;\n    isReversed?: boolean;\n    isTerminal?: boolean;\n    stationName?: Name;\n}\n\nexport default function OsiStation(props: OsiStationProps) {\n    const { interchangeInfoList, direction, isPassed, isReversed, isTerminal, stationName } = props;\n\n    const enNameLines = stationName?.[1]?.split('\\\\')?.length ?? 1;\n\n    const iconLength = 18 * (interchangeInfoList.length - 1);\n    const transforms = {\n        name: {\n            x: isTerminal\n                ? 0\n                : interchangeInfoList.length === 1\n                ? direction === Direction.left\n                    ? -13\n                    : 13\n                : direction === Direction.left\n                ? 13\n                : -13,\n            y: isTerminal\n                ? isReversed\n                    ? 19\n                    : -28\n                : -4 + (isReversed ? -9 : 9) * (interchangeInfoList.length - 1) - 5 * (enNameLines - 1),\n        },\n    };\n\n    return (\n        <g>\n            {interchangeInfoList.map((info, i, arr) => (\n                <g key={i} transform={`translate(0,${isReversed ? -18 * i : 18 * i})`}>\n                    <InterchangeTick\n                        interchangeInfo={info}\n                        isPassed={isPassed}\n                        position={\n                            arr.length === 1\n                                ? isReversed\n                                    ? Position.UP\n                                    : Position.DOWN\n                                : direction === Direction.right\n                                ? Position.RIGHT\n                                : Position.LEFT\n                        }\n                    />\n                </g>\n            ))}\n\n            <StationIcon length={iconLength} isPassed={isPassed} isReversed={isReversed} />\n\n            <g\n                textAnchor={transforms.name.x === 0 ? 'middle' : transforms.name.x > 0 ? 'start' : 'end'}\n                fill={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                transform={`translate(${transforms.name.x},${transforms.name.y})`}\n            >\n                <text className=\"rmg-name__zh\" fontSize={14}>\n                    {stationName?.[0]}\n                </text>\n                {stationName?.[1]?.split('\\\\')?.map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en\" fontSize={9} dy={12 + 10 * i}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        </g>\n    );\n}\n","import { waitForMs } from '../../utils';\n\nexport const waitForFontReady = async () => {\n    let retryAttempt = 3;\n\n    while (retryAttempt--) {\n        // #274 ready font fact set may not contain GenYoMin when first resolved\n        const fontFaceSet = await document.fonts.ready;\n        const it = fontFaceSet.values();\n        while (true) {\n            const next = it.next();\n            if (next.done) {\n                break;\n            }\n\n            if (next.value.family === 'GenYoMin TW') {\n                return;\n            }\n        }\n\n        console.log('GenYoMin is NOT ready. Retry attempts remaining: ' + retryAttempt + ' ...');\n        await waitForMs(500);\n    }\n\n    throw new Error('Failed to load GenYoMin after 3 attempts');\n};\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Direction, Name } from '../../../../constants/constants';\nimport { waitForFontReady } from '../../utils';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    align?: Direction;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate, align } = props;\n\n        const nameEl = useRef<SVGGElement>(null);\n\n        const updateNameBBox = () => {\n            onUpdate?.(nameEl.current!.getBBox());\n        };\n\n        useEffect(() => {\n            updateNameBBox();\n            waitForFontReady().then().catch(console.log).finally(updateNameBBox);\n        }, [stnName.toString(), align]);\n\n        const getTextAnchor = (direction?: Direction) => {\n            switch (direction) {\n                case Direction.left:\n                    return 'start';\n                case Direction.right:\n                    return 'end';\n                default:\n                    return 'middle';\n            }\n        };\n\n        const getDy = (index: number) => 17 + 11 * index;\n\n        return (\n            <g ref={nameEl} textAnchor={getTextAnchor(align)}>\n                <text className=\"rmg-name__zh rmg-name__mtr--station\">{stnName[0]}</text>\n\n                {stnName[1].split('\\\\').map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en rmg-name__mtr--station\" dy={getDy(i)}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.stnName.toString() === nextProps.stnName.toString() && prevProps.align === nextProps.align\n);\n","import React, { SVGProps, useState } from 'react';\nimport { Direction, Facilities, Name, StationState } from '../../../../constants/constants';\nimport StationName from './station-name';\n\n/**\n * Top (in pixels) of station's Chinese name.\n */\nconst NAME_ZH_TOP = -10.8125;\n/**\n * Height (in pixels) of station's Chinese name.\n */\n// const NAME_ZH_HEIGHT = 21.625;\n/**\n * Top (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_TOP = -8;\n/**\n * Height (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_HEIGHT = 13.21875;\n/**\n * Difference of `y`s of station's Chinese name and English name (1 line). (This number should used as the `dy` of the English `text` element after Chinese `text` elements. )\n */\nconst NAME_ZH_EN_GAP = 17;\n/**\n * Height (in pixels) from the top of station's Chinese name to the bottom of English name (1 line).\n */\nexport const NAME_FULL_HEIGHT = -NAME_ZH_TOP + NAME_ZH_EN_GAP + NAME_EN_HEIGHT + NAME_EN_TOP;\n/**\n * Height (in pixels) of the gap between the centre of the line and the top of station's Chinese name.\n */\nconst STN_NAME_LINE_GAP = 14;\n\ninterface StationNameWrapperProps extends SVGProps<SVGGElement> {\n    stationName: Name;\n    stationState: StationState;\n    facility: Facilities;\n    lower?: boolean;\n    align?: Direction;\n}\n\nexport default function StationNameWrapper(props: StationNameWrapperProps) {\n    const { stationName, stationState, lower, align, facility, ...others } = props;\n\n    /**\n     * align = undefined: { x: -40, width: 80 }\n     * align = left: { x: 0, width: 80 }\n     * align = right: { x: -80, width: 80 }\n     */\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    const getFill = (state: StationState) => {\n        switch (state) {\n            case StationState.PASSED:\n                return 'var(--rmg-grey)';\n            case StationState.CURRENT:\n                return '#fff';\n            case StationState.FUTURE:\n                return 'var(--rmg-black)';\n        }\n    };\n\n    const nameEnRows = stationName[1].split('\\\\').length;\n    const transforms = {\n        g: {\n            x: align ? (align === Direction.right ? -3 : 3) : 0,\n            y:\n                (lower\n                    ? STN_NAME_LINE_GAP - NAME_ZH_TOP\n                    : -STN_NAME_LINE_GAP - NAME_ZH_TOP - NAME_FULL_HEIGHT - 11 * (nameEnRows - 1)) +\n                (align ? (lower ? 10 : -10) : 0),\n        },\n        rect: {\n            x:\n                bBox.x -\n                3 +\n                (facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? -3 - NAME_FULL_HEIGHT\n                        : 0\n                    : (NAME_FULL_HEIGHT + 5) / 2 - 3 - NAME_FULL_HEIGHT),\n            y: NAME_ZH_TOP - 1,\n            width: bBox.width + 6 + (facility === Facilities.none ? 0 : NAME_FULL_HEIGHT + 3),\n            height: NAME_FULL_HEIGHT + 2 + 11 * (nameEnRows - 1),\n        },\n        use: {\n            x: align\n                ? align === Direction.right\n                    ? -(NAME_FULL_HEIGHT + 2) / 2 - bBox.width - 3\n                    : (NAME_FULL_HEIGHT + 2) / 2 - 2\n                : -(bBox.width + 3) / 2,\n            y: NAME_ZH_TOP - 1 + 5.5 * (nameEnRows - 1),\n        },\n        StationName: {\n            x:\n                facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? 0\n                        : NAME_FULL_HEIGHT + 3\n                    : (NAME_FULL_HEIGHT + 5) / 2,\n            y: 0,\n        },\n    };\n\n    return (\n        <g {...others}>\n            <g fill={getFill(stationState)} transform={`translate(${transforms.g.x},${transforms.g.y})`}>\n                {stationState === StationState.CURRENT && (\n                    <rect\n                        x={transforms.rect.x}\n                        y={transforms.rect.y}\n                        width={transforms.rect.width}\n                        height={transforms.rect.height}\n                        fill=\"var(--rmg-black)\"\n                    />\n                )}\n\n                {facility !== Facilities.none && (\n                    <use\n                        xlinkHref={`#${facility}`}\n                        fill={stationState === StationState.PASSED ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                        x={transforms.use.x}\n                        y={transforms.use.y}\n                    />\n                )}\n\n                <g transform={`translate(${transforms.StationName.x},${transforms.StationName.y})`}>\n                    <StationName stnName={stationName} onUpdate={setBBox} align={align} />\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React from 'react';\nimport { Direction, ShortDirection, StationState } from '../../../constants/constants';\nimport InterchangeStation from './interchange-station';\nimport { useRootSelector } from '../../../redux';\nimport OsiStation from './osi-station';\nimport StationNameWrapper from './station-name/station-name-wrapper';\n\ninterface StationProps {\n    stationId: string;\n    stationState: StationState;\n    isReversed: boolean; // reverse = up\n}\n\nexport default function Station(props: StationProps) {\n    const { stationId, stationState, isReversed } = props;\n\n    const {\n        name,\n        parents,\n        children,\n        transfer: { info, tick_direc, osi_names, paid_area },\n        facility,\n    } = useRootSelector(state => state.param.stn_list[stationId]);\n\n    const end: Direction | undefined = info[0]?.length\n        ? parents.includes('linestart')\n            ? Direction.left\n            : children.includes('lineend')\n            ? Direction.right\n            : undefined\n        : undefined;\n    const isRepelled = Boolean(info[1]?.length && !end);\n\n    const transforms = {\n        link: {\n            scaleX: end === Direction.left ? -1 : 1,\n            scaleY: isReversed ? -1 : 1,\n        },\n        osi: {\n            x: end ? (end === Direction.left ? -41 : 41) : 0,\n            y: end ? 0 : !isReversed ? 26 : -26,\n        },\n    };\n\n    return (\n        <g data-testid=\"station-icon-wrapper\">\n            {info[1]?.length && (\n                <path\n                    d={end && info[0]?.length ? 'M0,0H41' : 'M0,0V26'}\n                    strokeWidth={2.69}\n                    strokeDasharray={paid_area ? 0 : 2.5}\n                    stroke={stationState === StationState.PASSED ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                    transform={`scale(${transforms.link.scaleX},${transforms.link.scaleY})`}\n                />\n            )}\n\n            <InterchangeStation\n                interchangeInfoList={info[0]}\n                direction={tick_direc === ShortDirection.right ? Direction.right : Direction.left}\n                isPassed={stationState === StationState.PASSED}\n                isReversed={!end && info[1]?.length ? !isReversed : isReversed}\n                repel={\n                    isRepelled ? (tick_direc === ShortDirection.right ? Direction.right : Direction.left) : undefined\n                }\n            />\n\n            {info[1]?.length && (\n                <g transform={`translate(${transforms.osi.x},${transforms.osi.y})`}>\n                    <OsiStation\n                        interchangeInfoList={info[1]}\n                        direction={end ? end : tick_direc === ShortDirection.right ? Direction.right : Direction.left}\n                        stationName={osi_names[0]}\n                        isPassed={stationState === StationState.PASSED}\n                        isReversed={end ? !isReversed : isReversed}\n                        isTerminal={Boolean(end)}\n                    />\n                </g>\n            )}\n\n            <StationNameWrapper\n                stationName={name}\n                stationState={stationState}\n                facility={facility}\n                lower={isReversed}\n                align={\n                    info[0]?.length && isRepelled\n                        ? tick_direc === ShortDirection.left\n                            ? Direction.left\n                            : Direction.right\n                        : undefined\n                }\n            />\n        </g>\n    );\n}\n","import React, { useMemo } from 'react';\nimport { adjacencyList, criticalPathMethod, getStnState, getXShareMTR } from '../methods/share';\nimport { leftWideFactor, rightWideFactor, StationsMTR } from '../methods/mtr';\nimport { CanvasType, RMGParam } from '../../../constants/constants';\nimport { useRootSelector } from '../../../redux';\nimport Station from '../../mtr/station/station';\nimport { getStationYShare } from '../../mtr/line-diagram-utils';\n\nconst getNamePos = (stnId: string, branches: string[][], { isStagger, isFlip }: RMGParam['namePosMTR']) => {\n    if (!isStagger) return isFlip;\n    let res: number;\n    if (branches[0].includes(stnId)) {\n        res = branches[0].indexOf(stnId) % 2;\n    } else {\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        res = (branches[0].indexOf(branchOfStn[0]) + branchOfStn.indexOf(stnId) + 1) % 2;\n    }\n    return res === 0 ? isFlip : !isFlip;\n};\n\nconst MainMTR = () => {\n    const { branches, routes, depsStr: deps } = useRootSelector(store => store.helper);\n\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgH,\n        y_pc: yPercentage,\n        padding: paddingPercentage,\n        branchSpacingPct,\n        direction,\n        namePosMTR: namePosition,\n        current_stn_idx: currentStationIndex,\n        stn_list: stationList,\n    } = useRootSelector(store => store.param);\n\n    const adjMat = adjacencyList(stationList, leftWideFactor, rightWideFactor);\n\n    const criticalPath = useMemo(\n        () => criticalPathMethod('linestart', 'lineend', adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n    const realCP = useMemo(\n        () => criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(stationList).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100,\n        svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const ys = useMemo(\n        () =>\n            Object.keys(stationList).reduce<Record<string, number>>(\n                (acc, cur) => ({\n                    ...acc,\n                    [cur]: (getStationYShare(cur, branches, stationList) * branchSpacingPct * svgH) / 200,\n                }),\n                {}\n            ),\n        [deps, branchSpacingPct, svgH]\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(currentStationIndex, routes, direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const namePoss = Object.keys(stationList).reduce<{ [stnId: string]: boolean }>(\n        (acc, id) => ({ ...acc, [id]: getNamePos(id, branches, namePosition) }),\n        {}\n    );\n\n    const linePaths = StationsMTR.drawLine(\n        branches,\n        stnStates,\n        stationList,\n        lineXs,\n        xs,\n        ys,\n        (branchSpacingPct * svgH) / 200,\n        criticalPath\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: yPercentage,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Lines paths={linePaths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} namePoss={namePoss} />\n        </g>\n    );\n};\n\nexport default MainMTR;\n\nconst Lines = React.memo(\n    (props: { paths: { main: string[]; pass: string[]; sidingMain: string[]; sidingPass: string[] } }) => {\n        return (\n            <g fill=\"none\" strokeWidth={9.68}>\n                <g stroke=\"var(--rmg-grey)\">\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                    {props.paths.sidingPass.map((path, i) => (\n                        <path key={i} d={path} strokeDasharray={path.match(/a/g)?.length === 4 ? '10 4' : undefined} />\n                    ))}\n                </g>\n\n                <g stroke=\"var(--rmg-theme-colour)\">\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                    {props.paths.sidingMain.map((path, i) => (\n                        <path key={i} d={path} strokeDasharray={path.match(/a/g)?.length === 4 ? '10 4' : undefined} />\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n    namePoss: { [stnId: string]: boolean };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates, namePoss } = props;\n\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(stationList)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${xs[stnId]}px,${ys[stnId]}px)`,\n                        }}\n                    >\n                        <Station stationId={stnId} stationState={stnStates[stnId]} isReversed={namePoss[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import React, { memo } from 'react';\n\nimport StripMTR from '../strip/strip-mtr';\nimport MainMTR from './main/main-mtr';\n\nexport default memo(function RailMapMTR() {\n    return (\n        <>\n            <DefsMTR />\n\n            <StripMTR stripPc={90} />\n            <MainMTR />\n        </>\n    );\n});\n\nconst DefsMTR = React.memo(() => {\n    return (\n        <defs>\n            <g id=\"airport\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} height={58.67798} width={58.67798} />\n                <path\n                    id=\"airport\"\n                    d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                    transform=\"translate(-28.9697,0.14347)\"\n                    fill=\"white\"\n                />\n            </g>\n            <g id=\"disney\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <path\n                    fill=\"white\"\n                    d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                    transform=\"translate(-28.9697 0.13398)\"\n                />\n            </g>\n            <clipPath id=\"hsr-clip-path\" transform=\"translate(-0.00057 0.01643)\">\n                <path\n                    fill=\"none\"\n                    d=\"M5.1606.89861a3.67176,3.67176,0,0,0-3.676,3.667v48.966a3.67842,3.67842,0,0,0,3.676,3.692h48.443a3.67892,3.67892,0,0,0,3.678-3.692V4.5656a3.67227,3.67227,0,0,0-3.678-3.667Z\"\n                />\n            </clipPath>\n            <g id=\"hsr\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <g clipPath=\"url(#hsr-clip-path)\" transform=\"translate(-29.33899,0)\">\n                    <rect\n                        x={-3.25242}\n                        y={24.74141}\n                        width={61.75879}\n                        height={0.98008}\n                        transform=\"translate(-8.93747 17.31321) rotate(-30.16134)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M5.77169,48.97289c-2.17407-3.89294,2.56994-10.525,4.85-13.724l.173-.248a83.00826,83.00826,0,0,1,7.39294-9.285,97.384,97.384,0,0,1,11.082-9.958c7.051-6.045,15.832-5.876,16.447-5.894l11.785-.957.276,17.42-11.5271,10.586c-.36.39405-5.553,5.863-18.10193,11.035-6.752,2.783-11.877,4.146-15.66,4.146-3.301,0-5.561-1.049-6.71692-3.121\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"57.453 29.614 32.426 58.31 35.582 58.509 57.584 30.433 57.453 29.614\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M49.04708,11.61364a.94277.94277,0,0,0-.17407-.227c-.752-.93695-2.988-1.259-5.933-.793a25.98382,25.98382,0,0,0-9.99695,3.032A98.52916,98.52916,0,0,0,20.723,23.69768c-3.1759,3.487-4.645,6.388-3.62292,7.584,1.84,2.166,13.7539.716,22.00793-6.066,9.035-7.42,10.718-11.577,9.93909-13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M34.65255,13.81182c5.65991-2.842,11.28088-2.856,12.1499-1.213.88306,1.652-2.99792,5.303-8.656,8.128-5.648,2.837-10.9469,3.805-11.81994,2.15-.873-1.641,2.668-6.237,8.326-9.065\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M58.10958,25.03454c-16.832,20.708-40.7301,26.038-40.7301,26.038,11-6.73,12.769-8.111,18.968-18.01,8.364-13.351,21.77808-21.549,21.912-21.63,0,0-.068,13.5-.1499,13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M27.1877,26.69561l9.705-2.814a6.22768,6.22768,0,0,1-1.994,2.759,25.57277,25.57277,0,0,1-6.697,3.405,11.78221,11.78221,0,0,1-5.5.783Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M19.59005,25.97692a18.37656,18.37656,0,0,1,3.891-3.976,6.66452,6.66452,0,0,0-.30908,2.213l-4.391,4.829a6.18212,6.18212,0,0,1,.80908-3.066\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"23.156 58.311 57.463 26.746 57.396 25.857 21.582 58.607 23.156 58.311\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M60.15645,12.35973a68.6782,68.6782,0,0,0-12.602,9.542c-8.15,7.745-12.109,15.259-9.855,16.091,2.24793.816,10.678-4.782,18.83594-12.543,1.828-1.74,3.48-3.424,4.926-5.024Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M63.07638,11.82653a40.86955,40.86955,0,0,0-10,7.096c-5.90406,5.437-9.48609,11.105-7.848,11.742,1.657.631,8.28894-3.955,14.188-9.401a61.76591,61.76591,0,0,0,4.61694-4.705Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M12.67989,42.93969a9.87,9.87,0,0,0-5.754-1.895c-.113.22-.223.439-.33008.662a9.45046,9.45046,0,0,1,5.69507,1.749,6.27885,6.27885,0,0,1,2.61,6.305,10.16524,10.16524,0,0,1-.598,2.228c.238-.023.481-.053.725-.087.78308-2.249,1.394-6.184-2.3479-8.962\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                </g>\n            </g>\n\n            <path id=\"inttick\" d=\"M0,0v17\" strokeLinecap=\"round\" />\n        </defs>\n    );\n});\n","import React, { memo } from 'react';\n\nexport default memo(function StripMTR(props: { stripPc: number }) {\n    return (\n        <rect\n            fill=\"var(--rmg-theme-colour)\"\n            height={20}\n            style={{\n                width: 'var(--rmg-svg-width)',\n                ['--strip-percentage' as any]: props.stripPc,\n                transform: `translateY(calc(var(--strip-percentage, 95) * var(--rmg-svg-height) / 100 - 10px))`,\n            }}\n        />\n    );\n});\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["getStationYShare","stationId","branches","stationList","mainBranch","includes","slice","find","branch","openJawSiblingBranch","isLeftOpenJaw","hasSiblingBranchOpenJawOnTheLeft","indexOf","isRightOpenJaw","hasSiblingBranchOpenJawOnTheRight","children","branchBelongsTo","getSidingPath","coords","prevCoord","RIGHT_DOWN_ARC","DOWN_RIGHT_ARC","RIGHT_UP_ARC","UP_RIGHT_ARC","paths","coord","push","midPointX","TURNING_RADIUS","join","replace","leftWideFactor","stnList","stnId","res","transfer","ls","info","map","val","length","tick_direc","parents","rightWideFactor","StationsMTR","stnStates","lineXs","xs","ys","branchSpacing","cp","e","linePaths","main","pass","sidingMain","sidingPass","forEach","i","isSiding","lineMainStns","filter","linePassStns","unshift","id","criticalPath","_linePath","Stations","StationsSHMetro","adjacencyList","leftW","rightW","Object","keys","reduce","acc","cur","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","child","maxLength","Math","max","getXShareMTR","branchOfStn","partSource","partSink","leftOpenJaw","lens","getStnState","currentId","routes","direction","console","log","Set","concat","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","data","yShares","xShares","namePoss","pathTurnParams","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","stnPred","getYShare","stnIds","realXs","realYs","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","stations","drawLine","getRotation","position","Position","InterchangeTick","props","interchangeInfo","isPassed","repel","zhNameLines","split","enNameLines","textAnchor","Direction","transforms","rotate","g","d","strokeLinecap","stroke","strokeWidth","transform","fill","txt","dy","className","fontSize","j","memo","prevProps","nextProps","toString","StationIcon","isReversed","InterchangeStation","interchangeInfoList","iconLength","OsiStation","isTerminal","stationName","name","arr","waitForFontReady","retryAttempt","document","fonts","ready","fontFaceSet","it","values","next","done","value","family","waitForMs","Error","stnName","onUpdate","align","nameEl","useRef","updateNameBBox","current","getBBox","useEffect","then","catch","finally","ref","getTextAnchor","index","StationNameWrapper","stationState","lower","facility","others","useState","width","bBox","setBBox","nameEnRows","STN_NAME_LINE_GAP","rect","Facilities","NAME_ZH_TOP","NAME_FULL_HEIGHT","height","use","StationName","state","StationState","getFill","xlinkHref","Station","useRootSelector","param","stn_list","osi_names","paid_area","end","undefined","isRepelled","Boolean","link","scaleX","scaleY","osi","strokeDasharray","store","helper","deps","depsStr","svgWidths","svgWidth","svgH","svg_height","yPercentage","y_pc","paddingPercentage","padding","branchSpacingPct","namePosition","namePosMTR","currentStationIndex","current_stn_idx","useMemo","JSON","stringify","realCP","CanvasType","isStagger","isFlip","getNamePos","style","Lines","StationGroup","React","match","DefsMTR","stripPc","clipPath","points","_createForOfIteratorHelper","o","allowArrayLike","Symbol","iterator","Array","isArray","F","s","n","_e","f","TypeError","err","normalCompletion","didErr","call","step","_e2"],"sourceRoot":""}