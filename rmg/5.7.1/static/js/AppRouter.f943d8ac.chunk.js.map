{"version":3,"file":"static/js/AppRouter.f943d8ac.chunk.js","mappings":"oFAAA,IAAIA,EAAM,CACT,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,IAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,IACA,KAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,MACA,MAED,kDAAmD,CAClD,MACA,MAED,kDAAmD,CAClD,MACA,MAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,CACP,IAGD,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBU,EAAED,EAAI,GAClC,GACD,CACAX,EAAoBa,KAAO,WAAa,OAAOC,OAAOD,KAAKd,EAAM,EACjEC,EAAoBW,GAAK,MACzBI,EAAOC,QAAUhB,C,wBC1LjB,IAAID,EAAM,CACT,cAAe,CACd,MACA,MAED,YAAa,CACZ,MACA,MAED,eAAgB,CACf,MACA,MAED,iBAAkB,CACjB,MACA,MAED,eAAgB,CACf,MACA,KAED,cAAe,CACd,MACA,MAED,YAAa,CACZ,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,aAAc,CACb,MACA,MAED,iBAAkB,CACjB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,eAAgB,CACf,MACA,MAED,iBAAkB,CACjB,MACA,MAED,eAAgB,CACf,KACA,KAED,kBAAmB,CAClB,MACA,MAED,aAAc,CACb,MACA,MAED,cAAe,CACd,MACA,MAED,aAAc,CACb,MACA,MAED,gBAAiB,CAChB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,cAAe,CACd,MACA,IAED,iBAAkB,CACjB,MACA,MAED,eAAgB,CACf,MACA,KAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,aAAc,CACb,MACA,KAED,cAAe,CACd,KACA,MAED,aAAc,CACb,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,eAAgB,CACf,MACA,KAED,aAAc,CACb,KACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,eAAgB,CACf,MACA,MAED,mBAAoB,CACnB,MACA,MAED,eAAgB,CACf,MACA,MAED,YAAa,CACZ,MACA,MAED,cAAe,CACd,MACA,MAED,cAAe,CACd,MACA,MAED,aAAc,CACb,MACA,MAED,cAAe,CACd,MACA,KAED,kBAAmB,CAClB,MACA,MAED,aAAc,CACb,MACA,MAED,gBAAiB,CAChB,MACA,MAED,cAAe,CACd,MACA,KAED,eAAgB,CACf,KACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,cAAe,CACd,MACA,MAED,aAAc,CACb,MACA,MAED,YAAa,CACZ,KACA,MAED,aAAc,CACb,MACA,MAED,cAAe,CACd,MACA,MAED,aAAc,CACb,MACA,MAED,eAAgB,CACf,MACA,GAED,iBAAkB,CACjB,MACA,MAED,WAAY,CACX,MACA,MAED,cAAe,CACd,KACA,MAED,oBAAqB,CACpB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,gBAAiB,CAChB,MACA,KAED,gBAAiB,CAChB,MACA,MAED,aAAc,CACb,MACA,MAED,gBAAiB,CAChB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,cAAe,CACd,MACA,MAED,gBAAiB,CAChB,MACA,MAED,cAAe,CACd,MACA,MAED,gBAAiB,CAChB,MACA,MAED,cAAe,CACd,MACA,MAED,eAAgB,CACf,MACA,MAED,aAAc,CACb,MACA,MAED,eAAgB,CACf,MACA,MAED,mBAAoB,CACnB,KACA,MAED,cAAe,CACd,MACA,MAED,cAAe,CACd,KACA,MAED,aAAc,CACb,MACA,MAED,YAAa,CACZ,KACA,KAED,cAAe,CACd,MACA,MAED,YAAa,CACZ,MACA,MAED,kBAAmB,CAClB,MACA,MAED,gBAAiB,CAChB,IACA,MAED,iBAAkB,CACjB,MACA,OAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,CACP,IAGD,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,EAC5B,GACD,CACAX,EAAoBa,KAAO,WAAa,OAAOC,OAAOD,KAAKd,EAAM,EACjEC,EAAoBW,GAAK,MACzBI,EAAOC,QAAUhB,C,wBClZjB,IAAID,EAAM,CACT,sBAAuB,CACtB,MACA,MAED,uBAAwB,CACvB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,sBAAuB,CACtB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,KACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,GACA,MAED,sBAAuB,CACtB,MACA,MAED,wBAAyB,CACxB,OAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,iBAAkB,CACjB,IACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,MACA,MAED,mBAAoB,CACnB,MACA,KAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,mBAAoB,CACnB,MACA,KAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,KACA,MAED,uBAAwB,CACvB,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,IACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,8BAA+B,CAC9B,MACA,KAED,6BAA8B,CAC7B,MACA,MAED,iCAAkC,CACjC,MACA,MAED,kCAAmC,CAClC,MACA,KAED,6BAA8B,CAC7B,MACA,KAED,4BAA6B,CAC5B,MACA,MAED,mBAAoB,CACnB,KACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,KACA,MAED,iBAAkB,CACjB,KACA,MAED,kBAAmB,CAClB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,2BAA4B,CAC3B,MACA,KAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,KACA,KAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,qBAAsB,CACrB,MACA,KAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,KAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,KAED,qBAAsB,CACrB,MACA,MAED,2BAA4B,CAC3B,KACA,MAED,4BAA6B,CAC5B,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,4BAA6B,CAC5B,MACA,IAED,4BAA6B,CAC5B,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,6BAA8B,CAC7B,MACA,MAED,kCAAmC,CAClC,MACA,MAED,+BAAgC,CAC/B,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,gCAAiC,CAChC,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,KAED,sBAAuB,CACtB,KACA,MAED,sBAAuB,CACtB,MACA,MAED,qBAAsB,CACrB,KACA,MAED,uBAAwB,CACvB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,0BAA2B,CAC1B,OAED,4BAA6B,CAC5B,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,qBAAsB,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","sources":["../node_modules/@railmapgen/rmg-palette-resources/flags|lazy|/^/.//.*$/|groupOptions: {}|namespace object","../node_modules/@railmapgen/rmg-palette-resources/palettes|lazy|/^/.//.*/.js$/|chunkName: palettes|groupOptions: {}|namespace object","../node_modules/@railmapgen/rmg-templates-resources/templates|lazy|/^/.//.*/.json$/|chunkName: templates|groupOptions: {}|namespace object","svgs/svg-router.tsx","svgs/use-canvas-map.tsx","components/side-panel/station-side-panel/info-section.tsx","components/modal/colour-modal/flag-svg-emoji.tsx","components/modal/colour-modal/city-picker.tsx","components/modal/colour-modal/colour-picker.tsx","components/modal/colour-modal/colour-modal.tsx","theme/colour-util.ts","components/side-panel/theme-button.tsx","components/side-panel/station-side-panel/interchange-card.tsx","components/side-panel/station-side-panel/interchange-section.tsx","components/side-panel/station-side-panel/more-section.tsx","components/side-panel/station-side-panel/branch-section.tsx","components/side-panel/station-side-panel/station-side-panel.tsx","components/side-panel/style-side-panel/layout-section.tsx","components/side-panel/style-side-panel/design-section.tsx","components/side-panel/style-side-panel/loop-section.tsx","components/side-panel/style-side-panel/gzmtr-note-card.tsx","components/side-panel/style-side-panel/gzmtr-note-section.tsx","components/side-panel/style-side-panel/style-side-panel.tsx","methods.ts","components/modal/remove-confirm-modal.tsx","redux/param/remove-station-action.ts","components/side-panel/station-side-panel/station-side-panel-footer.tsx","components/side-panel/branch-side-panel/coline-card.tsx","components/side-panel/branch-side-panel/coline-section.tsx","components/modal/auto-num-modal.tsx","redux/param/connect-disconnect-branch.ts","components/side-panel/branch-side-panel/connect-disconnect-card.tsx","components/side-panel/branch-side-panel/action-section.tsx","components/side-panel/branch-side-panel/branch-side-panel.tsx","components/side-panel/side-panel.tsx","util/utils.ts","util/export-utils.ts","components/modal/download-modal.tsx","components/page-header/download-actions.tsx","components/modal/upload-confirm-modal.tsx","components/modal/template-modal.tsx","redux/param/util.ts","components/page-header/open-actions.tsx","redux/param/open-new-action.ts","components/page-header/header-actions.tsx","components/page-header/page-header.tsx","redux/param/add-station-action.ts","components/modal/add-station-modal.tsx","components/modal/new-branch-modal.tsx","components/ag-grid/grid-tabs.tsx","components/root/global-alerts.tsx","components/root/app-view.tsx","components/param-selector-view/param-selector.tsx","components/param-selector-view/index.tsx","redux/app/action.ts","components/root/app-router.tsx","redux/param/coline-action.ts","utils.ts","svgs|lazy|/^/.//.*//index$/|groupOptions: {}|namespace object"],"sourcesContent":["var map = {\n\t\"./1F1E6-1F1F9.svg\": [\n\t\t89121,\n\t\t9121\n\t],\n\t\"./1F1E6-1F1FF.svg\": [\n\t\t89427,\n\t\t9427\n\t],\n\t\"./1F1E7-1F1F7.svg\": [\n\t\t97304,\n\t\t7304\n\t],\n\t\"./1F1E8-1F1E6.svg\": [\n\t\t80056,\n\t\t56\n\t],\n\t\"./1F1E8-1F1F1.svg\": [\n\t\t43450,\n\t\t3450\n\t],\n\t\"./1F1E8-1F1F3.svg\": [\n\t\t52537,\n\t\t2537\n\t],\n\t\"./1F1E9-1F1EA.svg\": [\n\t\t36311,\n\t\t6311\n\t],\n\t\"./1F1E9-1F1F0.svg\": [\n\t\t21890,\n\t\t1890\n\t],\n\t\"./1F1EA-1F1EC.svg\": [\n\t\t57365,\n\t\t7365\n\t],\n\t\"./1F1EA-1F1F8.svg\": [\n\t\t98721,\n\t\t8721\n\t],\n\t\"./1F1EB-1F1F7.svg\": [\n\t\t48514,\n\t\t8514\n\t],\n\t\"./1F1EC-1F1F7.svg\": [\n\t\t99515,\n\t\t9515\n\t],\n\t\"./1F1ED-1F1F0.svg\": [\n\t\t62248,\n\t\t2248\n\t],\n\t\"./1F1ED-1F1FA.svg\": [\n\t\t268,\n\t\t268\n\t],\n\t\"./1F1EE-1F1E9.svg\": [\n\t\t81370,\n\t\t1370\n\t],\n\t\"./1F1EE-1F1F3.svg\": [\n\t\t66236,\n\t\t6236\n\t],\n\t\"./1F1EE-1F1F7.svg\": [\n\t\t22617,\n\t\t2617\n\t],\n\t\"./1F1EE-1F1F9.svg\": [\n\t\t53541,\n\t\t3541\n\t],\n\t\"./1F1EF-1F1F5.svg\": [\n\t\t42741,\n\t\t2741\n\t],\n\t\"./1F1F0-1F1F7.svg\": [\n\t\t22255,\n\t\t2255\n\t],\n\t\"./1F1F2-1F1F4.svg\": [\n\t\t86435,\n\t\t6435\n\t],\n\t\"./1F1F2-1F1FD.svg\": [\n\t\t43086,\n\t\t3086\n\t],\n\t\"./1F1F2-1F1FE.svg\": [\n\t\t76082,\n\t\t6082\n\t],\n\t\"./1F1F3-1F1F4.svg\": [\n\t\t16095,\n\t\t6095\n\t],\n\t\"./1F1F5-1F1EA.svg\": [\n\t\t52955,\n\t\t2955\n\t],\n\t\"./1F1F5-1F1F1.svg\": [\n\t\t54700,\n\t\t4700\n\t],\n\t\"./1F1F5-1F1F9.svg\": [\n\t\t77791,\n\t\t7791\n\t],\n\t\"./1F1F7-1F1F4.svg\": [\n\t\t7224,\n\t\t7224\n\t],\n\t\"./1F1F7-1F1FA.svg\": [\n\t\t6031,\n\t\t6031\n\t],\n\t\"./1F1F8-1F1E6.svg\": [\n\t\t68600,\n\t\t8600\n\t],\n\t\"./1F1F8-1F1EA.svg\": [\n\t\t71550,\n\t\t1550\n\t],\n\t\"./1F1F8-1F1EC.svg\": [\n\t\t91229,\n\t\t1229\n\t],\n\t\"./1F1F9-1F1ED.svg\": [\n\t\t16203,\n\t\t6203\n\t],\n\t\"./1F1F9-1F1F7.svg\": [\n\t\t92237,\n\t\t2237\n\t],\n\t\"./1F1F9-1F1FC.svg\": [\n\t\t64252,\n\t\t4252\n\t],\n\t\"./1F1FA-1F1E6.svg\": [\n\t\t68521,\n\t\t8521\n\t],\n\t\"./1F1FA-1F1F3.svg\": [\n\t\t23353,\n\t\t3353\n\t],\n\t\"./1F1FA-1F1F8.svg\": [\n\t\t65439,\n\t\t5439\n\t],\n\t\"./1F1FA-1F1FF.svg\": [\n\t\t4504,\n\t\t4504\n\t],\n\t\"./1F1FB-1F1F3.svg\": [\n\t\t90419,\n\t\t3886\n\t],\n\t\"./1F3F4-E0067-E0062-E0065-E006E-E0067-E007F.svg\": [\n\t\t16129,\n\t\t6129\n\t],\n\t\"./1F3F4-E0067-E0062-E0073-E0063-E0074-E007F.svg\": [\n\t\t60138,\n\t\t138\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 1 | 16);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 74018;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./athens.js\": [\n\t\t46128,\n\t\t6869\n\t],\n\t\"./baku.js\": [\n\t\t92481,\n\t\t6810\n\t],\n\t\"./bangkok.js\": [\n\t\t36870,\n\t\t5792\n\t],\n\t\"./barcelona.js\": [\n\t\t36340,\n\t\t2358\n\t],\n\t\"./beijing.js\": [\n\t\t32145,\n\t\t436\n\t],\n\t\"./berlin.js\": [\n\t\t37976,\n\t\t5520\n\t],\n\t\"./bonn.js\": [\n\t\t67933,\n\t\t1321\n\t],\n\t\"./boston.js\": [\n\t\t68835,\n\t\t5189\n\t],\n\t\"./bucharest.js\": [\n\t\t35249,\n\t\t6739\n\t],\n\t\"./budapest.js\": [\n\t\t68895,\n\t\t7599\n\t],\n\t\"./cairo.js\": [\n\t\t36509,\n\t\t7081\n\t],\n\t\"./changchun.js\": [\n\t\t97459,\n\t\t4874\n\t],\n\t\"./changsha.js\": [\n\t\t40574,\n\t\t9186\n\t],\n\t\"./chengdu.js\": [\n\t\t16312,\n\t\t8719\n\t],\n\t\"./chongqing.js\": [\n\t\t40300,\n\t\t7206\n\t],\n\t\"./cologne.js\": [\n\t\t6727,\n\t\t134\n\t],\n\t\"./copenhagen.js\": [\n\t\t47070,\n\t\t9770\n\t],\n\t\"./daegu.js\": [\n\t\t96995,\n\t\t8189\n\t],\n\t\"./dalian.js\": [\n\t\t65169,\n\t\t9898\n\t],\n\t\"./delhi.js\": [\n\t\t53707,\n\t\t4447\n\t],\n\t\"./dongguan.js\": [\n\t\t63280,\n\t\t1847\n\t],\n\t\"./dortmund.js\": [\n\t\t86079,\n\t\t6951\n\t],\n\t\"./edinburgh.js\": [\n\t\t70285,\n\t\t1392\n\t],\n\t\"./eskisehir.js\": [\n\t\t51686,\n\t\t5449\n\t],\n\t\"./foshan.js\": [\n\t\t73204,\n\t\t17\n\t],\n\t\"./frankfurt.js\": [\n\t\t12040,\n\t\t8237\n\t],\n\t\"./glasgow.js\": [\n\t\t34476,\n\t\t886\n\t],\n\t\"./gothenburg.js\": [\n\t\t66801,\n\t\t4788\n\t],\n\t\"./guadalajara.js\": [\n\t\t39399,\n\t\t3106\n\t],\n\t\"./guangzhou.js\": [\n\t\t65841,\n\t\t4073\n\t],\n\t\"./hangzhou.js\": [\n\t\t33427,\n\t\t5303\n\t],\n\t\"./hanoi.js\": [\n\t\t30507,\n\t\t310\n\t],\n\t\"./harbin.js\": [\n\t\t4826,\n\t\t5081\n\t],\n\t\"./hefei.js\": [\n\t\t82317,\n\t\t1951\n\t],\n\t\"./hiroshima.js\": [\n\t\t80916,\n\t\t8183\n\t],\n\t\"./hochiminh.js\": [\n\t\t46770,\n\t\t8140\n\t],\n\t\"./hongkong.js\": [\n\t\t54243,\n\t\t3417\n\t],\n\t\"./istanbul.js\": [\n\t\t73107,\n\t\t3875\n\t],\n\t\"./jakarta.js\": [\n\t\t58457,\n\t\t425\n\t],\n\t\"./jinan.js\": [\n\t\t5719,\n\t\t7826\n\t],\n\t\"./kansai.js\": [\n\t\t70382,\n\t\t2028\n\t],\n\t\"./kaohsiung.js\": [\n\t\t33037,\n\t\t9890\n\t],\n\t\"./kharkiv.js\": [\n\t\t63804,\n\t\t5944\n\t],\n\t\"./klangvalley.js\": [\n\t\t20137,\n\t\t4737\n\t],\n\t\"./kunming.js\": [\n\t\t28852,\n\t\t3579\n\t],\n\t\"./lima.js\": [\n\t\t39118,\n\t\t8975\n\t],\n\t\"./lisbon.js\": [\n\t\t88814,\n\t\t1614\n\t],\n\t\"./london.js\": [\n\t\t38087,\n\t\t5066\n\t],\n\t\"./macao.js\": [\n\t\t18015,\n\t\t2168\n\t],\n\t\"./madrid.js\": [\n\t\t68020,\n\t\t743\n\t],\n\t\"./manchester.js\": [\n\t\t82907,\n\t\t8291\n\t],\n\t\"./milan.js\": [\n\t\t94410,\n\t\t8413\n\t],\n\t\"./montreal.js\": [\n\t\t53678,\n\t\t6195\n\t],\n\t\"./munich.js\": [\n\t\t87368,\n\t\t441\n\t],\n\t\"./nanjing.js\": [\n\t\t1664,\n\t\t6546\n\t],\n\t\"./naples.js\": [\n\t\t73738,\n\t\t5288\n\t],\n\t\"./newtaipei.js\": [\n\t\t99114,\n\t\t3658\n\t],\n\t\"./ningbo.js\": [\n\t\t28820,\n\t\t2194\n\t],\n\t\"./osaka.js\": [\n\t\t11064,\n\t\t1342\n\t],\n\t\"./oslo.js\": [\n\t\t8057,\n\t\t7153\n\t],\n\t\"./other.js\": [\n\t\t77642,\n\t\t5885\n\t],\n\t\"./ottawa.js\": [\n\t\t40254,\n\t\t6977\n\t],\n\t\"./paris.js\": [\n\t\t22720,\n\t\t7719\n\t],\n\t\"./qingdao.js\": [\n\t\t57994,\n\t\t9\n\t],\n\t\"./rheinruhr.js\": [\n\t\t86870,\n\t\t9450\n\t],\n\t\"./rio.js\": [\n\t\t94618,\n\t\t1608\n\t],\n\t\"./riyadh.js\": [\n\t\t81000,\n\t\t2871\n\t],\n\t\"./sanfrancisco.js\": [\n\t\t64747,\n\t\t2832\n\t],\n\t\"./sanktpeterburg.js\": [\n\t\t21832,\n\t\t1902\n\t],\n\t\"./santiago.js\": [\n\t\t12568,\n\t\t530\n\t],\n\t\"./saopaulo.js\": [\n\t\t56956,\n\t\t7101\n\t],\n\t\"./seoul.js\": [\n\t\t23266,\n\t\t4111\n\t],\n\t\"./shanghai.js\": [\n\t\t89656,\n\t\t5418\n\t],\n\t\"./shaoxing.js\": [\n\t\t84891,\n\t\t2338\n\t],\n\t\"./shenyang.js\": [\n\t\t22266,\n\t\t4760\n\t],\n\t\"./shenzhen.js\": [\n\t\t44691,\n\t\t8759\n\t],\n\t\"./singapore.js\": [\n\t\t32459,\n\t\t1568\n\t],\n\t\"./stockholm.js\": [\n\t\t14606,\n\t\t5562\n\t],\n\t\"./suzhou.js\": [\n\t\t99819,\n\t\t5436\n\t],\n\t\"./taichung.js\": [\n\t\t65230,\n\t\t4688\n\t],\n\t\"./taipei.js\": [\n\t\t89489,\n\t\t5028\n\t],\n\t\"./tashkent.js\": [\n\t\t77247,\n\t\t9989\n\t],\n\t\"./tehran.js\": [\n\t\t52573,\n\t\t1134\n\t],\n\t\"./tianjin.js\": [\n\t\t47942,\n\t\t9327\n\t],\n\t\"./tokyo.js\": [\n\t\t23762,\n\t\t8951\n\t],\n\t\"./toronto.js\": [\n\t\t18148,\n\t\t5776\n\t],\n\t\"./tyneandwear.js\": [\n\t\t9314,\n\t\t8914\n\t],\n\t\"./vienna.js\": [\n\t\t55252,\n\t\t1425\n\t],\n\t\"./warsaw.js\": [\n\t\t9727,\n\t\t2187\n\t],\n\t\"./wuhan.js\": [\n\t\t93742,\n\t\t1624\n\t],\n\t\"./wuxi.js\": [\n\t\t4099,\n\t\t672\n\t],\n\t\"./xiamen.js\": [\n\t\t54610,\n\t\t3961\n\t],\n\t\"./xian.js\": [\n\t\t72591,\n\t\t2648\n\t],\n\t\"./yevpatoria.js\": [\n\t\t93342,\n\t\t4433\n\t],\n\t\"./yokohama.js\": [\n\t\t695,\n\t\t6349\n\t],\n\t\"./zhengzhou.js\": [\n\t\t27357,\n\t\t6719\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 37827;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./basic/coline.json\": [\n\t\t32401,\n\t\t8014\n\t],\n\t\"./basic/default.json\": [\n\t\t8453,\n\t\t8241\n\t],\n\t\"./basic/loop.json\": [\n\t\t8909,\n\t\t9410\n\t],\n\t\"./bjsubway/bj1.json\": [\n\t\t48741,\n\t\t6729\n\t],\n\t\"./bjsubway/bj10.json\": [\n\t\t48461,\n\t\t6230\n\t],\n\t\"./bjsubway/bj11.json\": [\n\t\t3279,\n\t\t7646\n\t],\n\t\"./bjsubway/bj13.json\": [\n\t\t67443,\n\t\t1188\n\t],\n\t\"./bjsubway/bj14.json\": [\n\t\t92906,\n\t\t9523\n\t],\n\t\"./bjsubway/bj16.json\": [\n\t\t47062,\n\t\t6698\n\t],\n\t\"./bjsubway/bj17.json\": [\n\t\t58241,\n\t\t8760\n\t],\n\t\"./bjsubway/bj19.json\": [\n\t\t87819,\n\t\t2773\n\t],\n\t\"./bjsubway/bj2.json\": [\n\t\t75176,\n\t\t6552\n\t],\n\t\"./bjsubway/bj4.json\": [\n\t\t56450,\n\t\t7680\n\t],\n\t\"./bjsubway/bj5.json\": [\n\t\t81834,\n\t\t5653\n\t],\n\t\"./bjsubway/bj6.json\": [\n\t\t12022,\n\t\t9259\n\t],\n\t\"./bjsubway/bj7.json\": [\n\t\t26061,\n\t\t5482\n\t],\n\t\"./bjsubway/bj8.json\": [\n\t\t69846,\n\t\t9797\n\t],\n\t\"./bjsubway/bj9.json\": [\n\t\t39422,\n\t\t4269\n\t],\n\t\"./bjsubway/dae.json\": [\n\t\t34852,\n\t\t3981\n\t],\n\t\"./bjsubway/s1l.json\": [\n\t\t42830,\n\t\t2381\n\t],\n\t\"./bjsubway/t1l.json\": [\n\t\t41057,\n\t\t7200\n\t],\n\t\"./bjsubway/xjl.json\": [\n\t\t14,\n\t\t1095\n\t],\n\t\"./bjsubway/yzl.json\": [\n\t\t56315,\n\t\t2244\n\t],\n\t\"./company-config.json\": [\n\t\t76605\n\t],\n\t\"./crt/cjt.json\": [\n\t\t25020,\n\t\t7149\n\t],\n\t\"./crt/cq0.json\": [\n\t\t40393,\n\t\t7160\n\t],\n\t\"./crt/cq1.json\": [\n\t\t32038,\n\t\t6452\n\t],\n\t\"./crt/cq10.json\": [\n\t\t66292,\n\t\t6354\n\t],\n\t\"./crt/cq2.json\": [\n\t\t369,\n\t\t2200\n\t],\n\t\"./crt/cq3.json\": [\n\t\t52711,\n\t\t3082\n\t],\n\t\"./crt/cq4.json\": [\n\t\t83353,\n\t\t9950\n\t],\n\t\"./crt/cq5.json\": [\n\t\t60347,\n\t\t7877\n\t],\n\t\"./crt/cq6.json\": [\n\t\t87512,\n\t\t6583\n\t],\n\t\"./crt/cq9.json\": [\n\t\t79645,\n\t\t7724\n\t],\n\t\"./crt/cqe.json\": [\n\t\t37151,\n\t\t4015\n\t],\n\t\"./fmetro/fs2.json\": [\n\t\t61139,\n\t\t9826\n\t],\n\t\"./fmetro/tgm1.json\": [\n\t\t81558,\n\t\t3084\n\t],\n\t\"./fmetro/tnh1.json\": [\n\t\t17249,\n\t\t3109\n\t],\n\t\"./gzmtr/apm.json\": [\n\t\t45098,\n\t\t2846\n\t],\n\t\"./gzmtr/gf.json\": [\n\t\t30571,\n\t\t9925\n\t],\n\t\"./gzmtr/gz1.json\": [\n\t\t28161,\n\t\t8924\n\t],\n\t\"./gzmtr/gz13.json\": [\n\t\t14745,\n\t\t7332\n\t],\n\t\"./gzmtr/gz14.json\": [\n\t\t9447,\n\t\t2100\n\t],\n\t\"./gzmtr/gz18.json\": [\n\t\t79361,\n\t\t9416\n\t],\n\t\"./gzmtr/gz2.json\": [\n\t\t87119,\n\t\t199\n\t],\n\t\"./gzmtr/gz21.json\": [\n\t\t24695,\n\t\t4557\n\t],\n\t\"./gzmtr/gz22.json\": [\n\t\t92671,\n\t\t8512\n\t],\n\t\"./gzmtr/gz3.json\": [\n\t\t20622,\n\t\t2658\n\t],\n\t\"./gzmtr/gz4.json\": [\n\t\t25440,\n\t\t9655\n\t],\n\t\"./gzmtr/gz5.json\": [\n\t\t93880,\n\t\t4250\n\t],\n\t\"./gzmtr/gz6.json\": [\n\t\t27426,\n\t\t6555\n\t],\n\t\"./gzmtr/gz7.json\": [\n\t\t73290,\n\t\t9675\n\t],\n\t\"./gzmtr/gz8.json\": [\n\t\t69045,\n\t\t2663\n\t],\n\t\"./gzmtr/gz9.json\": [\n\t\t78481,\n\t\t113\n\t],\n\t\"./gzmtr/thp1.json\": [\n\t\t65227,\n\t\t6080\n\t],\n\t\"./gzmtr/thz1.json\": [\n\t\t82887,\n\t\t8766\n\t],\n\t\"./hrbmetro/hrb1.json\": [\n\t\t13002,\n\t\t8724\n\t],\n\t\"./hrbmetro/hrb2.json\": [\n\t\t6635,\n\t\t6862\n\t],\n\t\"./hrbmetro/hrb3.json\": [\n\t\t20555,\n\t\t4694\n\t],\n\t\"./kmrailtransit/km1.json\": [\n\t\t43285,\n\t\t5945\n\t],\n\t\"./kmrailtransit/km2.json\": [\n\t\t84760,\n\t\t5074\n\t],\n\t\"./kmrailtransit/km3.json\": [\n\t\t327,\n\t\t5958\n\t],\n\t\"./kmrailtransit/km4.json\": [\n\t\t41302,\n\t\t4754\n\t],\n\t\"./kmrailtransit/km5.json\": [\n\t\t21672,\n\t\t6533\n\t],\n\t\"./kmrailtransit/km6.json\": [\n\t\t35903,\n\t\t2490\n\t],\n\t\"./kvtransit/klMonorail.json\": [\n\t\t57749,\n\t\t169\n\t],\n\t\"./kvtransit/lrtAmpang.json\": [\n\t\t81534,\n\t\t5910\n\t],\n\t\"./kvtransit/lrtKelanaJaya.json\": [\n\t\t94219,\n\t\t4991\n\t],\n\t\"./kvtransit/lrtSriPataling.json\": [\n\t\t38174,\n\t\t403\n\t],\n\t\"./kvtransit/mrtKajang.json\": [\n\t\t49512,\n\t\t564\n\t],\n\t\"./lahoremetro/orange.json\": [\n\t\t33164,\n\t\t1180\n\t],\n\t\"./mlm/taipa.json\": [\n\t\t4435,\n\t\t7792\n\t],\n\t\"./mtr/ael.json\": [\n\t\t16215,\n\t\t1899\n\t],\n\t\"./mtr/drl.json\": [\n\t\t86083,\n\t\t3497\n\t],\n\t\"./mtr/eal.json\": [\n\t\t19800,\n\t\t6899\n\t],\n\t\"./mtr/isl.json\": [\n\t\t7314,\n\t\t4092\n\t],\n\t\"./mtr/ktl.json\": [\n\t\t1400,\n\t\t1471\n\t],\n\t\"./mtr/sile.json\": [\n\t\t37438,\n\t\t4138\n\t],\n\t\"./mtr/tcl.json\": [\n\t\t74512,\n\t\t6293\n\t],\n\t\"./mtr/tkl.json\": [\n\t\t91257,\n\t\t4402\n\t],\n\t\"./mtr/tml.json\": [\n\t\t45339,\n\t\t5680\n\t],\n\t\"./mtr/twl.json\": [\n\t\t15030,\n\t\t5325\n\t],\n\t\"./nbrailtransit/nb1.json\": [\n\t\t49444,\n\t\t852\n\t],\n\t\"./nbrailtransit/nb2.json\": [\n\t\t80011,\n\t\t6288\n\t],\n\t\"./nbrailtransit/nb3.json\": [\n\t\t1295,\n\t\t758\n\t],\n\t\"./nbrailtransit/nb4.json\": [\n\t\t57155,\n\t\t9619\n\t],\n\t\"./nbrailtransit/nb5.json\": [\n\t\t71198,\n\t\t7855\n\t],\n\t\"./njmetro/nj1.json\": [\n\t\t72868,\n\t\t2750\n\t],\n\t\"./njmetro/nj10.json\": [\n\t\t28421,\n\t\t4387\n\t],\n\t\"./njmetro/nj2.json\": [\n\t\t74583,\n\t\t153\n\t],\n\t\"./njmetro/nj3.json\": [\n\t\t33347,\n\t\t4996\n\t],\n\t\"./njmetro/nj4.json\": [\n\t\t57811,\n\t\t911\n\t],\n\t\"./qdmetro/qd11.json\": [\n\t\t80186,\n\t\t6569\n\t],\n\t\"./qdmetro/qd13.json\": [\n\t\t99736,\n\t\t6890\n\t],\n\t\"./qdmetro/qd2.json\": [\n\t\t35582,\n\t\t3692\n\t],\n\t\"./qdmetro/qd3.json\": [\n\t\t23457,\n\t\t856\n\t],\n\t\"./qdmetro/qd8.json\": [\n\t\t67703,\n\t\t2791\n\t],\n\t\"./saopaulometro/sp1.json\": [\n\t\t2702,\n\t\t5941\n\t],\n\t\"./saopaulometro/sp10.json\": [\n\t\t81443,\n\t\t4254\n\t],\n\t\"./saopaulometro/sp11.json\": [\n\t\t48362,\n\t\t4605\n\t],\n\t\"./saopaulometro/sp12.json\": [\n\t\t57393,\n\t\t74\n\t],\n\t\"./saopaulometro/sp13.json\": [\n\t\t12794,\n\t\t2632\n\t],\n\t\"./saopaulometro/sp15.json\": [\n\t\t56267,\n\t\t3456\n\t],\n\t\"./saopaulometro/sp2.json\": [\n\t\t67182,\n\t\t5294\n\t],\n\t\"./saopaulometro/sp3.json\": [\n\t\t91102,\n\t\t7211\n\t],\n\t\"./saopaulometro/sp4.json\": [\n\t\t42489,\n\t\t6745\n\t],\n\t\"./saopaulometro/sp5.json\": [\n\t\t62103,\n\t\t7769\n\t],\n\t\"./saopaulometro/sp7.json\": [\n\t\t99021,\n\t\t3263\n\t],\n\t\"./saopaulometro/sp8.json\": [\n\t\t21280,\n\t\t1475\n\t],\n\t\"./saopaulometro/sp9.json\": [\n\t\t74337,\n\t\t8781\n\t],\n\t\"./seoulmetro/everline.json\": [\n\t\t57385,\n\t\t7321\n\t],\n\t\"./seoulmetro/gimpogoldline.json\": [\n\t\t99617,\n\t\t5993\n\t],\n\t\"./seoulmetro/gyeonggang.json\": [\n\t\t46370,\n\t\t7910\n\t],\n\t\"./seoulmetro/l3.json\": [\n\t\t98463,\n\t\t6632\n\t],\n\t\"./seoulmetro/l7.json\": [\n\t\t20651,\n\t\t6153\n\t],\n\t\"./seoulmetro/l8.json\": [\n\t\t31279,\n\t\t5925\n\t],\n\t\"./seoulmetro/l9.json\": [\n\t\t83454,\n\t\t6568\n\t],\n\t\"./seoulmetro/sillim.json\": [\n\t\t60466,\n\t\t9477\n\t],\n\t\"./seoulmetro/suinbundang.json\": [\n\t\t40050,\n\t\t8476\n\t],\n\t\"./shmetro/sh1.json\": [\n\t\t55562,\n\t\t2023\n\t],\n\t\"./shmetro/sh10.json\": [\n\t\t26438,\n\t\t8330\n\t],\n\t\"./shmetro/sh11.json\": [\n\t\t96485,\n\t\t7522\n\t],\n\t\"./shmetro/sh12.json\": [\n\t\t67048,\n\t\t8615\n\t],\n\t\"./shmetro/sh13.json\": [\n\t\t49155,\n\t\t5515\n\t],\n\t\"./shmetro/sh14.json\": [\n\t\t42243,\n\t\t5797\n\t],\n\t\"./shmetro/sh15.json\": [\n\t\t86484,\n\t\t1325\n\t],\n\t\"./shmetro/sh16.json\": [\n\t\t71465,\n\t\t388\n\t],\n\t\"./shmetro/sh17.json\": [\n\t\t7079,\n\t\t7985\n\t],\n\t\"./shmetro/sh18.json\": [\n\t\t94120,\n\t\t1074\n\t],\n\t\"./shmetro/sh2.json\": [\n\t\t4580,\n\t\t8418\n\t],\n\t\"./shmetro/sh3&4.json\": [\n\t\t57225,\n\t\t3437\n\t],\n\t\"./shmetro/sh3.json\": [\n\t\t17439,\n\t\t1281\n\t],\n\t\"./shmetro/sh4.json\": [\n\t\t21088,\n\t\t6010\n\t],\n\t\"./shmetro/sh5.json\": [\n\t\t47346,\n\t\t3574\n\t],\n\t\"./shmetro/sh6.json\": [\n\t\t48358,\n\t\t5458\n\t],\n\t\"./shmetro/sh7.json\": [\n\t\t13095,\n\t\t7924\n\t],\n\t\"./shmetro/sh8.json\": [\n\t\t64409,\n\t\t6432\n\t],\n\t\"./shmetro/sh9.json\": [\n\t\t57345,\n\t\t1407\n\t],\n\t\"./szmetro/sz1.json\": [\n\t\t47109,\n\t\t5391\n\t],\n\t\"./szmetro/sz2.json\": [\n\t\t96531,\n\t\t1884\n\t],\n\t\"./szmetro/sz3.json\": [\n\t\t51862,\n\t\t2259\n\t],\n\t\"./szmetro/sz4.json\": [\n\t\t47789,\n\t\t4324\n\t],\n\t\"./szmetro/sz8.json\": [\n\t\t95508,\n\t\t3969\n\t],\n\t\"./template-configs.json\": [\n\t\t72722\n\t],\n\t\"./torontosubway/ttc1.json\": [\n\t\t12966,\n\t\t1416\n\t],\n\t\"./torontosubway/ttc2.json\": [\n\t\t33298,\n\t\t7991\n\t],\n\t\"./torontosubway/ttc3.json\": [\n\t\t78973,\n\t\t2856\n\t],\n\t\"./torontosubway/ttc4.json\": [\n\t\t76730,\n\t\t8444\n\t],\n\t\"./zzmetro/zz1.json\": [\n\t\t44557,\n\t\t45\n\t],\n\t\"./zzmetro/zz14.json\": [\n\t\t52049,\n\t\t1255\n\t],\n\t\"./zzmetro/zz2.json\": [\n\t\t36226,\n\t\t7425\n\t],\n\t\"./zzmetro/zz3.json\": [\n\t\t45090,\n\t\t2525\n\t],\n\t\"./zzmetro/zz4.json\": [\n\t\t92332,\n\t\t4636\n\t],\n\t\"./zzmetro/zz5.json\": [\n\t\t53790,\n\t\t5648\n\t],\n\t\"./zzmetro/zz6.json\": [\n\t\t55444,\n\t\t9538\n\t],\n\t\"./zzmetro/zz9.json\": [\n\t\t81393,\n\t\t7883\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 91427;\nmodule.exports = webpackAsyncContext;","import React, { useEffect } from 'react';\nimport { CanvasType, Events } from '../constants/constants';\nimport { useRootSelector } from '../redux';\nimport { Flex } from '@chakra-ui/react';\nimport useCanvasMap from './use-canvas-map';\nimport { RmgErrorBoundary, RmgLoader } from '@railmapgen/rmg-components';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\nconst style = {\n    position: 'relative',\n    flexDirection: 'row',\n    overflowX: 'auto',\n    '&::before, &::after': {\n        content: '\"\"',\n        margin: 'auto',\n    },\n    '& > svg': {\n        flex: '0 0 auto',\n        border: '1px solid black',\n    },\n};\n\nexport default function SvgRouter() {\n    const { canvasToShow, canvasScale } = useRootSelector(state => state.app);\n    const { svg_height: svgHeight, style: rmgStyle } = useRootSelector(state => state.param);\n\n    const canvasMap = useCanvasMap(rmgStyle);\n\n    useEffect(() => {\n        (document.getElementById('css_share') as HTMLLinkElement).href =\n            process.env.PUBLIC_URL + `/styles/share_${rmgStyle}.css`;\n        rmgRuntime.event(Events.STYLE_CHANGE, { style: rmgStyle });\n    }, [rmgStyle]);\n\n    const filteredCanvas = (Object.keys(canvasMap) as CanvasType[]).filter(canvas => canvasToShow.includes(canvas));\n    const scaledHeight = svgHeight * canvasScale;\n\n    return (\n        <Flex minH={scaledHeight} sx={style}>\n            {Object.keys(canvasMap).length === 0 ? (\n                <RmgLoader isIndeterminate={true} />\n            ) : (\n                filteredCanvas.map(canvas => (\n                    <RmgErrorBoundary key={canvas + rmgStyle} sx={{ minWidth: 750, height: scaledHeight }}>\n                        {canvasMap[canvas]}\n                    </RmgErrorBoundary>\n                ))\n            )}\n        </Flex>\n    );\n}\n","import { ReactNode, useEffect, useState } from 'react';\nimport { CanvasType, RmgStyle } from '../constants/constants';\n\nexport default function useCanvasMap(style: RmgStyle) {\n    const [canvasMap, setCanvasMap] = useState<Partial<Record<CanvasType, ReactNode>>>({});\n\n    useEffect(() => {\n        import(`./${style}/index`)\n            .then(module => {\n                setCanvasMap(module.default);\n            })\n            .catch(e => {\n                console.error(`Failed to load canvas for style ${style}`, e);\n                setCanvasMap({});\n            });\n\n        // reset canvas map while loading module for next style\n        return () => {\n            setCanvasMap({});\n        };\n    }, [style]);\n\n    return canvasMap;\n}\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { updateStationName, updateStationNum, updateStationSecondaryName } from '../../../redux/param/action';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { RmgStyle } from '../../../constants/constants';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\nexport default function InfoSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedStation = useRootSelector(state => state.app.selectedStation);\n    console.log('InfoSection:: Rendering for', selectedStation);\n    const style = useRootSelector(state => state.param.style);\n    const { num, name, secondaryName } = useRootSelector(state => state.param.stn_list[selectedStation]);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('StationSidePanel.info.num'),\n            value: num,\n            placeholder: '01',\n            onChange: (value: string) => dispatch(updateStationNum(selectedStation, value)),\n            hidden: ![RmgStyle.GZMTR].includes(style),\n        },\n        {\n            type: 'input',\n            label: t('Chinese name'),\n            value: name[0],\n            onChange: (value: string) => dispatch(updateStationName(selectedStation, [value, name[1]])),\n        },\n        {\n            type: 'input',\n            label: t('English name'),\n            value: name[1],\n            onChange: (value: string) => dispatch(updateStationName(selectedStation, [name[0], value])),\n        },\n        {\n            type: 'input',\n            label: t('StationSidePanel.info.zhSecondary'),\n            value: secondaryName ? secondaryName[0] : '',\n            placeholder: '1号航站楼',\n            onChange: (value: string) =>\n                dispatch(updateStationSecondaryName(selectedStation, [value, secondaryName ? secondaryName[1] : ''])),\n            hidden: ![RmgStyle.GZMTR].includes(style),\n        },\n        {\n            type: 'input',\n            label: t('StationSidePanel.info.enSecondary'),\n            value: secondaryName ? secondaryName[1] : '',\n            placeholder: 'Terminal 1',\n            onChange: (value: string) =>\n                dispatch(updateStationSecondaryName(selectedStation, [secondaryName ? secondaryName[0] : '', value])),\n            hidden: ![RmgStyle.GZMTR].includes(style),\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('StationSidePanel.info.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n        </Box>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Image } from '@chakra-ui/react';\n\ninterface FlagSvgEmojiProps {\n    countryCode: string;\n    svgFilename?: string;\n}\n\nexport default function FlagSvgEmoji(props: FlagSvgEmojiProps) {\n    const { countryCode, svgFilename } = props;\n\n    const [src, setSrc] = useState<string | undefined>(undefined);\n\n    useEffect(() => {\n        if (svgFilename) {\n            import('@railmapgen/rmg-palette-resources/flags/' + svgFilename)\n                .then(module => module.default)\n                .then(setSrc)\n                .catch(err => console.error(`Failed to find SVG file ${svgFilename} as ${err?.message}`));\n        }\n    }, [svgFilename]);\n\n    return src ? <Image src={src} alt={`Flag of ${countryCode}`} h={17} mr={1} /> : <></>;\n}\n","import React from 'react';\nimport { RmgAutoComplete } from '@railmapgen/rmg-components';\nimport { CityCode, CityEntry, cityList, countryList } from '@railmapgen/rmg-palette-resources';\nimport { useTranslation } from 'react-i18next';\nimport FlagSvgEmoji from './flag-svg-emoji';\nimport { LanguageCode } from '@railmapgen/rmg-translate';\n\ninterface CityPickerProps {\n    defaultValueId?: CityCode;\n    onChange?: (val: CityCode) => void;\n}\n\nexport default function CityPicker(props: CityPickerProps) {\n    const { defaultValueId, onChange } = props;\n\n    const { i18n } = useTranslation();\n\n    const currentItem = defaultValueId ? cityList.find(item => item.id === defaultValueId) : undefined;\n\n    const displayValue = (item: CityEntry): string => {\n        return i18n.languages.map(lng => item.name[lng as LanguageCode]).find(name => name !== undefined)!!;\n    };\n\n    const displayHandler = (item: CityEntry) => {\n        const isCensorTWFlag =\n            item.country === 'TW' &&\n            [LanguageCode.ChineseSimp, LanguageCode.ChineseCN].includes(i18n.languages[0] as LanguageCode);\n        const isWindowsClient = ['Win32', 'Win64'].includes(navigator.platform);\n        // const isWindowsClient = true; // uncomment this line for Windows testing\n\n        const name = i18n.languages.map(lng => item.name[lng as LanguageCode]).find(name => name !== undefined);\n        const flagSvg = countryList.find(country => country.id === item.country)?.flagSvg;\n        const flagEmoji = countryList.find(country => country.id === item.country)?.flagEmoji;\n\n        return (\n            <>\n                {isCensorTWFlag ? (\n                    <span>🏴&nbsp;</span>\n                ) : isWindowsClient ? (\n                    <FlagSvgEmoji countryCode={item.country} svgFilename={flagSvg} />\n                ) : (\n                    <span>{flagEmoji}&nbsp;</span>\n                )}\n                {name}\n            </>\n        );\n    };\n\n    const predicate = (item: CityEntry, input: string): boolean => {\n        return Object.values(item.name).some(name => name.includes(input));\n    };\n\n    const data = cityList.slice().sort((a, b) => {\n        if (a.id === CityCode.Other) {\n            return 1;\n        } else if (b.id === CityCode.Other) {\n            return -1;\n        } else {\n            return displayValue(a).localeCompare(displayValue(b), i18n.languages[0]);\n        }\n    });\n\n    return (\n        <RmgAutoComplete\n            data={data}\n            displayValue={displayValue}\n            displayHandler={displayHandler}\n            predicate={predicate}\n            defaultValue={currentItem}\n            onChange={item => onChange?.(item.id)}\n        />\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { RmgAutoComplete, RmgLineBadge } from '@railmapgen/rmg-components';\nimport { CityCode, ColourHex, MonoColour, PaletteEntry } from '@railmapgen/rmg-palette-resources';\nimport { useTranslation } from 'react-i18next';\nimport { LanguageCode } from '@railmapgen/rmg-translate';\n\nconst usePalette = (cityCode?: CityCode) => {\n    const [paletteList, setPaletteList] = useState<PaletteEntry[]>([]);\n\n    useEffect(() => {\n        import(/* webpackChunkName: \"palettes\" */ `@railmapgen/rmg-palette-resources/palettes/${cityCode}.js`)\n            .then(module => setPaletteList(module.default))\n            .catch(() => setPaletteList([]));\n    }, [cityCode]);\n\n    return paletteList;\n};\n\ninterface ColourPickerProps {\n    city?: CityCode;\n    defaultValueId?: string;\n    onChange?: (lineCode: string, bg: ColourHex, fg: MonoColour) => void;\n}\n\nexport default function ColourPicker(props: ColourPickerProps) {\n    const { city, defaultValueId, onChange } = props;\n\n    const { i18n } = useTranslation();\n\n    const paletteList = usePalette(city);\n\n    const currentItem = defaultValueId ? paletteList.find(palette => palette.id === defaultValueId) : undefined;\n\n    const displayValue = (item: PaletteEntry): string => {\n        return i18n.languages.map(lng => item.name[lng as LanguageCode]).find(name => name !== undefined)!!;\n    };\n\n    const displayHandler = (item: PaletteEntry) => {\n        const displayName = displayValue(item);\n\n        return <RmgLineBadge name={displayName} fg={item.fg || MonoColour.white} bg={item.colour} />;\n    };\n\n    const predicate = (item: PaletteEntry, input: string): boolean => {\n        return Object.values(item.name).some(name => name.includes(input));\n    };\n\n    return (\n        <RmgAutoComplete\n            data={paletteList}\n            displayValue={displayValue}\n            displayHandler={displayHandler}\n            predicate={predicate}\n            defaultValue={currentItem}\n            onChange={item => onChange?.(item.id, item.colour, item.fg || MonoColour.white)}\n        />\n    );\n}\n","import {\n    Button,\n    Icon,\n    Link,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    Tab,\n    TabList,\n    TabPanel,\n    TabPanels,\n    Tabs,\n    Text,\n    useColorModeValue,\n    VStack,\n} from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { Events, Theme } from '../../../constants/constants';\nimport CityPicker from './city-picker';\nimport ColourPicker from './colour-picker';\nimport { CityCode, ColourHex, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { useTranslation } from 'react-i18next';\nimport { RmgFields, RmgFieldsField, RmgLineBadge } from '@railmapgen/rmg-components';\nimport { MdOpenInNew } from 'react-icons/md';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface ColourModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    defaultTheme?: Theme;\n    onUpdate?: (theme: Theme) => void;\n}\n\nexport default function ColourModal(props: ColourModalProps) {\n    const { isOpen, onClose, defaultTheme, onUpdate } = props;\n\n    const { t } = useTranslation();\n    const linkColour = useColorModeValue('primary.500', 'primary.300');\n\n    const [cityCode, setCityCode] = useState(defaultTheme?.[0]);\n    const [lineCode, setLineCode] = useState(defaultTheme?.[1]);\n    const [bgColour, setBgColour] = useState(defaultTheme?.[2] || '#AAAAAA');\n    const [fgColour, setFgColour] = useState(defaultTheme?.[3] || MonoColour.white);\n\n    useEffect(() => {\n        if (defaultTheme) {\n            setCityCode(defaultTheme[0]);\n            setLineCode(defaultTheme[1]);\n            setBgColour(defaultTheme[2]);\n            setFgColour(defaultTheme[3]);\n        }\n    }, [isOpen, defaultTheme?.toString()]);\n\n    const paletteFields: RmgFieldsField[] = [\n        {\n            type: 'custom',\n            label: t('ColourModal.city'),\n            component: (\n                <CityPicker\n                    defaultValueId={cityCode}\n                    onChange={value => {\n                        setCityCode(value);\n                        setLineCode(undefined);\n                        setBgColour('#AAAAAA');\n                        setFgColour(MonoColour.white);\n                    }}\n                />\n            ),\n        },\n        {\n            type: 'custom',\n            label: t('ColourModal.line'),\n            component: (\n                <ColourPicker\n                    city={cityCode}\n                    defaultValueId={lineCode}\n                    onChange={(line, bg, fg) => {\n                        setLineCode(line);\n                        setBgColour(bg);\n                        setFgColour(fg);\n                    }}\n                />\n            ),\n        },\n    ];\n\n    const customFields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('ColourModal.bg'),\n            variant: 'color',\n            value: bgColour,\n            placeholder: '#F3D03E',\n            onChange: value => {\n                setCityCode(CityCode.Other);\n                setLineCode('other');\n                setBgColour(value as ColourHex);\n            },\n        },\n        {\n            type: 'select',\n            label: t('ColourModal.fg'),\n            value: fgColour,\n            options: {\n                [MonoColour.white]: t('ColourModal.white'),\n                [MonoColour.black]: t('ColourModal.black'),\n            },\n            onChange: value => {\n                setCityCode(CityCode.Other);\n                setLineCode('other');\n                setFgColour(value as MonoColour);\n            },\n        },\n    ];\n\n    const handleOpenPalette = () => {\n        if (rmgRuntime.isStandaloneWindow()) {\n            window.open('/rmg-palette', '_blank');\n        } else {\n            rmgRuntime.openApp('rmg-palette');\n        }\n    };\n\n    const isSubmitEnabled = cityCode && lineCode && bgColour && fgColour;\n\n    const handleSubmit = () => {\n        if (isSubmitEnabled) {\n            onUpdate?.([cityCode, lineCode, bgColour, fgColour]);\n            onClose();\n            rmgRuntime.event(Events.SELECT_COLOUR, { cityCode, lineCode });\n        }\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('ColourModal.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <VStack>\n                        <RmgLineBadge name={t('ColourModal.example')} fg={fgColour} bg={bgColour} />\n\n                        <Tabs\n                            isFitted\n                            colorScheme=\"primary\"\n                            w=\"100%\"\n                            defaultIndex={cityCode === CityCode.Other ? 1 : 0}\n                        >\n                            <TabList>\n                                <Tab>{t('ColourModal.palette')}</Tab>\n                                <Tab>{t('ColourModal.custom')}</Tab>\n                            </TabList>\n\n                            <TabPanels>\n                                <TabPanel>\n                                    <RmgFields fields={paletteFields} />\n                                </TabPanel>\n                                <TabPanel>\n                                    <RmgFields fields={customFields} />\n                                </TabPanel>\n                            </TabPanels>\n                        </Tabs>\n                    </VStack>\n                </ModalBody>\n\n                <ModalFooter>\n                    <Text fontSize=\"sm\" marginRight={2}>\n                        {t('ColourModal.seeAll')}\n                        <Link color={linkColour} onClick={handleOpenPalette}>\n                            {t('Palette')} <Icon as={MdOpenInNew} />\n                        </Link>\n                    </Text>\n\n                    <Button colorScheme=\"primary\" onClick={handleSubmit} disabled={!isSubmitEnabled}>\n                        {t('Confirm')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import { rmgChakraTheme } from '@railmapgen/rmg-components';\nimport { ColourHex } from '@railmapgen/rmg-palette-resources';\n\nexport default class ColourUtil {\n    private static hexToRgb(hex: ColourHex): [number, number, number] {\n        return [parseInt(hex.slice(1, 3), 16), parseInt(hex.slice(3, 5), 16), parseInt(hex.slice(5, 7), 16)];\n    }\n\n    public static fade(hex: ColourHex, alpha: number): `rgba(${string})` {\n        return `rgba(${[...this.hexToRgb(hex), alpha].join(',')})`;\n    }\n\n    public static euclideanDistance(hex1: ColourHex, hex2: ColourHex): number {\n        return this.hexToRgb(hex1).reduce((acc, cur, idx) => {\n            return acc + Math.pow(cur - this.hexToRgb(hex2)[idx], 2);\n        }, 0);\n    }\n}\n\nexport const findNearestColour = (hex: ColourHex): string => {\n    const colourDb: Record<string, Record<string, ColourHex> | ColourHex> = rmgChakraTheme.colors;\n\n    const [nearestColour] = Object.entries(colourDb).reduce(\n        (acc, cur) => {\n            if (cur[0].includes('Alpha') || cur[0] === 'current') {\n                return acc;\n            } else if (typeof cur[1] === 'string') {\n                const dist = ColourUtil.euclideanDistance(hex, cur[1]);\n                return dist < acc[1] ? [cur[0], dist] : acc;\n            } else {\n                const dist = ColourUtil.euclideanDistance(hex, cur[1]['600']);\n                return dist < acc[1] ? [cur[0], dist] : acc;\n            }\n        },\n        ['brand', Infinity]\n    );\n    return nearestColour;\n};\n","import React from 'react';\nimport ColourUtil from '../../theme/colour-util';\nimport { MdCircle } from 'react-icons/md';\nimport { IconButton } from '@chakra-ui/react';\nimport { Theme } from '../../constants/constants';\nimport { useTranslation } from 'react-i18next';\n\ninterface ThemeButtonProps {\n    theme: Theme;\n    onClick?: () => void;\n}\n\nexport default function ThemeButton(props: ThemeButtonProps) {\n    const { theme, onClick } = props;\n\n    const { t } = useTranslation();\n\n    return (\n        <IconButton\n            size=\"xs\"\n            aria-label={t('Colour')}\n            mt=\"0.45px\"\n            color={theme[3]}\n            bg={theme[2]}\n            _hover={{ bg: ColourUtil.fade(theme[2], 0.7) }}\n            icon={<MdCircle />}\n            onClick={onClick}\n        />\n    );\n}\n","import React, { useState } from 'react';\nimport { Box, HStack, IconButton, Text } from '@chakra-ui/react';\nimport { InterchangeInfo, Theme } from '../../../constants/constants';\nimport { MdAdd, MdContentCopy, MdDelete } from 'react-icons/md';\nimport ColourModal from '../../modal/colour-modal/colour-modal';\nimport { useTranslation } from 'react-i18next';\nimport { useRootSelector } from '../../../redux';\nimport ThemeButton from '../theme-button';\nimport { RmgCard, RmgFields, RmgFieldsField, RmgLabel } from '@railmapgen/rmg-components';\nimport { MonoColour } from '@railmapgen/rmg-palette-resources';\n\ninterface InterchangeCardProps {\n    interchangeList: InterchangeInfo[];\n    onAdd?: (info: InterchangeInfo) => void;\n    onDelete?: (index: number) => void;\n    onUpdate?: (index: number, info: InterchangeInfo) => void;\n}\n\nexport default function InterchangeCard(props: InterchangeCardProps) {\n    const { interchangeList, onAdd, onDelete, onUpdate } = props;\n\n    const { t } = useTranslation();\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedIndex, setSelectedIndex] = useState(0);\n\n    const { theme, stn_list: stationList } = useRootSelector(state => state.param);\n\n    const usedNameList = Object.values(stationList).reduce<[string[], string[]]>(\n        (acc, cur) => {\n            const [zhAcc, enAcc] = acc;\n            return [\n                [...new Set(zhAcc.concat(cur.transfer.info.flat().map(it => it[4])))],\n                [...new Set(enAcc.concat(cur.transfer.info.flat().map(it => it[5])))],\n            ];\n        },\n        [[], []]\n    );\n\n    const interchangeFields: RmgFieldsField[][] = interchangeList.map((it, i) => [\n        {\n            type: 'input',\n            label: t('Chinese name'),\n            value: it[4],\n            minW: '80px',\n            onChange: val => onUpdate?.(i, [it[0], it[1], it[2], it[3], val, it[5]]),\n            optionList: usedNameList[0],\n        },\n        {\n            type: 'input',\n            label: t('English name'),\n            value: it[5],\n            minW: '80px',\n            onChange: val => onUpdate?.(i, [it[0], it[1], it[2], it[3], it[4], val]),\n            optionList: usedNameList[1],\n        },\n    ]);\n\n    return (\n        <RmgCard direction=\"column\">\n            {interchangeList.length === 0 && (\n                <HStack spacing={0.5} data-testid={`interchange-card-stack`}>\n                    <Text as=\"i\" flex={1} align=\"center\" fontSize=\"md\" colorScheme=\"gray\">\n                        {t('StationSidePanel.interchange.noInterchanges')}\n                    </Text>\n\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label={t('StationSidePanel.interchange.add')}\n                        onClick={() => onAdd?.([theme[0], '', '#aaaaaa', MonoColour.white, '', ''])}\n                        icon={<MdAdd />}\n                    />\n                </HStack>\n            )}\n\n            {interchangeList.map((it, i) => (\n                <HStack key={i} spacing={0.5} data-testid={`interchange-card-stack-${i}`}>\n                    <RmgLabel label={t('Colour')} minW=\"40px\" noLabel={i !== 0}>\n                        <ThemeButton\n                            theme={[it[0], it[1], it[2], it[3]]}\n                            onClick={() => {\n                                setIsModalOpen(true);\n                                setSelectedIndex(i);\n                            }}\n                        />\n                    </RmgLabel>\n\n                    <RmgFields fields={interchangeFields[i]} noLabel={i !== 0} />\n\n                    {onAdd && i === interchangeFields.length - 1 ? (\n                        <IconButton\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            aria-label={t('StationSidePanel.interchange.copy')}\n                            onClick={() => onAdd?.(interchangeList.slice(-1)[0])} // duplicate last leg\n                            icon={<MdContentCopy />}\n                        />\n                    ) : (\n                        <Box minW={8} />\n                    )}\n\n                    {onDelete && (\n                        <IconButton\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            aria-label={t('StationSidePanel.interchange.remove')}\n                            onClick={() => onDelete?.(i)}\n                            icon={<MdDelete />}\n                        />\n                    )}\n                </HStack>\n            ))}\n\n            <ColourModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                defaultTheme={interchangeList[selectedIndex]?.slice(0, 4) as Theme}\n                onUpdate={theme =>\n                    onUpdate?.(selectedIndex, [\n                        ...theme,\n                        interchangeList[selectedIndex][4],\n                        interchangeList[selectedIndex][5],\n                    ])\n                }\n            />\n        </RmgCard>\n    );\n}\n","import React, { Fragment } from 'react';\nimport { Button, Flex, Heading, VStack } from '@chakra-ui/react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport InterchangeCard from './interchange-card';\nimport {\n    addInterchange,\n    removeInterchange,\n    updateInterchange,\n    updateStationOsiName,\n    updateStationPaidArea,\n    updateStationTickDirection,\n} from '../../../redux/param/action';\nimport { InterchangeInfo, RmgStyle, ShortDirection } from '../../../constants/constants';\nimport { MdAdd } from 'react-icons/md';\nimport { RmgButtonGroup, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\nimport { MonoColour } from '@railmapgen/rmg-palette-resources';\n\nexport default function InterchangeSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedStation = useRootSelector(state => state.app.selectedStation);\n    const { theme, style } = useRootSelector(state => state.param);\n    const { transfer } = useRootSelector(state => state.param.stn_list[selectedStation]);\n\n    const getOSINameFields = (setIndex: number): RmgFieldsField[] => [\n        {\n            type: 'input',\n            label: t('Station Chinese name'),\n            value: transfer.osi_names[setIndex]?.[0],\n            hidden: ![RmgStyle.MTR].includes(style),\n            onChange: value =>\n                dispatch(updateStationOsiName(selectedStation, setIndex, [value, transfer.osi_names[setIndex]?.[1]])),\n        },\n        {\n            type: 'input',\n            label: t('Station English name'),\n            value: transfer.osi_names[setIndex]?.[1],\n            hidden: ![RmgStyle.MTR].includes(style),\n            onChange: value =>\n                dispatch(updateStationOsiName(selectedStation, setIndex, [transfer.osi_names[setIndex]?.[0], value])),\n        },\n        {\n            type: 'switch',\n            label: t('Paid area'),\n            isChecked: transfer.paid_area,\n            onChange: checked => dispatch(updateStationPaidArea(selectedStation, checked)),\n            hidden: ![RmgStyle.MTR].includes(style) || setIndex !== 0,\n            oneLine: true,\n        },\n    ];\n\n    const handleAdd = (i: number) => (info: InterchangeInfo) => {\n        dispatch(addInterchange(selectedStation, i, info));\n    };\n\n    const handleDelete = (i: number) => (j: number) => {\n        dispatch(removeInterchange(selectedStation, i, j));\n    };\n\n    const handleUpdate = (i: number) => (j: number, info: InterchangeInfo) => {\n        dispatch(updateInterchange(selectedStation, i, j, info));\n    };\n\n    const handleAddInterchangeGroup = () => {\n        dispatch(\n            addInterchange(selectedStation, transfer.info.length, [theme[0], '', '#AAAAAA', MonoColour.white, '', ''])\n        );\n    };\n\n    return (\n        <VStack align=\"flex-start\" p={1}>\n            <Flex w=\"100%\">\n                <Heading as=\"h5\" size=\"sm\" mr=\"auto\">\n                    {t('StationSidePanel.interchange.title')}\n                </Heading>\n\n                {style === RmgStyle.MTR && (\n                    <RmgButtonGroup\n                        selections={[\n                            { label: t('Text on the left'), value: ShortDirection.left },\n                            { label: t('Text on the right'), value: ShortDirection.right },\n                        ]}\n                        defaultValue={transfer.tick_direc}\n                        onChange={value => dispatch(updateStationTickDirection(selectedStation, value))}\n                    />\n                )}\n            </Flex>\n\n            {transfer.info.map((infoList, i) => (\n                <Fragment key={i}>\n                    <Heading as=\"h6\" size=\"xs\">\n                        {i === 0\n                            ? t('StationSidePanel.interchange.within')\n                            : i === 1\n                            ? t('StationSidePanel.interchange.outStation')\n                            : t('StationSidePanel.interchange.outSystem')}\n                    </Heading>\n\n                    {i !== 0 && <RmgFields fields={getOSINameFields(i - 1)} />}\n\n                    <InterchangeCard\n                        interchangeList={infoList}\n                        onAdd={handleAdd(i)}\n                        onDelete={handleDelete(i)}\n                        onUpdate={handleUpdate(i)}\n                    />\n                </Fragment>\n            ))}\n\n            {transfer.info.length < 3 && (\n                <Button\n                    size=\"xs\"\n                    variant=\"ghost\"\n                    alignSelf=\"flex-end\"\n                    leftIcon={<MdAdd />}\n                    onClick={handleAddInterchangeGroup}\n                >\n                    {t('StationSidePanel.interchange.addGroup')}\n                </Button>\n            )}\n        </VStack>\n    );\n}\n","import { Box, Heading } from '@chakra-ui/react';\nimport React from 'react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { Facilities, RmgStyle, Services } from '../../../constants/constants';\nimport {\n    updateStationFacility,\n    updateStationLoopPivot,\n    updateStationServices,\n    updateStationOneLine,\n    updateStationIntPadding,\n    updateStationIntPaddingToAll,\n} from '../../../redux/param/action';\nimport { RmgButtonGroup, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\nexport default function MoreSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedStation = useRootSelector(state => state.app.selectedStation);\n    const { style, loop } = useRootSelector(state => state.param);\n    const { services, facility, loop_pivot, one_line, int_padding } = useRootSelector(\n        state => state.param.stn_list[selectedStation]\n    );\n\n    const serviceSelections = Object.values(Services).map(service => {\n        return {\n            label: t('StationSidePanel.more.' + service),\n            value: service,\n            disabled: service === Services.local && style !== RmgStyle.SHMetro,\n        };\n    });\n\n    const mtrFacilityOptions = {\n        [Facilities.none]: t('StationSidePanel.more.none'),\n        [Facilities.airport]: t('StationSidePanel.more.airport'),\n        [Facilities.hsr]: t('StationSidePanel.more.hsr'),\n        [Facilities.disney]: t('StationSidePanel.more.disney'),\n    };\n\n    const shmetroFacilityOptions = {\n        [Facilities.none]: t('StationSidePanel.more.none'),\n        [Facilities.airport]: t('StationSidePanel.more.airport'),\n        [Facilities.railway]: t('StationSidePanel.more.railway'),\n        [Facilities.disney]: t('StationSidePanel.more.disney'),\n    };\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'custom',\n            label: t('StationSidePanel.more.service'),\n            component: (\n                <RmgButtonGroup\n                    selections={serviceSelections}\n                    defaultValue={services}\n                    onChange={services => dispatch(updateStationServices(selectedStation, services))}\n                    multiSelect\n                />\n            ),\n            hidden: ![RmgStyle.GZMTR, RmgStyle.SHMetro].includes(style),\n        },\n        {\n            type: 'select',\n            label: t('StationSidePanel.more.facility'),\n            value: facility,\n            options: style === RmgStyle.MTR ? mtrFacilityOptions : shmetroFacilityOptions,\n            onChange: value => dispatch(updateStationFacility(selectedStation, value as Facilities)),\n            hidden: ![RmgStyle.MTR, RmgStyle.SHMetro].includes(style),\n        },\n        {\n            type: 'switch',\n            label: t('StationSidePanel.more.pivot'),\n            isChecked: loop_pivot,\n            onChange: checked => dispatch(updateStationLoopPivot(selectedStation, checked)),\n            hidden: ![RmgStyle.SHMetro].includes(style) || !loop,\n            minW: 'full',\n            oneLine: true,\n        },\n        {\n            type: 'switch',\n            label: t('StationSidePanel.more.oneLine'),\n            isChecked: one_line,\n            onChange: checked => dispatch(updateStationOneLine(selectedStation, checked)),\n            hidden: ![RmgStyle.SHMetro].includes(style),\n            minW: 'full',\n            oneLine: true,\n        },\n        {\n            type: 'input',\n            label: t('StationSidePanel.more.intPadding'),\n            value: int_padding.toString(),\n            validator: val => Number.isInteger(val),\n            onChange: val => dispatch(updateStationIntPadding(selectedStation, Number(val))),\n            hidden: ![RmgStyle.SHMetro].includes(style),\n        },\n        {\n            type: 'custom',\n            label: t('StationSidePanel.more.intPaddingApplyGlobal'),\n            component: (\n                <RmgButtonGroup\n                    selections={[{ label: t('StationSidePanel.more.apply'), value: '', disabled: false }]}\n                    defaultValue=\"\"\n                    onChange={_ => dispatch(updateStationIntPaddingToAll(selectedStation))}\n                />\n            ),\n            oneLine: true,\n            hidden: ![RmgStyle.SHMetro].includes(style),\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('StationSidePanel.more.title')}\n            </Heading>\n\n            <RmgFields fields={fields} />\n        </Box>\n    );\n}\n","import { Box, Heading, Text } from '@chakra-ui/react';\nimport React from 'react';\nimport { BranchStyle, Direction } from '../../../constants/constants';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport {\n    flipStationBranchPosition,\n    updateStationBranchFirstStation,\n    updateStationBranchType,\n} from '../../../redux/param/action';\nimport { RmgCard, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\nexport default function BranchSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedStation = useRootSelector(state => state.app.selectedStation);\n    const stationList = useRootSelector(state => state.param.stn_list);\n    const { parents, children, branch } = stationList[selectedStation];\n\n    const branchOptions = {\n        [BranchStyle.through]: t('StationSidePanel.branch.through'),\n        [BranchStyle.nonThrough]: t('StationSidePanel.branch.nonThrough'),\n    };\n\n    const getFirstStationOptions = (direction: Direction) => {\n        return (direction === Direction.left ? parents : children).reduce<Record<string, string>>(\n            (acc, cur) => ({ ...acc, [cur]: stationList[cur].name.join(' ') }),\n            {}\n        );\n    };\n\n    const positionOptions = {\n        upper: t('StationSidePanel.branch.upper'),\n        lower: t('StationSidePanel.branch.lower'),\n    };\n\n    const getFields = (direction: Direction): RmgFieldsField[] => {\n        if (branch[direction].length) {\n            return [\n                {\n                    type: 'select',\n                    label: t('StationSidePanel.branch.type'),\n                    options: branchOptions,\n                    value: branch[direction][0],\n                    onChange: value =>\n                        dispatch(updateStationBranchType(selectedStation, direction, value as BranchStyle)),\n                },\n                {\n                    type: 'select',\n                    label: t('StationSidePanel.branch.firstStation'),\n                    options: getFirstStationOptions(direction),\n                    value: branch[direction][1],\n                    onChange: value =>\n                        dispatch(updateStationBranchFirstStation(selectedStation, direction, value as string)),\n                },\n                {\n                    type: 'select',\n                    label: t('StationSidePanel.branch.position'),\n                    options: positionOptions,\n                    value:\n                        (direction === Direction.left ? parents : children).indexOf(branch[direction][1]!) === 0\n                            ? 'upper'\n                            : 'lower',\n                    onChange: () => dispatch(flipStationBranchPosition(selectedStation, direction)),\n                },\n            ];\n        } else {\n            return [];\n        }\n    };\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('Branches')}\n            </Heading>\n\n            <Heading as=\"h6\" size=\"xs\">\n                {t('Branch on the left')}\n            </Heading>\n\n            <RmgCard direction=\"column\">\n                {parents.length === 2 ? (\n                    <RmgFields fields={getFields(Direction.left)} />\n                ) : (\n                    <Text as=\"i\" flex={1} align=\"center\" fontSize=\"md\" colorScheme=\"gray\">\n                        {t('No branches found')}\n                    </Text>\n                )}\n            </RmgCard>\n\n            <Heading as=\"h6\" size=\"xs\">\n                {t('Branch on the right')}\n            </Heading>\n\n            <RmgCard direction=\"column\">\n                {children.length === 2 ? (\n                    <RmgFields fields={getFields(Direction.right)} />\n                ) : (\n                    <Text as=\"i\" flex={1} align=\"center\" fontSize=\"md\" colorScheme=\"gray\">\n                        {t('No branches found')}\n                    </Text>\n                )}\n            </RmgCard>\n        </Box>\n    );\n}\n","import { Divider } from '@chakra-ui/react';\nimport React from 'react';\nimport InfoSection from './info-section';\nimport InterchangeSection from './interchange-section';\nimport MoreSection from './more-section';\nimport BranchSection from './branch-section';\nimport { RmgSidePanelBody } from '@railmapgen/rmg-components';\n\nexport default function StationSidePanel() {\n    return (\n        <RmgSidePanelBody>\n            <InfoSection />\n\n            <Divider />\n\n            <InterchangeSection />\n\n            <Divider />\n\n            <BranchSection />\n\n            <Divider />\n\n            <MoreSection />\n        </RmgSidePanelBody>\n    );\n}\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { useRootSelector } from '../../../redux';\nimport { canvasConfig, RmgStyle } from '../../../constants/constants';\nimport {\n    setBranchSpacingPct,\n    setDirectionIndicatorX,\n    setDirectionIndicatorY,\n    setPaddingPercentage,\n    setSvgHeight,\n    setSvgWidth,\n    setYPercentage,\n} from '../../../redux/param/action';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\n\nexport default function LayoutSection() {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const {\n        style: rmgStyle,\n        svgWidth,\n        svg_height,\n        y_pc,\n        branchSpacingPct,\n        padding,\n        direction_gz_x,\n        direction_gz_y,\n        loop,\n    } = useRootSelector(state => state.param);\n\n    const fields: RmgFieldsField[] = [\n        ...canvasConfig[rmgStyle].map<RmgFieldsField>(canvas => ({\n            type: 'input',\n            label: t(`StyleSidePanel.layout.${canvas}Width`),\n            value: svgWidth[canvas].toString(),\n            onChange: val => dispatch(setSvgWidth(Number(val), canvas)),\n        })),\n        {\n            type: 'input',\n            label: t('StyleSidePanel.layout.canvasHeight'),\n            value: svg_height.toString(),\n            onChange: val => dispatch(setSvgHeight(Number(val))),\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.layout.verticalPosition'),\n            value: y_pc,\n            min: 0,\n            max: 100,\n            onChange: val => dispatch(setYPercentage(val)),\n            hidden: ![RmgStyle.MTR, RmgStyle.GZMTR].includes(rmgStyle),\n        },\n        {\n            type: 'slider',\n            label: !loop ? t('Branch spacing') : t('StyleSidePanel.layout.branchSpacingLoop'),\n            value: branchSpacingPct,\n            min: 0,\n            max: loop ? 50 : 100,\n            onChange: val => dispatch(setBranchSpacingPct(val)),\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.layout.padding'),\n            value: padding,\n            min: 0,\n            max: 50,\n            onChange: val => dispatch(setPaddingPercentage(val)),\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.layout.directionGzX'),\n            value: direction_gz_x,\n            min: 0,\n            max: 100,\n            onChange: val => dispatch(setDirectionIndicatorX(val)),\n            hidden: ![RmgStyle.GZMTR].includes(rmgStyle),\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.layout.directionGzY'),\n            value: direction_gz_y,\n            min: 0,\n            max: 100,\n            onChange: val => dispatch(setDirectionIndicatorY(val)),\n            hidden: ![RmgStyle.GZMTR].includes(rmgStyle),\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('StyleSidePanel.layout.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n        </Box>\n    );\n}\n","import React, { useState } from 'react';\nimport { Box, Button, Heading, HStack } from '@chakra-ui/react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport ThemeButton from '../theme-button';\nimport ColourModal from '../../modal/colour-modal/colour-modal';\nimport {\n    customiseDestinationName,\n    flipStationNames,\n    setDirection,\n    setLineName,\n    setLineNum,\n    setPanelType,\n    setPlatform,\n    setPsdNum,\n    setTheme,\n    staggerStationNames,\n    toggleLineNameBeforeDestination,\n} from '../../../redux/param/action';\nimport { PanelTypeGZMTR, PanelTypeShmetro, RmgStyle, ShortDirection } from '../../../constants/constants';\nimport { MdSwapVert } from 'react-icons/md';\nimport { RmgButtonGroup, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\nexport default function DesignSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const {\n        style,\n        theme,\n        line_name: lineName,\n        line_num: lineNum,\n        direction,\n        platform_num: platformNum,\n        psd_num: psdNum,\n        namePosMTR,\n        customiseMTRDest,\n        info_panel_type,\n    } = useRootSelector(state => state.param);\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const directionSelections = [\n        {\n            label: t('StyleSidePanel.design.left'),\n            value: ShortDirection.left,\n        },\n        {\n            label: t('StyleSidePanel.design.right'),\n            value: ShortDirection.right,\n        },\n    ];\n\n    const panelTypeGZMTROptions = Object.values(PanelTypeGZMTR).reduce<Record<string, string>>(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: t('StyleSidePanel.design.' + cur),\n        }),\n        {}\n    );\n\n    const panelTypeSHMetroOptions = Object.values(PanelTypeShmetro).reduce<Record<string, string>>(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: t('StyleSidePanel.design.' + cur),\n        }),\n        {}\n    );\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'custom',\n            label: t('Colour'),\n            component: <ThemeButton theme={theme} onClick={() => setIsModalOpen(true)} />,\n            minW: '40px',\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.zhLineName'),\n            value: lineName[0],\n            onChange: value => dispatch(setLineName([value, lineName[1]])),\n            minW: 130,\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.enLineName'),\n            value: lineName[1],\n            onChange: value => dispatch(setLineName([lineName[0], value])),\n            minW: 130,\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.lineNum'),\n            value: lineNum,\n            onChange: value => dispatch(setLineNum(value)),\n            hidden: ![RmgStyle.GZMTR].includes(style),\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.platformNum'),\n            value: platformNum || '',\n            onChange: value => dispatch(setPlatform(value)),\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.psdNum'),\n            value: psdNum,\n            onChange: value => dispatch(setPsdNum(value)),\n            hidden: ![RmgStyle.GZMTR].includes(style),\n        },\n        {\n            type: 'select',\n            label: t('StyleSidePanel.design.panelType'),\n            value: info_panel_type,\n            options: style === RmgStyle.GZMTR ? panelTypeGZMTROptions : panelTypeSHMetroOptions,\n            onChange: value => dispatch(setPanelType(value as PanelTypeGZMTR | PanelTypeShmetro)),\n            hidden: ![RmgStyle.GZMTR, RmgStyle.SHMetro].includes(style),\n        },\n        {\n            type: 'custom',\n            label: t('StyleSidePanel.design.direction'),\n            component: (\n                <RmgButtonGroup\n                    selections={directionSelections}\n                    defaultValue={direction}\n                    onChange={nextDirection => dispatch(setDirection(nextDirection))}\n                />\n            ),\n            minW: 'full',\n            oneLine: true,\n        },\n    ];\n\n    const staggerNameSelections = [\n        {\n            label: t('StyleSidePanel.design.alternatively'),\n            value: true,\n        },\n        {\n            label: t('StyleSidePanel.design.onOneSide'),\n            value: false,\n        },\n    ];\n\n    const mtrSpecifiedFields: RmgFieldsField[] = [\n        {\n            type: 'custom',\n            label: t('StyleSidePanel.design.nameDisplay'),\n            component: (\n                <HStack>\n                    <RmgButtonGroup\n                        selections={staggerNameSelections}\n                        defaultValue={namePosMTR.isStagger}\n                        onChange={value => dispatch(staggerStationNames(value))}\n                    />\n                    <Button\n                        size=\"xs\"\n                        variant=\"ghost\"\n                        leftIcon={<MdSwapVert />}\n                        onClick={() => dispatch(flipStationNames())}\n                    >\n                        {t('StyleSidePanel.design.flip')}\n                    </Button>\n                </HStack>\n            ),\n            minW: 'full',\n            oneLine: true,\n            hidden: ![RmgStyle.MTR].includes(style),\n        },\n        {\n            type: 'switch',\n            label: t('StyleSidePanel.design.legacyDestination'),\n            isChecked: customiseMTRDest.isLegacy,\n            onChange: checked => dispatch(toggleLineNameBeforeDestination(checked)),\n            hidden: ![RmgStyle.MTR].includes(style),\n            minW: 'full',\n            oneLine: true,\n        },\n        {\n            type: 'switch',\n            label: t('StyleSidePanel.design.overrideTerminal'),\n            isChecked: customiseMTRDest.terminal !== false,\n            onChange: checked => dispatch(customiseDestinationName(checked ? ['', ''] : false)),\n            hidden: ![RmgStyle.MTR].includes(style),\n            minW: 'full',\n            oneLine: true,\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.terminalZhName'),\n            value: customiseMTRDest.terminal ? customiseMTRDest.terminal[0] : '',\n            placeholder: '機場及博覽館',\n            onChange: value =>\n                dispatch(\n                    customiseDestinationName([value, customiseMTRDest.terminal ? customiseMTRDest.terminal[1] : ''])\n                ),\n            hidden: ![RmgStyle.MTR].includes(style) || customiseMTRDest.terminal === false,\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.terminalEnName'),\n            value: customiseMTRDest.terminal ? customiseMTRDest.terminal[1] : '',\n            placeholder: 'Airport and AsiaWorld-Expo',\n            onChange: value =>\n                dispatch(\n                    customiseDestinationName([customiseMTRDest.terminal ? customiseMTRDest.terminal[0] : '', value])\n                ),\n            hidden: ![RmgStyle.MTR].includes(style) || customiseMTRDest.terminal === false,\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('StyleSidePanel.design.title')}\n            </Heading>\n\n            <RmgFields fields={[...fields, ...mtrSpecifiedFields]} minW={130} />\n\n            <ColourModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                defaultTheme={theme}\n                onUpdate={nextTheme => dispatch(setTheme(nextTheme))}\n            />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { setLoop, setLoopBank, setLoopBottomFactor, setLoopLeftAndRightFactor } from '../../../redux/param/action';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\nexport default function LoopSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const { branches } = useRootSelector(state => state.helper);\n    const { loop, loop_info } = useRootSelector(state => state.param);\n    const { bank, left_and_right_factor, bottom_factor } = loop_info;\n\n    // loop line with 2 branches has no bottom_factor and a specialized left_and_right_factor_max\n    const arc: 'major' | 'minor' = 'minor';\n    const branch_stn_ids = branches\n        .flat()\n        .filter(\n            (\n                o => v =>\n                    (o[v] = (o[v] || 0) + 1) === 2\n            )({} as { [stn_id: string]: number })\n        ) // count each occurrence\n        .filter(stn_id => !['linestart', 'lineend'].includes(stn_id)); // find branch stations\n    const _ = Math.abs(branches[0].indexOf(branch_stn_ids[0]) - branches[0].indexOf(branch_stn_ids[1]));\n    const left_and_right_factor_max =\n        branches.length >= 2\n            ? // top length is fixed, change left_and_right_factor only\n              (arc === 'minor' ? Math.min : Math.max)(branches[0].length - 2 - _, _)\n            : Math.floor((branches[0].length - 2 - bottom_factor * 2) / 2);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'switch',\n            label: t('StyleSidePanel.loop.isLoop'),\n            isChecked: loop,\n            onChange: checked => dispatch(setLoop(checked)),\n            minW: 'full',\n            oneLine: true,\n        },\n        {\n            type: 'switch',\n            label: t('StyleSidePanel.loop.isBank'),\n            isChecked: bank,\n            onChange: checked => dispatch(setLoopBank(checked)),\n            minW: 'full',\n            oneLine: true,\n            hidden: !loop,\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.loop.leftRightFactor'),\n            value: left_and_right_factor,\n            min: 0,\n            max: left_and_right_factor_max,\n            onChange: val => dispatch(setLoopLeftAndRightFactor(Math.floor(val))),\n            hidden: !loop,\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.loop.bottomFactor'),\n            value: bottom_factor,\n            min: 0,\n            max: Math.floor((branches[0].length - 2 - left_and_right_factor * 2) / 2),\n            onChange: val => dispatch(setLoopBottomFactor(Math.floor(val))),\n            hidden: !loop || (loop && branches.length > 2),\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('StyleSidePanel.loop.title')}\n            </Heading>\n\n            <RmgFields fields={fields} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { HStack, IconButton } from '@chakra-ui/react';\nimport { Note } from '../../../constants/constants';\nimport { MdDelete } from 'react-icons/md';\nimport { RmgCard, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\ninterface GZMTRNoteCardProps {\n    note: Note;\n    onUpdate?: (value: Note) => void;\n    onDelete?: () => void;\n}\n\nexport default function GZMTRNoteCard(props: GZMTRNoteCardProps) {\n    const { note, onUpdate, onDelete } = props;\n    const { t } = useTranslation();\n\n    const fields1: RmgFieldsField[] = [\n        {\n            type: 'textarea',\n            label: t('StyleSidePanel.note.zhNote'),\n            value: note[0],\n            onChange: value => onUpdate?.([value, note[1], note[2], note[3], note[4]]),\n        },\n        {\n            type: 'textarea',\n            label: t('StyleSidePanel.note.enNote'),\n            value: note[1],\n            onChange: value => onUpdate?.([note[0], value, note[2], note[3], note[4]]),\n        },\n        {\n            type: 'switch',\n            label: t('StyleSidePanel.note.border'),\n            isChecked: note[4],\n            onChange: value => onUpdate?.([note[0], note[1], note[2], note[3], value]),\n            oneLine: true,\n        },\n    ];\n\n    const fields2: RmgFieldsField[] = [\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.note.positionX'),\n            value: note[2],\n            min: 0,\n            max: 100,\n            onChange: value => onUpdate?.([note[0], note[1], value, note[3], note[4]]),\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.note.positionY'),\n            value: note[3],\n            min: 0,\n            max: 100,\n            onChange: value => onUpdate?.([note[0], note[1], note[2], value, note[4]]),\n        },\n    ];\n\n    return (\n        <RmgCard direction=\"column\">\n            <RmgFields fields={fields1} minW=\"full\" />\n            <HStack spacing={0.5} sx={{ '&>div': { flex: 1 } }}>\n                <RmgFields fields={fields2} />\n\n                <IconButton\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    aria-label={t('StyleSidePanel.note.remove')}\n                    onClick={() => onDelete?.()}\n                    icon={<MdDelete />}\n                />\n            </HStack>\n        </RmgCard>\n    );\n}\n","import React from 'react';\nimport { Box, Button, Heading, VStack } from '@chakra-ui/react';\nimport GZMTRNoteCard from './gzmtr-note-card';\nimport { addNote, removeNote, updateNote } from '../../../redux/param/action';\nimport { MdAdd } from 'react-icons/md';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { useTranslation } from 'react-i18next';\n\nexport default function GZMTRNoteSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const notesGZMTR = useRootSelector(state => state.param.notesGZMTR);\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('StyleSidePanel.note.title')}\n            </Heading>\n\n            <VStack spacing={0.5}>\n                {notesGZMTR.map((note, i) => (\n                    <GZMTRNoteCard\n                        key={i}\n                        note={note}\n                        onUpdate={value => dispatch(updateNote(i, value))}\n                        onDelete={() => dispatch(removeNote(i))}\n                    />\n                ))}\n\n                <Button\n                    size=\"xs\"\n                    variant=\"ghost\"\n                    leftIcon={<MdAdd />}\n                    alignSelf=\"flex-end\"\n                    onClick={() => dispatch(addNote())}\n                >\n                    {t('StyleSidePanel.note.add')}\n                </Button>\n            </VStack>\n        </Box>\n    );\n}\n","import { Divider } from '@chakra-ui/react';\nimport React from 'react';\nimport { useRootSelector } from '../../../redux';\nimport { RmgStyle } from '../../../constants/constants';\nimport LayoutSection from './layout-section';\nimport DesignSection from './design-section';\nimport LoopSection from './loop-section';\nimport { RmgSidePanelBody } from '@railmapgen/rmg-components';\nimport GZMTRNoteSection from './gzmtr-note-section';\n\nexport default function StyleSidePanel() {\n    const { style } = useRootSelector(state => state.param);\n\n    return (\n        <RmgSidePanelBody>\n            <LayoutSection />\n\n            <Divider />\n\n            <DesignSection />\n\n            {style === RmgStyle.GZMTR && (\n                <>\n                    <Divider />\n\n                    <GZMTRNoteSection />\n                </>\n            )}\n\n            {style === RmgStyle.SHMetro && (\n                <>\n                    <Divider />\n\n                    <LoopSection />\n                </>\n            )}\n        </RmgSidePanelBody>\n    );\n}\n","import { StationDict } from './constants/constants';\n\n/**\n * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).\n */\nexport const getYShareMTR = (stnId: string, stnList: StationDict): -1 | 0 | 1 => {\n    if (\n        ['linestart', 'lineend'].includes(stnId) ||\n        stnList[stnId].parents.length > 1 ||\n        stnList[stnId].children.length > 1\n    ) {\n        return 0;\n    }\n    var stnPred = stnList[stnId].parents[0];\n    if (stnPred) {\n        // parent exist\n        if (stnList[stnPred].children.length === 1) {\n            // no sibling, then y same as parent\n            return getYShareMTR(stnPred, stnList);\n        } else {\n            // sibling exists, then y depends on its idx of being children\n            return stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n        }\n    } else {\n        // no parent, must be linestart\n        return 0;\n    }\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n    Alert,\n    AlertIcon,\n    Box,\n    Button,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { checkStationCouldBeRemoved, removeStation } from '../../redux/param/remove-station-action';\nimport { setSelectedStation, setSidePanelMode } from '../../redux/app/app-slice';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { Events, SidePanelMode } from '../../constants/constants';\nimport { removeInvalidColineOnRemoveStation } from '../../redux/param/coline-action';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface RemoveConfirmModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function RemoveConfirmModal(props: RemoveConfirmModalProps) {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n\n    const dispatch = useRootDispatch();\n    const selectedStation = useRootSelector(state => state.app.selectedStation);\n\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        if (!isOpen) {\n            setError(false);\n        }\n    }, [isOpen]);\n\n    const handleConfirm = () => {\n        const result = dispatch(checkStationCouldBeRemoved(selectedStation));\n        if (result) {\n            onClose();\n\n            // close side panel\n            dispatch(setSidePanelMode(SidePanelMode.CLOSE));\n\n            // reset selected station\n            dispatch(setSelectedStation('linestart'));\n\n            dispatch(removeInvalidColineOnRemoveStation(selectedStation));\n            dispatch(removeStation(selectedStation));\n        } else {\n            setError(true);\n        }\n\n        rmgRuntime.event(Events.REMOVE_STATION, { success: result });\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                {error && (\n                    <Alert status=\"error\" variant=\"solid\" size=\"xs\">\n                        <AlertIcon />\n                        {t('Unable to remove this station.')}\n                    </Alert>\n                )}\n                <Box position=\"relative\">\n                    <ModalHeader>{t('Remove station')}</ModalHeader>\n                    <ModalCloseButton />\n                </Box>\n\n                <ModalBody>{t('Are you sure to remove station? You cannot undo this action.')}</ModalBody>\n\n                <ModalFooter>\n                    <Button onClick={onClose}>{t('Cancel')}</Button>\n                    <Button colorScheme=\"primary\" onClick={handleConfirm} ml={3}>\n                        {t('Confirm')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import { RootDispatch, RootState } from '../index';\nimport { getYShareMTR } from '../../methods';\nimport { StationDict } from '../../constants/constants';\nimport { setStationsBulk } from './action';\n\n/**\n * Return false when current algo can not handle this kind of station removal.\n * MUST BE CALLED AND CHECKED BEFORE removeStation!!!\n */\nexport const checkStationCouldBeRemoved = (stationId: string) => {\n    return (dispatch: RootDispatch, getState: () => RootState): boolean => {\n        const { stn_list: stationList, current_stn_idx: currentStationIndex } = getState().param;\n\n        if (stationId === currentStationIndex) {\n            console.log('removeStation():: failed as current station cannot be deleted');\n            return false;\n        }\n\n        const { parents, children } = stationList[stationId];\n\n        if (Object.keys(stationList).length === 4) {\n            console.log('removeStation():: failed as only 2 stations remaining');\n            return false;\n        } else if (parents.length === 2 && children.length === 2) {\n            // Todo: rewrite, join two branches rather than reject?\n            console.log('removeStation():: failed as branches on both sides cannot be combined');\n            return false;\n        }\n\n        // reject if station is the last one on main branch\n        const isNotLastMainBranchStn = Object.keys(stationList).some(\n            id => ![stationId, 'linestart', 'lineend'].includes(id) && getYShareMTR(id, stationList) === 0\n        );\n        if (!isNotLastMainBranchStn) {\n            console.log('removeStation():: failed as selected station is the only station without siblings');\n            return false;\n        }\n\n        return true;\n    };\n};\n\nexport const removeStation = (stationId: string) => {\n    // checkStationCouldBeRemoved BEFORE removeStation!!!\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const stationList = getState().param.stn_list;\n        const { parents, children } = stationList[stationId];\n\n        let newStnList = JSON.parse(JSON.stringify(stationList)) as StationDict;\n\n        if (parents.length === 2 || children.length === 2) {\n            /**\n             * stn1 - stn2 - stn3\n             *         ^   \\\n             *               stn4\n             */\n            parents.forEach(parId => {\n                newStnList[parId].children = children;\n            });\n            children.forEach(childId => {\n                newStnList[childId].parents = parents;\n            });\n            if (parents.length === 1) {\n                newStnList[parents[0]].branch.right = newStnList[stationId].branch.right;\n            }\n            if (children.length === 1) {\n                newStnList[children[0]].branch.left = newStnList[stationId].branch.left;\n            }\n        } else if (stationList[parents[0]].children.length === 2 && stationList[children[0]].parents.length === 2) {\n            /**\n             * stn1 -     stn2    - stn3\n             *      \\      ^      /\n             *        stn4 - stn5\n             */\n            newStnList = {\n                ...stationList,\n                [parents[0]]: {\n                    ...stationList[parents[0]],\n                    children: stationList[parents[0]].children.filter(id => id !== stationId),\n                    branch: {\n                        ...stationList[parents[0]].branch,\n                        right: [],\n                    },\n                },\n                [children[0]]: {\n                    ...stationList[children[0]],\n                    parents: stationList[children[0]].parents.filter(id => id !== stationId),\n                    branch: {\n                        ...stationList[children[0]].branch,\n                        left: [],\n                    },\n                },\n            };\n        } else {\n            /**\n             * stn1 - stn2\n             *      \\\n             *        stn3 - stn4\n             *         ^\n             */\n\n            // parents have length 1\n            parents.forEach(parId => {\n                var idx = newStnList[parId].children.indexOf(stationId);\n                if (children.length) {\n                    newStnList[parId].children[idx] = children[0];\n                } else {\n                    // Right dest\n                    newStnList[parId].children.splice(idx, 1);\n                }\n\n                if (newStnList[parId].branch.right[1] === stationId) {\n                    newStnList[parId].branch.right[1] = children[0];\n                }\n            });\n\n            // children have length 1\n            children.forEach(childId => {\n                var idx = newStnList[childId].parents.indexOf(stationId);\n                if (parents.length) {\n                    newStnList[childId].parents[idx] = parents[0];\n                } else {\n                    // Left dest\n                    newStnList[childId].parents.splice(idx, 1);\n                }\n\n                if (newStnList[childId].branch.left[1] === stationId) {\n                    newStnList[childId].branch.left[1] = parents[0];\n                }\n            });\n        }\n\n        delete newStnList[stationId];\n        dispatch(setStationsBulk(newStnList));\n    };\n};\n","import { Button, HStack } from '@chakra-ui/react';\nimport { RmgSidePanelFooter } from '@railmapgen/rmg-components';\nimport React, { useState } from 'react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport RemoveConfirmModal from '../../modal/remove-confirm-modal';\nimport { setCurrentStation } from '../../../redux/param/action';\nimport { useTranslation } from 'react-i18next';\n\nexport default function StationSidePanelFooter() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedStation = useRootSelector(state => state.app.selectedStation);\n\n    const [isRemoveModalOpen, setIsRemoveModalOpen] = useState(false);\n\n    return (\n        <RmgSidePanelFooter>\n            <HStack>\n                <Button size=\"sm\" variant=\"outline\" onClick={() => dispatch(setCurrentStation(selectedStation))}>\n                    {t('StationSidePanel.footer.current')}\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" onClick={() => setIsRemoveModalOpen(true)}>\n                    {t('StationSidePanel.footer.remove')}\n                </Button>\n            </HStack>\n\n            <RemoveConfirmModal isOpen={isRemoveModalOpen} onClose={() => setIsRemoveModalOpen(false)} />\n        </RmgSidePanelFooter>\n    );\n}\n","import { RmgCard, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport React, { useState } from 'react';\nimport { ColineInfo, InterchangeInfo, Theme } from '../../../constants/constants';\nimport ThemeButton from '../theme-button';\nimport ColourModal from '../../modal/colour-modal/colour-modal';\nimport { HStack, IconButton } from '@chakra-ui/react';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\n\ninterface ColineCardProps {\n    colineInfo: ColineInfo;\n    routeOptions: Record<string, string>;\n    onUpdateRoute?: (route: string) => void;\n    onUpdateColourInfo?: (colourInfo: InterchangeInfo) => void;\n    onDelete?: (colourIndex: number) => void;\n}\n\nexport default function ColineCard(props: ColineCardProps) {\n    const { colineInfo, routeOptions, onUpdateRoute, onUpdateColourInfo, onDelete } = props;\n    const { t } = useTranslation();\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const fields1: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: 'Route',\n            value: [colineInfo.from, colineInfo.to].join(','),\n            options: routeOptions,\n            onChange: value => onUpdateRoute?.(value as string),\n        },\n    ];\n\n    const fields2: RmgFieldsField[] = [\n        {\n            type: 'custom',\n            label: t('Colour'),\n            component: (\n                <ThemeButton\n                    theme={[\n                        colineInfo.colors[0][0],\n                        colineInfo.colors[0][1],\n                        colineInfo.colors[0][2],\n                        colineInfo.colors[0][3],\n                    ]}\n                    onClick={() => setIsModalOpen(true)}\n                />\n            ),\n        },\n        {\n            type: 'input',\n            label: t('Chinese name'),\n            value: colineInfo.colors[0][4],\n            minW: 120,\n            onChange: value =>\n                onUpdateColourInfo?.([\n                    colineInfo.colors[0][0],\n                    colineInfo.colors[0][1],\n                    colineInfo.colors[0][2],\n                    colineInfo.colors[0][3],\n                    value,\n                    colineInfo.colors[0][5],\n                ]),\n        },\n        {\n            type: 'input',\n            label: t('English name'),\n            value: colineInfo.colors[0][5],\n            minW: 120,\n            onChange: value =>\n                onUpdateColourInfo?.([\n                    colineInfo.colors[0][0],\n                    colineInfo.colors[0][1],\n                    colineInfo.colors[0][2],\n                    colineInfo.colors[0][3],\n                    colineInfo.colors[0][4],\n                    value,\n                ]),\n        },\n    ];\n\n    return (\n        <RmgCard direction=\"column\">\n            <RmgFields fields={fields1} minW=\"full\" />\n            <HStack spacing={0.5}>\n                <RmgFields fields={fields2} />\n\n                <IconButton\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    aria-label=\"Delete colour for route\"\n                    onClick={() => onDelete?.(0)}\n                    icon={<MdDelete />}\n                />\n            </HStack>\n\n            <ColourModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                defaultTheme={colineInfo.colors[0].slice(0, 4) as Theme}\n                onUpdate={theme => onUpdateColourInfo?.([...theme, colineInfo.colors[0][4], colineInfo.colors[0][5]])}\n            />\n        </RmgCard>\n    );\n}\n","import React from 'react';\nimport { Button, Heading, VStack } from '@chakra-ui/react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport {\n    addColine,\n    findAllColinesInBranch,\n    getPossibleCombinations,\n    removeColineColor,\n    updateColine,\n    updateColineColor,\n} from '../../../redux/param/coline-action';\nimport ColineCard from './coline-card';\nimport { MdAdd } from 'react-icons/md';\nimport { setGlobalAlert } from '../../../redux/app/app-slice';\nimport { useTranslation } from 'react-i18next';\nimport { MonoColour } from '@railmapgen/rmg-palette-resources';\n\nexport default function ColineSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const { theme, stn_list: stationList } = useRootSelector(state => state.param);\n\n    const colineInfoList = dispatch(findAllColinesInBranch(selectedBranch));\n    const possibleCombinations = dispatch(getPossibleCombinations(selectedBranch));\n\n    const getStationPairDisplayName = (pair: [string, string]) => {\n        return pair.map(id => stationList[id].name.join(' - ')).join(' ~ ');\n    };\n\n    const routeOptions = possibleCombinations.reduce<Record<string, string>>(\n        (acc, cur) => ({\n            ...acc,\n            [cur.join(',')]: getStationPairDisplayName(cur),\n        }),\n        {}\n    );\n\n    const handleAddTrackSharing = () => {\n        console.log(\n            `ColineSection.handleAddTrackSharing():: Adding track sharing to branch ${selectedBranch} with default combination`,\n            possibleCombinations[0]\n        );\n        dispatch(\n            addColine(possibleCombinations[0][0], possibleCombinations[0][1], [\n                [theme[0], '', '#AAAAAA', MonoColour.white, '', ''],\n            ])\n        );\n    };\n\n    const handleUpdateRoute = (colineId: string) => (route: string) => {\n        const [from, to] = route.split(',');\n        console.log(`ColineSection.handleUpdateRoute():: Updating route, colineId=${colineId}, from=${from}, to=${to}`);\n\n        try {\n            dispatch(updateColine(colineId, from, to));\n        } catch {\n            dispatch(setGlobalAlert({ status: 'error', message: 'Unable to draw this share track.' }));\n        }\n    };\n\n    const handleDeleteColour = (colineId: string, colourIndex: number) => {\n        dispatch(removeColineColor(colineId, colourIndex));\n    };\n\n    return (\n        <VStack align=\"flex-start\" p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('BranchSidePanel.coline.title')}\n            </Heading>\n\n            {Object.entries(colineInfoList).map(([id, colineInfo]) => (\n                <ColineCard\n                    key={id}\n                    colineInfo={colineInfo}\n                    routeOptions={routeOptions}\n                    onUpdateRoute={handleUpdateRoute(id)}\n                    onUpdateColourInfo={colourInfo => dispatch(updateColineColor(id, 0, colourInfo))}\n                    onDelete={colourIndex => handleDeleteColour(id, colourIndex)}\n                />\n            ))}\n\n            {(selectedBranch === 0 || Object.keys(colineInfoList).length === 0) && (\n                <Button\n                    size=\"xs\"\n                    variant=\"ghost\"\n                    alignSelf=\"flex-end\"\n                    leftIcon={<MdAdd />}\n                    onClick={handleAddTrackSharing}\n                >\n                    {t('BranchSidePanel.coline.add')}\n                </Button>\n            )}\n        </VStack>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n} from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { Events, RmgStyle } from '../../constants/constants';\nimport { isColineBranch } from '../../redux/param/coline-action';\nimport { autoNumbering } from '../../redux/param/action';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface AutoNumModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function AutoNumModal(props: AutoNumModalProps) {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const { style, stn_list: stationList } = useRootSelector(state => state.param);\n    const branches = useRootSelector(state => state.helper.branches);\n\n    const [where, setWhere] = useState(selectedBranch);\n    const [from, setFrom] = useState('1');\n    const [maxLength, setMaxLength] = useState('2');\n    const [sort, setSort] = useState<'asc' | 'desc'>('asc');\n\n    useEffect(() => {\n        setWhere(selectedBranch);\n    }, [selectedBranch]);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('AutoNumModal.where'),\n            value: where,\n            options: {\n                ...branches.reduce(\n                    (acc, cur, idx) => ({\n                        ...acc,\n                        [idx]:\n                            idx === 0\n                                ? t('AutoNumModal.main')\n                                : style !== RmgStyle.SHMetro || !isColineBranch(cur, stationList)\n                                ? t('AutoNumModal.branch') + ' ' + idx\n                                : t('AutoNumModal.external') + ' ' + idx,\n                    }),\n                    {}\n                ),\n            },\n            onChange: value => setWhere(value as number),\n        },\n        {\n            type: 'input',\n            label: t('AutoNumModal.from'),\n            value: from,\n            validator: value => !isNaN(Number(value)),\n            onChange: setFrom,\n            debouncedDelay: 0,\n        },\n        {\n            type: 'input',\n            label: t('AutoNumModal.maxLength'),\n            validator: value => !isNaN(Number(value)),\n            value: maxLength,\n            onChange: setMaxLength,\n            debouncedDelay: 0,\n        },\n        {\n            type: 'select',\n            label: t('AutoNumModal.sort'),\n            value: sort,\n            options: {\n                asc: t('AutoNumModal.asc'),\n                desc: t('AutoNumModal.desc'),\n            },\n            onChange: value => setSort(value as 'asc' | 'desc'),\n        },\n    ];\n\n    const handleSubmit = () => {\n        dispatch(autoNumbering(where, Number(from), Number(maxLength), sort));\n        onClose();\n        rmgRuntime.event(Events.AUTO_NUMBERING, {});\n    };\n\n    const isSubmitDisabled = !from || !maxLength || isNaN(Number(from)) || isNaN(Number(maxLength));\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('AutoNumModal.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"primary\" isDisabled={isSubmitDisabled} onClick={handleSubmit}>\n                        {t('Confirm')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import { RootDispatch, RootState } from '..';\nimport { Direction, StationDict } from '../../constants/constants';\nimport { setStationsBulk } from './action';\n\nexport const getBranchType = (branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): 1 | 2 => {\n        const branches = getState().helper.branches;\n        const branch = branches[branchIndex];\n\n        if (branch.includes('linestart') || branch.includes('lineend')) {\n            return 1;\n        } else {\n            return 2;\n        }\n    };\n};\n\nexport const getPossibleStations = (branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): string[] => {\n        const { branches } = getState().helper;\n        const mainBranch = branches[0];\n        const branch = branches[branchIndex];\n        return mainBranch.slice(mainBranch.indexOf(branch[0]) + 1, mainBranch.indexOf(branch.slice(-1)[0]));\n    };\n};\n\nexport const isStationValid2ConnectBranch = (stationId: string, branchIndex: number) => {\n    return (dispatch: RootDispatch): boolean => {\n        const branchType = dispatch(getBranchType(branchIndex));\n\n        if (branchType === 2) {\n            console.log('isStationValid2ConnectBranch():: failed as current branch has 2 connected ends');\n            return false;\n        }\n\n        const possibleStations = dispatch(getPossibleStations(branchIndex));\n\n        if (!possibleStations.includes(stationId)) {\n            console.log('isStationValid2ConnectBranch():: failed as the target station is invalid');\n            return false;\n        }\n        return true;\n    };\n};\n\nexport const connect2MainLine = (stationId: string, branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): boolean => {\n        const isValid = dispatch(isStationValid2ConnectBranch(stationId, branchIndex));\n        if (!isValid) {\n            return false;\n        }\n        const { branches } = getState().helper;\n        const stationList = getState().param.stn_list;\n        const branch = branches[branchIndex];\n\n        if (branch[0] === 'linestart') {\n            const nextStationList: StationDict = {\n                ...stationList,\n                [branch[1]]: {\n                    ...stationList[branch[1]],\n                    parents: [stationId],\n                },\n                [stationId]: {\n                    ...stationList[stationId],\n                    children: stationList.linestart.children.map(id =>\n                        id === branch[1] ? id : stationList[stationId].children[0]\n                    ),\n                    branch: {\n                        left: [],\n                        right: stationList.linestart.branch.right,\n                    },\n                },\n                linestart: {\n                    ...stationList.linestart,\n                    children: stationList.linestart.children.filter(id => id !== branch[1]),\n                    branch: {\n                        left: [],\n                        right: [],\n                    },\n                },\n            };\n            dispatch(setStationsBulk(nextStationList));\n            return true;\n        } else {\n            const seconndLastId: string = branch.slice(-2)[0];\n            const nextStationList: StationDict = {\n                ...stationList,\n                [seconndLastId]: {\n                    ...stationList[seconndLastId],\n                    children: [stationId],\n                },\n                [stationId]: {\n                    ...stationList[stationId],\n                    parents: stationList.lineend.parents.map(id =>\n                        id === seconndLastId ? id : stationList[stationId].parents[0]\n                    ),\n                    branch: {\n                        right: [],\n                        left: stationList.lineend.branch.left,\n                    },\n                },\n                lineend: {\n                    ...stationList.lineend,\n                    parents: stationList.lineend.parents.filter(id => id !== seconndLastId),\n                    branch: {\n                        left: [],\n                        right: [],\n                    },\n                },\n            };\n            dispatch(setStationsBulk(nextStationList));\n            return true;\n        }\n    };\n};\n\nexport const getPossibleDirection = (branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): Direction[] => {\n        const { branches } = getState().helper;\n        const stationList = getState().param.stn_list;\n        const mainBranch = branches[0];\n        const branch = branches[branchIndex];\n        const branchType = dispatch(getBranchType(branchIndex));\n        if (branchType !== 2) {\n            console.log('getPossibleDirection():: failed as there is no possible direction');\n            return [];\n        }\n        const beginStation = mainBranch.indexOf(branch[0]);\n        const leftStationIdList = mainBranch.slice(0, beginStation);\n        const endStation = mainBranch.indexOf(branch.slice(-1)[0]);\n        const rightStationIdList = mainBranch.slice(endStation + 1);\n\n        const isLeftPossible = leftStationIdList.every(stationId => {\n            return stationList[stationId].children.length <= 1 && stationList[stationId].parents.length <= 1;\n        });\n\n        const isRightPossible = rightStationIdList.every(stationId => {\n            return stationList[stationId].children.length <= 1 && stationList[stationId].parents.length <= 1;\n        });\n\n        if (isLeftPossible) {\n            if (isRightPossible) {\n                return [Direction.left, Direction.right];\n            } else {\n                return [Direction.left];\n            }\n        } else {\n            if (isRightPossible) {\n                return [Direction.right];\n            } else {\n                return [];\n            }\n        }\n    };\n};\n\nexport const disconnectFromMainLine = (direction: Direction, branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): boolean => {\n        const directionList = dispatch(getPossibleDirection(branchIndex));\n        if (!directionList.includes(direction)) {\n            console.log('disconnectFromMainLine():: failed as the aim direction is not in the possible direction list');\n            return false;\n        }\n        const { branches } = getState().helper;\n        const stationList = getState().param.stn_list;\n        const mainBranch = branches[0];\n        const branch = branches[branchIndex];\n\n        if (direction === Direction.left) {\n            const beginStation = branch[0];\n\n            const nextStationList: StationDict = {\n                ...stationList,\n                [branch[1]]: {\n                    ...stationList[branch[1]],\n                    parents: ['linestart'],\n                },\n                [beginStation]: {\n                    ...stationList[beginStation],\n                    children: stationList[beginStation].children.filter(id => id !== branch[1]),\n                    branch: {\n                        right: [],\n                        left: [],\n                    },\n                },\n                linestart: {\n                    ...stationList.linestart,\n                    children: stationList[beginStation].children.map(id => (id === branch[1] ? id : mainBranch[1])),\n                    branch: {\n                        left: [],\n                        right: stationList[beginStation].branch.right,\n                    },\n                },\n            };\n            dispatch(setStationsBulk(nextStationList));\n            return true;\n        } else {\n            const endStation = branch.slice(-1)[0];\n            const secondEndStation = branch.slice(-2)[0];\n            const nextStationList: StationDict = {\n                ...stationList,\n                [secondEndStation]: {\n                    ...stationList[secondEndStation],\n                    children: ['lineend'],\n                },\n                [endStation]: {\n                    ...stationList[endStation],\n                    parents: stationList[endStation].parents.filter(id => id !== secondEndStation),\n                    branch: {\n                        right: [],\n                        left: [],\n                    },\n                },\n                lineend: {\n                    ...stationList.lineend,\n                    parents: stationList[endStation].parents.map(id =>\n                        id === secondEndStation ? id : mainBranch.slice(-2)[0]\n                    ),\n                    branch: {\n                        right: [],\n                        left: stationList[endStation].branch.left,\n                    },\n                },\n            };\n            dispatch(setStationsBulk(nextStationList));\n            return true;\n        }\n    };\n};\n","import { Button, Flex } from '@chakra-ui/react';\nimport { RmgCard, RmgDebouncedInput, RmgLabel, RmgSelect } from '@railmapgen/rmg-components';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Direction, Events } from '../../../constants/constants';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { setGlobalAlert } from '../../../redux/app/app-slice';\nimport {\n    connect2MainLine,\n    disconnectFromMainLine,\n    getBranchType,\n    getPossibleDirection,\n    getPossibleStations,\n} from '../../../redux/param/connect-disconnect-branch';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface ConnectDisconnectCardProps {\n    direction: Direction;\n}\n\nexport default function ConnectDisconnectCard(props: ConnectDisconnectCardProps) {\n    const { direction } = props;\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const { branches } = useRootSelector(state => state.helper);\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const { style, stn_list } = useRootSelector(state => state.param);\n\n    const [isEditing, setIsEditing] = useState(false);\n    const [selection, setSelection] = useState('');\n\n    const trimedBranch = branches[selectedBranch].filter(id => !['linestart', 'lineend'].includes(id));\n    const branchEndId = direction === Direction.left ? trimedBranch[0] : trimedBranch.slice(-1)[0];\n    const branchEndInfo = stn_list[branchEndId];\n\n    const possibleStations = dispatch(getPossibleStations(selectedBranch));\n    const branchType = dispatch(getBranchType(selectedBranch));\n    const possibleDirection = dispatch(getPossibleDirection(selectedBranch));\n\n    const isConnectable = branchType === 1 && !branches[0].includes(branchEndId);\n    const isDisconnectable = possibleDirection.includes(direction);\n\n    const options = possibleStations.reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stn_list[cur]?.name.join(' - '),\n        }),\n        { '': t('Please select...') }\n    );\n\n    const handleConnect = () => {\n        const result = dispatch(connect2MainLine(selection, selectedBranch));\n        if (result) {\n            setIsEditing(false);\n        } else {\n            dispatch(setGlobalAlert({ status: 'error', message: t('Unable to connect to main line.') }));\n        }\n        rmgRuntime.event(Events.CONNECT_BRANCH, { style, success: result });\n    };\n\n    const handleDisconnect = () => {\n        const result = dispatch(disconnectFromMainLine(direction, selectedBranch));\n        if (!result) {\n            dispatch(setGlobalAlert({ status: 'error', message: t('Unable to disconnect from main line.') }));\n        }\n        rmgRuntime.event(Events.DISCONNECT_BRANCH, { style, success: result });\n    };\n\n    return (\n        <RmgCard direction=\"column\">\n            <Flex alignItems=\"center\">\n                <RmgLabel label={t('Station name')} flex={1}>\n                    <RmgDebouncedInput defaultValue={branchEndInfo.name.join(' ')} isDisabled={true} />\n                </RmgLabel>\n\n                {isEditing ? (\n                    <Button mx={1} size=\"sm\" variant=\"outline\" onClick={() => setIsEditing(false)}>\n                        {t('Cancel')}\n                    </Button>\n                ) : isConnectable ? (\n                    <Button mx={1} size=\"sm\" variant=\"solid\" colorScheme=\"primary\" onClick={() => setIsEditing(true)}>\n                        {t('Connect to main line')}\n                    </Button>\n                ) : (\n                    <Button\n                        mx={1}\n                        size=\"sm\"\n                        variant=\"solid\"\n                        colorScheme=\"primary\"\n                        onClick={handleDisconnect}\n                        isDisabled={!isDisconnectable}\n                    >\n                        {t('Disconnect from main line')}\n                    </Button>\n                )}\n            </Flex>\n\n            {isEditing && (\n                <Flex alignItems=\"center\">\n                    <RmgLabel label={t('Target station')} flex={1}>\n                        <RmgSelect\n                            defaultValue={selection}\n                            options={options}\n                            disabledOptions={['']}\n                            onChange={({ target: { value } }) => setSelection(value)}\n                        />\n                    </RmgLabel>\n\n                    <Button\n                        mx={1}\n                        size=\"sm\"\n                        variant=\"solid\"\n                        colorScheme=\"primary\"\n                        onClick={handleConnect}\n                        isDisabled={!selection}\n                    >\n                        {t('Confirm')}\n                    </Button>\n                </Flex>\n            )}\n        </RmgCard>\n    );\n}\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Button, Flex, Heading } from '@chakra-ui/react';\nimport { MdCached, MdFilter1 } from 'react-icons/md';\nimport AutoNumModal from '../../modal/auto-num-modal';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { Direction, Events, RmgStyle } from '../../../constants/constants';\nimport { reverseStations } from '../../../redux/param/action';\nimport ConnectDisconnectCard from './connect-disconnect-card';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\nexport default function ActionSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const style = useRootSelector(state => state.param.style);\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const [isAutoNumModalOpen, setIsAutoNumModalOpen] = useState(false);\n\n    const handleReverseStations = () => {\n        dispatch(reverseStations(style === RmgStyle.SHMetro));\n        rmgRuntime.event(Events.REVERSE_STATIONS, { style });\n    };\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('BranchSidePanel.action.title')}\n            </Heading>\n\n            <Flex\n                wrap=\"wrap\"\n                sx={{\n                    p: 1,\n\n                    '&> *': {\n                        flexShrink: 0,\n                        flexBasis: '100%',\n\n                        '&:not(:first-child)': {\n                            marginTop: 2,\n                        },\n                    },\n                }}\n            >\n                {selectedBranch !== 0 && style !== RmgStyle.SHMetro && (\n                    <>\n                        <Heading as=\"h6\" size=\"xs\">\n                            {t('Branch left end')}\n                        </Heading>\n                        <ConnectDisconnectCard direction={Direction.left} />\n                        <Heading as=\"h6\" size=\"xs\">\n                            {t('Branch right end')}\n                        </Heading>\n                        <ConnectDisconnectCard direction={Direction.right} />\n                    </>\n                )}\n\n                {style === RmgStyle.GZMTR && (\n                    <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        leftIcon={<MdFilter1 />}\n                        alignSelf=\"flex-end\"\n                        onClick={() => setIsAutoNumModalOpen(true)}\n                    >\n                        {t('BranchSidePanel.action.autoNum')}\n                    </Button>\n                )}\n\n                <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    leftIcon={<MdCached />}\n                    alignSelf=\"flex-end\"\n                    onClick={handleReverseStations}\n                >\n                    {style === RmgStyle.SHMetro\n                        ? t('BranchSidePanel.action.flip')\n                        : t('BranchSidePanel.action.reverse')}\n                </Button>\n            </Flex>\n\n            <AutoNumModal isOpen={isAutoNumModalOpen} onClose={() => setIsAutoNumModalOpen(false)} />\n        </Box>\n    );\n}\n","import { RmgSidePanelBody } from '@railmapgen/rmg-components';\nimport React from 'react';\nimport ColineSection from './coline-section';\nimport { Divider } from '@chakra-ui/react';\nimport ActionSection from './action-section';\nimport { useRootSelector } from '../../../redux';\nimport { RmgStyle } from '../../../constants/constants';\nimport { isColineBranch } from '../../../redux/param/coline-action';\n\nexport default function BranchSidePanel() {\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const { style, stn_list: stationList } = useRootSelector(state => state.param);\n    const branches = useRootSelector(state => state.helper.branches);\n\n    return (\n        <RmgSidePanelBody>\n            {style === RmgStyle.SHMetro &&\n                (selectedBranch === 0 || isColineBranch(branches[selectedBranch], stationList)) && (\n                    <>\n                        <ColineSection />\n                        <Divider />\n                    </>\n                )}\n\n            <ActionSection />\n        </RmgSidePanelBody>\n    );\n}\n","import React, { ReactNode } from 'react';\nimport { useRootSelector } from '../../redux';\nimport { setSidePanelMode } from '../../redux/app/app-slice';\nimport { useDispatch } from 'react-redux';\nimport { SidePanelMode } from '../../constants/constants';\nimport StationSidePanel from './station-side-panel/station-side-panel';\nimport StyleSidePanel from './style-side-panel/style-side-panel';\nimport { RmgMultiLineString, RmgSidePanel, RmgSidePanelHeader } from '@railmapgen/rmg-components';\nimport StationSidePanelFooter from './station-side-panel/station-side-panel-footer';\nimport BranchSidePanel from './branch-side-panel/branch-side-panel';\nimport { useTranslation } from 'react-i18next';\n\nconst SIDE_PANEL_WIDTH = 375;\n\nexport default function SidePanel() {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const { sidePanelMode, selectedStation } = useRootSelector(state => state.app);\n    const name = useRootSelector(state => state.param.stn_list[selectedStation]?.name);\n\n    const mode: Record<SidePanelMode, { header: ReactNode; body?: ReactNode; footer?: ReactNode }> = {\n        STATION: {\n            header: <RmgMultiLineString text={name?.join(' - ') || ''} />,\n            body: <StationSidePanel />,\n            footer: <StationSidePanelFooter />,\n        },\n        STYLE: { header: t('StyleSidePanel.header'), body: <StyleSidePanel /> },\n        BRANCH: { header: t('BranchSidePanel.header'), body: <BranchSidePanel /> },\n        CLOSE: { header: 'Close' },\n    };\n\n    const handleClose = () => {\n        dispatch(setSidePanelMode(SidePanelMode.CLOSE));\n    };\n\n    return (\n        <RmgSidePanel isOpen={sidePanelMode !== SidePanelMode.CLOSE} width={SIDE_PANEL_WIDTH} header=\"Dummy header\">\n            <RmgSidePanelHeader onClose={handleClose}>{mode[sidePanelMode].header}</RmgSidePanelHeader>\n            {mode[sidePanelMode]?.body}\n            {mode[sidePanelMode]?.footer}\n        </RmgSidePanel>\n    );\n}\n","export const downloadAs = (filename: string, type: string, data: any) => {\n    const blob = new Blob([data], { type });\n    downloadBlobAs(filename, blob);\n};\n\nexport const downloadBlobAs = (filename: string, blob: Blob) => {\n    const url = window.URL.createObjectURL(blob);\n\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n};\n\nexport const readFileAsText = (file: File) => {\n    return new Promise((resolve: (text: string) => void) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.readAsText(file);\n    });\n};\n\nexport const isSafari = () => {\n    return navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');\n};\n\nexport const getRelativeTime = (timestamp?: number): string => {\n    if (timestamp) {\n        const deltaSeconds = new Date().getTime() - timestamp;\n        if (deltaSeconds < 60 * 1000) {\n            return 'Less than 1 minute ago';\n        } else if (deltaSeconds < 2 * 60 * 1000) {\n            return '1 minute ago';\n        } else if (deltaSeconds < 60 * 60 * 1000) {\n            return Math.floor(deltaSeconds / 1000 / 60).toString() + ' minutes ago';\n        } else if (deltaSeconds < 2 * 60 * 60 * 1000) {\n            return '1 hour ago';\n        } else {\n            return Math.floor(deltaSeconds / 1000 / 60 / 60).toString() + ' hours ago';\n        }\n    } else {\n        return 'Unknown';\n    }\n};\n","import { CanvasType, RmgStyle } from '../constants/constants';\nimport { isSafari } from './utils';\n\nexport const cloneSvgCanvas = async (\n    canvas: CanvasType,\n    rmgStyle: RmgStyle,\n    isTransparent?: boolean,\n    isShowBorder?: boolean,\n    scale?: number\n): Promise<SVGSVGElement> => {\n    let [, thisSVGHeight] = ['--rmg-svg-width', '--rmg-svg-height']\n        .map(\n            key =>\n                (document.querySelector(`svg#${canvas}`) as SVGSVGElement).style.getPropertyValue(key).match(/\\d+/g)![0]\n        )\n        .map(Number);\n\n    const elem = document.querySelector(`svg#${canvas}`)!.cloneNode(true) as SVGSVGElement;\n    // elem.setAttribute('width', (thisSVGWidth * scaleFactor).toString());\n    elem.setAttribute('height', ((thisSVGHeight * (scale || 100)) / 100).toString());\n    elem.style.setProperty('all', 'initial');\n\n    ['share']\n        .map(tag =>\n            [\n                ...(\n                    [...document.querySelectorAll('link')].filter(l => l.id === 'css_' + tag)[0]?.sheet as CSSStyleSheet\n                ).cssRules,\n            ]\n                .map(rule => rule.cssText)\n                .join(' ')\n        )\n        .forEach(txt => {\n            let s = document.createElement('style');\n            s.textContent = txt;\n            elem.prepend(s);\n        });\n\n    elem.querySelector('rect#canvas-border')?.setAttribute('stroke', isShowBorder ? 'black' : 'none');\n    elem.querySelector('rect#canvas-bg')?.setAttribute('fill', isTransparent ? 'none' : 'white');\n\n    if (rmgStyle === RmgStyle.MTR) {\n        try {\n            const uris = await getBase64FontFace(elem);\n            const s = document.createElement('style');\n            s.textContent = uris.join('\\n');\n            elem.prepend(s);\n        } catch (err) {\n            alert('Failed to fonts. Fonts in the exported PNG will be missing.');\n            console.error(err);\n        }\n    }\n\n    return elem;\n};\n\n/**\n * Convert a `Blob` into Base64 data URL.\n * @param blob\n */\nconst readBlobAsDataURL = (blob: Blob): Promise<string> => {\n    return new Promise((resolve: (value: string) => void) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.readAsDataURL(blob);\n    });\n};\n\nconst matchCssRuleByFontFace = (rules: CSSFontFaceRule[], font: FontFace): CSSFontFaceRule | undefined => {\n    return rules.find(rule => {\n        const cssStyle = rule.style as any;\n        return (\n            cssStyle.fontFamily.replace(/^\"(.+)\"$/, '$1') === font.family && cssStyle.unicodeRange === font.unicodeRange\n        );\n    });\n};\n\nexport const getBase64FontFace = async (svgEl: SVGSVGElement): Promise<string[]> => {\n    const uniqueCharacters = Array.from(\n        new Set(\n            [\n                ...svgEl.querySelectorAll<SVGElement>('.rmg-name__zh'),\n                ...svgEl.querySelectorAll<SVGElement>('.rmg-name__en'),\n            ]\n                .map(el => el.innerHTML)\n                .join('')\n                .replace(/[\\s]/g, '')\n        )\n    ).join('');\n\n    const fontFaceList = await document.fonts.load('80px GenYoMin TW, Vegur', uniqueCharacters);\n    const cssRules = Array.from(\n        (document.querySelector<HTMLLinkElement>('link#css_share')!.sheet!.cssRules[0] as CSSImportRule).styleSheet\n            .cssRules\n    ) as CSSFontFaceRule[];\n    const distinctCssRules = fontFaceList.reduce<CSSFontFaceRule[]>((acc, cur) => {\n        const matchedRule = matchCssRuleByFontFace(cssRules, cur);\n        if (matchedRule) {\n            const existence = acc.find(rule => {\n                const ruleStyle = rule.style as any;\n                const matchedStyle = matchedRule.style as any;\n                return (\n                    ruleStyle.fontFamily === matchedStyle.fontFamily &&\n                    ruleStyle.unicodeRange === matchedStyle.unicodeRange\n                );\n            });\n            return existence ? acc : acc.concat(matchedRule);\n        } else {\n            return acc;\n        }\n    }, []);\n\n    return await Promise.all(\n        distinctCssRules.map(async cssRule => {\n            try {\n                const fontResp = await fetch(getAbsoluteUrl(cssRule));\n                const fontDataUri = await readBlobAsDataURL(await fontResp.blob());\n                return cssRule.cssText.replace(/src:[ \\w('\",\\-:/.)]+;/g, `src: url('${fontDataUri}'); `);\n            } catch (err) {\n                console.error(err);\n                return '';\n            }\n        })\n    );\n};\n\nexport const getAbsoluteUrl = (cssRule: CSSFontFaceRule) => {\n    const ruleStyleSrc = (cssRule.style as any).src;\n    return isSafari()\n        ? ruleStyleSrc.replace(/^url\\(\"([\\S]+)\"\\).*$/, '$1')\n        : process.env.PUBLIC_URL + '/styles/' + ruleStyleSrc.match(/^url\\(\"([\\S*]+)\"\\)/)?.[1];\n};\n\nexport const test = async (svgEl: SVGSVGElement, scale: number, isWait: boolean): Promise<Blob> => {\n    let svgW = svgEl.viewBox.baseVal.width;\n    let svgH = svgEl.viewBox.baseVal.height;\n\n    // svgEl.removeAttribute('height');\n\n    let canvas = document.querySelectorAll('canvas')[0];\n    canvas.width = Number(svgW) * window.devicePixelRatio * scale;\n    canvas.height = Number(svgH) * window.devicePixelRatio * scale;\n\n    svgEl.setAttribute('width', canvas.width.toString());\n    svgEl.setAttribute('height', canvas.height.toString());\n\n    let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // bypass Chrome min font size (to be improved)\n\n    svgEl.querySelectorAll('.rmg-name__en.rmg-name__mtr--station').forEach(el => el.setAttribute('font-size', '11px'));\n\n    svgEl\n        .querySelectorAll('.rmg-name__en.rmg-name__gzmtr--next2-dest')\n        .forEach(el => el.setAttribute('font-size', '8.5px'));\n\n    // svgEl\n    //     .querySelectorAll('text:not([font-size]), tspan:not([font-size])')\n    //     .forEach((el) => el.setAttribute('font-size', window.getComputedStyle(el).fontSize));\n\n    svgEl.querySelectorAll('text, tspan').forEach(el => {\n        let elStyle = window.getComputedStyle(el);\n        el.setAttribute('font-family', elStyle.fontFamily);\n        el.setAttribute('fill', elStyle.fill);\n        el.setAttribute('dominant-baseline', elStyle.dominantBaseline);\n        el.setAttribute('text-anchor', elStyle.textAnchor || '');\n        // el.removeAttribute('class');\n    });\n\n    // https://stackoverflow.com/questions/46399223/async-await-in-image-loading/52851789\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onload = () => {\n            setTimeout(\n                () => {\n                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n                    canvas.toBlob(blob => resolve(blob!), 'image/png');\n                },\n                isWait ? 2000 : 0\n            );\n        };\n        img.onerror = reject;\n        img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgEl.outerHTML)));\n    });\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n    Button,\n    HStack,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n} from '@chakra-ui/react';\nimport { canvasConfig, CanvasType, Events, RmgStyle } from '../../constants/constants';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport JSZip from 'jszip';\nimport { setCurrentStation } from '../../redux/param/action';\nimport { cloneSvgCanvas, test } from '../../util/export-utils';\nimport { downloadAs, downloadBlobAs, isSafari } from '../../util/utils';\nimport { useTranslation } from 'react-i18next';\nimport { waitForMs } from '../../utils';\nimport { setLoadingProgress, stopLoading } from '../../redux/app/app-slice';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface DownloadModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function DownloadModal(props: DownloadModalProps) {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n\n    const dispatch = useRootDispatch();\n\n    const [canvasToDownload, setCanvasToDownload] = useState('');\n    const [isTransparent, setIsTransparent] = useState(false);\n    const [isShowBorder, setIsShowBorder] = useState(false);\n    const [scale, setScale] = useState(100);\n    const [format, setFormat] = useState('png');\n\n    const canvasToShow = useRootSelector(state => state.app.canvasToShow);\n    const {\n        style,\n        stn_list: stationList,\n        current_stn_idx: currentStationId,\n        line_name: lineName,\n    } = useRootSelector(state => state.param);\n\n    useEffect(() => {\n        // reset canvas to download if on-screen canvas changed\n        if (canvasToDownload !== '' && !canvasToShow.includes(canvasToDownload as CanvasType)) {\n            setCanvasToDownload('');\n        }\n    }, [canvasToShow]);\n\n    const canvasOptions = canvasConfig[style].reduce<Record<string, string>>(\n        (acc, cur) => {\n            if (canvasToShow.includes(cur)) {\n                return { ...acc, [cur]: t('CanvasType.' + cur) };\n            } else {\n                return { ...acc };\n            }\n        },\n        { '': t('DownloadModal.pleaseSelect') }\n    );\n\n    const scaleOptions = [25, 33, 50, 67, 75, 80, 90, 100, 110, 125, 150, 175, 200, 250, 300, 400, 500].reduce<\n        Record<number, string>\n    >(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: `${cur}%`,\n        }),\n        {}\n    );\n\n    const formatOptions = {\n        png: t('DownloadModal.png'),\n        svg: t('DownloadModal.svg'),\n    };\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('DownloadModal.canvas'),\n            value: canvasToDownload,\n            options: canvasOptions,\n            disabledOptions: [''],\n            onChange: value => setCanvasToDownload(value as CanvasType),\n            minW: 'full',\n        },\n        {\n            type: 'switch',\n            label: t('DownloadModal.transparent'),\n            isChecked: isTransparent,\n            onChange: setIsTransparent,\n            oneLine: true,\n            minW: 'full',\n        },\n        {\n            type: 'switch',\n            label: t('DownloadModal.showBorder'),\n            isChecked: isShowBorder,\n            onChange: setIsShowBorder,\n            oneLine: true,\n            minW: 'full',\n        },\n        {\n            type: 'select',\n            label: t('DownloadModal.scale'),\n            value: scale,\n            options: scaleOptions,\n            onChange: value => setScale(value as number),\n        },\n        {\n            type: 'select',\n            label: t('DownloadModal.format'),\n            value: format,\n            options: formatOptions,\n            onChange: value => setFormat(value as string),\n        },\n    ];\n\n    const handleDownload = async (option: 'current' | 'all') => {\n        dispatch(setLoadingProgress(0));\n        const stationIdListToDownload =\n            option === 'current'\n                ? [currentStationId]\n                : Object.keys(stationList).filter(id => !['linestart', 'lineend'].includes(id));\n\n        const zip = new JSZip();\n\n        for (const index in stationIdListToDownload) {\n            dispatch(setLoadingProgress(((Number(index) + 1) / stationIdListToDownload.length) * 100));\n\n            const stnId = stationIdListToDownload[index];\n            // wait for svg elements updated for station A before we dispatch the current station to B.\n            dispatch(setCurrentStation(stnId));\n            await waitForMs(500);\n\n            const elem = await cloneSvgCanvas(\n                canvasToDownload as CanvasType,\n                style,\n                isTransparent,\n                isShowBorder,\n                scale\n            );\n\n            // append svg to the document so the bbox will be loaded correctly\n            // (but not for gzmtr and have no idea why)\n            document.body.appendChild(elem);\n\n            const filename = `rmg.${stnId}.${stationList[stnId].name[0]}.${stationList[stnId].name[1]}`.replaceAll(\n                /\\\\|\\/|\\||\\*|:|\\?|<|>|\"/g,\n                '_'\n            ); // forbidden characters on windows \\ / : * ? \" < > |\n            if (format === 'png') {\n                const isWait = isSafari() && index === '0';\n                const blob = await test(elem, scale / 100, isWait);\n\n                if (stationIdListToDownload.length > 1) {\n                    // batch download and split base64 for this\n                    // https://stackoverflow.com/questions/31305485/export-resized-image-in-canvas-to-new-jszip-package\n                    zip.file(`${filename}.png`, blob);\n                } else {\n                    downloadBlobAs(`${filename}.png`, blob);\n                }\n            } else if (format === 'svg') {\n                elem.removeAttribute('height');\n                const data = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(elem.outerHTML)));\n\n                if (stationIdListToDownload.length > 1) {\n                    zip.file(`${filename}.svg`, data.split('base64,')[1], { base64: true });\n                } else {\n                    downloadAs(filename + '.svg', 'image/svg+xml', elem.outerHTML);\n                }\n            }\n\n            // don't forget to release it after use\n            document.body.removeChild(elem);\n        }\n\n        // generate the zip for batch download\n        if (stationIdListToDownload.length > 1) {\n            const zipData = await zip.generateAsync({ type: 'blob' });\n            const filename = `rmg.${lineName[0]}.${lineName[1]}.zip`.replaceAll(' ', '_');\n            downloadBlobAs(filename, zipData);\n        }\n\n        // event\n        rmgRuntime.event(Events.DOWNLOAD_IMAGES, { canvasToDownload, style, option, format });\n\n        // revert to original station\n        dispatch(setCurrentStation(currentStationId));\n        dispatch(stopLoading());\n        onClose();\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('DownloadModal.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <HStack>\n                        <Button\n                            colorScheme=\"primary\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDownload('current')}\n                            disabled={!canvasToDownload}\n                        >\n                            {t('DownloadModal.downloadOne')}\n                        </Button>\n                        {style !== RmgStyle.GZMTR && (\n                            <Button\n                                colorScheme=\"primary\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleDownload('all')}\n                                disabled={!canvasToDownload}\n                            >\n                                {t('DownloadModal.downloadAll')}\n                            </Button>\n                        )}\n                    </HStack>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import React, { useState } from 'react';\nimport { Button, Menu, MenuButton, MenuItem, MenuList } from '@chakra-ui/react';\nimport { MdExpandMore } from 'react-icons/md';\nimport { downloadAs } from '../../util/utils';\nimport { useRootSelector } from '../../redux';\nimport { useTranslation } from 'react-i18next';\nimport DownloadModal from '../modal/download-modal';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { Events } from '../../constants/constants';\n\nexport default function DownloadActions() {\n    const { t } = useTranslation();\n\n    const [isDownloadModalOpen, setIsDownloadModalOpen] = useState(false);\n\n    const param = useRootSelector(state => state.param);\n\n    const handleDownloadJson = () => {\n        downloadAs(`RMG_${new Date().valueOf()}.json`, 'application/json', JSON.stringify(param));\n        rmgRuntime.event(Events.DOWNLOAD_PARAM, { style: param.style });\n    };\n\n    return (\n        <Menu>\n            <MenuButton as={Button} variant=\"ghost\" size=\"sm\" rightIcon={<MdExpandMore />}>\n                {t('DownloadActions.downloads')}\n            </MenuButton>\n            <MenuList>\n                <MenuItem onClick={handleDownloadJson}>{t('DownloadActions.configFile')}</MenuItem>\n                <MenuItem onClick={() => setIsDownloadModalOpen(true)}>{t('DownloadActions.images')}</MenuItem>\n            </MenuList>\n\n            <DownloadModal isOpen={isDownloadModalOpen} onClose={() => setIsDownloadModalOpen(false)} />\n        </Menu>\n    );\n}\n","import React, { RefObject } from 'react';\nimport {\n    AlertDialog,\n    AlertDialogBody,\n    AlertDialogContent,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogOverlay,\n    Button,\n} from '@chakra-ui/react';\nimport { Events, RMGParam } from '../../constants/constants';\nimport { RmgLineBadge } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { MonoColour } from '@railmapgen/rmg-palette-resources';\n\ninterface UploadConfirmModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    cancelRef: RefObject<HTMLButtonElement>;\n    uploadedParam?: RMGParam;\n    onOpenParam: (param: Record<string, any>) => void;\n}\n\nexport default function UploadConfirmModal(props: UploadConfirmModalProps) {\n    const { isOpen, onClose, cancelRef, uploadedParam, onOpenParam } = props;\n    const { t } = useTranslation();\n\n    const handleConfirm = () => {\n        if (uploadedParam) {\n            onOpenParam(uploadedParam);\n        }\n        onClose();\n        rmgRuntime.event(Events.UPLOAD_PARAM, { style: uploadedParam?.style });\n    };\n\n    return (\n        <AlertDialog isOpen={isOpen} leastDestructiveRef={cancelRef} onClose={onClose}>\n            <AlertDialogOverlay>\n                <AlertDialogContent>\n                    <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n                        {t('UploadConfirmModal.title')}\n                    </AlertDialogHeader>\n\n                    <AlertDialogBody>\n                        {t('UploadConfirmModal.message1')}\n                        <RmgLineBadge\n                            name={uploadedParam?.line_name?.join(' ') || ''}\n                            fg={uploadedParam?.theme?.[3] || MonoColour.white}\n                            bg={uploadedParam?.theme?.[2] || '#AAAAAA'}\n                        />\n                        {t('UploadConfirmModal.message2') +\n                            (uploadedParam ? Object.keys(uploadedParam.stn_list).length - 2 : 0) +\n                            t('UploadConfirmModal.message3')}\n                    </AlertDialogBody>\n\n                    <AlertDialogFooter>\n                        <Button ref={cancelRef} onClick={onClose}>\n                            {t('Cancel')}\n                        </Button>\n                        <Button colorScheme=\"primary\" onClick={handleConfirm} ml={3}>\n                            {t('Confirm')}\n                        </Button>\n                    </AlertDialogFooter>\n                </AlertDialogContent>\n            </AlertDialogOverlay>\n        </AlertDialog>\n    );\n}\n","import React from 'react';\nimport {\n    Flex,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    Tab,\n    TabList,\n    TabPanel,\n    TabPanels,\n    Tabs,\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { translateText } from '../../i18n/config';\nimport { useRootDispatch } from '../../redux';\nimport { companyConfig, templateList } from '@railmapgen/rmg-templates-resources';\nimport { startLoading } from '../../redux/app/app-slice';\nimport { Events } from '../../constants/constants';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { RmgEnrichedButton } from '@railmapgen/rmg-components';\n\ninterface TemplateModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    onOpenParam: (param: Record<string, any>) => void;\n}\n\nexport default function TemplateModal(props: TemplateModalProps) {\n    const { isOpen, onClose, onOpenParam } = props;\n\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const handleSelect = async (company: string, filename: string) => {\n        dispatch(startLoading());\n        const module = await import(\n            /* webpackChunkName: \"templates\" */ `@railmapgen/rmg-templates-resources/templates/${company}/${filename}.json`\n        );\n        onOpenParam(module.default);\n        rmgRuntime.event(Events.OPEN_TEMPLATE, { company, filename });\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('TemplateModal.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <Tabs isLazy size=\"sm\" orientation=\"vertical\" colorScheme=\"primary\">\n                        <TabList maxW={150}>\n                            {companyConfig.map(company => (\n                                <Tab key={company.id}>{translateText(company.name)}</Tab>\n                            ))}\n                        </TabList>\n\n                        <TabPanels maxW={250}>\n                            {Object.entries(templateList)\n                                .sort(\n                                    (a, b) =>\n                                        companyConfig.findIndex(c => c.id === a[0]) -\n                                        companyConfig.findIndex(c => c.id === b[0])\n                                )\n                                .map(([company, templates]) => (\n                                    <TabPanel key={company} as={Flex} flexDirection=\"column\" py={0} px={1}>\n                                        {templates.map(template => (\n                                            <RmgEnrichedButton\n                                                key={template.filename}\n                                                variant=\"ghost\"\n                                                size=\"sm\"\n                                                primaryText={translateText(template.name)}\n                                                secondaryText={t('by') + ': ' + (template.uploadBy ?? 'Unknown')}\n                                                onClick={() => handleSelect(company, template.filename)}\n                                            />\n                                        ))}\n                                    </TabPanel>\n                                ))}\n                        </TabPanels>\n                    </Tabs>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import {\n    Facilities,\n    Name,\n    PanelTypeGZMTR,\n    PanelTypeShmetro,\n    RMGParam,\n    RmgStyle,\n    Services,\n    ShortDirection,\n    StationInfo,\n    Theme,\n} from '../../constants/constants';\nimport { CityCode, MonoColour } from '@railmapgen/rmg-palette-resources';\nimport { LanguageCode } from '@railmapgen/rmg-translate';\nimport { nanoid } from 'nanoid';\n\nconst initTheme = (style: RmgStyle): Theme => {\n    switch (style) {\n        case RmgStyle.MTR:\n            return [CityCode.Hongkong, 'twl', '#E2231A', MonoColour.white];\n        case RmgStyle.GZMTR:\n            return [CityCode.Guangzhou, 'gz1', '#F3D03E', MonoColour.black];\n        case RmgStyle.SHMetro:\n            return [CityCode.Shanghai, 'sh1', '#E4002B', MonoColour.white];\n        default:\n            return [CityCode.Other, 'other', '#AAAAAA', MonoColour.white];\n    }\n};\n\nconst initLineName = (language: LanguageCode): Name => {\n    switch (language) {\n        case LanguageCode.ChineseSimp:\n            return ['1号线', 'Line 1'];\n        case LanguageCode.ChineseTrad:\n            return ['荃灣綫', 'Tsuen Wan Line'];\n        default:\n            return ['地鐵線', 'Metro Line'];\n    }\n};\n\nexport const initStationInfo = (id: string): StationInfo => ({\n    name: ['未命名 ' + id, 'Unnamed ' + id],\n    secondaryName: false,\n    num: '00',\n    services: [Services.local],\n    parents: [],\n    children: [],\n    branch: { left: [], right: [] },\n    transfer: {\n        info: [[]],\n        tick_direc: ShortDirection.right,\n        paid_area: true,\n        osi_names: [],\n    },\n    facility: Facilities.none,\n    loop_pivot: false,\n    one_line: true,\n    int_padding: 355,\n});\n\nexport const initParam = (style: RmgStyle, language: LanguageCode): RMGParam => {\n    // init station info\n    const lineStartInfo = initStationInfo('linestart');\n    lineStartInfo.name = ['LEFT END', 'LEFT END'];\n\n    const lineEndInfo = initStationInfo('lineend');\n    lineEndInfo.name = ['RIGHT END', 'RIGHT END'];\n\n    const station1Id = nanoid(6);\n    const station1Info = initStationInfo(station1Id);\n    station1Info.num = '01';\n\n    const station2Id = nanoid(6);\n    const station2Info = initStationInfo(station2Id);\n    station2Info.num = '02';\n\n    // set parents and children\n    lineStartInfo.children = [station1Id];\n\n    station1Info.parents = ['linestart'];\n    station1Info.children = [station2Id];\n\n    station2Info.parents = [station1Id];\n    station2Info.children = ['lineend'];\n\n    lineEndInfo.parents = [station2Id];\n\n    return {\n        svgWidth: {\n            destination: 1200,\n            runin: 1200,\n            railmap: 1200,\n            indoor: 1200,\n        },\n        svg_height: 300,\n        style: style,\n        y_pc: 50,\n        padding: 10,\n        branchSpacingPct: 33,\n        direction: ShortDirection.left,\n        platform_num: '1',\n        theme: initTheme(style),\n        line_name: initLineName(language),\n        current_stn_idx: station2Id,\n        stn_list: {\n            linestart: lineStartInfo,\n            [station1Id]: station1Info,\n            [station2Id]: station2Info,\n            lineend: lineEndInfo,\n        },\n        namePosMTR: {\n            isStagger: true,\n            isFlip: true,\n        },\n        customiseMTRDest: {\n            isLegacy: false,\n            terminal: false,\n        },\n        line_num: '1',\n        psd_num: '1',\n        info_panel_type: style === RmgStyle.SHMetro ? PanelTypeShmetro.sh : PanelTypeGZMTR.gz1,\n        notesGZMTR: [],\n        direction_gz_x: 40,\n        direction_gz_y: 70,\n        coline: {},\n        loop: false,\n        loop_info: {\n            bank: true,\n            left_and_right_factor: 1,\n            bottom_factor: 1,\n        },\n    };\n};\n","import React, { ChangeEvent, useRef, useState } from 'react';\nimport { Button, Menu, MenuButton, MenuItem, MenuList } from '@chakra-ui/react';\nimport { MdExpandMore, MdInsertDriveFile, MdNoteAdd, MdUpload } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport { updateParam } from '../../utils';\nimport { readFileAsText } from '../../util/utils';\nimport UploadConfirmModal from '../modal/upload-confirm-modal';\nimport { setGlobalAlert } from '../../redux/app/app-slice';\nimport { RMGParam } from '../../constants/constants';\nimport TemplateModal from '../modal/template-modal';\nimport { openFromNewParam } from '../../redux/param/open-new-action';\nimport { initParam } from '../../redux/param/util';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { LanguageCode } from '@railmapgen/rmg-translate';\n\nexport default function OpenActions() {\n    const { t, i18n } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const style = useRootSelector(state => state.param.style);\n\n    const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n    const [isTemplateModalOpen, setIsTemplateModalOpen] = useState(false);\n    const [uploadedParam, setUploadedParam] = useState<RMGParam | undefined>(undefined);\n\n    const uploadModalCloseRef = useRef<HTMLButtonElement | null>(null);\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n    const handleUpload = async (event: ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        console.log('OpenActions.handleUpload():: received file', file);\n\n        if (file?.type !== 'application/json') {\n            dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.invalidType') }));\n        } else {\n            try {\n                const paramStr = await readFileAsText(file);\n                const updatedParam = updateParam(JSON.parse(paramStr));\n                setUploadedParam(updatedParam as RMGParam);\n                setIsUploadModalOpen(true);\n            } catch (err) {\n                dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.unknownError') }));\n                console.error(\n                    'OpenActions.handleUpload():: Unknown error occurred while parsing the uploaded file',\n                    err\n                );\n            }\n        }\n\n        // clear field for next upload\n        event.target.value = '';\n    };\n\n    const handleOpenParam = (param: Record<string, any>) => {\n        dispatch(openFromNewParam(param));\n    };\n\n    return (\n        <Menu>\n            <MenuButton as={Button} variant=\"ghost\" size=\"sm\" rightIcon={<MdExpandMore />}>\n                {t('OpenActions.openFrom')}\n            </MenuButton>\n            <MenuList>\n                <MenuItem\n                    icon={<MdNoteAdd />}\n                    onClick={() => handleOpenParam(initParam(style, i18n.language as LanguageCode))}\n                >\n                    {t('Empty template')}\n                </MenuItem>\n\n                <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\".json\"\n                    hidden={true}\n                    onChange={handleUpload}\n                    data-testid=\"file-upload\"\n                />\n                <MenuItem icon={<MdUpload />} onClick={() => fileInputRef?.current?.click()}>\n                    {t('OpenActions.upload')}\n                </MenuItem>\n\n                <MenuItem icon={<MdInsertDriveFile />} onClick={() => setIsTemplateModalOpen(true)}>\n                    {t('OpenActions.templates')}\n                </MenuItem>\n            </MenuList>\n\n            <UploadConfirmModal\n                isOpen={isUploadModalOpen}\n                onClose={() => setIsUploadModalOpen(false)}\n                cancelRef={uploadModalCloseRef}\n                uploadedParam={uploadedParam}\n                onOpenParam={handleOpenParam}\n            />\n\n            <TemplateModal\n                isOpen={isTemplateModalOpen}\n                onClose={() => setIsTemplateModalOpen(false)}\n                onOpenParam={handleOpenParam}\n            />\n        </Menu>\n    );\n}\n","import { RootDispatch, RootState } from '../index';\nimport { updateParam } from '../../utils';\nimport { canvasConfig, CanvasType, RMGParam, SidePanelMode } from '../../constants/constants';\nimport { setCanvasToShow, setSelectedStation, setSidePanelMode, stopLoading } from '../app/app-slice';\nimport { reRenderApp } from '../../index';\n\nexport const openFromNewParam = (param: Record<string, any>) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const updatedParam = updateParam(param) as RMGParam;\n\n        // close side panel, reset selection\n        dispatch(setSidePanelMode(SidePanelMode.CLOSE));\n        dispatch(setSelectedStation('linestart'));\n\n        // reset to AllCanvas if the current canvas is not supported in the new style\n        const canvasToShow = getState().app.canvasToShow;\n        if (canvasConfig[updatedParam.style].every(canvas => !canvasToShow.includes(canvas))) {\n            dispatch(setCanvasToShow(Object.values(CanvasType)));\n        }\n        reRenderApp(updatedParam);\n        dispatch(stopLoading());\n    };\n};\n","import React from 'react';\nimport { HStack, Button } from '@chakra-ui/react';\nimport DownloadActions from './download-actions';\nimport { MdPalette } from 'react-icons/md';\nimport { useDispatch } from 'react-redux';\nimport { SidePanelMode } from '../../constants/constants';\nimport { setSidePanelMode } from '../../redux/app/app-slice';\nimport { useTranslation } from 'react-i18next';\nimport OpenActions from './open-actions';\n\nexport default function HeaderActions() {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    return (\n        <HStack ml=\"auto\" w=\"fit-content\">\n            <DownloadActions />\n\n            <OpenActions />\n\n            <Button\n                variant=\"solid\"\n                size=\"sm\"\n                colorScheme=\"primary\"\n                leftIcon={<MdPalette />}\n                onClick={() => dispatch(setSidePanelMode(SidePanelMode.STYLE))}\n            >\n                {t('HeaderActions.editStyle')}\n            </Button>\n        </HStack>\n    );\n}\n","import React from 'react';\nimport HeaderActions from './header-actions';\nimport { setCanvasScale, setCanvasToShow } from '../../redux/app/app-slice';\nimport { canvasConfig, CanvasType, RmgStyle } from '../../constants/constants';\nimport { useTranslation } from 'react-i18next';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { RmgFields, RmgFieldsField, RmgMultiSelect, RmgPageHeader } from '@railmapgen/rmg-components';\nimport { MdZoomIn, MdZoomOut } from 'react-icons/md';\nimport { setStyle } from '../../redux/param/action';\n\nexport default function PageHeader() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const { canvasToShow, canvasScale } = useRootSelector(state => state.app);\n    const rmgStyle = useRootSelector(state => state.param.style);\n\n    const styleSelections = Object.values(RmgStyle).reduce<Partial<Record<RmgStyle, string>>>(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: t('RmgStyle.' + cur),\n        }),\n        {}\n    );\n\n    const canvasSelections = canvasConfig[rmgStyle].map(canvas => ({\n        label: t('CanvasType.' + canvas),\n        value: canvas,\n    }));\n\n    const handleStyleChange = (style: RmgStyle) => {\n        dispatch(setStyle(style));\n    };\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('Style'),\n            value: rmgStyle,\n            options: styleSelections,\n            onChange: value => handleStyleChange(value as RmgStyle),\n        },\n        {\n            type: 'custom',\n            label: t('View'),\n            component: (\n                <RmgMultiSelect\n                    displayValue={t('Select canvas')}\n                    selections={canvasSelections}\n                    defaultValue={canvasToShow}\n                    onChange={value => dispatch(setCanvasToShow(value as CanvasType[]))}\n                />\n            ),\n        },\n        {\n            type: 'slider',\n            label: t('Canvas scale'),\n            value: canvasScale,\n            min: 0.1,\n            max: 2,\n            step: 0.1,\n            onChange: value => dispatch(setCanvasScale(value)),\n            leftIcon: <MdZoomOut />,\n            rightIcon: <MdZoomIn />,\n        },\n    ];\n\n    return (\n        <RmgPageHeader>\n            <RmgFields fields={fields} minW={160} />\n\n            <HeaderActions />\n        </RmgPageHeader>\n    );\n}\n","import { nanoid } from 'nanoid';\nimport { RootDispatch, RootState } from '../index';\nimport { BranchStyle } from '../../constants/constants';\nimport { getYShareMTR } from '../../methods';\nimport { setStationsBulk } from './action';\nimport { initStationInfo } from './util';\n\nexport const addStation = (where: `${number}` | 'new', from: string, to: string, position?: 'upper' | 'lower') => {\n    return (dispatch: RootDispatch, getState: () => RootState): string | false => {\n        const stationList = getState().param.stn_list;\n\n        // get new id\n        let newId = nanoid(6);\n        while (newId in stationList) {\n            newId = nanoid(6);\n        }\n        const newStationInfo = initStationInfo(newId);\n\n        if (where !== 'new') {\n            const nextStationList = {\n                ...stationList,\n                [from]: {\n                    ...stationList[from],\n                    children: stationList[from].children.map(id => (id === to ? newId : id)),\n                    branch: {\n                        left: stationList[from].branch.left,\n                        right:\n                            stationList[from].branch.right.length && stationList[from].branch.right[1] === to\n                                ? ([stationList[from].branch.right[0], newId] as [BranchStyle, string])\n                                : stationList[from].branch.right,\n                    },\n                },\n                [to]: {\n                    ...stationList[to],\n                    parents: stationList[to].parents.map(id => (id === from ? newId : id)),\n                    branch: {\n                        left:\n                            stationList[to].branch.left.length && stationList[to].branch.left[1] === from\n                                ? ([stationList[to].branch.left[0], newId] as [BranchStyle, string])\n                                : stationList[to].branch.left,\n                        right: stationList[to].branch.right,\n                    },\n                },\n                [newId]: {\n                    ...newStationInfo,\n                    parents: [from],\n                    children: [to],\n                },\n            };\n            dispatch(setStationsBulk(nextStationList));\n            return newId;\n        } else {\n            if (!position) {\n                return false;\n            }\n\n            const nextStationList = {\n                ...stationList,\n                [from]: {\n                    ...stationList[from],\n                    children:\n                        position === 'upper'\n                            ? [newId, stationList[from].children[0]]\n                            : [stationList[from].children[0], newId],\n                    branch: {\n                        left: stationList[from].branch.left,\n                        right: [BranchStyle.through, newId] as [BranchStyle, string],\n                    },\n                },\n                [to]: {\n                    ...stationList[to],\n                    parents:\n                        position === 'upper'\n                            ? [newId, stationList[to].parents[0]]\n                            : [stationList[to].parents[0], newId],\n                    branch: {\n                        left: [BranchStyle.through, newId] as [BranchStyle, string],\n                        right: stationList[to].branch.right,\n                    },\n                },\n                [newId]: {\n                    ...newStationInfo,\n                    parents: [from],\n                    children: [to],\n                },\n            };\n            dispatch(setStationsBulk(nextStationList));\n            return newId;\n        }\n    };\n};\n\nexport const addStationToExistingBranch = (where: number, preposition: 'before' | 'after', pivot: string) => {\n    return (dispatch: RootDispatch, getState: () => RootState): false | string => {\n        const branches = getState().helper.branches;\n        const branch = branches[where];\n\n        if (branch?.length) {\n            if (preposition === 'before') {\n                const from = branch[branch.indexOf(pivot) - 1];\n                return dispatch(addStation(where.toString() as `${number}`, from, pivot));\n            } else {\n                const to = branch[branch.indexOf(pivot) + 1];\n                return dispatch(addStation(where.toString() as `${number}`, pivot, to));\n            }\n        } else {\n            return false;\n        }\n    };\n};\n\nexport const getNewBranchAllowedEnds = () => {\n    return (dispatch: RootDispatch, getState: () => RootState): string[] => {\n        const stationList = getState().param.stn_list;\n        const branches = getState().helper.branches;\n\n        return branches[0].filter(id => {\n            const isTwoSidedBranchOut = stationList[id].parents.length + stationList[id].children.length === 4;\n            const isYShare0 = getYShareMTR(id, stationList) === 0;\n\n            return !isTwoSidedBranchOut && isYShare0;\n        });\n    };\n};\n\nexport const verifyNewBranchEnds = (from: string, to: string) => {\n    return (dispatch: RootDispatch, getState: () => RootState): string => {\n        const stationList = getState().param.stn_list;\n        const branches = getState().helper.branches;\n\n        // should be included in main line\n        if (!branches[0].includes(from) || !branches[0].includes(to)) {\n            return 'Branch should end at main line';\n        }\n\n        // from should come before to\n        if (branches[0].indexOf(from) >= branches[0].indexOf(to)) {\n            return 'Not in correct ordering';\n        }\n\n        // should not from linestart to lineend\n        if (from === 'linestart' && to === 'lineend') {\n            return 'Should not be parallel to main line';\n        }\n\n        // should not be open jaw from the first station\n        if (from === 'linestart' && branches[0].indexOf(to) === 1) {\n            return 'Branch should not be open jaw from the first station';\n        }\n\n        // should not be open jaw from the last station\n        if (to === 'lineend' && branches[0].indexOf(from) === branches[0].length - 2) {\n            return 'Branch should not be open jaw from the last station';\n        }\n\n        // from has one child, to has one parent\n        if (stationList[from].children.length > 1 || stationList[to].parents.length > 1) {\n            return 'Branch already exist';\n        }\n\n        // end station won't be a middle station of any branch except main line\n        const isExistBranchIncludesEndStation = branches\n            .slice(1)\n            .some(branch => branch.slice(1, -1).includes(from) || branch.slice(1, -1).includes(to));\n        if (isExistBranchIncludesEndStation) {\n            return 'Cannot branch out from existing branch';\n        }\n\n        // stations between both ends should be stations which isn't branching out\n        const isStationsBetweenNotBranchOut = branches[0]\n            .slice(branches[0].indexOf(from) + 1, branches[0].indexOf(to))\n            .every(id => stationList[id].parents.length === 1 && stationList[id].children.length === 1);\n        if (!isStationsBetweenNotBranchOut) {\n            return 'One or more stations between both ends are branching out';\n        }\n\n        return '';\n    };\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n    Alert,\n    AlertIcon,\n    Box,\n    Button,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n} from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { Events, RmgStyle, SidePanelMode } from '../../constants/constants';\nimport { isColineBranch } from '../../redux/param/coline-action';\nimport { useTranslation } from 'react-i18next';\nimport { addStationToExistingBranch } from '../../redux/param/add-station-action';\nimport { setSelectedStation, setSidePanelMode } from '../../redux/app/app-slice';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface AddStationModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function AddStationModal(props: AddStationModalProps) {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const { style, stn_list: stationList } = useRootSelector(state => state.param);\n    const branches = useRootSelector(state => state.helper.branches);\n\n    const [where, setWhere] = useState(selectedBranch);\n    const [preposition, setPreposition] = useState<'before' | 'after'>('before');\n    const [pivot, setPivot] = useState('');\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        setWhere(selectedBranch);\n    }, [selectedBranch]);\n\n    useEffect(() => {\n        if (!isOpen) {\n            setError(false);\n        }\n    }, [isOpen]);\n\n    const selectableStations = branches[Number(where)]?.slice(1, -1) ?? [];\n\n    const getStationOptions = (stationIdList: string[]): Record<string, string> => {\n        return stationIdList.reduce(\n            (acc, cur) => ({\n                ...acc,\n                [cur]: stationList[cur]?.name.join(' - '),\n            }),\n            { '': t('AddStationModal.pleaseSelect') }\n        );\n    };\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('AddStationModal.where'),\n            value: where,\n            options: {\n                ...branches.reduce(\n                    (acc, cur, idx) => ({\n                        ...acc,\n                        [idx]:\n                            idx === 0\n                                ? t('AddStationModal.main')\n                                : style !== RmgStyle.SHMetro || !isColineBranch(cur, stationList)\n                                ? t('AddStationModal.branch') + ' ' + idx\n                                : t('AddStationModal.external') + ' ' + idx,\n                    }),\n                    {}\n                ),\n            },\n            onChange: value => handleSelectWhere(value as number),\n            minW: 'full',\n        },\n        {\n            type: 'select',\n            label: t('AddStationModal.preposition'),\n            value: preposition,\n            options: {\n                before: t('AddStationModal.before'),\n                after: t('AddStationModal.after'),\n            },\n            onChange: value => setPreposition(value as 'before' | 'after'),\n        },\n        {\n            type: 'select',\n            label: t('AddStationModal.pivot'),\n            value: pivot,\n            options: getStationOptions(selectableStations),\n            disabledOptions: [''],\n            onChange: value => setPivot(value as string),\n        },\n    ];\n\n    const handleSelectWhere = (value: number) => {\n        setWhere(value);\n        setPivot('');\n    };\n\n    const handleSubmit = () => {\n        const result = dispatch(addStationToExistingBranch(where, preposition, pivot));\n        if (result) {\n            onClose();\n\n            dispatch(setSelectedStation(result));\n            dispatch(setSidePanelMode(SidePanelMode.STATION));\n        } else {\n            console.log('false here');\n            setError(true);\n        }\n        rmgRuntime.event(Events.ADD_STATION, { style, branchIndex: where, success: result });\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                {error && (\n                    <Alert status=\"error\" variant=\"solid\" size=\"xs\">\n                        <AlertIcon />\n                        {t('AddStationModal.error')}\n                    </Alert>\n                )}\n                <Box position=\"relative\">\n                    <ModalHeader>{t('AddStationModal.title')}</ModalHeader>\n                    <ModalCloseButton />\n                </Box>\n\n                <ModalBody>\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"primary\" onClick={handleSubmit} disabled={!pivot}>\n                        {t('Confirm')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n} from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { addStation, getNewBranchAllowedEnds, verifyNewBranchEnds } from '../../redux/param/add-station-action';\nimport { Events, RmgStyle } from '../../constants/constants';\nimport { useTranslation } from 'react-i18next';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface NewBranchModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function NewBranchModal(props: NewBranchModalProps) {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const [where, setWhere] = useState<'new' | 'ext'>('new');\n    const [from, setFrom] = useState('');\n    const [to, setTo] = useState('');\n    const [position, setPosition] = useState<'upper' | 'lower'>('upper');\n\n    const [fromError, setFromError] = useState('');\n    const [toError, setToError] = useState('');\n\n    const { style, stn_list: stationList } = useRootSelector(state => state.param);\n\n    useEffect(() => {\n        // reset whenever modal is closed\n        if (!isOpen) {\n            setWhere('new');\n            setFrom('');\n            setTo('');\n        }\n    }, [isOpen]);\n\n    const getStationOptions = (stationIdList: string[]): Record<string, string> => {\n        return stationIdList.reduce(\n            (acc, cur) => ({\n                ...acc,\n                [cur]: stationList[cur]?.name.join(' - '),\n            }),\n            { '': t('NewBranchModal.pleaseSelect') }\n        );\n    };\n\n    const newBranchEndStationOptions = getStationOptions(dispatch(getNewBranchAllowedEnds()));\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('NewBranchModal.where'),\n            value: where,\n            options: {\n                new: t('NewBranchModal.new'),\n                ext: t('NewBranchModal.ext'),\n            },\n            disabledOptions: style === RmgStyle.SHMetro ? [] : ['ext'],\n            onChange: value => handleSelectWhere(value as 'new' | 'ext'),\n            minW: 'full',\n        },\n        {\n            type: 'select',\n            label: t('NewBranchModal.from'),\n            value: from,\n            options: newBranchEndStationOptions,\n            disabledOptions: [''],\n            onChange: value => handleSelectFrom(value as string),\n            isInvalid: Boolean(fromError),\n        },\n        {\n            type: 'select',\n            label: t('NewBranchModal.to'),\n            value: to,\n            options: newBranchEndStationOptions,\n            disabledOptions: [''],\n            onChange: value => handleSelectTo(value as string),\n            isInvalid: Boolean(toError),\n        },\n        {\n            type: 'select',\n            label: t('NewBranchModal.position'),\n            value: position,\n            options: {\n                upper: t('NewBranchModal.upper'),\n                lower: t('NewBranchModal.lower'),\n            },\n            onChange: value => setPosition(value as 'upper' | 'lower'),\n            minW: 'full',\n            hidden: where !== 'new' || style === RmgStyle.SHMetro,\n        },\n    ];\n\n    const handleSelectWhere = (value: 'new' | 'ext') => {\n        setWhere(value);\n        setFrom('');\n        setTo('');\n        setFromError('');\n        setToError('');\n    };\n\n    const handleSelectFrom = (value: string) => {\n        setFrom(value);\n        setFromError('');\n\n        if (value && to) {\n            setToError(dispatch(verifyNewBranchEnds(value, to)));\n        }\n    };\n\n    const handleSelectTo = (value: string) => {\n        setTo(value);\n        setToError('');\n\n        if (from && value) {\n            setFromError(dispatch(verifyNewBranchEnds(from, value)));\n        }\n    };\n\n    const handleSubmit = () => {\n        let result: false | string;\n        if (where === 'ext') {\n            // SHMetro specific - treat lower branch as external line\n            result = dispatch(addStation('new', from, to, 'lower'));\n        } else {\n            if (style === RmgStyle.SHMetro) {\n                result = dispatch(addStation('new', from, to, 'upper'));\n            } else {\n                result = dispatch(addStation('new', from, to, position));\n            }\n        }\n\n        if (result) {\n            onClose();\n            rmgRuntime.event(Events.ADD_BRANCH, { style, where });\n        }\n    };\n\n    const isSubmitDisabled = Boolean(!from || !to || fromError || toError);\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('NewBranchModal.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button\n                        colorScheme=\"primary\"\n                        title={isSubmitDisabled ? fromError || toError : t('Confirm')}\n                        onClick={handleSubmit}\n                        disabled={isSubmitDisabled}\n                    >\n                        {t('Confirm')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import React, { lazy, useState } from 'react';\nimport { Box, Button, HStack, IconButton, Tab, TabList, TabPanel, TabPanels, Tabs } from '@chakra-ui/react';\nimport { MdAdd } from 'react-icons/md';\nimport AddStationModal from '../modal/add-station-modal';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { RmgStyle, SidePanelMode } from '../../constants/constants';\nimport { isColineBranch } from '../../redux/param/coline-action';\nimport { setSelectedBranch, setSidePanelMode } from '../../redux/app/app-slice';\nimport { useTranslation } from 'react-i18next';\nimport NewBranchModal from '../modal/new-branch-modal';\nimport { RmgErrorBoundary, RmgLoader } from '@railmapgen/rmg-components';\n\nconst StationAgGrid = lazy(() => import(/* webpackChunkName: \"StationAgGrid\" */ './station-ag-grid'));\n\nexport default function GridTabs() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const [isAddStationModalOpen, setIsAddStationModalOpen] = useState(false);\n    const [isNewBranchModalOpen, setIsNewBranchModalOpen] = useState(false);\n\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const { style, stn_list: stationList } = useRootSelector(state => state.param);\n    const branches = useRootSelector(state => state.helper.branches);\n\n    const handleEditLineSection = () => {\n        dispatch(setSidePanelMode(SidePanelMode.BRANCH));\n    };\n\n    return (\n        <Box flex={1} overflow=\"hidden\">\n            <Tabs\n                height=\"100%\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                overflow=\"hidden\"\n                index={selectedBranch}\n                onChange={index => dispatch(setSelectedBranch(index))}\n            >\n                <TabList>\n                    {branches.map((branch, i) => {\n                        if (i === 0) {\n                            return <Tab key={i}>{t('GridTabs.main')}</Tab>;\n                        } else {\n                            if (style !== RmgStyle.SHMetro || !isColineBranch(branch, stationList)) {\n                                return <Tab key={i}>{t('GridTabs.branch') + ' ' + i}</Tab>;\n                            } else {\n                                return <Tab key={i}>{t('GridTabs.external') + ' ' + i}</Tab>;\n                            }\n                        }\n                    })}\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        alignSelf=\"center\"\n                        aria-label=\"New branch\"\n                        onClick={() => setIsNewBranchModalOpen(true)}\n                        icon={<MdAdd />}\n                    />\n\n                    <HStack marginLeft=\"auto\" marginRight={1}>\n                        <Button\n                            variant=\"outline\"\n                            size=\"xs\"\n                            leftIcon={<MdAdd />}\n                            onClick={() => setIsAddStationModalOpen(true)}\n                        >\n                            {t('GridTabs.addStation')}\n                        </Button>\n                        <Button size=\"xs\" colorScheme=\"primary\" onClick={handleEditLineSection}>\n                            {t('GridTabs.editLine')}\n                        </Button>\n                    </HStack>\n                </TabList>\n\n                <TabPanels flex={1} overflowY=\"auto\">\n                    {branches.map((_, i) => (\n                        <TabPanel key={i} padding={0} h=\"100%\" position=\"relative\">\n                            <RmgErrorBoundary suspenseFallback={<RmgLoader isIndeterminate />}>\n                                <StationAgGrid branchIndex={i} />\n                            </RmgErrorBoundary>\n                        </TabPanel>\n                    ))}\n                </TabPanels>\n            </Tabs>\n\n            <AddStationModal isOpen={isAddStationModalOpen} onClose={() => setIsAddStationModalOpen(false)} />\n            <NewBranchModal isOpen={isNewBranchModalOpen} onClose={() => setIsNewBranchModalOpen(false)} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { Alert, AlertIcon, AlertStatus, CloseButton, Link } from '@chakra-ui/react';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { closeGlobalAlert } from '../../redux/app/app-slice';\n\nexport default function GlobalAlerts() {\n    const dispatch = useRootDispatch();\n\n    const globalAlerts = useRootSelector(state => state.app.globalAlerts);\n\n    const handleAppOpen = (linkedApp: string) => {\n        if (rmgRuntime.isStandaloneWindow()) {\n            window.open(`/${linkedApp}`, '_blank');\n        } else {\n            rmgRuntime.openApp(linkedApp);\n        }\n    };\n\n    return (\n        <>\n            {Object.entries(globalAlerts).map(([status, { message, url, linkedApp }]) => (\n                <Alert key={status} status={status as AlertStatus} variant=\"solid\" size=\"xs\" pl={3} pr={1} py={0}>\n                    <AlertIcon />\n                    {linkedApp ? (\n                        <Link onClick={() => handleAppOpen(linkedApp)}>{message}</Link>\n                    ) : url ? (\n                        <Link href={url} target=\"_blank\">\n                            {message}\n                        </Link>\n                    ) : (\n                        message\n                    )}\n                    <CloseButton ml=\"auto\" onClick={() => dispatch(closeGlobalAlert(status as AlertStatus))} />\n                </Alert>\n            ))}\n        </>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Flex } from '@chakra-ui/react';\nimport { RmgLoader, RmgPage } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { setGlobalAlert } from '../../redux/app/app-slice';\nimport SvgRouter from '../../svgs/svg-router';\nimport SidePanel from '../side-panel/side-panel';\nimport PageHeader from '../page-header/page-header';\nimport GridTabs from '../ag-grid/grid-tabs';\nimport GlobalAlerts from './global-alerts';\n\nexport default function AppView() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const isLoading = useRootSelector(state => state.app.isLoading);\n\n    useEffect(() => {\n        const timeoutId = setTimeout(() => {\n            dispatch(\n                setGlobalAlert({\n                    status: 'info',\n                    message: t('rmpPromotion'),\n                    linkedApp: 'rmp',\n                })\n            );\n        }, 1000);\n\n        return () => clearTimeout(timeoutId);\n    }, []);\n\n    return (\n        <RmgPage>\n            {isLoading && <RmgLoader isIndeterminate={isLoading < 0} value={isLoading >= 0 ? isLoading : undefined} />}\n            <PageHeader />\n            <GlobalAlerts />\n            <Flex flex={1} overflow=\"hidden\" position=\"relative\">\n                <Flex as=\"section\" direction=\"column\" flex={1} ml={1} mr={1} overflow=\"hidden\">\n                    <Box>\n                        <SvgRouter />\n                    </Box>\n                    <GridTabs />\n                </Flex>\n\n                <SidePanel />\n            </Flex>\n\n            <canvas style={{ display: 'none' }} />\n        </RmgPage>\n    );\n}\n","import React from 'react';\nimport { useRootSelector } from '../../redux';\nimport { ButtonGroup, Flex, IconButton, SystemStyleObject } from '@chakra-ui/react';\nimport { getRelativeTime } from '../../util/utils';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport { RmgEnrichedButton } from '@railmapgen/rmg-components';\n\ninterface ParamSelectorProps {\n    selectedParam?: string;\n    onParamSelect: (id: string) => void;\n    onParamRemove: (id: string) => void;\n}\n\nconst styles: SystemStyleObject = {\n    flex: 1,\n    flexDirection: 'column',\n    h: 200,\n    overflowX: 'hidden',\n    overflowY: 'auto',\n    borderRadius: 'md',\n    borderWidth: 2,\n\n    '& .chakra-button__group': {\n        flexShrink: 0,\n        h: 10,\n\n        '& button': {\n            h: '100%',\n        },\n    },\n};\n\nexport default function ParamSelector(props: ParamSelectorProps) {\n    const { selectedParam, onParamSelect, onParamRemove } = props;\n    const { t } = useTranslation();\n\n    const { paramRegistry } = useRootSelector(state => state.app);\n\n    return (\n        <Flex sx={styles}>\n            {paramRegistry\n                .slice()\n                .sort((a, b) => {\n                    return (b.lastModified ?? 0) - (a.lastModified ?? 0);\n                })\n                .map(({ id, lastModified }) => (\n                    <ButtonGroup\n                        key={id}\n                        size=\"sm\"\n                        isAttached\n                        colorScheme={selectedParam === id ? 'primary' : undefined}\n                        variant={selectedParam === id ? 'solid' : 'ghost'}\n                    >\n                        <RmgEnrichedButton\n                            primaryText={t('Project ID') + ': ' + id}\n                            secondaryText={t('Last modified') + ': ' + getRelativeTime(lastModified)}\n                            onClick={() => onParamSelect(id)}\n                        />\n                        <IconButton\n                            aria-label=\"Remove this project\"\n                            icon={<MdDelete />}\n                            onClick={() => onParamRemove(id)}\n                        />\n                    </ButtonGroup>\n                ))}\n        </Flex>\n    );\n}\n","import React, { useRef, useState } from 'react';\nimport { RmgCard, RmgLoader, RmgPage } from '@railmapgen/rmg-components';\nimport { useSearchParams } from 'react-router-dom';\nimport { Button, Container, Heading, HStack, SystemStyleObject, useOutsideClick, VStack } from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { MdAdd, MdOpenInBrowser } from 'react-icons/md';\nimport { nanoid } from 'nanoid';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { Events, LocalStorageKey } from '../../constants/constants';\nimport { useRootDispatch } from '../../redux';\nimport { removeParam } from '../../redux/app/app-slice';\nimport ParamSelector from '../param-selector-view/param-selector';\n\nconst paramSelectorCardStyle: SystemStyleObject = {\n    flexDirection: 'column',\n    p: 2,\n\n    h3: {\n        m: 2,\n    },\n\n    '& > div': {\n        m: 2,\n        flexWrap: 'wrap',\n\n        '& > div:last-of-type': {\n            alignSelf: 'flex-end',\n\n            '& button': {\n                w: '100%',\n            },\n        },\n    },\n};\n\nexport default function ParamSelectorView() {\n    const { t } = useTranslation();\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    const urlParamId = searchParams.get('project');\n\n    const dispatch = useRootDispatch();\n    const [selectedParam, setSelectedParam] = useState<string>();\n    const selectorRef = useRef<HTMLDivElement>(null);\n\n    useOutsideClick({ ref: selectorRef, handler: () => setSelectedParam(undefined) });\n\n    const handleNew = () => {\n        setSearchParams({ project: nanoid() });\n        rmgRuntime.event(Events.NEW_PARAM, {});\n    };\n\n    const handleOpen = () => {\n        if (selectedParam) {\n            setSearchParams({ project: selectedParam });\n            rmgRuntime.event(Events.OPEN_PARAM, {});\n        }\n    };\n\n    const handleDelete = (id: string) => {\n        setSelectedParam(undefined);\n        dispatch(removeParam(id));\n        window.localStorage.removeItem(LocalStorageKey.PARAM_BY_ID + id);\n        rmgRuntime.event(Events.REMOVE_PARAM, {});\n    };\n\n    return (\n        <RmgPage justifyContent=\"center\">\n            {urlParamId && <RmgLoader isIndeterminate />}\n            <Container>\n                <RmgCard sx={paramSelectorCardStyle}>\n                    <Heading as=\"h3\" size=\"lg\">\n                        {t('Saved projects')}\n                    </Heading>\n\n                    <HStack ref={selectorRef}>\n                        <ParamSelector\n                            selectedParam={selectedParam}\n                            onParamSelect={setSelectedParam}\n                            onParamRemove={handleDelete}\n                        />\n\n                        <VStack>\n                            <Button leftIcon={<MdAdd />} onClick={handleNew}>\n                                {t('Blank project')}\n                            </Button>\n                            <Button\n                                leftIcon={<MdOpenInBrowser />}\n                                onClick={handleOpen}\n                                isDisabled={selectedParam === undefined}\n                            >\n                                {t('Open project')}\n                            </Button>\n                        </VStack>\n                    </HStack>\n                </RmgCard>\n            </Container>\n        </RmgPage>\n    );\n}\n","import { LanguageCode } from '@railmapgen/rmg-translate';\nimport { RootDispatch } from '../index';\nimport { LocalStorageKey, RMGParam, RmgStyle } from '../../constants/constants';\nimport { updateParam } from '../../utils';\nimport { setFullParam } from '../param/action';\nimport { initParam } from '../param/util';\nimport { setCurrentParamId } from './app-slice';\n\nexport const readParam = (paramId: string, language: LanguageCode) => {\n    return (dispatch: RootDispatch) => {\n        dispatch(setCurrentParamId(paramId));\n\n        try {\n            const paramStr = window.localStorage.getItem(LocalStorageKey.PARAM_BY_ID + paramId);\n            if (paramStr === null) {\n                throw new Error(`Param ID=${paramId} does not exist in localStorage`);\n            }\n            const nextParam = updateParam(JSON.parse(paramStr)) as RMGParam;\n            dispatch(setFullParam(nextParam));\n        } catch (err) {\n            console.warn('Failed to parse param.', err);\n            console.log('Initiating new param for ID=' + paramId);\n\n            const nextParam = initParam(RmgStyle.MTR, language);\n            dispatch(setFullParam(nextParam));\n        }\n    };\n};\n","import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport AppView from './app-view';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport rmgRuntime, { RmgEnv } from '@railmapgen/rmg-runtime';\nimport { LanguageCode } from '@railmapgen/rmg-translate';\nimport ParamSelectorView from '../param-selector-view';\nimport { readParam } from '../../redux/app/action';\nimport { getParamMap } from '../../util/param-manager-utils';\nimport { nanoid } from 'nanoid';\n\nexport default function AppRouter() {\n    const dispatch = useRootDispatch();\n\n    const { currentParamId } = useRootSelector(state => state.app);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const paramId = searchParams.get('project');\n\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    useEffect(() => {\n        console.log('searchParam: project=' + paramId);\n        if (paramId) {\n            if (paramId === currentParamId) {\n                console.log('AppRouter:: Store param ID matches URL param ID. Rendering app view...');\n                setIsLoaded(true);\n            } else {\n                if (rmgRuntime.getEnv() === RmgEnv.PRD) {\n                    const paramMap = getParamMap();\n                    const paramIds = Object.keys(paramMap);\n                    if (paramIds.length && !paramIds.includes(paramId)) {\n                        console.warn(\n                            'AppRouter:: URL param ID does not exist in localStorage. Reset to first param in localStorage in PRD env.'\n                        );\n                        const paramMap = getParamMap();\n                        setSearchParams({ project: Object.keys(paramMap)[0] });\n                        return;\n                    }\n                }\n\n                console.log(`AppRouter:: Reading param (ID=${paramId}) from localStorage`);\n                dispatch(readParam(paramId, rmgRuntime.getLanguage() as LanguageCode));\n                setIsLoaded(true);\n            }\n        } else {\n            if (rmgRuntime.getEnv() === RmgEnv.PRD) {\n                console.log('AppRouter:: Redirect to first param in localStorage in PRD env');\n                const paramMap = getParamMap();\n                setSearchParams({ project: Object.keys(paramMap)[0] ?? nanoid() });\n            } else {\n                console.log('AppRouter:: No URL param ID provided. Rendering param selector view...');\n            }\n        }\n    }, [paramId]);\n\n    return isLoaded ? <AppView /> : <ParamSelectorView />;\n}\n","import { RootDispatch, RootState } from '../index';\nimport { ColineInfo, InterchangeInfo, StationDict } from '../../constants/constants';\nimport { setColineBulk } from './action';\nimport { nanoid } from 'nanoid';\n\n// Cartesian product of multiple arrays in JavaScript\n// https://stackoverflow.com/questions/12303989/cartesian-product-of-multiple-arrays-in-javascript\n// Equivalent typescript version\n// https://gist.github.com/ssippe/1f92625532eef28be6974f898efb23ef?permalink_comment_id=3364149#gistcomment-3364149\nfunction cartesian<T>(...allEntries: T[][]): T[][] {\n    return allEntries.reduce<T[][]>(\n        (results, entries) =>\n            results\n                .map(result => entries.map(entry => result.concat([entry])))\n                .reduce((subResults, result) => subResults.concat(result), []),\n        [[]]\n    );\n}\n\n/**\n * Coline branch is also known as the lower branch.\n */\nexport const isColineBranch = (branch: string[], stnList: StationDict) =>\n    stnList[branch[0]].children.indexOf(branch[1]) ? true : false;\n\nexport const getPossibleStnIdsFromMainLine = (branches: string[][], stnList: StationDict) => [\n    branches[0][1], // skip linestart\n    branches[0][branches[0].length - 2], // skip lineend\n    ...branches[0].filter(stnId =>\n        // for every station in the main line, find if it branches out at this station\n        branches\n            .slice(1)\n            .filter(branch => isColineBranch(branch, stnList))\n            // branches after the first/main line may not have linestart or lineend\n            .map(branch => branch.filter(stnId => !['linestart', 'lineend'].includes(stnId)))\n            // only stations at both ends need to be taken into consideration\n            .map(branch => [branch[0], branch[branch.length - 1]])\n            .flat()\n            .includes(stnId)\n    ),\n];\n\nexport const getPossibleStnIdsFromBranchLine = (branches: string[][], stnList: StationDict) =>\n    branches\n        .slice(1)\n        .filter(branch => isColineBranch(branch, stnList))\n        .map(branch => branch.filter(stnId => !['linestart', 'lineend'].includes(stnId)))\n        .map(branch => [branch[0], branch[branch.length - 1]]);\n\nexport const getPossibleCombinations = (branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): [string, string][] => {\n        const branches = getState().helper.branches;\n\n        if (branchIndex === 0) {\n            const stnList = getState().param.stn_list;\n            const possibleStnIdsFromMainLine = getPossibleStnIdsFromMainLine(branches, stnList);\n            return cartesian(possibleStnIdsFromMainLine, possibleStnIdsFromMainLine).filter(\n                val => val[0] !== val[1]\n            ) as [string, string][];\n        } else {\n            const branch = branches[branchIndex];\n            if (branch) {\n                const b = branch.filter(id => !['linestart', 'lineend'].includes(id));\n                return [[b[0], b.slice(-1)[0]]];\n            } else {\n                return [];\n            }\n        }\n    };\n};\n\n/**\n * Calculate row span for displaying track sharing column in StationAgGrid\n * @param stationId id of station that begins to span rows\n * @param branchIndex index of branch that the grid is displaying\n */\nexport const getRowSpanForColine = (stationId: string, branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): [number, string | undefined] => {\n        const coline = getState().param.coline;\n        const branch = getState().helper.branches[branchIndex];\n\n        for (let [clId, cl] of Object.entries(coline)) {\n            if (cl.from === stationId && branch.includes(cl.to)) {\n                const thisIndex = branch.indexOf(stationId);\n                const thatIndex = branch.indexOf(cl.to);\n                if (thatIndex > thisIndex) {\n                    return [thatIndex - thisIndex + 1, clId];\n                }\n            } else if (cl.to === stationId && branch.includes(cl.to)) {\n                const thisIndex = branch.indexOf(stationId);\n                const thatIndex = branch.indexOf(cl.from);\n                if (thatIndex > thisIndex) {\n                    return [thatIndex - thisIndex + 1, clId];\n                }\n            }\n        }\n        return [0, undefined];\n    };\n};\n\n/**\n * Verify station selections from table are consecutive, which is the prerequisite for track sharing.\n * @param selectedIds IDs of the selected stations (get by gridApi)\n * @param branchIndex\n */\nexport const verifyAreSelectionsConsecutive = (selectedIds: string[], branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): boolean => {\n        const branch = getState().helper.branches[branchIndex];\n\n        const from = selectedIds[0];\n        const to = selectedIds.slice(-1)[0];\n\n        const areConsecutiveSelections =\n            branch.slice(branch.indexOf(from), branch.indexOf(to) + 1).toString() === selectedIds.toString();\n        if (!areConsecutiveSelections) {\n            console.log('verifyAreSelectionsConsecutive():: Selections are NOT consecutive');\n            return false;\n        } else {\n            return true;\n        }\n    };\n};\n\n/**\n *  Checks the validity of from and to. Currently we accept coline if it:\n 1. Start from either ends of the mainline or branch stations and\n terminate at either ends of the mainline or branch stations.\n 2. Start from the one end of the branch line and\n terminate at the other end of the same branch line.\n\n * @param from station id from\n * @param to station id to\n */\nexport const checkColineValidity = (from: string, to: string) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const stnList = getState().param.stn_list;\n        const branches = getState().helper.branches;\n\n        if (from === to) {\n            throw new Error('addColine():: failed for same stnId');\n        }\n        // calculate if coline is in the main line\n        const colineInMainLine = getPossibleStnIdsFromMainLine(branches, stnList).filter(stnId =>\n            [from, to].includes(stnId)\n        );\n        // calculate if coline is in one branch line\n        const colineInBranches = getPossibleStnIdsFromBranchLine(branches, stnList).filter(terminals =>\n            [from, to].every(stnId => terminals.includes(stnId))\n        );\n        // see if coline is in the main line\n        if (colineInMainLine.length === 2 && colineInBranches.length > 0) {\n            throw new Error(`addColine():: main check failed for ${from}, ${to}`);\n        }\n        // see if coline is in one branch line\n        if (colineInMainLine.length !== 2 && colineInBranches.length !== 1) {\n            throw new Error(`addColine():: branch check failed for ${from}, ${to}`);\n        }\n    };\n};\n\nexport const findAllColinesInBranch = (branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const coline = getState().param.coline;\n        const branches = getState().helper.branches;\n        const branch = branches[branchIndex];\n\n        if (branch) {\n            return Object.entries(coline).reduce<Record<string, ColineInfo>>((acc, cur) => {\n                if (branch.includes(cur[1].from) && branch.includes(cur[1].to)) {\n                    return { ...acc, [cur[0]]: cur[1] };\n                } else {\n                    return { ...acc };\n                }\n            }, {});\n        } else {\n            return {};\n        }\n    };\n};\n\n/**\n * Remove related coline when the deleteStn is the coline `from` or `to` station.\n */\nexport const removeInvalidColineOnRemoveStation = (deleteStnId: string) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        if (Object.keys(colineInfo).length === 0) return;\n\n        const nextColine = Object.entries(colineInfo).reduce<Record<string, ColineInfo>>((acc, cur) => {\n            if (cur[1].from !== deleteStnId && cur[1].to !== deleteStnId) {\n                return { ...acc, [cur[0]]: cur[1] };\n            } else {\n                return { ...acc };\n            }\n        }, {});\n\n        dispatch(setColineBulk(nextColine));\n    };\n};\n\nexport const addColine = (from: string, to: string, colors: InterchangeInfo[], display: boolean = true) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        dispatch(checkColineValidity(from, to));\n        dispatch(\n            setColineBulk({\n                ...colineInfo,\n                [nanoid(4)]: { from: from, to: to, colors: colors, display: display },\n            })\n        );\n    };\n};\n\nexport const updateColine = (colineId: string, from: string, to: string, display = true) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        if (colineId in colineInfo) {\n            dispatch(checkColineValidity(from, to));\n\n            const newColineInfo = {\n                ...colineInfo,\n                [colineId]: { ...colineInfo[colineId], from, to, display },\n            };\n\n            dispatch(setColineBulk(newColineInfo));\n        }\n    };\n};\n\nexport const removeColine = (colineId: string) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        if (colineId in colineInfo) {\n            const { [colineId]: _, ...nextColine } = colineInfo;\n            dispatch(setColineBulk(nextColine));\n        }\n    };\n};\n\n/**\n *\n * @param colineId\n * @param interchangeInfo\n */\nexport const addColineColor = (colineId: string, interchangeInfo: InterchangeInfo) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        colineInfo[colineId].colors = [...colineInfo[colineId].colors, interchangeInfo];\n\n        dispatch(setColineBulk(colineInfo));\n    };\n};\n\nexport const removeColineColor = (colineId: string, interchangeIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        if (colineId in colineInfo && colineInfo[colineId].colors.length > interchangeIndex) {\n            const nextColours = colineInfo[colineId].colors.filter((_, colineIdx) => colineIdx !== interchangeIndex);\n            if (nextColours.length === 0) {\n                // remove entire coline\n                const { [colineId]: _, ...nextColine } = colineInfo;\n                dispatch(setColineBulk(nextColine));\n            } else {\n                // update coline colour list\n                const nextColine = {\n                    ...colineInfo,\n                    [colineId]: { ...colineInfo[colineId], colors: nextColours },\n                };\n                dispatch(setColineBulk(nextColine));\n            }\n        }\n    };\n};\n\nexport const updateColineColor = (colineId: string, interchangeIndex: number, interchangeInfo: InterchangeInfo) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        if (colineId in colineInfo && colineInfo[colineId].colors.length > interchangeIndex) {\n            colineInfo[colineId].colors = colineInfo[colineId].colors.map((int, colineIdx) =>\n                colineIdx === interchangeIndex\n                    ? ([0, 1, 2, 3, 4, 5].map(i =>\n                          interchangeInfo[i] === undefined ? int[i] : interchangeInfo[i]\n                      ) as InterchangeInfo)\n                    : int\n            );\n\n            dispatch(setColineBulk(colineInfo));\n        }\n    };\n};\n\n// DEBUG PROXY\n// declare const window: any;\n// window.addColine = addColine;\n// window.updateColine = updateColine;\n// window.removeColine = removeColine;\n// window.rmgStore.dispatch(window.removeColine(2))\n// let t = ['shanghai', 'sh4', '#5F259F', '#fff', '4号线', 'Line 4']\n// window.rmgStore.dispatch(window.addColine('s9tt', 'l1mz', [t]))\n","import { Note, RmgStyle, StationInfo } from './constants/constants';\nimport { nanoid } from 'nanoid';\n\nexport const updateParam = (param: { [x: string]: any }) => {\n    // Version 0.10\n    if (!('line_name' in param)) {\n        param.line_name = ['路線名', 'Name of Line'];\n    }\n    if (!('dest_legacy' in param)) {\n        param.dest_legacy = false;\n    }\n\n    // Version 0.11\n    delete param.fontZH;\n    delete param.fontEN;\n    delete param.weightZH;\n    delete param.weightEN;\n\n    // Version 0.12\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('branch' in stnInfo)) {\n            param.stn_list[stnId].branch = { left: [], right: [] };\n            if (stnInfo.children.length === 2) {\n                param.stn_list[stnId].branch.right = ['through', stnInfo.children[1]];\n            } else {\n                param.stn_list[stnId].branch.right = [];\n            }\n            if (stnInfo.parents.length === 2) {\n                param.stn_list[stnId].branch.left = ['through', stnInfo.parents[1]];\n            } else {\n                param.stn_list[stnId].branch.left = [];\n            }\n        }\n    }\n\n    // Version 1.2\n    if (!('psd_num' in param)) {\n        param.psd_num = '1';\n    } else {\n        param.psd_num = param.psd_num.toString();\n    }\n\n    if (!('line_num' in param)) {\n        param.line_num = '1';\n    }\n    if (param.theme.length === 3) {\n        param.theme.push('#fff');\n    }\n\n    // Version 1.3\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('num' in stnInfo)) {\n            param.stn_list[stnId].num = '00';\n        }\n        if ('interchange' in stnInfo) {\n            stnInfo.interchange.map((arr: any) => {\n                return arr.forEach((intInfo: any) => {\n                    if (intInfo.length === 5) {\n                        intInfo.splice(3, 0, '#fff');\n                    }\n                });\n            });\n        }\n    }\n\n    // Version 1.5\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (stnInfo.change_type === 'osi22_end_p') {\n            param.stn_list[stnId].change_type = 'osi22_pr';\n        }\n        if (stnInfo.change_type === 'osi22_end_u') {\n            param.stn_list[stnId].change_type = 'osi22_ur';\n        }\n    }\n\n    // Version 2.1\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('interchange' in stnInfo)) {\n            param.stn_list[stnId].interchange = [[]];\n        }\n    }\n\n    // Version 1.4\n    // Version 2.2\n    // Version 2.3\n    if (!('info_panel_type' in param)) {\n        param.info_panel_type = 'gz28';\n    } else {\n        param.info_panel_type = (type => {\n            switch (type) {\n                case 'gz_1':\n                case 'panasonic':\n                    return 'gz28';\n                case 'gz_2':\n                    return 'gz6';\n                case 'gz_3':\n                    return 'gz3';\n                default:\n                    return type;\n            }\n        })(param.info_panel_type);\n    }\n\n    if (!('direction_gz_x' in param)) {\n        param.direction_gz_x = 50;\n    }\n    if (!('direction_gz_y' in param)) {\n        param.direction_gz_y = 70;\n    }\n\n    // Version 2.6\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('transfer' in stnInfo)) {\n            param.stn_list[stnId].transfer = {\n                // type: stnInfo.change_type?.split('_')[0] as 'none' | 'int2' | 'int3' | 'osi11' | 'osi12' | 'osi22',\n                tick_direc:\n                    stnInfo.change_type === 'none' || stnInfo.change_type === 'int2'\n                        ? 'r'\n                        : (stnInfo.change_type?.split('_')[1].split('').slice().reverse()[0] as 'l' | 'r'),\n                paid_area:\n                    stnInfo.change_type?.indexOf('osi') !== -1 ? stnInfo.change_type?.split('_')[1][0] === 'p' : true,\n                osi_names: stnInfo.change_type?.indexOf('osi') !== -1 ? [stnInfo.interchange[1][0]] : [],\n                info:\n                    stnInfo.interchange.length === 2\n                        ? [stnInfo.interchange[0], stnInfo.interchange[1].slice(1)]\n                        : stnInfo.interchange,\n            };\n        }\n        delete param.stn_list[stnId].change_type;\n        delete param.stn_list[stnId].interchange;\n    }\n\n    // Version 2.8\n    // Version 3.0\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('services' in stnInfo)) {\n            param.stn_list[stnId].services = ['local'];\n        }\n        if (!('facility' in stnInfo)) {\n            if ('usage' in stnInfo) {\n                param.stn_list[stnId].facility = stnInfo.usage;\n            } else {\n                param.stn_list[stnId].facility = '';\n            }\n        }\n        delete param.stn_list[stnId].usage;\n    }\n\n    // Version 3.4\n    if (!('customiseMTRDest' in param)) {\n        param.customiseMTRDest = { isLegacy: param.dest_legacy || false, terminal: false };\n    }\n    delete param.dest_legacy;\n\n    // Version 3.4\n    if (!('svgWidth' in param)) {\n        param.svgWidth = {\n            destination: param.svg_dest_width,\n            runin: param.svg_dest_width,\n            railmap: param.svg_width,\n            indoor: param.svg_width,\n        };\n    }\n    // Version 3.8\n    if (!('indoor' in param.svgWidth)) {\n        param.svgWidth.indoor = param.svgWidth.railmap;\n    }\n    delete param.svg_width;\n    delete param.svg_dest_width;\n\n    if (!('notesGZMTR' in param)) {\n        param.notesGZMTR = [];\n    }\n\n    param.notesGZMTR = param.notesGZMTR?.map((note: any[]) =>\n        note.length === 4 ? note.concat([false]) : note\n    ) as Note[];\n\n    // Version 3.5.3\n    delete param.char_form;\n    delete param.show_outer;\n    delete param.strip_pc;\n    delete param.txt_bg_gap;\n\n    // Version 3.5.4\n    if (!('namePosMTR' in param)) {\n        param.namePosMTR = {\n            isStagger: true,\n            isFlip: param.txt_flip,\n        };\n    }\n    delete param.txt_flip;\n\n    // Version 3.5.6\n    // Version 3.6.2\n    Object.keys(param.stn_list).forEach(stnId => {\n        if (!('secondaryName' in param.stn_list[stnId])) {\n            param.stn_list[stnId].secondaryName = false;\n        } else {\n            if (param.stn_list[stnId].secondaryName !== false && param.stn_list[stnId].secondaryName.join() === ',') {\n                param.stn_list[stnId].secondaryName = false;\n            }\n        }\n\n        if ('type' in param.stn_list[stnId].transfer) {\n            delete param.stn_list[stnId].transfer.type;\n        }\n    });\n\n    // Version 3.9.36\n    // Set unknown and missing style to mtr\n    param.style =\n        param.style === undefined || !Object.values(RmgStyle).includes(param.style) ? RmgStyle.MTR : param.style;\n\n    // Version 5.0\n    // Add coline and loop default value\n    param.coline = param.coline ?? [];\n    param.loop = param.loop ?? false;\n    param.loop_info =\n        param.loop_info === undefined\n            ? { bank: true, left_and_right_factor: 0, bottom_factor: 1 }\n            : {\n                  ...param.loop_info,\n                  bottom_factor: Math.max(param.loop_info.bottom_factor, 1),\n              };\n    for (let [stnId, stnInfo] of Object.entries(param.stn_list as { [x: string]: any })) {\n        if (!('loop_pivot' in stnInfo)) {\n            param.stn_list[stnId].loop_pivot = false;\n        }\n    }\n\n    // Version 5.0.0-19\n    // convert list of coline to key-value pairs\n    if (Array.isArray(param.coline)) {\n        param.coline = param.coline.reduce((acc, cur) => ({ ...acc, [nanoid(4)]: cur }), {});\n    }\n\n    // Version 5.0.4\n    // Convert platform_num from `string | false` to `''`\n    if (param.platform_num === false) {\n        param.platform_num = '';\n    }\n\n    // Version 5.4.4\n    // Add one_line switch and int_padding for station\n    Object.values(param.stn_list).forEach(stn => {\n        const s = stn as StationInfo;\n        s.one_line = s.one_line ?? false;\n        s.int_padding = s.int_padding ?? (param.loop ? 250 : 355);\n    });\n\n    // Version 5.4.19\n    if (param.branchSpacingPct === undefined) {\n        if (param.style === RmgStyle.SHMetro) {\n            param.branchSpacingPct = Math.round((param.branch_spacing / param.svg_height) * 300);\n        } else {\n            param.branchSpacingPct = Math.round((param.branch_spacing / param.svg_height) * 200);\n        }\n\n        delete param.branch_spacing;\n    }\n\n    return param;\n};\n\n/**\n * Format display style of station name as `[num: ]nameZH,nameEN`.\n */\nexport const formatStnName = (stnInfo: StationInfo, style: RmgStyle) =>\n    (style === RmgStyle.GZMTR ? (stnInfo?.num || '-') + ': ' : '') + stnInfo?.name.join().replace('\\\\', ' ');\n\nexport const waitForMs = (ms: number) => {\n    return new Promise<void>(resolve => {\n        setTimeout(resolve, ms);\n    });\n};\n","var map = {\n\t\"./gzmtr/index\": [\n\t\t226,\n\t\t226\n\t],\n\t\"./mtr/index\": [\n\t\t31711,\n\t\t9014,\n\t\t1711\n\t],\n\t\"./shmetro/index\": [\n\t\t58049,\n\t\t9014,\n\t\t8049\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 33489;\nmodule.exports = webpackAsyncContext;"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","all","slice","style","position","flexDirection","overflowX","content","margin","flex","border","SvgRouter","useRootSelector","state","app","canvasToShow","canvasScale","param","svgHeight","svg_height","rmgStyle","canvasMap","useState","setCanvasMap","useEffect","default","catch","console","error","useCanvasMap","document","getElementById","href","process","rmgRuntime","Events","filteredCanvas","filter","canvas","includes","scaledHeight","minH","sx","length","isIndeterminate","minWidth","height","InfoSection","useTranslation","dispatch","useRootDispatch","selectedStation","log","stn_list","num","name","secondaryName","fields","type","label","value","placeholder","onChange","updateStationNum","hidden","RmgStyle","updateStationName","updateStationSecondaryName","p","as","size","minW","FlagSvgEmoji","props","countryCode","svgFilename","undefined","src","setSrc","err","message","alt","h","mr","CityPicker","defaultValueId","i18n","currentItem","cityList","item","displayValue","languages","lng","find","data","sort","a","b","CityCode","localeCompare","displayHandler","isCensorTWFlag","country","LanguageCode","isWindowsClient","navigator","platform","flagSvg","countryList","flagEmoji","predicate","input","values","some","defaultValue","ColourPicker","city","paletteList","cityCode","setPaletteList","usePalette","palette","displayName","fg","MonoColour","bg","colour","ColourModal","isOpen","onClose","defaultTheme","onUpdate","linkColour","useColorModeValue","setCityCode","lineCode","setLineCode","bgColour","setBgColour","fgColour","setFgColour","toString","paletteFields","component","line","customFields","variant","options","isSubmitEnabled","isFitted","colorScheme","w","defaultIndex","fontSize","marginRight","color","onClick","window","open","MdOpenInNew","disabled","ColourUtil","hex","parseInt","alpha","this","hexToRgb","join","hex1","hex2","reduce","acc","cur","idx","Math","pow","ThemeButton","theme","mt","_hover","fade","icon","InterchangeCard","interchangeList","onAdd","onDelete","isModalOpen","setIsModalOpen","selectedIndex","setSelectedIndex","stationList","usedNameList","zhAcc","enAcc","Set","concat","transfer","info","flat","it","interchangeFields","i","val","optionList","direction","spacing","align","noLabel","InterchangeSection","getOSINameFields","setIndex","osi_names","updateStationOsiName","isChecked","paid_area","checked","updateStationPaidArea","oneLine","handleAdd","addInterchange","handleDelete","j","removeInterchange","handleUpdate","updateInterchange","selections","ShortDirection","tick_direc","updateStationTickDirection","infoList","Fragment","alignSelf","leftIcon","MoreSection","loop","services","facility","loop_pivot","one_line","int_padding","serviceSelections","Services","service","mtrFacilityOptions","Facilities","shmetroFacilityOptions","updateStationServices","multiSelect","updateStationFacility","updateStationLoopPivot","updateStationOneLine","validator","Number","isInteger","updateStationIntPadding","_","updateStationIntPaddingToAll","BranchSection","parents","children","branch","branchOptions","BranchStyle","getFirstStationOptions","Direction","positionOptions","upper","lower","getFields","updateStationBranchType","updateStationBranchFirstStation","indexOf","flipStationBranchPosition","StationSidePanel","LayoutSection","useDispatch","svgWidth","y_pc","branchSpacingPct","padding","direction_gz_x","direction_gz_y","canvasConfig","setSvgWidth","setSvgHeight","min","max","setYPercentage","setBranchSpacingPct","setPaddingPercentage","setDirectionIndicatorX","setDirectionIndicatorY","DesignSection","lineName","line_name","lineNum","line_num","platformNum","platform_num","psdNum","psd_num","namePosMTR","customiseMTRDest","info_panel_type","directionSelections","panelTypeGZMTROptions","PanelTypeGZMTR","panelTypeSHMetroOptions","PanelTypeShmetro","setLineName","setLineNum","setPlatform","setPsdNum","setPanelType","nextDirection","setDirection","staggerNameSelections","mtrSpecifiedFields","isStagger","staggerStationNames","flipStationNames","isLegacy","toggleLineNameBeforeDestination","terminal","customiseDestinationName","nextTheme","setTheme","LoopSection","branches","helper","loop_info","bank","left_and_right_factor","bottom_factor","branch_stn_ids","v","stn_id","abs","left_and_right_factor_max","floor","setLoop","setLoopBank","setLoopLeftAndRightFactor","setLoopBottomFactor","GZMTRNoteCard","note","fields1","fields2","GZMTRNoteSection","notesGZMTR","updateNote","removeNote","addNote","StyleSidePanel","getYShareMTR","stnId","stnList","stnPred","RemoveConfirmModal","setError","status","stationId","result","getState","currentStationIndex","current_stn_idx","setSidePanelMode","SidePanelMode","setSelectedStation","removeInvalidColineOnRemoveStation","newStnList","JSON","parse","stringify","forEach","parId","childId","right","left","splice","setStationsBulk","removeStation","success","ml","StationSidePanelFooter","isRemoveModalOpen","setIsRemoveModalOpen","setCurrentStation","ColineCard","colineInfo","routeOptions","onUpdateRoute","onUpdateColourInfo","from","to","colors","ColineSection","selectedBranch","colineInfoList","findAllColinesInBranch","possibleCombinations","getPossibleCombinations","entries","colineId","route","split","updateColine","setGlobalAlert","colourInfo","updateColineColor","colourIndex","removeColineColor","handleDeleteColour","addColine","AutoNumModal","where","setWhere","setFrom","maxLength","setMaxLength","setSort","isColineBranch","isNaN","debouncedDelay","asc","desc","isSubmitDisabled","isDisabled","autoNumbering","getBranchType","branchIndex","getPossibleStations","mainBranch","connect2MainLine","isValid","isStationValid2ConnectBranch","nextStationList","linestart","seconndLastId","lineend","getPossibleDirection","beginStation","leftStationIdList","endStation","rightStationIdList","isLeftPossible","every","isRightPossible","ConnectDisconnectCard","isEditing","setIsEditing","selection","setSelection","trimedBranch","branchEndId","branchEndInfo","possibleStations","branchType","possibleDirection","isConnectable","isDisconnectable","alignItems","mx","secondEndStation","disconnectFromMainLine","disabledOptions","target","ActionSection","isAutoNumModalOpen","setIsAutoNumModalOpen","wrap","flexShrink","flexBasis","marginTop","reverseStations","BranchSidePanel","SidePanel","sidePanelMode","mode","STATION","header","text","body","footer","STYLE","BRANCH","CLOSE","width","downloadAs","filename","blob","Blob","downloadBlobAs","url","URL","createObjectURL","createElement","download","appendChild","click","removeChild","revokeObjectURL","readFileAsText","file","reader","FileReader","onloadend","readAsText","isSafari","userAgent","getRelativeTime","timestamp","deltaSeconds","Date","getTime","cloneSvgCanvas","isTransparent","isShowBorder","scale","key","querySelector","getPropertyValue","match","thisSVGHeight","elem","cloneNode","setAttribute","setProperty","tag","querySelectorAll","l","sheet","cssRules","rule","cssText","txt","s","textContent","prepend","getBase64FontFace","uris","alert","readBlobAsDataURL","readAsDataURL","svgEl","uniqueCharacters","Array","el","innerHTML","replace","fonts","load","fontFaceList","styleSheet","distinctCssRules","font","matchedRule","cssStyle","fontFamily","family","unicodeRange","ruleStyle","matchedStyle","cssRule","fetch","getAbsoluteUrl","fontResp","fontDataUri","ruleStyleSrc","test","isWait","svgW","viewBox","baseVal","svgH","devicePixelRatio","ctx","getContext","clearRect","elStyle","getComputedStyle","fill","dominantBaseline","textAnchor","reject","img","Image","onload","setTimeout","drawImage","toBlob","onerror","btoa","unescape","encodeURIComponent","outerHTML","DownloadModal","canvasToDownload","setCanvasToDownload","setIsTransparent","setIsShowBorder","setScale","format","setFormat","currentStationId","canvasOptions","scaleOptions","formatOptions","png","svg","handleDownload","option","setLoadingProgress","stationIdListToDownload","zip","JSZip","index","waitForMs","replaceAll","removeAttribute","base64","generateAsync","zipData","stopLoading","DownloadActions","isDownloadModalOpen","setIsDownloadModalOpen","Button","rightIcon","valueOf","UploadConfirmModal","cancelRef","uploadedParam","onOpenParam","leastDestructiveRef","fontWeight","ref","TemplateModal","handleSelect","company","startLoading","isLazy","orientation","maxW","companyConfig","translateText","templateList","c","templates","Flex","py","px","template","primaryText","secondaryText","uploadBy","initTheme","initLineName","language","initStationInfo","initParam","lineStartInfo","lineEndInfo","station1Id","nanoid","station1Info","station2Id","station2Info","destination","runin","railmap","indoor","isFlip","coline","OpenActions","isUploadModalOpen","setIsUploadModalOpen","isTemplateModalOpen","setIsTemplateModalOpen","setUploadedParam","uploadModalCloseRef","useRef","fileInputRef","handleUpload","event","files","paramStr","updatedParam","updateParam","handleOpenParam","setCanvasToShow","CanvasType","reRenderApp","openFromNewParam","accept","current","HeaderActions","PageHeader","styleSelections","canvasSelections","setStyle","handleStyleChange","step","setCanvasScale","addStation","newId","newStationInfo","verifyNewBranchEnds","AddStationModal","preposition","setPreposition","pivot","setPivot","stationIdList","selectableStations","handleSelectWhere","before","after","addStationToExistingBranch","NewBranchModal","setTo","setPosition","fromError","setFromError","toError","setToError","newBranchEndStationOptions","isTwoSidedBranchOut","isYShare0","new","ext","handleSelectFrom","isInvalid","Boolean","handleSelectTo","title","StationAgGrid","lazy","GridTabs","isAddStationModalOpen","setIsAddStationModalOpen","isNewBranchModalOpen","setIsNewBranchModalOpen","overflow","display","setSelectedBranch","marginLeft","overflowY","suspenseFallback","GlobalAlerts","globalAlerts","linkedApp","pl","pr","handleAppOpen","closeGlobalAlert","AppView","isLoading","timeoutId","clearTimeout","styles","borderRadius","borderWidth","ParamSelector","selectedParam","onParamSelect","onParamRemove","paramRegistry","lastModified","isAttached","paramSelectorCardStyle","h3","m","flexWrap","ParamSelectorView","useSearchParams","searchParams","setSearchParams","urlParamId","get","setSelectedParam","selectorRef","useOutsideClick","handler","justifyContent","removeParam","localStorage","removeItem","LocalStorageKey","project","AppRouter","currentParamId","paramId","isLoaded","setIsLoaded","RmgEnv","paramMap","getParamMap","paramIds","warn","setCurrentParamId","getItem","nextParam","setFullParam","readParam","getPossibleStnIdsFromMainLine","possibleStnIdsFromMainLine","allEntries","results","entry","subResults","cartesian","getRowSpanForColine","clId","cl","thisIndex","thatIndex","checkColineValidity","colineInMainLine","colineInBranches","getPossibleStnIdsFromBranchLine","terminals","deleteStnId","nextColine","setColineBulk","newColineInfo","interchangeIndex","nextColours","colineIdx","interchangeInfo","int","dest_legacy","fontZH","fontEN","weightZH","weightEN","stnInfo","push","interchange","arr","intInfo","change_type","reverse","usage","svg_dest_width","svg_width","char_form","show_outer","strip_pc","txt_bg_gap","txt_flip","isArray","stn","round","branch_spacing","ms"],"sourceRoot":""}