{"version":3,"file":"static/js/railmapGZMTR.77f36111.chunk.js","mappings":"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","sources":["svgs/gzmtr/station-icon/station-icon.tsx","svgs/gzmtr/station-icon/station-number.tsx","svgs/mtr/line-diagram-utils.ts","svgs/railmap/methods/share.ts","svgs/gzmtr/line-icon/line-icon-type2.tsx","svgs/gzmtr/line-icon/interchange-box.tsx","svgs/gzmtr/line-icon/line-icon.tsx","svgs/gzmtr/station-name/station-name.tsx","svgs/gzmtr/station-name/station-secondary-name.tsx","svgs/gzmtr/station-name/express-tag.tsx","svgs/gzmtr/station-name/station-name-wrapper.tsx","svgs/railmap/main/station/station-gzmtr.tsx","svgs/railmap/main/main-gzmtr.tsx","svgs/railmap/railmap-gzmtr.tsx","svgs/gzmtr/psd-number.tsx","svgs/strip/strip-gzmtr.tsx"],"sourcesContent":["import React, { memo } from 'react';\n\ninterface StationIconProps {\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default memo(\n    function StationIcon(props: StationIconProps) {\n        const { passed, large } = props;\n\n        const pathD = large\n            ? 'M0,12.95 V-12.95 H-12.95 a12.95,12.95 0 0,0 0,25.9 h25.9 a12.95,12.95 0 0,0 0,-25.9 H0'\n            : 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\n\n        return <path d={pathD} fill=\"#fff\" strokeWidth={2} stroke={passed ? '#aaa' : 'var(--rmg-theme-colour)'} />;\n    },\n    (prevProps, nextProps) => prevProps.passed === nextProps.passed && prevProps.large === nextProps.large\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport StationIcon from './station-icon';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, passed, large, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g {...others}>\n            <StationIcon passed={passed} large={large} />\n            <g\n                textAnchor=\"middle\"\n                fontSize={13.5}\n                transform={large ? 'scale(1.4)' : ''}\n                fill={passed ? '#aaa' : '#000'}\n            >\n                <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                    <text ref={lineNumEl} className=\"rmg-name__zh\">\n                        {lineNum}\n                    </text>\n                </g>\n                <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                    <text ref={stnNumEl} className=\"rmg-name__zh\">\n                        {stnNum}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n}\n","import { StationDict } from '../../constants/constants';\n\n/**\n * @return - negative: above main line, positive: below main line\n */\nexport const getStationYShare = (stationId: string, branches: string[][], stationList: StationDict): number => {\n    const mainBranch = branches[0];\n\n    if (mainBranch.includes(stationId)) {\n        // on main branch\n        if (branches.slice(1).find(branch => branch.includes(stationId))) {\n            // node shared by multiple branches\n            return 0;\n        } else {\n            const openJawSiblingBranch = branches.slice(1).find(branch => {\n                const isLeftOpenJaw = branch[0] === 'linestart';\n                const hasSiblingBranchOpenJawOnTheLeft =\n                    mainBranch.indexOf(stationId) < mainBranch.indexOf(branch.slice(-1)[0]);\n\n                const isRightOpenJaw = branch.slice(-1)[0] === 'lineend';\n                const hasSiblingBranchOpenJawOnTheRight = mainBranch.indexOf(stationId) > mainBranch.indexOf(branch[0]);\n\n                return (\n                    (isLeftOpenJaw && hasSiblingBranchOpenJawOnTheLeft) ||\n                    (isRightOpenJaw && hasSiblingBranchOpenJawOnTheRight)\n                );\n            });\n\n            if (openJawSiblingBranch) {\n                // on main branch but open jaw\n                // NOTE: determine y share of node by children ordering, not by whether it's a branch or not (like GZMTR)\n                // TODO: Remove requirement on stationList arg\n                return stationList[openJawSiblingBranch[0]].children.indexOf(openJawSiblingBranch[1]) === 1 ? -1 : 1;\n            } else {\n                // pure main branch without siblings or main branch with sidings\n                return 0;\n            }\n        }\n    } else {\n        // on branch/sidings\n        const branchBelongsTo = branches.slice(1).find(branch => branch.includes(stationId));\n        if (branchBelongsTo) {\n            const isSiding = branchBelongsTo[0] !== 'linestart' && branchBelongsTo.slice(-1)[0] !== 'lineend';\n            if (isSiding) {\n                return stationList[branchBelongsTo[0]].children.indexOf(branchBelongsTo[1]) === 1 ? 1.2 : -1.2;\n            } else {\n                return stationList[branchBelongsTo[0]].children.indexOf(branchBelongsTo[1]) === 1 ? 1 : -1;\n            }\n        } else {\n            // fallback\n            return 0;\n        }\n    }\n};\n\nexport const getSidingPath = (coords: [number, number][]): string => {\n    const TURNING_RADIUS = 6;\n    const RIGHT_DOWN_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,1,${TURNING_RADIUS},${TURNING_RADIUS}`;\n    const DOWN_RIGHT_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,0,${TURNING_RADIUS},${TURNING_RADIUS}`;\n    const RIGHT_UP_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,0,${TURNING_RADIUS},-${TURNING_RADIUS}`;\n    const UP_RIGHT_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,1,${TURNING_RADIUS},-${TURNING_RADIUS}`;\n\n    let prevCoord: [number, number] | undefined;\n    let paths: string[] = [];\n\n    for (let coord of coords) {\n        if (!prevCoord) {\n            paths.push('M' + coord.join(','));\n        } else {\n            if (coord[1] === prevCoord[1]) {\n                // horizontal\n                paths.push('H' + coord[0]);\n            } else {\n                const midPointX = (coord[0] + prevCoord[0]) / 2 - (prevCoord[1] === 0 ? 0 : TURNING_RADIUS * 2);\n                paths.push('H' + midPointX);\n\n                if (coord[1] > prevCoord[1]) {\n                    // turn to below\n                    paths.push(RIGHT_DOWN_ARC);\n                    paths.push('V' + (coord[1] - TURNING_RADIUS));\n                    paths.push(DOWN_RIGHT_ARC);\n                } else {\n                    // turn to above\n                    paths.push(RIGHT_UP_ARC);\n                    paths.push('V' + (coord[1] + TURNING_RADIUS));\n                    paths.push(UP_RIGHT_ARC);\n                }\n\n                paths.push('H' + coord[0]);\n            }\n        }\n        // update prev coordinate\n        prevCoord = coord;\n    }\n\n    return paths.join(' ').replace(/( H([\\d.]+))+/g, ' H$2');\n};\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\nimport { getSidingPath } from '../../mtr/line-diagram-utils';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 0\n    ) {\n        const isMTR = this.name === 'StationsMTR';\n        let linePaths = {\n            main: [] as string[],\n            pass: [] as string[],\n            sidingMain: [] as string[],\n            sidingPass: [] as string[],\n        };\n\n        branches.forEach((branch, i) => {\n            const isSiding = branch[0] !== 'linestart' && branch.slice(-1)[0] !== 'lineend';\n\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            if (isSiding && isMTR) {\n                linePaths.sidingMain.push(getSidingPath(lineMainStns.map(id => [xs[id], ys[id]])));\n                linePaths.sidingPass.push(getSidingPath(linePassStns.map(id => [xs[id], ys[id]])));\n            } else {\n                linePaths.main.push(\n                    new this({ stnList, criticalPath: cp })._linePath(\n                        lineMainStns,\n                        lineXs,\n                        branches,\n                        xs,\n                        ys,\n                        branchSpacing,\n                        cp,\n                        e\n                    )\n                );\n                linePaths.pass.push(\n                    new this({ stnList, criticalPath: cp })._linePath(\n                        linePassStns,\n                        lineXs,\n                        branches,\n                        xs,\n                        ys,\n                        branchSpacing,\n                        cp,\n                        e\n                    )\n                );\n            }\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branch: string[], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n    let lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n    let linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n    if (lineMainStns.length === 1) {\n        linePassStns = branch;\n    }\n\n    if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n        // if two set disjoint\n        if (linePassStns[0] === branch[0]) {\n            // -1 -1 1 1\n            linePassStns.push(lineMainStns[0]);\n        } else if (\n            lineMainStns[0] === branch[0] &&\n            lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n            linePassStns.length\n        ) {\n            linePassStns = branch;\n            lineMainStns = [];\n        } else {\n            // 1 1 -1 -1\n            linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n        }\n    }\n\n    return {\n        main: lineMainStns,\n        pass: linePassStns,\n    };\n};\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\nimport { MAX_WIDTH } from './line-icon';\n\ninterface LineIconType2Props {\n    lineName: Name;\n    commonPart: string;\n}\n\nexport default memo(\n    function LineIconType2(props: LineIconType2Props) {\n        const { lineName, commonPart } = props;\n\n        const wrapperEl = useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = useState({ x: 0, height: 0, width: 0 } as DOMRect);\n        useEffect(() => {\n            wrapperEl.current && setBBox(wrapperEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const scale = MAX_WIDTH / Math.max(MAX_WIDTH, bBox.width);\n        const dx = (-bBox.x - bBox.width / 2) * scale;\n        const dy = (bBox.height * (1 - scale) * 1.2) / 2;\n\n        return (\n            <g ref={wrapperEl} transform={`translate(${dx},${dy})scale(${scale})`}>\n                <text className=\"rmg-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                    {commonPart}\n                    <tspan className=\"rmg-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                        {lineName[0].slice(commonPart.length).trim()}\n                    </tspan>\n                    <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                        {lineName[1].slice(commonPart.length).trim()}\n                    </tspan>\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.lineName.toString() === nextProps.lineName.toString()\n);\n","import React, { SVGProps } from 'react';\n\nexport default function InterchangeBox(props: SVGProps<SVGRectElement>) {\n    return <rect x={-22.5} height={24} width={45} rx={4.5} {...props} />;\n}\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { ColourHex, MonoColour, Name } from '../../../constants/constants';\nimport LineIconType2 from './line-icon-type2';\nimport InterchangeBox from './interchange-box';\n\nexport const MAX_WIDTH = 42;\n\ninterface LineIconProps {\n    lineName: Name;\n    foregroundColour: MonoColour;\n    backgroundColour: ColourHex;\n    passed?: boolean;\n}\n\nexport default memo(\n    function LineIcon(props: LineIconProps) {\n        const { lineName, foregroundColour, backgroundColour, passed } = props;\n\n        const [type, commonPart] = getType(lineName);\n\n        const nameZhEl = useRef<SVGTextElement | null>(null);\n        const nameEnEl = useRef<SVGTextElement | null>(null);\n\n        const [nameZhBBox, setNameZhBBox] = useState({ width: 0 } as DOMRect);\n        const [nameEnBBox, setNameEnBBox] = useState({ width: 0 } as DOMRect);\n\n        useEffect(() => {\n            nameZhEl.current && setNameZhBBox(nameZhEl.current.getBBox());\n            nameEnEl.current && setNameEnBBox(nameEnEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const nameZhScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameZhBBox.width);\n        const nameEnScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameEnBBox.width);\n\n        return (\n            <g textAnchor=\"middle\" fill={passed ? MonoColour.white : foregroundColour}>\n                <InterchangeBox fill={passed ? '#aaa' : backgroundColour} />\n                {type === 2 ? (\n                    <LineIconType2 lineName={lineName} commonPart={commonPart} />\n                ) : (\n                    <>\n                        <text\n                            ref={nameZhEl}\n                            y={getYByType(type, 'zh', nameZhScale)}\n                            className=\"rmg-name__zh\"\n                            fontSize={12}\n                            transform={`scale(${nameZhScale})`}\n                        >\n                            {type === 1 ? (\n                                <>\n                                    <tspan fontSize={16} dy={0.7} className=\"rmg-name__zh\">\n                                        {commonPart}\n                                    </tspan>\n                                    <tspan dy={-0.7} className=\"rmg-name__zh\">\n                                        {lineName[0].slice(commonPart.length)}\n                                    </tspan>\n                                </>\n                            ) : (\n                                lineName[0]\n                            )}\n                        </text>\n                        <text\n                            ref={nameEnEl}\n                            y={getYByType(type, 'en', nameEnScale)}\n                            className=\"rmg-name__en\"\n                            fontSize={8}\n                            transform={`scale(${nameEnScale})`}\n                        >\n                            {lineName[1]}\n                        </text>\n                    </>\n                )}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.lineName.toString() === nextProps.lineName.toString() &&\n        prevProps.foregroundColour === nextProps.foregroundColour &&\n        prevProps.backgroundColour === nextProps.backgroundColour &&\n        prevProps.passed === nextProps.passed\n);\n\n/**\n * type 1: 2号线\n * type 2: APM线\n * type 3: 佛山2号线\n */\nconst getType = (name: Name): [1 | 2 | 3, string] => {\n    const matchResultForType1 = name[0].match(/^(\\d+)\\D+$/);\n    if (matchResultForType1) return [1, matchResultForType1[1]];\n\n    const matchResultForType2 = name.map(text => text.match(/^([\\w\\d]+).+$/));\n    if (matchResultForType2[0] && matchResultForType2[1] && matchResultForType2[0][1] === matchResultForType2[1][1]) {\n        return [2, matchResultForType2[0][1]];\n    }\n\n    return [3, ''];\n};\n\nconst getYByType = (type: ReturnType<typeof getType>[0], field: 'zh' | 'en', scale: number) => {\n    switch (type) {\n        case 1:\n            return (field === 'zh' ? 7.3 : 19.5) * (1 + 1 - scale);\n        case 2:\n            return 0;\n        case 3:\n            if (field === 'zh') {\n                return 8 * (2 - scale);\n            } else {\n                return 19.5 + 19.5 * (19.5 / 8) * (1 - scale) - (scale === 1 ? 0 : 5.5);\n            }\n    }\n};\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate } = props;\n\n        const nameEl = useRef<SVGGElement | null>(null);\n\n        useEffect(() => {\n            onUpdate && onUpdate(nameEl.current!.getBBox());\n        }, [stnName.toString()]);\n\n        return (\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {stnName[0]}\n                </text>\n                <g fontSize={10.5}>\n                    {stnName[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={16 + i * 11}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.stnName.toString() === nextProps.stnName.toString()\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationSecondaryNameProps extends SVGProps<SVGGElement> {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    passed?: boolean;\n}\n\nexport default function StationSecondaryName(props: StationSecondaryNameProps) {\n    const { stnName, onUpdate, passed, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    useEffect(() => {\n        const nextBBox = nameEl.current!.getBBox();\n        setBBox(nextBBox);\n        onUpdate && onUpdate(nextBBox);\n    }, [stnName.toString()]);\n\n    return (\n        <g fill={passed ? '#aaa' : '#000'} {...others}>\n            <g transform=\"translate(0,3)\" fontSize={18}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={13}>\n                    {stnName[0]}\n                </text>\n                <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                    {stnName[1]}\n                </text>\n            </g>\n        </g>\n    );\n}\n","import React, { SVGProps } from 'react';\n\ninterface ExpressTagProps extends SVGProps<SVGGElement> {\n    passed?: boolean;\n}\n\nexport default function ExpressTag(props: ExpressTagProps) {\n    const { passed, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={passed ? '#aaa' : 'var(--rmg-theme-colour)'} {...others}>\n            <text className=\"rmg-name__zh\" fontSize={13}>\n                快车停靠站\n            </text>\n            <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                Express Station\n            </text>\n        </g>\n    );\n}\n","import React, { useState } from 'react';\nimport { Name, StationState } from '../../../constants/constants';\nimport StationName from './station-name';\nimport StationSecondaryName from './station-secondary-name';\nimport ExpressTag from './express-tag';\n\ninterface StationNameWrapperProps {\n    primaryName: Name;\n    secondaryName?: Name;\n    stationState: StationState;\n    flipped?: boolean;\n    express?: boolean;\n}\n\nexport default function StationNameWrapper(props: StationNameWrapperProps) {\n    const { primaryName, secondaryName, stationState, flipped, express } = props;\n\n    const [primaryBBox, setPrimaryBBox] = useState({ width: 0 } as SVGRect);\n    const [secondaryBBox, setSecondaryBBox] = useState({ x: 0, width: -20 } as SVGRect);\n\n    const getFill = (state: StationState) => {\n        switch (state) {\n            case StationState.PASSED:\n                return '#aaa';\n            case StationState.CURRENT:\n                return '#f00';\n            case StationState.FUTURE:\n                return '#000';\n        }\n    };\n\n    const primaryNameEnRows = primaryName[1].split('\\\\').length;\n    const transforms = {\n        g: {\n            x: 0,\n            y: flipped ? 17.5 : -20 - primaryNameEnRows * 14 * Math.cos(-45),\n        },\n        StationSecondaryName: {\n            x: (primaryBBox.width + secondaryBBox.width / 2 + 10) * (flipped ? -1 : 1),\n            y: 2 + 5 * (primaryNameEnRows - 1),\n        },\n        ExpressTag: {\n            x: (primaryBBox.width + secondaryBBox.width + 20 + 35) * (flipped ? -1 : 1),\n            y: 2 + 5 * (primaryNameEnRows - 1),\n        },\n    };\n\n    return (\n        <g\n            textAnchor={flipped ? 'end' : 'start'}\n            fill={getFill(stationState)}\n            transform={`translate(${transforms.g.x},${transforms.g.y})rotate(-45)`}\n        >\n            <StationName stnName={primaryName} onUpdate={setPrimaryBBox} />\n\n            {secondaryName && (\n                <StationSecondaryName\n                    stnName={secondaryName}\n                    onUpdate={setSecondaryBBox}\n                    passed={stationState === StationState.PASSED}\n                    transform={`translate(${transforms.StationSecondaryName.x},${transforms.StationSecondaryName.y})`}\n                />\n            )}\n\n            {express && (\n                <ExpressTag\n                    passed={stationState === StationState.PASSED}\n                    transform={`translate(${transforms.ExpressTag.x},${transforms.ExpressTag.y})`}\n                />\n            )}\n        </g>\n    );\n}\n","import React from 'react';\nimport StationNumber from '../../../gzmtr/station-icon/station-number';\nimport { InterchangeInfo, Services } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\nimport LineIcon from '../../../gzmtr/line-icon/line-icon';\nimport StationNameWrapper from '../../../gzmtr/station-name/station-name-wrapper';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    stnY: number;\n}\n\nconst StationGZMTR = (props: Props) => {\n    const { stnId, stnState, stnY } = props;\n\n    const theme = useAppSelector(store => store.param.theme);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const lineNumber = useAppSelector(store => store.param.line_num);\n    const stnInfo = useAppSelector(store => store.param.stn_list[stnId]);\n\n    const isNameShift = stnInfo.parents.length === 2 || stnInfo.children.length === 2;\n    const tickRotation =\n        stnY > 0\n            ? 180\n            : stnInfo.parents.indexOf(stnInfo.branch.left[1] || '') === 1 ||\n              stnInfo.children.indexOf(stnInfo.branch.right[1] || '') === 1\n            ? 180\n            : 0;\n    const nameENLns = stnInfo.name[1].split('\\\\').length;\n    const nameDX = isNameShift\n        ? tickRotation === 180\n            ? 16 + (nameENLns - 1) * 12 * Math.cos(-45)\n            : -9\n        : tickRotation === 180\n        ? -6\n        : (25 + (nameENLns - 1) * 15) * Math.cos(-45);\n\n    return (\n        <>\n            <IntGroup\n                intInfos={\n                    isNameShift\n                        ? (\n                              [\n                                  [theme[0], theme[1], 'var(--rmg-theme-colour)', 'var(--rmg-theme-fg)', ...lineName],\n                              ] as any[] as InterchangeInfo[]\n                          ).concat(stnInfo.transfer.info[0])\n                        : stnInfo.transfer.info[0]\n                }\n                stnState={stnState}\n                tickRotation={tickRotation}\n            />\n            <StationNumber lineNum={lineNumber} stnNum={stnInfo.num} passed={stnState === -1} />\n            <g transform={`translate(${-nameDX},0)`}>\n                <StationNameWrapper\n                    primaryName={stnInfo.name}\n                    secondaryName={stnInfo.secondaryName || undefined}\n                    stationState={stnState}\n                    flipped={tickRotation === 180}\n                    express={stnInfo.services.includes(Services.express)}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationGZMTR;\n\ninterface IntGroupProps {\n    intInfos: InterchangeInfo[];\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n}\n\nconst IntGroup = (props: IntGroupProps) => (\n    <>\n        <IntTicks strokeWidth={4} {...props} />\n        <IntBoxs transform={`translate(0,${props.tickRotation === 180 ? -47 : 23})`} {...props} />\n    </>\n);\n\nconst IntTicks = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, stnState, tickRotation, ...others } = props;\n\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => (\n                <use\n                    key={i}\n                    xlinkHref=\"#inttick\"\n                    stroke={stnState === -1 ? '#aaa' : info[2]}\n                    transform={`translate(${-2 * (intInfos.length - 1) + 4 * i},0)rotate(${\n                        tickRotation === 180 ? 180 : 0\n                    })`}\n                />\n            ))}\n        </g>\n    );\n};\n\nconst IntBoxs = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, tickRotation, stnState, ...other } = props;\n\n    return (\n        <g {...other}>\n            {intInfos.map((info, i) => (\n                <g key={i} transform={`translate(0,${i * 28 * (tickRotation === 180 ? -1 : 1)})`}>\n                    <LineIcon\n                        lineName={[info[4], info[5]]}\n                        foregroundColour={info[3]}\n                        backgroundColour={info[2]}\n                        passed={stnState === -1}\n                    />\n                </g>\n            ))}\n        </g>\n    );\n};\n","import React, { useMemo } from 'react';\nimport StationGZMTR from './station/station-gzmtr';\nimport { adjacencyList, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport { CanvasType, ColourHex, MonoColour, ShortDirection, StationDict } from '../../../constants/constants';\nimport { useAppSelector } from '../../../redux';\nimport LineIcon from '../../gzmtr/line-icon/line-icon';\n\nconst wideFactor = (stnList: StationDict, stnId: string) =>\n    stnList[stnId].parents.length === 2 || stnList[stnId].children.length === 2 ? 0.25 : 0;\n\nconst getXShare = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]): number => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        if (branchOfStn.toString() === branches[0].toString()) {\n            // station on main line, expand to fit\n            let lens = [];\n            if (!leftOpenJaw && !rightOpenJaw) {\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else if (leftOpenJaw) {\n                lens[0] = 0;\n                lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n                lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else {\n                // right open jaw\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n            }\n            return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n        } else {\n            if (!leftOpenJaw && !rightOpenJaw) {\n                let lens = [];\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n                return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n            } else if (leftOpenJaw) {\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len -\n                    criticalPathMethod(stnId, partSink, adjMat).len\n                );\n            } else {\n                // right open jaw\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len +\n                    criticalPathMethod(partSource, stnId, adjMat).len\n                );\n            }\n        }\n    }\n};\n\nconst MainGZMTR = () => {\n    const { branches, routes, depsStr: deps } = useAppSelector(store => store.helper);\n\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const yPercentage = useAppSelector(store => store.param.y_pc);\n    const paddingPercentage = useAppSelector(store => store.param.padding);\n    const branchSpacing = useAppSelector(store => store.param.branch_spacing);\n    const direction = useAppSelector(store => store.param.direction);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const adjMat = adjacencyList(stationList, wideFactor, wideFactor);\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(stationList).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShare(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const lineXs: [number, number] =\n        direction === ShortDirection.right\n            ? [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100 + 65,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 20,\n              ]\n            : [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 65,\n              ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(stationList).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    let branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: stationList[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -2 : 2 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * branchSpacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(currentStationIndex, routes, direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const linePaths = branches\n        .map(branch => drawLine(branch, stnStates))\n        .reduce(\n            (acc, cur) => {\n                acc.main.push(cur.main);\n                acc.pass.push(cur.pass);\n                return acc;\n            },\n            { main: [], pass: [] } as { main: string[][]; pass: string[][] }\n        );\n\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, xs, ys)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: yPercentage,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <g\n                id=\"line_name\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.right ? `${lineXs[0] - 65}px` : `${lineXs[1] + 65}px`,\n                }}\n            >\n                <LineIcon\n                    lineName={lineName}\n                    foregroundColour={'var(--rmg-theme-fg)' as MonoColour}\n                    backgroundColour={'var(--rmg-theme-colour)' as ColourHex}\n                />\n            </g>\n        </g>\n    );\n};\n\nexport default MainGZMTR;\n\nconst Line = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => (\n        <g fill=\"none\" strokeWidth={4}>\n            <g stroke=\"#aaa\" strokeDasharray={4}>\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n            <g stroke=\"var(--rmg-theme-colour)\">\n                {props.paths.main.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n        </g>\n    ),\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\nconst _linePath = (stnIds: string[], realXs: { [stnId: string]: number }, realYs: { [stnId: string]: number }) => {\n    let prevY: number;\n    var path = [] as string[];\n\n    stnIds.forEach(stnId => {\n        let x = realXs[stnId];\n        let y = realYs[stnId];\n        if (!prevY && prevY !== 0) {\n            prevY = y;\n            path.push(`M ${x},${y}`);\n            return;\n        }\n        if (y === 0) {\n            if (y < prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,0 40,-40', `V ${y}`);\n            if (y > prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,1 40,40', `V ${y}`);\n        } else {\n            if (y < prevY) path.push(`V ${y + 40}`, 'a 40,40 0 0,1 40,-40', `H ${x}`);\n            if (y > prevY) path.push(`V ${y - 40}`, 'a 40,40 0 0,0 40,40', `H ${x}`);\n        }\n        path.push(`H ${x}`);\n        prevY = y;\n    });\n\n    // simplify path\n    return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates } = props;\n\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(stationList)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${xs[stnId]}px,${ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationGZMTR stnId={stnId} stnState={stnStates[stnId]} stnY={ys[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import React, { memo, useMemo } from 'react';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport MainGZMTR from './main/main-gzmtr';\nimport { CanvasType, Note, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst RailMapGZMTR = () => {\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const psdNumber = useAppSelector(store => store.param.psd_num);\n    const infoPanelType = useAppSelector(store => store.param.info_panel_type);\n    const notes = useAppSelector(store => store.param.notesGZMTR);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const curStnInfo = useAppSelector(store => store.param.stn_list[currentStationIndex]);\n\n    return (\n        <>\n            <DefsGZMTR />\n\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType === PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType === PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            {(direction === ShortDirection.left && curStnInfo.parents.includes('linestart')) ||\n            (direction === ShortDirection.right && curStnInfo.children.includes('lineend')) ? (\n                <TerminusFlag />\n            ) : (\n                <>\n                    <MainGZMTR />\n                    <DirectionIndicator />\n                    {notes.map((note, i) => (\n                        <NoteBox key={i} note={note} />\n                    ))}\n                </>\n            )}\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && (\n                <line x2={svgWidths[CanvasType.RailMap]} transform=\"translate(0,90)\" strokeWidth={3} stroke=\"black\" />\n            )}\n        </>\n    );\n};\n\nexport default RailMapGZMTR;\n\nconst DefsGZMTR = memo(() => (\n    <defs>\n        <path id=\"arrow_direction\" d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\" fill=\"black\" />\n        <path id=\"inttick\" d=\"M 0,0 v 18\" strokeLinecap=\"square\" />\n    </defs>\n));\n\nconst DirectionIndicator = () => {\n    const { routes } = useAppSelector(store => store.helper);\n    const {\n        direction,\n        direction_gz_x: directionIndicatorX,\n        direction_gz_y: directionIndicatorY,\n        current_stn_idx: currentStationIndex,\n    } = useAppSelector(store => store.param);\n\n    const validDests = useMemo(\n        () => [\n            ...new Set(\n                routes\n                    .reduce(\n                        (acc, cur) =>\n                            cur.includes(currentStationIndex)\n                                ? acc.concat(\n                                      cur\n                                          .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                                          .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                                  )\n                                : acc,\n                        []\n                    )\n                    .filter(id => id !== currentStationIndex)\n            ),\n        ],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const textGroupProps: TextGroupProps = {\n        textAnchor: direction === ShortDirection.left ? 'start' : 'end',\n        transform: `translate(${direction === ShortDirection.left ? 65 : -65},-5)`,\n        destIds: validDests,\n    };\n\n    return (\n        <g\n            id=\"direction_gz\"\n            style={{ ['--x-percentage' as any]: directionIndicatorX, ['--y-percentage' as any]: directionIndicatorY }}\n        >\n            <use\n                xlinkHref=\"#arrow_direction\"\n                style={{ ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg' }}\n            />\n\n            {validDests.length !== 2 ? (\n                <DirectionIndicatorTextGroup {...textGroupProps} />\n            ) : (\n                <DirectionIndicatorTextGroup2 {...textGroupProps} />\n            )}\n        </g>\n    );\n};\n\ntype TextGroupProps = {\n    destIds: string[];\n} & React.SVGProps<SVGGElement>;\n\nconst DirectionIndicatorTextGroup = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const stationList = useAppSelector(store => store.param.stn_list);\n    return (\n        <g {...others}>\n            <text className=\"rmg-name__zh\" fontSize={28}>\n                {destIds.map(stnId => stationList[stnId].name[0]).join('/') + '方向'}\n            </text>\n            <text className=\"rmg-name__en\" fontSize={14} dy={22}>\n                {'Towards ' + destIds.map(stnId => stationList[stnId].name[1].replace('\\\\', ' ')).join('/')}\n            </text>\n        </g>\n    );\n};\n\nconst DirectionIndicatorTextGroup2 = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n\n    const direction = useAppSelector(store => store.param.direction);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const charCounts = destIds.map(stnId => stationList[stnId].name[0].length);\n    const minCharCounts = Math.min(...charCounts);\n    const charSpacing =\n        minCharCounts > 1 && charCounts[0] !== charCounts[1]\n            ? Math.abs(charCounts[0] - charCounts[1]) / (minCharCounts - 1)\n            : 0;\n\n    return (\n        <g {...others}>\n            {destIds.map((id, i) => (\n                <React.Fragment key={id}>\n                    <text\n                        className=\"rmg-name__zh\"\n                        fontSize={25}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-21 + 42 * i}\n                        letterSpacing={charCounts[i] > charCounts[1 - i] ? '0em' : `${charSpacing}em`}\n                    >\n                        {stationList[id].name[0]}\n                    </text>\n                    <text\n                        className=\"rmg-name__en\"\n                        fontSize={11.5}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-1 + 42 * i}\n                    >\n                        {'Towards ' + stationList[id].name[1].replace('\\\\', ' ')}\n                    </text>\n                </React.Fragment>\n            ))}\n            <text\n                className=\"rmg-name__zh\"\n                fontSize={28}\n                x={direction === ShortDirection.left ? 25 * (Math.max(...charCounts) + 1) : 0}\n                y={5}\n            >\n                方向\n            </text>\n        </g>\n    );\n};\n\nconst TerminusFlag = React.memo(() => (\n    <g id=\"terminus_gz\" textAnchor=\"middle\">\n        <text className=\"rmg-name__zh\" fontSize={90}>\n            终 点 站\n        </text>\n        <text dy={70} className=\"rmg-name__en\" fontSize={36}>\n            Terminal\n        </text>\n        <g strokeWidth={8} stroke=\"#000\">\n            <path d=\"M -160,68 h -160\" />\n            <path d=\"M 160,68 h 160\" />\n        </g>\n    </g>\n));\n\nconst NoteBox = React.memo(\n    (props: { note: Note }) => {\n        const noteTextEl = React.useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = React.useState({ width: 0, height: 0, y: 0 } as DOMRect);\n        React.useEffect(\n            () => setBBox(noteTextEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.note[0], props.note[1]]\n        );\n\n        return (\n            <g\n                className=\"note-box\"\n                style={{ ['--x-percentage' as any]: props.note[2], ['--y-percentage' as any]: props.note[3] }}\n            >\n                {props.note[4] && (\n                    <rect\n                        height={bBox.height + 4}\n                        width={bBox.width + 4}\n                        x={-2}\n                        y={bBox.y - 2}\n                        fill=\"none\"\n                        stroke=\"black\"\n                        strokeWidth={0.5}\n                    />\n                )}\n                <g ref={noteTextEl}>\n                    <g fontSize={16} letterSpacing={1.2}>\n                        {props.note[0].split('\\n').map((txt, i) => (\n                            <text key={i} className=\"rmg-name__zh\" y={i * 18}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n\n                    <g\n                        fontSize={10}\n                        letterSpacing={0.33}\n                        transform={`translate(0,${18 * props.note[0].split('\\n').length})`}\n                    >\n                        {props.note[1].split('\\n').map((txt, i) => (\n                            <text\n                                key={i}\n                                className=\"rmg-name__en\"\n                                y={i * 11}\n                                textLength={\n                                    i < (props.note[1].match(/\\n/g)?.length || 0)\n                                        ? bBox.width\n                                        : navigator.userAgent.includes('Firefox')\n                                        ? -1\n                                        : 0\n                                }\n                                lengthAdjust=\"spacing\"\n                            >\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.note.toString() === nextProps.note.toString()\n);\n","import React, { SVGProps } from 'react';\nimport { MonoColour } from '../../constants/constants';\n\ninterface PsdNumberProps extends SVGProps<SVGGElement> {\n    num: string;\n    inStrip?: boolean;\n}\n\nexport default function PsdNumber(props: PsdNumberProps) {\n    const { num, inStrip, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={inStrip ? MonoColour.black : 'var(--rmg-theme-fg)'} {...others}>\n            <rect height={40} width={40} rx={4} x={-20} fill={inStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n            <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                屏蔽门\n            </text>\n            <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                Screen Door\n            </text>\n        </g>\n    );\n}\n","import React from 'react';\nimport { PanelTypeGZMTR, PanelTypeShmetro } from '../../constants/constants';\nimport PsdNumber from '../gzmtr/psd-number';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <PsdNumber\n                num={props.isShowPSD as string}\n                inStrip={isInStrip}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            />\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n"],"names":["memo","props","passed","pathD","large","d","fill","strokeWidth","stroke","prevProps","nextProps","StationNumber","lineNum","stnNum","others","lineNumEl","useRef","stnNumEl","useState","width","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","useEffect","current","getBBox","lineNumScale","Math","max","stnNumScale","length","textAnchor","fontSize","transform","ref","className","getStationYShare","stationId","branches","stationList","mainBranch","includes","slice","find","branch","openJawSiblingBranch","isLeftOpenJaw","hasSiblingBranchOpenJawOnTheLeft","indexOf","isRightOpenJaw","hasSiblingBranchOpenJawOnTheRight","children","branchBelongsTo","getSidingPath","coords","prevCoord","RIGHT_DOWN_ARC","DOWN_RIGHT_ARC","RIGHT_UP_ARC","UP_RIGHT_ARC","paths","coord","push","midPointX","TURNING_RADIUS","join","replace","adjacencyList","stnList","leftW","rightW","Object","keys","reduce","acc","cur","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","unshift","maxLength","getXShareMTR","stnId","criticalPath","branchOfStn","filter","partSource","partSink","leftOpenJaw","lens","getStnState","currentId","routes","direction","console","log","Set","concat","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","stnIds","lineXs","realXs","realYs","e","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","stations","stnStates","xs","ys","isMTR","name","linePaths","main","pass","sidingMain","sidingPass","i","isSiding","lineMainStns","linePassStns","map","id","_linePath","drawLine","lineName","commonPart","wrapperEl","height","bBox","setBBox","toString","scale","MAX_WIDTH","dx","dy","trim","InterchangeBox","rx","foregroundColour","backgroundColour","getType","type","nameZhEl","nameEnEl","nameZhBBox","setNameZhBBox","nameEnBBox","setNameEnBBox","nameZhScale","nameEnScale","MonoColour","getYByType","matchResultForType1","match","matchResultForType2","text","field","stnName","onUpdate","nameEl","split","txt","StationSecondaryName","nextBBox","ExpressTag","StationNameWrapper","primaryName","secondaryName","stationState","flipped","express","primaryBBox","setPrimaryBBox","secondaryBBox","setSecondaryBBox","primaryNameEnRows","transforms","g","cos","state","StationState","getFill","stnState","stnY","theme","useAppSelector","store","param","line_name","lineNumber","line_num","stnInfo","stn_list","isNameShift","tickRotation","left","right","nameENLns","nameDX","IntGroup","intInfos","transfer","info","num","undefined","services","Services","IntTicks","IntBoxs","xlinkHref","other","wideFactor","helper","deps","depsStr","svgWidths","svgWidth","yPercentage","y_pc","paddingPercentage","padding","branch_spacing","currentStationIndex","current_stn_idx","useMemo","rightOpenJaw","getXShare","JSON","stringify","realCP","CanvasType","stns","style","Line","StationGroup","React","strokeDasharray","psdNumber","psd_num","infoPanelType","info_panel_type","notes","notesGZMTR","curStnInfo","DefsGZMTR","variant","isShowLight","PanelTypeGZMTR","isShowPSD","TerminusFlag","DirectionIndicator","note","NoteBox","x2","strokeLinecap","directionIndicatorX","direction_gz_x","directionIndicatorY","direction_gz_y","validDests","textGroupProps","destIds","DirectionIndicatorTextGroup","DirectionIndicatorTextGroup2","charCounts","minCharCounts","min","charSpacing","abs","letterSpacing","noteTextEl","textLength","navigator","userAgent","lengthAdjust","PsdNumber","inStrip","stripHeight","indicatorLight","cy","r","ry","PSD","isInStrip","psdDy"],"sourceRoot":""}