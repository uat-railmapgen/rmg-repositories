{"version":3,"file":"static/js/2977.8c4b400a.chunk.js","mappings":"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","sources":["svgs/indoor/station-shmetro.tsx","svgs/mtr/line-diagram-utils.ts","svgs/railmap/main/loop/loop-branches-shmetro.tsx","svgs/railmap/main/loop/loop-coline-shmetro.tsx","svgs/railmap/main/loop/loop-shmetro.tsx","svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/methods/share.ts","svgs/railmap/methods/shmetro-loop.ts"],"sourcesContent":["import React from 'react';\nimport { ColourHex, InterchangeInfo, Name, Services } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nexport type NameDirection = 'upward' | 'downward' | 'left' | 'right';\n\ninterface Props {\n    stnId: string;\n    nameDirection: NameDirection;\n    services: Services[];\n    color?: ColourHex; // Control the station color if coline is in effect.\n}\n\nexport const StationSHMetro = (props: Props) => {\n    const { stnId, nameDirection, services, color } = props;\n    const stnInfo = useAppSelector(store => store.param.stn_list[stnId]);\n\n    const transfer = [...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])];\n    let stationIconStyle = '';\n    if (stnInfo.services.length === 3) stationIconStyle = 'direct_indoor_sh';\n    else if (stnInfo.services.length === 2) stationIconStyle = 'express_indoor_sh';\n    else if (transfer.length > 0) stationIconStyle = 'int2_indoor_sh';\n    else stationIconStyle = 'stn_indoor_sh';\n\n    const dr = nameDirection === 'left' || nameDirection === 'right' ? 90 : 0;\n    return (\n        <>\n            <StationNameGElement\n                name={stnInfo.name}\n                infos={stnInfo.transfer.info}\n                nameDirection={nameDirection}\n                services={services}\n            />\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                stroke={transfer.length > 0 ? 'var(--rmg-black)' : color ?? 'var(--rmg-theme-colour)'}\n                transform={`rotate(${dr})`}\n            />\n            {/* This should be in IntBoxGroupProps, put here because the station icon will cover this */}\n            {stnInfo.services.length > 1 && (\n                <text className=\"rmg-name__zh\" writingMode=\"tb\" fontSize=\"60%\" dy=\"-12\">\n                    {`大站车${stnInfo.services.length > 2 ? ' 直达车' : ''}停靠`}\n                </text>\n            )}\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    nameDirection: NameDirection;\n    services: Services[];\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, nameDirection, services } = props;\n    const dy = { upward: 60, downward: -30, left: 0, right: 0 }[nameDirection];\n    const osi_dx = { upward: 0, downward: 0, left: 85, right: -85 }[nameDirection];\n    const osi_dy = { upward: -185, downward: 150, left: -30, right: -30 }[nameDirection];\n    const osysi_dx = (infos: InterchangeInfo[][]) =>\n        ({\n            upward: 0,\n            downward: 0,\n            left: infos[0].length + infos[1].length !== 0 ? 85 : 25,\n            right: infos[0].length + infos[1].length !== 0 ? -85 : -25,\n        }[nameDirection]);\n    const osysi_dy = (infos: InterchangeInfo[][], nameDirection: NameDirection, services: Services[]) =>\n        ({\n            upward: infos[1]?.length ? -210 : infos[0].length ? -180 : -100,\n            downward: (infos[1]?.length ? 190 : infos[0].length ? 160 : 75) + (services.length === 3 ? 40 : 0),\n            left: infos[1]?.length ? -60 : infos[0].length ? -30 : 0,\n            right: infos[1]?.length ? -60 : infos[0].length ? -30 : 0,\n        }[nameDirection]);\n    return (\n        <g transform={`translate(0,${dy})`}>\n            {nameDirection === 'upward' || nameDirection === 'downward' ? (\n                <>\n                    <line\n                        x1={-30}\n                        x2={30}\n                        y1={nameDirection === 'upward' ? -23 : -10}\n                        y2={nameDirection === 'upward' ? -23 : -10}\n                        stroke=\"black\"\n                    />\n                    <line\n                        y1={nameDirection === 'upward' ? -23 : -10}\n                        y2={nameDirection === 'upward' ? -23 - 25 : 20}\n                        stroke=\"black\"\n                    />\n                </>\n            ) : (\n                <>\n                    <line\n                        x1={nameDirection === 'left' ? -50 : 15}\n                        x2={nameDirection === 'left' ? -15 : 50}\n                        y1={0}\n                        y2={0}\n                        stroke=\"black\"\n                    />\n                    <line\n                        x1={nameDirection === 'left' ? -50 : 50}\n                        x2={nameDirection === 'left' ? -50 : 50}\n                        y1={-30}\n                        y2={30}\n                        stroke=\"black\"\n                    />\n                </>\n            )}\n\n            {[...infos[0], ...(infos[1] || [])].length > 0 && (\n                <IntBoxGroup\n                    intInfos={[...infos[0], ...(infos[1] || [])]}\n                    arrowDirection={nameDirection}\n                    services={services}\n                />\n            )}\n\n            <StationName stnName={name} nameDirection={nameDirection} fill=\"black\" />\n\n            {infos[1]?.length > 0 && (\n                <g transform={`translate(${osi_dx},${osi_dy})`}>\n                    <OSIText osiInfos={infos[1]} nameDirection={nameDirection} />\n                </g>\n            )}\n\n            {infos[2]?.length > 0 && (\n                <g transform={`translate(${osysi_dx(infos)},${osysi_dy(infos, nameDirection, services)})`}>\n                    <OSysIText osysiInfos={infos[2]} nameDirection={nameDirection} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (\n        props: { stnName: Name; nameDirection: NameDirection } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { stnName, nameDirection, ...others } = props;\n        const name = stnName[0].split('\\\\');\n        const nameENLn = stnName[1].split('\\\\').length;\n        const dx = { upward: 0, downward: 0, left: -60, right: 60 }[nameDirection];\n        const dy = {\n            upward: -2,\n            downward: -30 - 12 * (nameENLn - 1),\n            left: -10 * (nameENLn - 1),\n            right: -10 * (nameENLn - 1),\n        }[nameDirection];\n        const anchor = { upward: 'middle', downward: 'middle', left: 'end', right: 'start' }[nameDirection];\n\n        return (\n            <g ref={ref} {...others} textAnchor={anchor} transform={`translate(${dx},${dy})`}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {name.map((txt, i, array) => (\n                                <text\n                                    key={i}\n                                    className=\"rmg-name__zh\"\n                                    dy={nameDirection === 'upward' ? 16 * i : (array.length - 1 - i) * -16}\n                                >\n                                    {txt}\n                                </text>\n                            ))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text\n                                        key={i}\n                                        className=\"rmg-name__en\"\n                                        dy={\n                                            12 * (i + 1) +\n                                            (nameDirection === 'upward' ? (name.length > 1 ? name.length * 7.5 : 0) : 0)\n                                        }\n                                    >\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\ninterface IntBoxGroupProps {\n    intInfos: InterchangeInfo[];\n    arrowDirection: NameDirection;\n    services: Services[];\n}\n\nconst IntBoxGroup = (props: IntBoxGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, arrowDirection, services } = props;\n\n    // name each different linearGradient that will fill the arrow\n    const intNameId = intInfos.map(intInfo => intInfo[2]).reduce((name, color) => name + color, '');\n\n    // get the interchange line names\n    const lineNames = [\n        intInfos\n            .filter(intInfo => intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4].replace(/^(\\d+)(.*)$/, '$1'))\n            .join('，')\n            .concat('号线'),\n        intInfos\n            .filter(intInfo => !intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4])\n            .join('，'),\n    ]\n        .filter(name => name && name !== '号线')\n        .join('，');\n    const lineNamesEn = [\n        'Line '.concat(\n            intInfos\n                .filter(intInfo => intInfo[5].match(/^L|line$/))\n                .map(intInfo => intInfo[5].replace('Line', '').replace('line', '').trim())\n                .join(',')\n        ),\n        intInfos\n            .filter(intInfo => !intInfo[5].match(/^L|line$/))\n            .map(intInfo => intInfo[5])\n            .join('，'),\n    ]\n        .filter(name => name && name !== 'Line ')\n        .join(',');\n\n    // for services contains three level (normal, express, direct)\n    // additional length is required on transfer arrow otherwise\n    // the station icon will be longer than the arrow itself\n    const arrowLength = services.length === 3 ? 80 : 45;\n    const transfer_dy = { upward: -145, downward: 125 + (services.length === 3 ? 40 : 0), left: 7, right: 7 }[\n        arrowDirection\n    ];\n\n    // bunch of constants for all four directions\n    const arrow_dx = { upward: 0, downward: 0, left: 20, right: -20 }[arrowDirection];\n    const arrow_dy = { upward: -74, downward: 44, left: 0, right: 0 }[arrowDirection];\n    const arrow_dr = { upward: 0, downward: 180, left: 90, right: -90 }[arrowDirection];\n    const transfer_dx = { upward: 0, downward: 0, left: 85, right: -85 }[arrowDirection];\n    const transfer_anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[arrowDirection];\n    return (\n        <g>\n            <path\n                id=\"int_indoor_arrow_sh\"\n                stroke=\"var(--rmg-black)\"\n                strokeWidth={1}\n                transform={`translate(${arrow_dx},${arrow_dy})rotate(${arrow_dr})`}\n                fill={intInfos.length === 1 ? intInfos[0][2] : `url(#grad${intNameId})`}\n                d={`M -7.5,0 v -${arrowLength} h -7.5 l 15,-15 l 15,15 h -7.5 v ${arrowLength} Z`}\n            />\n\n            {intInfos.length > 1 && (\n                <>\n                    <linearGradient\n                        id={`grad${intNameId}`}\n                        y1=\"0\"\n                        y2=\"0\"\n                        x1={arrowDirection === 'upward' ? '25%' : '75%'}\n                        x2={arrowDirection === 'upward' ? '75%' : '25%'}\n                    >\n                        {intInfos.map((intInfo, i) => (\n                            <React.Fragment key={i}>\n                                {/* more about React.Fragment on https://stackoverflow.com/a/59390967 */}\n                                <stop // start from\n                                    offset={`${(100 / intInfos.length) * (i + 0)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                                <stop // to\n                                    offset={`${(100 / intInfos.length) * (i + 1)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                            </React.Fragment>\n                        ))}\n                    </linearGradient>\n\n                    {/* a range inplementation [0, 1, 2 ... intInfos.length - 1] */}\n                    {/* {[...Array(intInfos.length - 1).keys()].map(i => (<line\n                        x1={-7.5 + (15 / intInfos.length) * (i + 1)}\n                        x2={-7.5 + (15 / intInfos.length) * (i + 1)}\n                        y1=\"-74\"\n                        y2={-104 - 7.5 - 7.5 / (intInfos.length - 1) * (i+1)}\n                        stroke=\"black\"\n                    />))} */}\n                </>\n            )}\n\n            <g transform={`translate(${transfer_dx},${transfer_dy})`} textAnchor={`${transfer_anchor}`}>\n                <text className=\"rmg-name__zh\" dy={-7}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={5} fontSize={9.6}>\n                    {`Interchange ${lineNamesEn}`}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[]; nameDirection: NameDirection }) => {\n    const anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[props.nameDirection];\n    return React.useMemo(\n        () => (\n            <g textAnchor={`${anchor}`} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${props.osiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osiInfos.toString(), props.nameDirection]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; nameDirection: NameDirection }) => {\n    const anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[props.nameDirection];\n    return React.useMemo(\n        () => (\n            <g textAnchor={`${anchor}`}>\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`转乘${props.osysiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={7.5} fontSize={9.6}>\n                    {`To ${props.osysiInfos.map(info => info[5]).join(', ')}`}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.nameDirection]\n    );\n};\n","import { StationDict } from '../../constants/constants';\n\n/**\n * @return - negative: above main line, positive: below main line\n */\nexport const getStationYShare = (stationId: string, branches: string[][], stationList: StationDict): number => {\n    const mainBranch = branches[0];\n\n    if (mainBranch.includes(stationId)) {\n        // on main branch\n        if (branches.slice(1).find(branch => branch.includes(stationId))) {\n            // node shared by multiple branches\n            return 0;\n        } else {\n            const openJawSiblingBranch = branches.slice(1).find(branch => {\n                const isLeftOpenJaw = branch[0] === 'linestart';\n                const hasSiblingBranchOpenJawOnTheLeft =\n                    mainBranch.indexOf(stationId) < mainBranch.indexOf(branch.slice(-1)[0]);\n\n                const isRightOpenJaw = branch.slice(-1)[0] === 'lineend';\n                const hasSiblingBranchOpenJawOnTheRight = mainBranch.indexOf(stationId) > mainBranch.indexOf(branch[0]);\n\n                return (\n                    (isLeftOpenJaw && hasSiblingBranchOpenJawOnTheLeft) ||\n                    (isRightOpenJaw && hasSiblingBranchOpenJawOnTheRight)\n                );\n            });\n\n            if (openJawSiblingBranch) {\n                // on main branch but open jaw\n                // NOTE: determine y share of node by children ordering, not by whether it's a branch or not (like GZMTR)\n                // TODO: Remove requirement on stationList arg\n                return stationList[openJawSiblingBranch[0]].children.indexOf(openJawSiblingBranch[1]) === 1 ? -1 : 1;\n            } else {\n                // pure main branch without siblings or main branch with sidings\n                return 0;\n            }\n        }\n    } else {\n        // on branch/sidings\n        const branchBelongsTo = branches.slice(1).find(branch => branch.includes(stationId));\n        if (branchBelongsTo) {\n            const isSiding = branchBelongsTo[0] !== 'linestart' && branchBelongsTo.slice(-1)[0] !== 'lineend';\n            if (isSiding) {\n                return stationList[branchBelongsTo[0]].children.indexOf(branchBelongsTo[1]) === 1 ? 1.2 : -1.2;\n            } else {\n                return stationList[branchBelongsTo[0]].children.indexOf(branchBelongsTo[1]) === 1 ? 1 : -1;\n            }\n        } else {\n            // fallback\n            return 0;\n        }\n    }\n};\n\nexport const getSidingPath = (coords: [number, number][]): string => {\n    const TURNING_RADIUS = 6;\n    const RIGHT_DOWN_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,1,${TURNING_RADIUS},${TURNING_RADIUS}`;\n    const DOWN_RIGHT_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,0,${TURNING_RADIUS},${TURNING_RADIUS}`;\n    const RIGHT_UP_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,0,${TURNING_RADIUS},-${TURNING_RADIUS}`;\n    const UP_RIGHT_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,1,${TURNING_RADIUS},-${TURNING_RADIUS}`;\n\n    let prevCoord: [number, number] | undefined;\n    let paths: string[] = [];\n\n    for (let coord of coords) {\n        if (!prevCoord) {\n            paths.push('M' + coord.join(','));\n        } else {\n            if (coord[1] === prevCoord[1]) {\n                // horizontal\n                paths.push('H' + coord[0]);\n            } else {\n                const midPointX = (coord[0] + prevCoord[0]) / 2 - (prevCoord[1] === 0 ? 0 : TURNING_RADIUS * 2);\n                paths.push('H' + midPointX);\n\n                if (coord[1] > prevCoord[1]) {\n                    // turn to below\n                    paths.push(RIGHT_DOWN_ARC);\n                    paths.push('V' + (coord[1] - TURNING_RADIUS));\n                    paths.push(DOWN_RIGHT_ARC);\n                } else {\n                    // turn to above\n                    paths.push(RIGHT_UP_ARC);\n                    paths.push('V' + (coord[1] + TURNING_RADIUS));\n                    paths.push(UP_RIGHT_ARC);\n                }\n\n                paths.push('H' + coord[0]);\n            }\n        }\n        // update prev coordinate\n        prevCoord = coord;\n    }\n\n    return paths.join(' ').replace(/( H([\\d.]+))+/g, ' H$2');\n};\n","import { useAppSelector } from '../../../../redux';\nimport { CanvasType, ColourHex, Services } from '../../../../constants/constants';\nimport StationSHMetro from '../station/station-shmetro';\nimport { StationSHMetro as StationSHMetroIndoor } from '../../../indoor/station-shmetro';\nimport React from 'react';\n\nexport const get_loop_branches = (\n    branches: string[][],\n    branch_stn_ids: string[],\n    svg_width: number,\n    padding: number,\n    left_and_right_factor: number,\n    bottom_factor: number\n) => {\n    const loopline = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n\n    const loop_branches = branches.slice(1, 3).map(branch => branch.slice(1, branch.length - 1));\n    // calculate the length of top stations + branch(es) stations\n    const critical_path_length =\n        loop_branches.reduce(\n            (acc, cur) =>\n                acc + cur.filter(stn_id => !['linestart', 'lineend', ...branch_stn_ids].includes(stn_id)).length,\n            0\n        ) +\n        loopline.length -\n        bottom_factor -\n        left_and_right_factor * 2;\n    // interval for each station on the top side with branches\n    // note the interval of station for the top side will be smaller because of e = 0.1 in get_xshares_yshares_of_loop\n    const x_interval = (svg_width - ((svg_width * padding) / 100) * 2) / (1 + critical_path_length);\n    // split lines_xs for branches, used to shrink loop line's lines_xs\n    const line_xs_branches = [\n        (svg_width * padding) / 100 + (loop_branches.at(0) ?? []).length * x_interval,\n        svg_width * (1 - padding / 100) - (loop_branches.at(1) ?? []).length * x_interval,\n    ] as [number, number];\n    const xs_branches = {\n        ...Object.fromEntries(\n            (loop_branches.at(0) ?? []).map((stn, i) => [stn, (svg_width * padding) / 100 + i * x_interval])\n        ),\n        ...Object.fromEntries(\n            (loop_branches.at(1) ?? []).map((stn, i) => [stn, line_xs_branches[1] + (1 + i) * x_interval])\n        ),\n    };\n    return { loop_branches, line_xs_branches, xs_branches };\n};\n\nexport const LoopBranches = (props: {\n    loop_branches: string[][];\n    edges: [number, number, number, number];\n    xs: {\n        [k: string]: number;\n    };\n    ys: {\n        [k: string]: number;\n    };\n    canvas: CanvasType.RailMap | CanvasType.Indoor;\n}) => {\n    const { loop_branches, edges, xs, ys, canvas } = props;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM] = edges;\n\n    const { branches } = useAppSelector(store => store.helper);\n    const { current_stn_idx: current_stn_id, direction, coline } = useAppSelector(store => store.param);\n\n    const e = canvas === CanvasType.RailMap ? 30 : 0;\n    const branches_paths = [\n        `M ${X_LEFT},${Y_TOP} H ${Number(xs[loop_branches.at(0)?.at(0) ?? '']) - e}`,\n        `M ${X_RIGHT},${Y_TOP} H ${Number(xs[loop_branches.at(1)?.at(-1) ?? '']) + e}`,\n    ];\n\n    const loopline = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n    const branches_coline_color = Object.values(coline)\n        .filter(co => ![co.from, co.to].every(stn_id => loopline.includes(stn_id)))\n        .map(co => co.colors);\n\n    return (\n        <>\n            {loop_branches.map((loop_branch, i) => (\n                <React.Fragment key={loop_branch.at(0)}>\n                    {branches_coline_color\n                        // remove duplicate\n                        .filter((c, i, self) => i === self.findIndex(t => t.at(0)?.at(2) === c.at(0)?.at(2)))\n                        // generate marker with coline color\n                        .map(color => (\n                            <marker key={color[0][2]} id={`arrow_theme_${color[0][2]}`} refX={1} refY={0.5}>\n                                <path d=\"M0,1H2L1,0z\" fill={color[0][2]} />\n                            </marker>\n                        ))}\n                    <path\n                        stroke={branches_coline_color.at(i)?.at(0)?.at(2) ?? 'var(--rmg-theme-colour)'}\n                        strokeWidth={12}\n                        fill=\"none\"\n                        d={branches_paths[i]}\n                        markerEnd={\n                            canvas === CanvasType.RailMap &&\n                            ((direction === 'l' && i === 0) || (direction === 'r' && i === 1))\n                                ? branches_coline_color.at(i)\n                                    ? `url(#arrow_theme_${branches_coline_color[i][0][2]})`\n                                    : 'url(#arrow_theme)'\n                                : undefined\n                        }\n                    />\n                    {loop_branch\n                        .filter(stn_id => !['linestart', 'lineend'].includes(stn_id))\n                        .map(stn_id => (\n                            <React.Fragment key={stn_id}>\n                                {canvas === CanvasType.RailMap && (\n                                    <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                                        <StationSHMetro\n                                            stnId={stn_id}\n                                            stnState={current_stn_id === stn_id ? 0 : 1}\n                                            bank={0}\n                                            direction={direction}\n                                            color={branches_coline_color.at(i)?.at(0)?.at(2) as ColourHex | undefined}\n                                        />\n                                    </g>\n                                )}\n\n                                {canvas === CanvasType.Indoor && (\n                                    <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                                        <StationSHMetroIndoor\n                                            stnId={stn_id}\n                                            nameDirection={\n                                                loop_branches\n                                                    .filter(branch => branch.includes(stn_id))\n                                                    .map(branch =>\n                                                        branch.indexOf(stn_id) % 2 === 0 ? 'downward' : 'upward'\n                                                    )[0] as 'upward' | 'downward'\n                                            }\n                                            services={[Services.local]}\n                                            color={branches_coline_color.at(i)?.at(0)?.at(2) as ColourHex | undefined}\n                                        />\n                                    </g>\n                                )}\n                            </React.Fragment>\n                        ))}\n                </React.Fragment>\n            ))}\n        </>\n    );\n};\n","import { useAppSelector } from '../../../../redux';\nimport { isColineBranch } from '../../../../redux/param/coline-action';\nimport { CanvasType } from '../../../../constants/constants';\n\nexport const LoopColine = (props: {\n    edges: [number, number, number, number];\n    loop_stns: {\n        top: string[];\n        left: string[];\n        right: string[];\n        bottom: string[];\n    };\n    xs: {\n        [stn_id: string]: number;\n    };\n    ys: {\n        [stn_id: string]: number;\n    };\n    canvas: CanvasType.RailMap | CanvasType.Indoor;\n}) => {\n    const { edges, loop_stns, xs, ys, canvas } = props;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM] = edges;\n    const { info_panel_type, stn_list, coline } = useAppSelector(store => store.param);\n\n    const { branches } = useAppSelector(store => store.helper);\n\n    // find the coline color on the main/loop line\n    const coline_main_color = Object.values(coline)\n        .filter(co =>\n            [co.from, co.to].every(stn_id =>\n                branches\n                    .slice(1, 3)\n                    .filter(branch => isColineBranch(branch, stn_list))\n                    .flat()\n                    .includes(stn_id)\n            )\n        )\n        .map(co => co.colors)\n        .at(0); // only one coline in loop line is supported\n\n    const LINE_WIDTH = 12;\n    const COLINE_GAP = canvas === CanvasType.RailMap && info_panel_type === 'sh2020' ? 3 : 0;\n    return (\n        <g id=\"coline_main\">\n            <path d={`M ${X_LEFT},${Y_TOP} H${X_RIGHT}`} strokeWidth={12} stroke={coline_main_color?.at(0)?.at(2)} />\n            {\n                // additional station cover on the rail map\n                canvas === CanvasType.RailMap &&\n                    Object.keys(coline).length > 0 &&\n                    loop_stns.top.map(stn_id => (\n                        <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                            {info_panel_type === 'sh2020' ? (\n                                <>\n                                    <rect\n                                        stroke=\"none\"\n                                        height={24}\n                                        width={12}\n                                        x={-6}\n                                        y={-COLINE_GAP - 1}\n                                        fill={coline_main_color?.at(0)?.at(2)}\n                                    />\n                                    <rect\n                                        stroke=\"none\"\n                                        height={COLINE_GAP + LINE_WIDTH}\n                                        width={12}\n                                        x={-6}\n                                        y={LINE_WIDTH - 2}\n                                        fill=\"var(--rmg-theme-colour)\"\n                                    />\n                                </>\n                            ) : (\n                                <use\n                                    xlinkHref=\"#int2_sh\"\n                                    stroke=\"var(--rmg-theme-colour)\"\n                                    transform={`translate(0,${1 + LINE_WIDTH})`}\n                                />\n                            )}\n                        </g>\n                    ))\n            }\n        </g>\n    );\n};\n","import React from 'react';\nimport StationSHMetro from '../station/station-shmetro';\nimport { NameDirection, StationSHMetro as StationSHMetroIndoor } from '../../../indoor/station-shmetro';\nimport { CanvasType, Services, ShortDirection } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\nimport { isColineBranch } from '../../../../redux/param/coline-action';\nimport {\n    split_loop_stns,\n    split_loop_stns_with_branch,\n    split_loop_stns_with_branches,\n    LoopStns,\n    get_xshares_yshares_of_loop,\n} from '../../methods/shmetro-loop';\nimport { get_loop_branches, LoopBranches } from './loop-branches-shmetro';\nimport { LoopColine } from './loop-coline-shmetro';\n\nconst LoopSHMetro = (props: { bank_angle: boolean; canvas: CanvasType.RailMap | CanvasType.Indoor }) => {\n    const { bank_angle, canvas } = props;\n    const { branches } = useAppSelector(store => store.helper);\n    const {\n        current_stn_idx: current_stn_id,\n        svgWidth: svg_width,\n        svg_height,\n        padding,\n        branch_spacing,\n        direction,\n        info_panel_type,\n        stn_list,\n        loop_info: { left_and_right_factor, bottom_factor },\n        coline,\n    } = useAppSelector(store => store.param);\n\n    const loopline = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n    const branch_stn_ids = branches\n        .slice(0, 3) // drop additional branches\n        .flat()\n        .filter(\n            (\n                o => v =>\n                    (o[v] = (o[v] || 0) + 1) === 2\n            )({} as { [stn_id: string]: number })\n        ) // count each occurrence\n        .filter(stn_id => !['linestart', 'lineend'].includes(stn_id)); // find branch stations\n\n    // find which arc would be displayed on the top side from coline info\n    const arc =\n        Object.values(coline)\n            .filter(co =>\n                [co.from, co.to].every(stn_id =>\n                    branches\n                        .slice(1, 3)\n                        .filter(branch => isColineBranch(branch, stn_list))\n                        .flat()\n                        .includes(stn_id)\n                )\n            )\n            .map(co => {\n                const from_idx = loopline.findIndex(stn_id => stn_id === co.from);\n                const to_idx = loopline.findIndex(stn_id => stn_id === co.to);\n                return Math.abs(to_idx - from_idx) > loopline.length - 2 - Math.abs(to_idx - from_idx)\n                    ? 'major'\n                    : 'minor';\n            })\n            .at(0) ?? 'minor';\n\n    // use different split methods for different numbers of branches\n    const loop_stns = branch_stn_ids.at(1)\n        ? split_loop_stns_with_branches(loopline, branch_stn_ids as [string, string], left_and_right_factor, arc)\n        : branch_stn_ids.at(0)\n        ? split_loop_stns_with_branch(loopline, branch_stn_ids[0], bottom_factor, left_and_right_factor)\n        : split_loop_stns(loopline, current_stn_id, bottom_factor, left_and_right_factor);\n    const { x_shares: x_shares_loop, y_shares: y_shares_loop } = get_xshares_yshares_of_loop(loopline, loop_stns);\n\n    // calculate xs and ys for branches\n    const { loop_branches, line_xs_branches, xs_branches } = get_loop_branches(\n        branches,\n        branch_stn_ids,\n        svg_width[canvas],\n        padding,\n        left_and_right_factor,\n        loop_stns.bottom.length // respect to the new bottom_factor if there are 2 branches for critical_path_length\n    );\n\n    // all y_shares in branches will be 0\n    const y_shares = { ...y_shares_loop, ...Object.fromEntries(loop_branches.flat().map(stn => [stn, 0])) };\n    const line_ys = [\n        225 + (branch_spacing / 400) * svg_height,\n        svg_height - 75 - (canvas === CanvasType.RailMap ? 0 : 125) - (branch_spacing / 400) * svg_height,\n    ] as [number, number];\n    const ys = Object.keys(y_shares).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: line_ys[0] + y_shares[cur] * (line_ys[1] - line_ys[0]),\n        }),\n        {} as typeof y_shares\n    );\n    const line_xs = [\n        // in railmap and bank, we need to add extra padding for the 45-degree angle\n        // also if there are branches, we need to leave additional spaces\n        Math.max(\n            (svg_width[canvas] * padding) / 100 + (bank_angle && canvas === CanvasType.RailMap ? 100 : 0),\n            line_xs_branches[0]\n        ),\n        Math.min(\n            svg_width[canvas] * (1 - padding / 100) - (bank_angle && canvas === CanvasType.RailMap ? 100 : 0),\n            line_xs_branches[1]\n        ),\n    ] as [number, number];\n    const xs_loop = Object.keys(x_shares_loop).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: line_xs[0] + x_shares_loop[cur] * (line_xs[1] - line_xs[0]),\n        }),\n        {} as typeof x_shares_loop\n    );\n\n    // bank the right, bottom, left side if bank_angle\n    const bank = (bank_angle ? { l: 1, r: -1 }[direction] : 0) as -1 | 0 | 1;\n    [...loop_stns.right, ...loop_stns.left].forEach(stn_id => {\n        xs_loop[stn_id] -= (ys[stn_id] - line_ys[0]) * bank;\n    });\n    loop_stns.bottom.forEach(stn_id => {\n        xs_loop[stn_id] -= (line_ys[1] - line_ys[0]) * bank;\n    });\n\n    const xs = { ...xs_branches, ...xs_loop };\n\n    // generate loop path used in svg\n    const path = _linePath(loop_stns, xs, ys, bank, [...line_xs, ...line_ys], direction);\n\n    // coline stuff\n    const LINE_WIDTH = 12;\n    const COLINE_GAP = canvas === CanvasType.RailMap && info_panel_type === 'sh2020' ? 3 : 0;\n    // move up to display the full station name and int\n    if (Object.keys(coline).length > 0) {\n        loop_stns.top.forEach(stn_id => {\n            ys[stn_id] -= COLINE_GAP + LINE_WIDTH;\n        });\n    }\n\n    // FIXME: branches with only one station could not display properly\n    const dy = loop_branches.length ? 0 : ((line_ys[1] - line_ys[0]) * bank) / 2;\n    return (\n        <g id=\"loop\" transform={`translate(${dy},0)`}>\n            <path stroke=\"var(--rmg-theme-colour)\" strokeWidth={12} fill=\"none\" d={path} strokeLinejoin=\"round\" />\n            {/* Order matters. The LoopColine should cover the station in RailMap. */}\n            {canvas === CanvasType.RailMap && (\n                <LoopStationGroup canvas={canvas} loop_stns={loop_stns} xs={xs} ys={ys} />\n            )}\n            <g transform={`translate(0,${Object.keys(coline).length > 0 ? -LINE_WIDTH - COLINE_GAP : 0})`}>\n                <LoopBranches\n                    loop_branches={loop_branches}\n                    edges={[...line_xs, ...line_ys]}\n                    xs={xs}\n                    ys={ys}\n                    canvas={canvas}\n                />\n                {Object.keys(coline).length > 0 && (\n                    <LoopColine\n                        edges={[...line_xs, ...line_ys]}\n                        loop_stns={loop_stns}\n                        xs={xs}\n                        ys={ys}\n                        canvas={canvas}\n                    />\n                )}\n            </g>\n            {/* Order matters. The station should cover LoopColine's main path in Indoor. */}\n            {canvas === CanvasType.Indoor && <LoopStationGroup canvas={canvas} loop_stns={loop_stns} xs={xs} ys={ys} />}\n        </g>\n    );\n};\n\nexport default LoopSHMetro;\n\nexport const _linePath = (\n    loop_stns: LoopStns,\n    xs: { [stn_id: string]: number },\n    ys: { [stn_id: string]: number },\n    bank: -1 | 0 | 1,\n    // use these edges to mock when there is no station on the edge\n    edges: [number, number, number, number],\n    direction: ShortDirection\n) => {\n    const [X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM] = edges;\n\n    // calculate the corner point when two sides needs to be joined\n    const corner = (prev_x: number, prev_y: number, x: number, y: number, side: keyof LoopStns): [number, number] => {\n        return {\n            right: [x + (y - Y_TOP) * bank, prev_y] as [number, number],\n            bottom: [prev_x - (Y_BOTTOM - prev_y) * bank, y] as [number, number],\n            left: [x - (Y_BOTTOM - y) * bank, prev_y] as [number, number],\n            top: [prev_x + (prev_y - Y_TOP) * bank, y] as [number, number],\n        }[side];\n    };\n\n    const stn_pos = [] as [number, number][];\n    loop_stns.top.forEach(stn_id => {\n        stn_pos.push([xs[stn_id], ys[stn_id]]);\n    });\n    (['right', 'bottom', 'left'] as Exclude<keyof LoopStns, 'top'>[]).forEach(side => {\n        if (loop_stns[side].length > 0) {\n            stn_pos.push(\n                corner(stn_pos.at(-1)![0], stn_pos.at(-1)![1], xs[loop_stns[side][0]], ys[loop_stns[side][0]], side)\n            );\n            loop_stns[side].forEach(stn_id => {\n                stn_pos.push([xs[stn_id], ys[stn_id]]);\n            });\n        } else {\n            // simulate a fake station on the side\n            // this station lays on the previous side corner\n            const extra = {\n                right: [X_RIGHT, stn_pos.at(-1)![1]] as [number, number],\n                bottom: [\n                    stn_pos.at(-1)![0] + (Y_BOTTOM - stn_pos.at(-1)![1]) * -bank,\n                    stn_pos.at(-1)![1] + (Y_BOTTOM - stn_pos.at(-1)![1]),\n                ] as [number, number],\n                left: [\n                    X_LEFT + (bank === 0 ? 0 : (Y_BOTTOM - Y_TOP) * (direction === 'l' ? -1 : 1)),\n                    stn_pos.at(-1)![1],\n                ] as [number, number],\n            };\n            stn_pos.push(extra[side]);\n        }\n    });\n    stn_pos.push(corner(stn_pos.at(-1)![0], stn_pos.at(-1)![1], xs[loop_stns.top[0]], ys[loop_stns.top[0]], 'top'));\n\n    const path = stn_pos\n        .slice(1)\n        .map(([x, y]) => `L${x},${y} `)\n        .join(' ');\n    return `M${stn_pos[0][0]},${stn_pos[0][1]} ${path} Z`;\n};\n\nconst LoopStationGroup = (props: {\n    canvas: CanvasType.RailMap | CanvasType.Indoor;\n    loop_stns: LoopStns;\n    xs: {\n        [k: string]: number;\n    };\n    ys: {\n        [k: string]: number;\n    };\n}) => {\n    const { canvas, loop_stns, xs, ys } = props;\n    const { current_stn_idx: current_stn_id } = useAppSelector(store => store.param);\n\n    const railmap_bank: Record<keyof LoopStns, -1 | 0 | 1> = {\n        top: 0,\n        bottom: 0,\n        left: -1,\n        right: 1,\n    };\n    const railmap_direction: Record<keyof LoopStns, 'l' | 'r' | undefined> = {\n        left: 'r',\n        right: 'l',\n        top: undefined,\n        bottom: undefined,\n    };\n    const indoor_name_direction = (side: keyof LoopStns, i: number) =>\n        ({\n            top: i % 2 === 0 ? 'upward' : 'downward',\n            bottom: i % 2 === 0 ? 'upward' : 'downward',\n            left: 'left',\n            right: 'right',\n        }[side] as NameDirection);\n    return (\n        <g id=\"loop_stations\">\n            {canvas === CanvasType.RailMap &&\n                Object.entries(loop_stns).map(([side, stn_ids]) =>\n                    stn_ids.map(stn_id => (\n                        <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                            <StationSHMetro\n                                stnId={stn_id}\n                                stnState={current_stn_id === stn_id ? 0 : 1}\n                                bank={railmap_bank[side as keyof LoopStns]}\n                                direction={railmap_direction[side as keyof LoopStns]}\n                            />\n                        </g>\n                    ))\n                )}\n            {canvas === CanvasType.Indoor &&\n                Object.entries(loop_stns).map(([side, stn_ids]) =>\n                    stn_ids.map((stn_id, i) => (\n                        <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                            <StationSHMetroIndoor\n                                stnId={stn_id}\n                                nameDirection={indoor_name_direction(side as keyof LoopStns, i)}\n                                services={[Services.local]}\n                            />\n                        </g>\n                    ))\n                )}\n        </g>\n    );\n};\n","import React, { useRef, memo } from 'react';\nimport { InterchangeInfo, Name, Facilities, ColourHex } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    color?: ColourHex; // Control the station color if coline is in effect.\n    bank?: -1 | 0 | 1; // Loopline requires station element to be horizontal. Default to 0 (no bank to other side).\n    direction?: 'l' | 'r'; // Loopline requires station element to change direction. Default to current param.\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { stnId, stnState, color, bank: bank_, direction: direction_override } = props;\n    const { direction: direction_param, info_panel_type, stn_list, loop } = useAppSelector(store => store.param);\n    const stnInfo = stn_list[stnId];\n    const direction = direction_override ?? direction_param;\n\n    // shift station name if the line bifurcate here\n    // no shift for loop as there is no vertical line covering the station\n    const branchNameDX = loop\n        ? 0\n        : ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n          (direction === 'r' ? -1 : 1);\n\n    let stationIconStyle = '';\n    let stationIconColor: { [pos: string]: string } = {};\n    if (info_panel_type === 'sh2020') {\n        if (stnInfo.services.length === 3) stationIconStyle = 'stn_sh_2020_direct';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'stn_sh_2020_express';\n        else stationIconStyle = 'stn_sh_2020';\n        stationIconColor.fill = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    } else {\n        // param.info_panel_type === 'sh' or others (from other styles)\n        if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n        else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n            stationIconStyle = 'int2_sh';\n        else stationIconStyle = 'stn_sh';\n        stationIconColor.stroke = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    }\n\n    const bank = bank_ ?? 0;\n    const dx = (direction === 'l' ? 6 : -6) + branchNameDX + bank * 30;\n    const dy = (info_panel_type === 'sh2020' ? -20 : -6) + Math.abs(bank) * (info_panel_type === 'sh2020' ? 25 : 11);\n    const dr = bank ? 0 : direction === 'l' ? -45 : 45;\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                {...stationIconColor} // different styles use either `fill` or `stroke`\n                // sh and sh2020 have different headings of int_sh, so -1 | 1 is multiplied\n                transform={\n                    `translate(${bank * (info_panel_type === 'sh2020' ? 5 : 0)},0)` +\n                    `rotate(${bank * 90 * (info_panel_type === 'sh2020' ? 1 : -1)})`\n                }\n            />\n            <g transform={`translate(${dx},${dy})rotate(${dr})`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={stnState}\n                    direction={direction}\n                    facility={stnInfo.facility}\n                    bank={bank}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    facility: Facilities;\n    bank: -1 | 0 | 1;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, stnState, direction, facility, bank } = props;\n    const nameENLn = props.name[1].split('\\\\').length;\n\n    // get the exact station name width so that the\n    // interchange station icon can be right after the station name\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...name]\n    );\n    // the original name position's right x\n    const x = bBox.width + 5;\n\n    // rotate the station info now\n    // other wise the bcr will be inaccurate due to the rotation\n    // Chito: so, use BBox instead\n\n    // simplify the calculation times\n    const directionPolarity = direction === 'l' ? 1 : -1;\n\n    // main elements icon's dx will change if there is a facility icon or not\n    const mainDx = facility !== Facilities.none ? 30 : 0;\n\n    // interchange will have a line under the name, and should be stretched when placed horizontal in loop\n    const lineDx = bank ? -12 : 0;\n\n    return (\n        <>\n            {infos.flat().length > 0 && (\n                <>\n                    <line\n                        x1={(lineDx + mainDx) * directionPolarity}\n                        x2={(mainDx + x) * directionPolarity}\n                        stroke={stnState === -1 ? 'gray' : 'black'}\n                        strokeWidth={0.5}\n                    />\n                    <IntBoxGroup\n                        intInfos={infos}\n                        transform={`translate(${(mainDx + x) * directionPolarity},-10.75)`}\n                        direction={direction}\n                    />\n                </>\n            )}\n\n            {facility !== Facilities.none && <use xlinkHref={'#' + facility} x={10 * directionPolarity} y={-30} />}\n\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${mainDx * directionPolarity},${-14.15625 - 2 - 12 * (nameENLn - 1)})`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={name}\n                    fill={stnState === -1 ? 'gray' : stnState === 0 ? 'red' : 'black'}\n                />\n\n                {/* deal out-of-station here as it is a y axis element. leave out-of-system in IntBoxGroup*/}\n                {infos[1]?.length > 0 && (\n                    <g\n                        transform={`translate(${\n                            (x + infos.reduce((sum, infos) => sum + infos.length, 0) * 15) * directionPolarity\n                        },-30)`}\n                    >\n                        <OSIText osiInfos={infos[1]} />\n                    </g>\n                )}\n            </g>\n        </>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (props: { stnName: Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { stnName, ...others } = props;\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {stnName[0].split('\\\\').map((txt, i, array) => (\n                                <text key={i} className=\"rmg-name__zh\" dy={(array.length - 1 - i) * -15}>\n                                    {txt}\n                                </text>\n                            ))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={12 * (i + 1)}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[][]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, direction, ...others } = props;\n\n    // also known as non out-of-system transfers\n    const boxInfos = [\n        ...intInfos[0],\n        ...(intInfos[1] || []),\n        // some dirty tricks here as shmetro shows maglev icon even it is a out-of-system transfer\n        // and display a maglev icon is much easier in boxInfos than in OSysIText\n        ...(intInfos[2]?.filter(info => Boolean(info[4].match(/^磁(悬)*浮/))) || []),\n    ];\n\n    let dx = 0; // update in every boxInfos\n\n    return (\n        <g fontSize={14} textAnchor=\"middle\" {...others}>\n            {boxInfos.map((info, i) => {\n                const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                const isMaglev = Boolean(info[4].match(/^磁(悬)*浮/));\n\n                if (props.direction === 'r') {\n                    dx -= (isLineNumber || isMaglev ? 20 : info[4].length * 14 + 12 + 0) + (i === 0 ? 0 : 5);\n                }\n\n                let el = <g />;\n                if (isMaglev) {\n                    el = (\n                        <g transform={`translate(${dx},-16)scale(0.1428571429)`} key={i}>\n                            <IntBoxMaglev info={info} />\n                        </g>\n                    );\n                } else if (isLineNumber) {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxNumber info={info} />\n                        </g>\n                    );\n                } else {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxLetter info={info} />\n                        </g>\n                    );\n                }\n\n                if (props.direction === 'l') {\n                    dx += isLineNumber || isMaglev ? 20 + 5 : info[4].length * 14 + 12 + 5;\n                }\n                return el;\n            })}\n\n            {[...(intInfos[2] || [])].length > 0 && (\n                <g transform={`translate(${dx - (props.direction === 'r' ? 5 : 0)},0)`} key={boxInfos.length + 1}>\n                    <OSysIText osysiInfos={intInfos[2]} direction={props.direction} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst IntBoxMaglev = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_maglev\" fill={props.info[2]} stroke={props.info[2]} />\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxNumber = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station interchanges\n    const lineNames = props.osiInfos.map(info => info[4]).join('，');\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; direction: 'l' | 'r' }) => {\n    // get the all names from out of system transfers\n    const lineNames = props.osysiInfos.map(info => info[4]).join('，');\n    const lineNamesEn = props.osysiInfos.map(info => info[5]).join(', ');\n\n    return React.useMemo(\n        () => (\n            <g textAnchor={props.direction === 'l' ? 'start' : 'end'} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={3}>\n                    转乘{lineNames}\n                </text>\n                <text className=\"rmg-name__en\" dy={10} fontSize=\"75%\">\n                    To {lineNamesEn}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.direction]\n    );\n};\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\nimport { getSidingPath } from '../../mtr/line-diagram-utils';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 0\n    ) {\n        const isMTR = this.name === 'StationsMTR';\n        let linePaths = {\n            main: [] as string[],\n            pass: [] as string[],\n            sidingMain: [] as string[],\n            sidingPass: [] as string[],\n        };\n\n        branches.forEach((branch, i) => {\n            const isSiding = branch[0] !== 'linestart' && branch.slice(-1)[0] !== 'lineend';\n\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            if (isSiding && isMTR) {\n                linePaths.sidingMain.push(getSidingPath(lineMainStns.map(id => [xs[id], ys[id]])));\n                linePaths.sidingPass.push(getSidingPath(linePassStns.map(id => [xs[id], ys[id]])));\n            } else {\n                linePaths.main.push(\n                    new this({ stnList, criticalPath: cp })._linePath(\n                        lineMainStns,\n                        lineXs,\n                        branches,\n                        xs,\n                        ys,\n                        branchSpacing,\n                        cp,\n                        e\n                    )\n                );\n                linePaths.pass.push(\n                    new this({ stnList, criticalPath: cp })._linePath(\n                        linePassStns,\n                        lineXs,\n                        branches,\n                        xs,\n                        ys,\n                        branchSpacing,\n                        cp,\n                        e\n                    )\n                );\n            }\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branch: string[], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n    let lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n    let linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n    if (lineMainStns.length === 1) {\n        linePassStns = branch;\n    }\n\n    if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n        // if two set disjoint\n        if (linePassStns[0] === branch[0]) {\n            // -1 -1 1 1\n            linePassStns.push(lineMainStns[0]);\n        } else if (\n            lineMainStns[0] === branch[0] &&\n            lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n            linePassStns.length\n        ) {\n            linePassStns = branch;\n            lineMainStns = [];\n        } else {\n            // 1 1 -1 -1\n            linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n        }\n    }\n\n    return {\n        main: lineMainStns,\n        pass: linePassStns,\n    };\n};\n","import { ShortDirection, StationDict } from '../../../constants/constants';\n\n/**\n * Split the loopline into four sides according to left_and_right_factor and bottom_factor.\n * It assumes parameters will follow these rules:\n *     1. loopline.length > bottom_factor + left_and_right_factor * 2\n *     2. bottom_factor >= 0\n *     3. left_and_right_factor >= 0\n *     4. left_and_right_factor + bottom_factor > 0\n *\n * @param loopline The loop line aka branches[0].\n * @param current_stn_id Current station id.\n * @param bottom_factor How many stations the bottom side will have.\n * @param left_and_right_factor How many stations the left and right side will have.\n * @returns Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n * it will also be consecutive. Note that the length of right, bottom, and left can be 0.\n */\nexport const split_loop_stns = (\n    loopline: string[],\n    current_stn_id: string,\n    bottom_factor: number,\n    left_and_right_factor: number\n) => {\n    const top_factor = loopline.length - left_and_right_factor * 2 - bottom_factor;\n    const current_stn_idx = loopline.findIndex(val => val === current_stn_id);\n    const non_undefined_loopline = [...loopline, ...loopline, ...loopline];\n    const split_a = loopline.length + current_stn_idx - Math.floor(top_factor / 2) + (top_factor % 2 === 0 ? 1 : 0);\n    const split_b = loopline.length + current_stn_idx + Math.floor(top_factor / 2);\n    return {\n        top: non_undefined_loopline.slice(split_a, split_b + 1),\n        left: non_undefined_loopline.slice(split_a - left_and_right_factor, split_a),\n        right: non_undefined_loopline.slice(split_b + 1, split_b + 1 + left_and_right_factor),\n        bottom: non_undefined_loopline.slice(\n            split_b + 1 + left_and_right_factor,\n            split_b + 1 + left_and_right_factor + bottom_factor\n        ),\n    };\n};\n\n/**\n * Split the loopline with one branch into four sides according to left_and_right_factor and bottom_factor.\n * Note that the top side must start from the branch_stn_id.\n *\n * It assumes parameters will follow these rules:\n *     1. loopline.length > bottom_factor + left_and_right_factor * 2\n *     2. bottom_factor >= 0\n *     3. left_and_right_factor >= 0\n *     4. left_and_right_factor + bottom_factor > 0\n *\n * @param loopline The loop line aka branches[0].\n * @param branch_stn_id Branch station id.\n * @param bottom_factor How many stations the bottom side will have.\n * @param left_and_right_factor How many stations the left and right side will have.\n * @returns Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n * it will also be consecutive. Note that the length of right, bottom, and left can be 0.\n */\nexport const split_loop_stns_with_branch = (\n    loopline: string[],\n    branch_stn_id: string,\n    bottom_factor: number,\n    left_and_right_factor: number\n) => {\n    const top_factor = loopline.length - left_and_right_factor * 2 - bottom_factor;\n    const non_undefined_loopline = [...loopline, ...loopline, ...loopline];\n    const split_a = loopline.length + loopline.findIndex(val => val === branch_stn_id);\n    const another_branch_stn_id = non_undefined_loopline[split_a + top_factor - 1];\n    const split_b =\n        loopline.length +\n        loopline.findIndex(val => val === another_branch_stn_id) +\n        (split_a + top_factor > loopline.length * 2 ? loopline.length : 0);\n    return {\n        top: non_undefined_loopline.slice(split_a, split_b + 1),\n        left: non_undefined_loopline.slice(split_a - left_and_right_factor, split_a),\n        right: non_undefined_loopline.slice(split_b + 1, split_b + 1 + left_and_right_factor),\n        bottom: non_undefined_loopline.slice(\n            split_b + 1 + left_and_right_factor,\n            split_b + 1 + left_and_right_factor + bottom_factor\n        ),\n    };\n};\n\n/**\n * Split the loopline with two branches into four sides according to left_and_right_factor and arc.\n * Note that the top side must start from one of the branch_stn_ids and end at another.\n * Also the top side will be the major or the minor arc between branch_stn_ids.\n *\n * It assumes parameters will follow these rules:\n *     1. loopline.length > the major or the minor arc length between branch_stn_ids +\n *                          left_and_right_factor * 2\n *     2. left_and_right_factor >= 0\n *\n * @param loopline The loop line aka branches[0].\n * @param branch_stn_ids Branches station id.\n * @param left_and_right_factor How many stations the left and right side will have.\n * @param arc Which arc will be the top side, the major or the minor.\n * @returns Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n * it will also be consecutive. Note that the length of right, bottom, and left can be 0.\n */\nexport const split_loop_stns_with_branches = (\n    loopline: string[],\n    branch_stn_ids: [string, string],\n    left_and_right_factor: number,\n    arc: 'major' | 'minor'\n) => {\n    let split_a = loopline.findIndex(val => val === branch_stn_ids[0]);\n    let split_b = loopline.findIndex(val => val === branch_stn_ids[1]);\n    // swap a and b if a is bigger than b\n    [split_a, split_b, branch_stn_ids[0], branch_stn_ids[1]] =\n        split_a > split_b\n            ? [split_b, split_a, branch_stn_ids[1], branch_stn_ids[0]]\n            : [split_a, split_b, branch_stn_ids[0], branch_stn_ids[1]];\n    const top_a = loopline.slice(split_a, split_b + 1);\n    const top_b = loopline.filter(stn => !top_a.filter(stn => !branch_stn_ids.includes(stn)).includes(stn));\n    // which arc we use on the top will result to different bottom factor\n    const bottom_factor =\n        loopline.length -\n        (arc === 'major' ? Math.max : Math.min)(top_a.length, top_b.length) -\n        left_and_right_factor * 2;\n    const branch_stn_id =\n        arc === 'major'\n            ? top_a.length > top_b.length\n                ? branch_stn_ids[0]\n                : branch_stn_ids[1]\n            : top_a.length > top_b.length\n            ? branch_stn_ids[1]\n            : branch_stn_ids[0];\n    return split_loop_stns_with_branch(loopline, branch_stn_id, bottom_factor, left_and_right_factor);\n};\n\nexport type LoopStns = ReturnType<typeof split_loop_stns>;\n\n/**\n * Calculate the xshares and yshares of the loop stations.\n *\n * @param loopline The loop line aka branches[0].\n * @param loop_stns Object returned from split_loop_stns.\n * @returns Values sit between 0 and 1.\n */\nexport const get_xshares_yshares_of_loop = (loopline: string[], loop_stns: LoopStns) => {\n    const x_shares = Object.fromEntries(loopline.map(stn_id => [stn_id, -1]));\n    const y_shares = Object.fromEntries(loopline.map(stn_id => [stn_id, -1]));\n\n    const [Y_TOP, Y_BOTTOM, X_LEFT, X_RIGHT] = [0, 1, 0, 1];\n\n    // loop's inner padding for xs\n    const e = 0; // 0 <= e <= 1\n\n    loop_stns.top.forEach((stn_id, i) => {\n        x_shares[stn_id] = e / 2 + ((1 - e) / (loop_stns.top.length + 1)) * (i + 1);\n        y_shares[stn_id] = Y_TOP;\n    });\n    loop_stns.right.forEach((stn_id, i) => {\n        x_shares[stn_id] = X_RIGHT;\n        y_shares[stn_id] = e / 2 + ((1 - e) / (loop_stns.right.length + 1)) * (i + 1);\n    });\n    loop_stns.bottom.forEach((stn_id, i) => {\n        x_shares[stn_id] = 1 - e / 2 - ((1 - e) / (loop_stns.bottom.length + 1)) * (i + 1);\n        y_shares[stn_id] = Y_BOTTOM;\n    });\n    loop_stns.left.forEach((stn_id, i) => {\n        x_shares[stn_id] = X_LEFT;\n        y_shares[stn_id] = 1 - e / 2 - ((1 - e) / (loop_stns.left.length + 1)) * (i + 1);\n    });\n\n    return {\n        x_shares: x_shares,\n        y_shares: y_shares,\n    };\n};\n\n/**\n * Get pivot stations from the loop line.\n */\nexport const get_pivot_stations = (\n    branches: string[][],\n    direction: ShortDirection,\n    stn_list: StationDict,\n    current_stn_id: string\n) => {\n    const loop_line = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n    const _ = [...loop_line, ...loop_line, ...loop_line];\n    const non_undefined_loop_line = direction === 'r' ? _ : _.reverse();\n    const current_stn_idx = non_undefined_loop_line.findIndex(stn_id => current_stn_id === stn_id) + loop_line.length;\n    return non_undefined_loop_line\n        .slice(current_stn_idx + 1)\n        .filter(stn_id => stn_list[stn_id].loop_pivot)\n        .slice(undefined, 2);\n};\n"],"names":["StationSHMetro","props","stnId","nameDirection","services","color","stnInfo","useAppSelector","store","param","stn_list","transfer","info","stationIconStyle","length","dr","StationNameGElement","name","infos","xlinkHref","stroke","transform","className","writingMode","fontSize","dy","upward","downward","left","right","osi_dx","osi_dy","x1","x2","y1","y2","IntBoxGroup","intInfos","arrowDirection","StationName","stnName","fill","OSIText","osiInfos","osysi_dx","osysi_dy","OSysIText","osysiInfos","React","ref","others","split","nameENLn","dx","anchor","textAnchor","map","txt","i","array","intNameId","intInfo","reduce","lineNames","filter","match","replace","join","concat","lineNamesEn","trim","arrowLength","transfer_dy","arrow_dx","arrow_dy","arrow_dr","transfer_dx","transfer_anchor","id","strokeWidth","d","offset","stopColor","toString","getStationYShare","stationId","branches","stationList","mainBranch","includes","slice","find","branch","openJawSiblingBranch","isLeftOpenJaw","hasSiblingBranchOpenJawOnTheLeft","indexOf","isRightOpenJaw","hasSiblingBranchOpenJawOnTheRight","children","branchBelongsTo","getSidingPath","coords","prevCoord","RIGHT_DOWN_ARC","DOWN_RIGHT_ARC","RIGHT_UP_ARC","UP_RIGHT_ARC","paths","coord","push","midPointX","TURNING_RADIUS","LoopBranches","loop_branches","edges","xs","ys","canvas","X_LEFT","X_RIGHT","Y_TOP","helper","current_stn_id","current_stn_idx","direction","coline","e","CanvasType","branches_paths","Number","at","loopline","stn_id","branches_coline_color","Object","values","co","from","to","every","colors","loop_branch","c","self","findIndex","t","refX","refY","markerEnd","undefined","stnState","bank","Services","LoopColine","loop_stns","info_panel_type","coline_main_color","isColineBranch","flat","COLINE_GAP","keys","top","height","width","x","y","LINE_WIDTH","o","bank_angle","svg_width","svgWidth","svg_height","padding","branch_spacing","loop_info","left_and_right_factor","bottom_factor","branch_stn_ids","v","arc","from_idx","to_idx","Math","abs","split_loop_stns_with_branches","split_loop_stns_with_branch","split_loop_stns","get_xshares_yshares_of_loop","x_shares_loop","x_shares","y_shares_loop","y_shares","critical_path_length","acc","cur","x_interval","line_xs_branches","xs_branches","fromEntries","stn","get_loop_branches","bottom","line_ys","line_xs","max","min","xs_loop","l","r","forEach","path","_linePath","strokeLinejoin","LoopStationGroup","Y_BOTTOM","corner","prev_x","prev_y","side","stn_pos","extra","railmap_bank","railmap_direction","indoor_name_direction","entries","bank_","direction_override","direction_param","loop","branchNameDX","stationIconColor","facility","stnNameEl","useRef","bBox","setBBox","current","getBBox","directionPolarity","mainDx","Facilities","lineDx","sum","boxInfos","Boolean","isLineNumber","isMaglev","el","IntBoxMaglev","IntBoxNumber","IntBoxLetter","memo","prevProps","nextProps","dominantBaseline","textCount","adjacencyList","stnList","leftW","rightW","a","criticalPathMethod","adjMat","len","nodes","allLengths","criticalPaths","child","cp","unshift","maxLength","getXShareMTR","criticalPath","branchOfStn","partSource","partSink","leftOpenJaw","lens","getStnState","currentId","routes","console","log","Set","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","stnIds","lineXs","realXs","realYs","prevId","prevY","prevX","stnDX","stnExtraH","stnSpareH","warn","stations","stnStates","isMTR","linePaths","main","pass","sidingMain","sidingPass","isSiding","lineMainStns","linePassStns","drawLine","top_factor","val","non_undefined_loopline","split_a","floor","split_b","branch_stn_id","another_branch_stn_id","top_a","top_b","get_pivot_stations","loop_line","_","non_undefined_loop_line","reverse","loop_pivot"],"sourceRoot":""}