{"version":3,"file":"static/js/6584.69edc430.chunk.js","mappings":"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","sources":["svgs/mtr/line-diagram-utils.ts","../javascript/esm|/home/runner/work/rmg/rmg/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import { StationDict } from '../../constants/constants';\n\n/**\n * @return - negative: above main line, positive: below main line\n */\nexport const getStationYShare = (stationId: string, branches: string[][], stationList: StationDict): number => {\n    const mainBranch = branches[0];\n\n    if (mainBranch.includes(stationId)) {\n        // on main branch\n        if (branches.slice(1).find(branch => branch.includes(stationId))) {\n            // node shared by multiple branches\n            return 0;\n        } else {\n            const openJawSiblingBranch = branches.slice(1).find(branch => {\n                const isLeftOpenJaw = branch[0] === 'linestart';\n                const hasSiblingBranchOpenJawOnTheLeft =\n                    mainBranch.indexOf(stationId) < mainBranch.indexOf(branch.slice(-1)[0]);\n\n                const isRightOpenJaw = branch.slice(-1)[0] === 'lineend';\n                const hasSiblingBranchOpenJawOnTheRight = mainBranch.indexOf(stationId) > mainBranch.indexOf(branch[0]);\n\n                return (\n                    (isLeftOpenJaw && hasSiblingBranchOpenJawOnTheLeft) ||\n                    (isRightOpenJaw && hasSiblingBranchOpenJawOnTheRight)\n                );\n            });\n\n            if (openJawSiblingBranch) {\n                // on main branch but open jaw\n                // NOTE: determine y share of node by children ordering, not by whether it's a branch or not (like GZMTR)\n                // TODO: Remove requirement on stationList arg\n                return stationList[openJawSiblingBranch[0]].children.indexOf(openJawSiblingBranch[1]) === 1 ? -1 : 1;\n            } else {\n                // pure main branch without siblings or main branch with sidings\n                return 0;\n            }\n        }\n    } else {\n        // on branch/sidings\n        const branchBelongsTo = branches.slice(1).find(branch => branch.includes(stationId));\n        if (branchBelongsTo) {\n            const isSiding = branchBelongsTo[0] !== 'linestart' && branchBelongsTo.slice(-1)[0] !== 'lineend';\n            if (isSiding) {\n                return stationList[branchBelongsTo[0]].children.indexOf(branchBelongsTo[1]) === 1 ? 1.2 : -1.2;\n            } else {\n                return stationList[branchBelongsTo[0]].children.indexOf(branchBelongsTo[1]) === 1 ? 1 : -1;\n            }\n        } else {\n            // fallback\n            return 0;\n        }\n    }\n};\n\nexport const getSidingPath = (coords: [number, number][]): string => {\n    const TURNING_RADIUS = 6;\n    const RIGHT_DOWN_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,1,${TURNING_RADIUS},${TURNING_RADIUS}`;\n    const DOWN_RIGHT_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,0,${TURNING_RADIUS},${TURNING_RADIUS}`;\n    const RIGHT_UP_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,0,${TURNING_RADIUS},-${TURNING_RADIUS}`;\n    const UP_RIGHT_ARC = `a${TURNING_RADIUS},${TURNING_RADIUS},0,0,1,${TURNING_RADIUS},-${TURNING_RADIUS}`;\n\n    let prevCoord: [number, number] | undefined;\n    let paths: string[] = [];\n\n    for (let coord of coords) {\n        if (!prevCoord) {\n            paths.push('M' + coord.join(','));\n        } else {\n            if (coord[1] === prevCoord[1]) {\n                // horizontal\n                paths.push('H' + coord[0]);\n            } else {\n                const midPointX = (coord[0] + prevCoord[0]) / 2 - (prevCoord[1] === 0 ? 0 : TURNING_RADIUS * 2);\n                paths.push('H' + midPointX);\n\n                if (coord[1] > prevCoord[1]) {\n                    // turn to below\n                    paths.push(RIGHT_DOWN_ARC);\n                    paths.push('V' + (coord[1] - TURNING_RADIUS));\n                    paths.push(DOWN_RIGHT_ARC);\n                } else {\n                    // turn to above\n                    paths.push(RIGHT_UP_ARC);\n                    paths.push('V' + (coord[1] + TURNING_RADIUS));\n                    paths.push(UP_RIGHT_ARC);\n                }\n\n                paths.push('H' + coord[0]);\n            }\n        }\n        // update prev coordinate\n        prevCoord = coord;\n    }\n\n    return paths.join(' ').replace(/( H([\\d.]+))+/g, ' H$2');\n};\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["getStationYShare","stationId","branches","stationList","mainBranch","includes","slice","find","branch","openJawSiblingBranch","isLeftOpenJaw","hasSiblingBranchOpenJawOnTheLeft","indexOf","isRightOpenJaw","hasSiblingBranchOpenJawOnTheRight","children","branchBelongsTo","getSidingPath","coords","prevCoord","RIGHT_DOWN_ARC","DOWN_RIGHT_ARC","RIGHT_UP_ARC","UP_RIGHT_ARC","paths","coord","push","midPointX","TURNING_RADIUS","join","replace","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2"],"sourceRoot":""}