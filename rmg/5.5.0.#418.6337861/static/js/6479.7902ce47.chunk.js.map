{"version":3,"file":"static/js/6479.7902ce47.chunk.js","mappings":"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","sources":["setupTests.tsx","svgs/mtr/station/station-name/station-name-wrapper.test.tsx","svgs/mtr/station/station-name/station-name-wrapper.tsx","svgs/mtr/station/station-name/station-name.tsx","svgs/mtr/utils.ts","test-utils.tsx"],"sourcesContent":["import createMockStore from 'redux-mock-store';\nimport { BranchStyle, StationDict } from './constants/constants';\nimport rootReducer, { RootState } from './redux';\nimport { getDefaultMiddleware, ThunkDispatch } from '@reduxjs/toolkit';\n\n// FIXME: any -> AnyAction?\ntype DispatchExts = ThunkDispatch<RootState, void, any>;\nexport const createMockAppStore = createMockStore<RootState, DispatchExts>(getDefaultMiddleware());\n\nconst realStore = rootReducer.getState();\nexport const createMockStoreWithMockStations = (stationList: StationDict) =>\n    createMockAppStore({\n        ...realStore,\n        param: { ...realStore.param, stn_list: stationList },\n    });\n\n/**\n * Before reversing:\n * stn0 - stn1 - stn2 (main)\n *             \\\n *              stn3 - stn4 (branch)\n *\n * After reversing:\n * (branch) stn4 - stn3\n *                      \\\n *          (main) stn2 - stn1 - stn0\n */\nexport const mockSimpleStationList: StationDict = {\n    linestart: {\n        parents: [],\n        children: ['stn0'],\n        branch: { left: [], right: [] },\n    },\n    stn0: {\n        parents: ['linestart'],\n        children: ['stn1'],\n        branch: { left: [], right: [] },\n    },\n    stn1: {\n        parents: ['stn0'],\n        children: ['stn2', 'stn3'],\n        branch: { left: [], right: [BranchStyle.through, 'stn3'] },\n    },\n    stn2: {\n        parents: ['stn1'],\n        children: ['lineend'],\n        branch: { left: [], right: [] },\n    },\n    stn3: {\n        parents: ['stn1'],\n        children: ['stn4'],\n        branch: { left: [], right: [] },\n    },\n    stn4: {\n        parents: ['stn3'],\n        children: ['lineend'],\n        branch: { left: [], right: [] },\n    },\n    lineend: {\n        parents: ['stn2', 'stn4'],\n        children: [],\n        branch: { left: [BranchStyle.through, 'stn4'], right: [] },\n    },\n} as any;\n","import React from 'react';\nimport StationNameWrapper, { NAME_FULL_HEIGHT } from './station-name-wrapper';\nimport { Facilities, StationState } from '../../../../constants/constants';\nimport { render } from '../../../../test-utils';\n\n(Document.prototype as any).fonts = {\n    ready: Promise.resolve([]),\n};\n\nconst mockGetBBox = jest.fn();\n(SVGElement.prototype as any).getBBox = mockGetBBox;\n\nconst mockBBox = {\n    left: { x: 0, width: 80 },\n    centre: { x: -40, width: 80 },\n    right: { x: -80, width: -80 },\n};\n\ndescribe('Unit tests for StationNameWrapper component', () => {\n    it('Can calculate position of centre-aligned component correctly', () => {\n        mockGetBBox.mockReturnValue(mockBBox.centre);\n\n        const { container } = render(\n            <svg>\n                <StationNameWrapper\n                    stationName={['迪士尼', 'Disneyland Resort']}\n                    stationState={StationState.CURRENT}\n                    facility={Facilities.disney}\n                />\n            </svg>\n        );\n\n        const rectWidth = container.querySelector('rect')?.getAttribute('width');\n        expect(Number(rectWidth)).toBe(NAME_FULL_HEIGHT + mockBBox.centre.width + 6 + 3); // 6: padding, 3: gap between icon and name\n    });\n});\n","import React, { SVGProps, useState } from 'react';\nimport { Direction, Facilities, Name, StationState } from '../../../../constants/constants';\nimport StationName from './station-name';\n\n/**\n * Top (in pixels) of station's Chinese name.\n */\nconst NAME_ZH_TOP = -10.8125;\n/**\n * Height (in pixels) of station's Chinese name.\n */\n// const NAME_ZH_HEIGHT = 21.625;\n/**\n * Top (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_TOP = -8;\n/**\n * Height (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_HEIGHT = 13.21875;\n/**\n * Difference of `y`s of station's Chinese name and English name (1 line). (This number should used as the `dy` of the English `text` element after Chinese `text` elements. )\n */\nconst NAME_ZH_EN_GAP = 17;\n/**\n * Height (in pixels) from the top of station's Chinese name to the bottom of English name (1 line).\n */\nexport const NAME_FULL_HEIGHT = -NAME_ZH_TOP + NAME_ZH_EN_GAP + NAME_EN_HEIGHT + NAME_EN_TOP;\n/**\n * Height (in pixels) of the gap between the centre of the line and the top of station's Chinese name.\n */\nconst STN_NAME_LINE_GAP = 14;\n\ninterface StationNameWrapperProps extends SVGProps<SVGGElement> {\n    stationName: Name;\n    stationState: StationState;\n    facility: Facilities;\n    lower?: boolean;\n    align?: Direction;\n}\n\nexport default function StationNameWrapper(props: StationNameWrapperProps) {\n    const { stationName, stationState, lower, align, facility, ...others } = props;\n\n    /**\n     * align = undefined: { x: -40, width: 80 }\n     * align = left: { x: 0, width: 80 }\n     * align = right: { x: -80, width: 80 }\n     */\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    const getFill = (state: StationState) => {\n        switch (state) {\n            case StationState.PASSED:\n                return 'var(--rmg-grey)';\n            case StationState.CURRENT:\n                return '#fff';\n            case StationState.FUTURE:\n                return 'var(--rmg-black)';\n        }\n    };\n\n    const nameEnRows = stationName[1].split('\\\\').length;\n    const transforms = {\n        g: {\n            x: align ? (align === Direction.right ? -3 : 3) : 0,\n            y:\n                (lower\n                    ? STN_NAME_LINE_GAP - NAME_ZH_TOP\n                    : -STN_NAME_LINE_GAP - NAME_ZH_TOP - NAME_FULL_HEIGHT - 11 * (nameEnRows - 1)) +\n                (align ? (lower ? 10 : -10) : 0),\n        },\n        rect: {\n            x:\n                bBox.x -\n                3 +\n                (facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? -3 - NAME_FULL_HEIGHT\n                        : 0\n                    : (NAME_FULL_HEIGHT + 5) / 2 - 3 - NAME_FULL_HEIGHT),\n            y: NAME_ZH_TOP - 1,\n            width: bBox.width + 6 + (facility === Facilities.none ? 0 : NAME_FULL_HEIGHT + 3),\n            height: NAME_FULL_HEIGHT + 2 + 11 * (nameEnRows - 1),\n        },\n        use: {\n            x: align\n                ? align === Direction.right\n                    ? -(NAME_FULL_HEIGHT + 2) / 2 - bBox.width - 3\n                    : (NAME_FULL_HEIGHT + 2) / 2 - 2\n                : -(bBox.width + 3) / 2,\n            y: NAME_ZH_TOP - 1 + 5.5 * (nameEnRows - 1),\n        },\n        StationName: {\n            x:\n                facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? 0\n                        : NAME_FULL_HEIGHT + 3\n                    : (NAME_FULL_HEIGHT + 5) / 2,\n            y: 0,\n        },\n    };\n\n    return (\n        <g {...others}>\n            <g fill={getFill(stationState)} transform={`translate(${transforms.g.x},${transforms.g.y})`}>\n                {stationState === StationState.CURRENT && (\n                    <rect\n                        x={transforms.rect.x}\n                        y={transforms.rect.y}\n                        width={transforms.rect.width}\n                        height={transforms.rect.height}\n                        fill=\"var(--rmg-black)\"\n                    />\n                )}\n\n                {facility !== Facilities.none && (\n                    <use\n                        xlinkHref={`#${facility}`}\n                        fill={stationState === StationState.PASSED ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                        x={transforms.use.x}\n                        y={transforms.use.y}\n                    />\n                )}\n\n                <g transform={`translate(${transforms.StationName.x},${transforms.StationName.y})`}>\n                    <StationName stnName={stationName} onUpdate={setBBox} align={align} />\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Direction, Name } from '../../../../constants/constants';\nimport { waitForFontReady } from '../../utils';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    align?: Direction;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate, align } = props;\n\n        const nameEl = useRef<SVGGElement>(null);\n\n        const updateNameBBox = () => {\n            onUpdate?.(nameEl.current!.getBBox());\n        };\n\n        useEffect(() => {\n            updateNameBBox();\n            waitForFontReady().then().catch(console.log).finally(updateNameBBox);\n        }, [stnName.toString(), align]);\n\n        const getTextAnchor = (direction?: Direction) => {\n            switch (direction) {\n                case Direction.left:\n                    return 'start';\n                case Direction.right:\n                    return 'end';\n                default:\n                    return 'middle';\n            }\n        };\n\n        const getDy = (index: number) => 17 + 11 * index;\n\n        return (\n            <g ref={nameEl} textAnchor={getTextAnchor(align)}>\n                <text className=\"rmg-name__zh rmg-name__mtr--station\">{stnName[0]}</text>\n\n                {stnName[1].split('\\\\').map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en rmg-name__mtr--station\" dy={getDy(i)}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.stnName.toString() === nextProps.stnName.toString() && prevProps.align === nextProps.align\n);\n","import { waitForMs } from '../../utils';\n\nexport const waitForFontReady = async () => {\n    let retryAttempt = 3;\n\n    while (retryAttempt--) {\n        // #274 ready font fact set may not contain GenYoMin when first resolved\n        const fontFaceSet = await document.fonts.ready;\n        const it = fontFaceSet.values();\n        while (true) {\n            const next = it.next();\n            if (next.done) {\n                break;\n            }\n\n            if (next.value.family === 'GenYoMin TW') {\n                return;\n            }\n        }\n\n        console.log('GenYoMin is NOT ready. Retry attempts remaining: ' + retryAttempt + ' ...');\n        await waitForMs(500);\n    }\n\n    throw new Error('Failed to load GenYoMin after 3 attempts');\n};\n","import '@testing-library/jest-dom';\nimport React, { ReactElement, ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { Store } from '@reduxjs/toolkit';\nimport { I18nextProvider } from 'react-i18next';\nimport i18n from './i18n/config';\nimport { Provider } from 'react-redux';\nimport rootReducer from './redux';\nimport { createMockAppStore } from './setupTests';\nimport { MemoryRouter } from 'react-router-dom';\n\ninterface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n    store: Store;\n}\n\nconst initialOptions: CustomRenderOptions = {\n    store: createMockAppStore({ ...rootReducer.getState() }),\n};\n\ninterface TestingProviderProps {\n    children?: ReactNode;\n    store: Store;\n}\n\nexport const TestingProvider = (props: TestingProviderProps) => {\n    const { children, store } = props;\n\n    return (\n        <I18nextProvider i18n={i18n}>\n            <Provider store={store}>\n                <MemoryRouter>{children}</MemoryRouter>\n            </Provider>\n        </I18nextProvider>\n    );\n};\n\nconst customRender = (ui: ReactElement, { store, ...renderOptions } = initialOptions) => {\n    return render(ui, {\n        wrapper: props => <TestingProvider store={store} {...props} />,\n        ...renderOptions,\n    });\n};\n\nexport { customRender as render };\n"],"names":["createMockAppStore","createMockStore","getDefaultMiddleware","realStore","rootReducer","createMockStoreWithMockStations","stationList","param","stn_list","BranchStyle","Document","prototype","fonts","ready","Promise","resolve","mockGetBBox","jest","fn","SVGElement","getBBox","mockBBox","x","width","describe","it","mockReturnValue","rectWidth","render","stationName","stationState","StationState","facility","Facilities","container","querySelector","getAttribute","expect","Number","toBe","NAME_FULL_HEIGHT","StationNameWrapper","props","lower","align","others","useState","bBox","setBBox","nameEnRows","split","length","transforms","g","Direction","y","STN_NAME_LINE_GAP","rect","NAME_ZH_TOP","height","use","StationName","fill","state","getFill","transform","xlinkHref","stnName","onUpdate","memo","nameEl","useRef","updateNameBBox","current","useEffect","waitForFontReady","then","catch","console","log","finally","toString","ref","textAnchor","direction","getTextAnchor","className","map","txt","i","dy","index","prevProps","nextProps","retryAttempt","document","fontFaceSet","values","next","done","value","family","waitForMs","Error","initialOptions","store","TestingProvider","children","i18n","customRender","ui","renderOptions","wrapper"],"sourceRoot":""}