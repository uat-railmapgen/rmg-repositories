{"version":3,"file":"static/js/4079.9e5747d5.chunk.js","mappings":"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","sources":["svgs/gzmtr/current-station-name.tsx","svgs/gzmtr/station-icon/station-icon.tsx","svgs/gzmtr/station-icon/station-number.tsx","svgs/runin/info-gzmtr.tsx"],"sourcesContent":["import React, { memo, SVGProps, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../constants/constants';\n\ninterface CurrentStationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n}\n\nexport default memo(\n    function CurrentStationName(props: CurrentStationNameProps) {\n        const { stnName, onUpdate } = props;\n\n        const nameEl = useRef<SVGGElement | null>(null);\n\n        useEffect(() => {\n            onUpdate?.(nameEl.current!.getBBox());\n        }, [stnName.toString()]);\n\n        return (\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={90}>\n                    {stnName[0]}\n                </text>\n                <g fontSize={36}>\n                    {stnName[1].split('\\\\').map((txt, i) => (\n                        <text className=\"rmg-name__en\" key={i} dy={70 + i * 36}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.stnName.toString() === nextProps.stnName.toString()\n);\n\ninterface CurrentStationSecondaryNameProps extends SVGProps<SVGGElement> {\n    secondaryName: Name;\n}\n\nexport const CurrentStationSecondaryName = (props: CurrentStationSecondaryNameProps) => {\n    const { secondaryName, transform } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(() => setBBox(nameEl.current!.getBBox()), [secondaryName.toString()]);\n\n    return (\n        <g transform={transform}>\n            <g transform=\"translate(0,4.5)\" fontSize={36}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={26}>\n                    {secondaryName[0]}\n                </text>\n                <text dy={22} className=\"rmg-name__en\" fontSize={14}>\n                    {secondaryName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n","import React, { memo } from 'react';\n\ninterface StationIconProps {\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default memo(\n    function StationIcon(props: StationIconProps) {\n        const { passed, large } = props;\n\n        const pathD = large\n            ? 'M0,12.95 V-12.95 H-12.95 a12.95,12.95 0 0,0 0,25.9 h25.9 a12.95,12.95 0 0,0 0,-25.9 H0'\n            : 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\n\n        return <path d={pathD} fill=\"#fff\" strokeWidth={2} stroke={passed ? '#aaa' : 'var(--rmg-theme-colour)'} />;\n    },\n    (prevProps, nextProps) => prevProps.passed === nextProps.passed && prevProps.large === nextProps.large\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport StationIcon from './station-icon';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, passed, large, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g {...others}>\n            <StationIcon passed={passed} large={large} />\n            <g\n                textAnchor=\"middle\"\n                fontSize={13.5}\n                transform={large ? 'scale(1.4)' : ''}\n                fill={passed ? '#aaa' : '#000'}\n            >\n                <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                    <text ref={lineNumEl} className=\"rmg-name__zh\">\n                        {lineNum}\n                    </text>\n                </g>\n                <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                    <text ref={stnNumEl} className=\"rmg-name__zh\">\n                        {stnNum}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport StationNumber from '../gzmtr/station-icon/station-number';\nimport { CanvasType, Name, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport CurrentStationName, { CurrentStationSecondaryName } from '../gzmtr/current-station-name';\n\nconst InfoGZMTR = () => {\n    const svgHeight = useRootSelector(store => store.param.svg_height);\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const infoPanelType = useRootSelector(store => store.param.info_panel_type);\n    const lineNumber = useRootSelector(store => store.param.line_num);\n    const currentStationIndex = useRootSelector(store => store.param.current_stn_idx);\n    const curStnInfo = useRootSelector(store => store.param.stn_list[currentStationIndex]);\n\n    const [nameBBox, setNameBBox] = useState({ width: 0 } as SVGRect);\n\n    const nextStnId = curStnInfo[direction === ShortDirection.left ? 'parents' : 'children'];\n\n    const otisTransforms = {\n        name: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 4},45)`,\n        next: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 10},45)`,\n    };\n\n    const transforms = {\n        nameGroup: {\n            x: svgWidths.runin / 2,\n            y:\n                0.5 * svgHeight -\n                50 -\n                (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                (curStnInfo.secondaryName ? 29 : 0),\n        },\n        secondaryName: {\n            x: 0,\n            y: 70 + curStnInfo.name[1].split('\\\\').length * 36,\n        },\n    };\n\n    return (\n        <g>\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.name : ''}>\n                <g textAnchor=\"middle\" transform={`translate(${transforms.nameGroup.x},${transforms.nameGroup.y})`}>\n                    <CurrentStationName stnName={curStnInfo.name} onUpdate={setNameBBox} />\n                    {curStnInfo.secondaryName && (\n                        <CurrentStationSecondaryName\n                            secondaryName={curStnInfo.secondaryName}\n                            transform={`translate(${transforms.secondaryName.x},${transforms.secondaryName.y})`}\n                        />\n                    )}\n                </g>\n\n                <StationNumber\n                    lineNum={lineNumber}\n                    stnNum={curStnInfo.num}\n                    style={{\n                        ['--translate-x' as any]: `${(svgWidths[CanvasType.RunIn] + nameBBox.width) / 2 + 55}px`,\n                        ['--translate-y' as any]: `${\n                            0.5 * svgHeight -\n                            30 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                        transform: 'translate(var(--translate-x, 800px), var(--translate-y, 145px))',\n                    }}\n                    large\n                />\n            </g>\n\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.next : ''}>\n                {!nextStnId || nextStnId.includes('linestart') || nextStnId.includes('lineend') ? (\n                    <></>\n                ) : nextStnId.length === 1 ? (\n                    <BigNext nextId={nextStnId[0]} nameBBox={nameBBox} />\n                ) : (\n                    <BigNext2 nextIds={nextStnId} nameBBox={nameBBox} />\n                )}\n            </g>\n        </g>\n    );\n};\n\nexport default InfoGZMTR;\n\nconst BigNext = (props: { nextId: string; nameBBox: DOMRect }) => {\n    const { nextId, nameBBox } = props;\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const nextInfo = useRootSelector(store => store.param.stn_list[nextId]);\n    const { name, secondaryName } = nextInfo;\n\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEl = React.useRef<SVGGElement | null>(null);\n    useEffect(\n        () => setNextBBox(nextNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [name.toString()]\n    );\n\n    const nextNameZHCount = name[0].length;\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next\">\n                <g\n                    textAnchor=\"middle\"\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? '80px'\n                                : nextNameZHCount <= 2\n                                ? `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 70}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 35 * 1.5}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        下站\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={17} dy={30}>\n                        Next\n                    </text>\n                </g>\n                <g\n                    textAnchor=\"start\"\n                    ref={nextNameEl}\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? nextNameZHCount <= 2\n                                    ? `${115 + 35}px`\n                                    : `${115 + 35 / 2}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        {name[0]}\n                    </text>\n                    <g fontSize={17}>\n                        {name[1].split('\\\\').map((txt: string, i: number) => (\n                            <text className=\"rmg-name__en\" dy={30 + i * 17} key={i}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n                {secondaryName && (\n                    <g\n                        textAnchor=\"middle\"\n                        style={{\n                            ['--translate-x' as any]:\n                                direction === ShortDirection.left\n                                    ? nextNameZHCount <= 2\n                                        ? `${115 + 35}px`\n                                        : `${115 + 35 / 2}px`\n                                    : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                        }}\n                    >\n                        <BigNextSec\n                            secName={secondaryName}\n                            transform={`translate(${nextBBox.width / 2},${30 + name[1].split('\\\\').length * 17 + 5})`}\n                        />\n                    </g>\n                )}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${\n                                  (115 + 35 * ((nextNameZHCount <= 2 ? 1 : 0.5) + nextNameZHCount) + nameBcrX) / 2 - 20\n                              }px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      (nextNameZHCount <= 2 ? 70 + 35 : 35 * 2.5) +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n\nconst BigNextSec = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,2.5)\" fontSize={25}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {secName[0]}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={10} dy={15}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigNext2 = (props: { nextIds: string[]; nameBBox: DOMRect }) => {\n    const { nextIds, nameBBox } = props;\n    const { routes } = useRootSelector(store => store.helper);\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    const nextNames = nextIds.map(id => stationList[id].name);\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEls = useRef<(SVGGElement | null)[]>([]);\n    useEffect(\n        () => {\n            setNextBBox(prevBBox => ({ ...prevBBox, width: 0 }));\n            nextNameEls.current.forEach(el => {\n                let nextBBox = el?.getBBox();\n                setNextBBox(prevBBox => {\n                    if (nextBBox) {\n                        return prevBBox.width > nextBBox.width ? prevBBox : nextBBox;\n                    } else {\n                        return prevBBox;\n                    }\n                });\n            });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [nextNames.toString()]\n    );\n\n    const validEnds = props.nextIds.map(stnId =>\n        routes.reduce(\n            (acc, route) =>\n                // filter routes not containing next station's id\n                route.includes(stnId)\n                    ? acc.concat(\n                          route\n                              .filter(s => !['linestart', 'lineend'].includes(s))\n                              // select first/last station's id\n                              .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                      )\n                    : acc,\n            [] as string[]\n        )\n    );\n\n    const nextNameZHCount = Math.max(...nextNames.map(names => names[0].length));\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next_2\">\n                {nextNames.map((name, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            <g\n                                textAnchor=\"middle\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '72px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 41}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">下站</text>\n                                <text className=\"rmg-name__en\" y={22}>\n                                    Next\n                                </text>\n                            </g>\n                            <g\n                                ref={el => (nextNameEls.current[i] = el)}\n                                textAnchor=\"start\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '113px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">{name[0]}</text>\n                                {name[1].split('\\\\').map((txt, j) => (\n                                    <text key={j} className=\"rmg-name__en\" y={22 + j * 13}>\n                                        {txt}\n                                    </text>\n                                ))}\n                                <text className=\"rmg-name__zh\" y={-35}>\n                                    {validEnds[i].map(s => stationList[s].name[0]).join('/') + '方向'}\n                                </text>\n                                <text className=\"rmg-name__en rmg-name__gzmtr--next2-dest\" y={-20}>\n                                    {'Towards ' +\n                                        validEnds[i]\n                                            .map(s => stationList[s].name[1])\n                                            .join('/')\n                                            .replace('\\\\', ' ')}\n                                </text>\n                            </g>\n                        </React.Fragment>\n                    );\n                })}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${(99 + 27 * (1 + nextNameZHCount) + nameBcrX) / 2 - 20}px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      41 -\n                                      27 +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n"],"names":["memo","props","stnName","onUpdate","nameEl","useRef","useEffect","current","getBBox","toString","ref","className","fontSize","split","map","txt","i","dy","prevProps","nextProps","CurrentStationSecondaryName","secondaryName","transform","useState","x","width","bBox","setBBox","textAnchor","passed","pathD","large","d","fill","strokeWidth","stroke","StationNumber","lineNum","stnNum","others","lineNumEl","stnNumEl","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","lineNumScale","Math","max","stnNumScale","length","svgHeight","useRootSelector","store","param","svg_height","svgWidths","svgWidth","direction","infoPanelType","info_panel_type","lineNumber","line_num","currentStationIndex","current_stn_idx","curStnInfo","stn_list","nameBBox","setNameBBox","nextStnId","ShortDirection","otisTransforms","name","CanvasType","next","transforms","nameGroup","runin","y","PanelTypeGZMTR","num","style","includes","BigNext","nextId","BigNext2","nextIds","nextInfo","nextBBox","setNextBBox","nextNameEl","React","nextNameZHCount","nameBcrX","id","BigNextSec","secName","routes","helper","stationList","nextNames","nextNameEls","prevBBox","forEach","el","validEnds","stnId","reduce","acc","route","concat","filter","s","slice","names","j","join","replace"],"sourceRoot":""}