{"version":3,"file":"static/js/9145.0218bd15.chunk.js","mappings":"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","sources":["svgs/mtr/station/interchange-tick.tsx","svgs/mtr/station/osi-station.tsx","svgs/mtr/station/station-icon.tsx"],"sourcesContent":["import React, { memo } from 'react';\nimport { Direction, InterchangeInfo, Position } from '../../../constants/constants';\n\nconst getRotation = (position: Position): number => {\n    switch (position) {\n        case Position.UP:\n            return 180;\n        case Position.DOWN:\n            return 0;\n        case Position.LEFT:\n            return 90;\n        case Position.RIGHT:\n            return -90;\n    }\n};\n\ninterface InterchangeTickProps {\n    interchangeInfo: InterchangeInfo;\n    isPassed?: boolean;\n    position: Position;\n    repel?: Direction; // osi22\n}\n\nfunction InterchangeTick(props: InterchangeTickProps) {\n    const { interchangeInfo, isPassed, position, repel } = props;\n\n    const zhNameLines = interchangeInfo[4].split('\\\\').length;\n    const enNameLines = interchangeInfo[5].split('\\\\').length;\n\n    const textAnchor =\n        position === Position.LEFT || repel === Direction.left\n            ? 'end'\n            : position === Position.RIGHT || repel === Direction.right\n            ? 'start'\n            : 'middle';\n\n    const transforms = {\n        path: {\n            rotate: getRotation(position),\n        },\n        g: {\n            x:\n                (position === Position.LEFT ? -24 : position === Position.RIGHT ? 24 : 0) +\n                (repel === Direction.left ? -3 : repel === Direction.right ? 3 : 0),\n            y:\n                position === Position.UP\n                    ? -37 - 10 * (zhNameLines - 1) - 7 * (enNameLines - 1)\n                    : position === Position.DOWN\n                    ? 31\n                    : 6 - (20 + 10 * (zhNameLines - 1) + 7 * (enNameLines - 1) - 1) / 2,\n        },\n    };\n\n    return (\n        <>\n            <path\n                d=\"M0,0v17\"\n                strokeLinecap=\"round\"\n                stroke={isPassed ? 'var(--rmg-grey)' : interchangeInfo[2]}\n                strokeWidth={8}\n                transform={`rotate(${transforms.path.rotate})`}\n            />\n            <g\n                textAnchor={textAnchor}\n                transform={`translate(${transforms.g.x},${transforms.g.y})`}\n                fill={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n            >\n                {interchangeInfo[4].split('\\\\').map((txt, i) => (\n                    <text key={i} dy={10 * i} className=\"rmg-name__zh\" fontSize={10}>\n                        {txt}\n                    </text>\n                ))}\n                {interchangeInfo[5].split('\\\\').map((txt, j) => (\n                    <text key={zhNameLines + j} dy={zhNameLines * 10 - 1 + 7 * j} className=\"rmg-name__en\" fontSize={7}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        </>\n    );\n}\n\nexport default memo(\n    InterchangeTick,\n    (prevProps, nextProps) =>\n        prevProps.interchangeInfo.toString() === nextProps.interchangeInfo.toString() &&\n        prevProps.isPassed === nextProps.isPassed &&\n        prevProps.position === nextProps.position &&\n        prevProps.repel === nextProps.repel\n);\n","import React from 'react';\nimport { Direction, InterchangeInfo, Name, Position } from '../../../constants/constants';\nimport InterchangeTick from './interchange-tick';\nimport StationIcon from './station-icon';\n\ninterface OsiStationProps {\n    interchangeInfoList: InterchangeInfo[];\n    direction: Direction;\n    isPassed?: boolean;\n    isReversed?: boolean;\n    isTerminal?: boolean;\n    stationName?: Name;\n}\n\nexport default function OsiStation(props: OsiStationProps) {\n    const { interchangeInfoList, direction, isPassed, isReversed, isTerminal, stationName } = props;\n\n    const enNameLines = stationName?.[1]?.split('\\\\')?.length ?? 1;\n\n    const iconLength = 18 * (interchangeInfoList.length - 1);\n    const transforms = {\n        name: {\n            x: isTerminal\n                ? 0\n                : interchangeInfoList.length === 1\n                ? direction === Direction.left\n                    ? -13\n                    : 13\n                : direction === Direction.left\n                ? 13\n                : -13,\n            y: isTerminal\n                ? isReversed\n                    ? 19\n                    : -28\n                : -4 + (isReversed ? -9 : 9) * (interchangeInfoList.length - 1) - 5 * (enNameLines - 1),\n        },\n    };\n\n    return (\n        <g>\n            {interchangeInfoList.map((info, i, arr) => (\n                <g key={i} transform={`translate(0,${isReversed ? -18 * i : 18 * i})`}>\n                    <InterchangeTick\n                        interchangeInfo={info}\n                        isPassed={isPassed}\n                        position={\n                            arr.length === 1\n                                ? isReversed\n                                    ? Position.UP\n                                    : Position.DOWN\n                                : direction === Direction.right\n                                ? Position.RIGHT\n                                : Position.LEFT\n                        }\n                    />\n                </g>\n            ))}\n\n            <StationIcon length={iconLength} isPassed={isPassed} isReversed={isReversed} />\n\n            <g\n                textAnchor={transforms.name.x === 0 ? 'middle' : transforms.name.x > 0 ? 'start' : 'end'}\n                fill={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                transform={`translate(${transforms.name.x},${transforms.name.y})`}\n            >\n                <text className=\"rmg-name__zh\" fontSize={14}>\n                    {stationName?.[0]}\n                </text>\n                {stationName?.[1]?.split('\\\\')?.map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en\" fontSize={9} dy={12 + 10 * i}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        </g>\n    );\n}\n","import React from 'react';\n\ninterface StationIconProps {\n    length: number;\n    isPassed?: boolean;\n    isReversed?: boolean;\n}\n\nexport default function StationIcon(props: StationIconProps) {\n    const { length, isPassed, isReversed } = props;\n\n    return (\n        <path\n            d={`M-8,0 v${length} a8,8 0 0,0 16,0 v-${length} a8,8 0 0,0 -16,0Z`}\n            className=\"rmg-stn__mtr\"\n            stroke={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n            transform={`scale(1,${isReversed ? -1 : 1})`}\n        />\n    );\n}\n"],"names":["getRotation","position","Position","InterchangeTick","props","interchangeInfo","isPassed","repel","zhNameLines","split","length","enNameLines","textAnchor","Direction","transforms","path","rotate","g","x","y","d","strokeLinecap","stroke","strokeWidth","transform","fill","map","txt","i","dy","className","fontSize","j","memo","prevProps","nextProps","toString","OsiStation","interchangeInfoList","direction","isReversed","isTerminal","stationName","iconLength","name","info","arr","StationIcon"],"sourceRoot":""}