{"version":3,"file":"static/js/3078.90b28a8d.chunk.js","mappings":"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","sources":["svgs/mtr/station/interchange-station.tsx","svgs/mtr/station/interchange-tick.tsx","svgs/mtr/station/station-icon.tsx"],"sourcesContent":["import React from 'react';\nimport { Direction, InterchangeInfo, Position } from '../../../constants/constants';\nimport InterchangeTick from './interchange-tick';\nimport StationIcon from './station-icon';\n\ninterface InterchangeStationProps {\n    interchangeInfoList: InterchangeInfo[];\n    direction?: Direction;\n    isPassed?: boolean;\n    isReversed?: boolean;\n    repel?: Direction;\n}\n\nexport default function InterchangeStation(props: InterchangeStationProps) {\n    const { interchangeInfoList, direction, isPassed, isReversed, repel } = props;\n\n    const iconLength = interchangeInfoList.length <= 1 ? 0 : 18 * interchangeInfoList.length;\n\n    return (\n        <g>\n            {interchangeInfoList.length === 1 && (\n                <InterchangeTick\n                    interchangeInfo={interchangeInfoList[0]}\n                    isPassed={isPassed}\n                    position={isReversed ? Position.UP : Position.DOWN}\n                    repel={repel}\n                />\n            )}\n\n            {interchangeInfoList.length > 1 &&\n                interchangeInfoList.map((info, i) => (\n                    <g key={i} transform={`translate(0,${isReversed ? -18 * (i + 1) : 18 * (i + 1)})`}>\n                        <InterchangeTick\n                            interchangeInfo={info}\n                            isPassed={isPassed}\n                            position={direction === Direction.right ? Position.RIGHT : Position.LEFT}\n                        />\n                    </g>\n                ))}\n\n            <StationIcon length={iconLength} isPassed={isPassed} isReversed={isReversed} />\n        </g>\n    );\n}\n","import React, { memo } from 'react';\nimport { Direction, InterchangeInfo, Position } from '../../../constants/constants';\n\nconst getRotation = (position: Position): number => {\n    switch (position) {\n        case Position.UP:\n            return 180;\n        case Position.DOWN:\n            return 0;\n        case Position.LEFT:\n            return 90;\n        case Position.RIGHT:\n            return -90;\n    }\n};\n\ninterface InterchangeTickProps {\n    interchangeInfo: InterchangeInfo;\n    isPassed?: boolean;\n    position: Position;\n    repel?: Direction; // osi22\n}\n\nfunction InterchangeTick(props: InterchangeTickProps) {\n    const { interchangeInfo, isPassed, position, repel } = props;\n\n    const zhNameLines = interchangeInfo[4].split('\\\\').length;\n    const enNameLines = interchangeInfo[5].split('\\\\').length;\n\n    const textAnchor =\n        position === Position.LEFT || repel === Direction.left\n            ? 'end'\n            : position === Position.RIGHT || repel === Direction.right\n            ? 'start'\n            : 'middle';\n\n    const transforms = {\n        path: {\n            rotate: getRotation(position),\n        },\n        g: {\n            x:\n                (position === Position.LEFT ? -24 : position === Position.RIGHT ? 24 : 0) +\n                (repel === Direction.left ? -3 : repel === Direction.right ? 3 : 0),\n            y:\n                position === Position.UP\n                    ? -37 - 10 * (zhNameLines - 1) - 7 * (enNameLines - 1)\n                    : position === Position.DOWN\n                    ? 31\n                    : 6 - (20 + 10 * (zhNameLines - 1) + 7 * (enNameLines - 1) - 1) / 2,\n        },\n    };\n\n    return (\n        <>\n            <path\n                d=\"M0,0v17\"\n                strokeLinecap=\"round\"\n                stroke={isPassed ? 'var(--rmg-grey)' : interchangeInfo[2]}\n                strokeWidth={8}\n                transform={`rotate(${transforms.path.rotate})`}\n            />\n            <g\n                textAnchor={textAnchor}\n                transform={`translate(${transforms.g.x},${transforms.g.y})`}\n                fill={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n            >\n                {interchangeInfo[4].split('\\\\').map((txt, i) => (\n                    <text key={i} dy={10 * i} className=\"rmg-name__zh\" fontSize={10}>\n                        {txt}\n                    </text>\n                ))}\n                {interchangeInfo[5].split('\\\\').map((txt, j) => (\n                    <text key={zhNameLines + j} dy={zhNameLines * 10 - 1 + 7 * j} className=\"rmg-name__en\" fontSize={7}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        </>\n    );\n}\n\nexport default memo(\n    InterchangeTick,\n    (prevProps, nextProps) =>\n        prevProps.interchangeInfo.toString() === nextProps.interchangeInfo.toString() &&\n        prevProps.isPassed === nextProps.isPassed &&\n        prevProps.position === nextProps.position &&\n        prevProps.repel === nextProps.repel\n);\n","import React from 'react';\n\ninterface StationIconProps {\n    length: number;\n    isPassed?: boolean;\n    isReversed?: boolean;\n}\n\nexport default function StationIcon(props: StationIconProps) {\n    const { length, isPassed, isReversed } = props;\n\n    return (\n        <path\n            d={`M-8,0 v${length} a8,8 0 0,0 16,0 v-${length} a8,8 0 0,0 -16,0Z`}\n            className=\"rmg-stn__mtr\"\n            stroke={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n            transform={`scale(1,${isReversed ? -1 : 1})`}\n        />\n    );\n}\n"],"names":["InterchangeStation","props","interchangeInfoList","direction","isPassed","isReversed","repel","iconLength","length","interchangeInfo","position","Position","map","info","i","transform","Direction","getRotation","InterchangeTick","zhNameLines","split","enNameLines","textAnchor","transforms","path","rotate","g","x","y","d","strokeLinecap","stroke","strokeWidth","fill","txt","dy","className","fontSize","j","memo","prevProps","nextProps","toString","StationIcon"],"sourceRoot":""}