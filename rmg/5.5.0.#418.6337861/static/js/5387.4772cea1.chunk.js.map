{"version":3,"file":"static/js/5387.4772cea1.chunk.js","mappings":"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","sources":["svgs/runin/runin-shmetro.tsx","svgs/svg-wrapper.tsx"],"sourcesContent":["import React, { memo, useMemo } from 'react';\nimport { CanvasType, Name, StationDict } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport { isColineBranch } from '../../redux/param/coline-action';\nimport { calculateColineStations } from '../railmap/methods/shmetro-coline';\nimport SvgWrapper from '../svg-wrapper';\n\nconst LINE_WIDTH = 12;\n\nconst CANVAS_TYPE = CanvasType.RunIn;\n\nconst RunInSHMetro = () => {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const { branches, routes, depsStr: deps } = useRootSelector(store => store.helper);\n    const {\n        svgWidth: svgWidths,\n        svg_height,\n        current_stn_idx,\n        direction,\n        loop,\n        theme,\n    } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n    // get the height\n    const dh = svg_height - 300;\n\n    const prevStnIds = useMemo(\n        () => {\n            let prevStnIds = routes\n                .filter(route => route.includes(current_stn_idx))\n                .map(route => route[route.indexOf(current_stn_idx) + (direction === 'l' ? 1 : -1)])\n                // .flat()\n                // remove duplicate\n                .reduce((acc, cur) => (acc.includes(cur) ? acc : acc.concat(cur)), [] as string[]);\n            if (\n                loop && // if it is a loop\n                branches[0].includes(current_stn_idx) && // and this station is on the loop line\n                prevStnIds.length === 1 && // and it is the first station of that direction\n                ['linestart', 'lineend'].includes(prevStnIds[0])\n            ) {\n                // get the station from the other end\n                prevStnIds = direction === 'l' ? [branches[0][1]] : [branches[0][branches[0].length - 2]];\n            }\n            return prevStnIds;\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps, current_stn_idx, direction, loop]\n    );\n\n    const nextStnIds = useMemo(\n        () => {\n            let nextStnIds = routes\n                .filter(route => route.includes(current_stn_idx))\n                .map(route => route[route.indexOf(current_stn_idx) + (direction === 'l' ? -1 : 1)])\n                // .flat()\n                // remove duplicate\n                .reduce((acc, cur) => (acc.includes(cur) ? acc : acc.concat(cur)), [] as string[]);\n            if (\n                loop && // if it is a loop\n                branches[0].includes(current_stn_idx) && // and this station is on the loop line\n                nextStnIds.length === 1 && // and it is the last station of that direction\n                ['linestart', 'lineend'].includes(nextStnIds[0])\n            ) {\n                // get the station from the other end\n                nextStnIds = direction === 'l' ? [branches[0][branches[0].length - 2]] : [branches[0][1]];\n            }\n            return nextStnIds;\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps, current_stn_idx, direction, loop]\n    );\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svg_height}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsSHMetro />\n            <g transform={`translate(0,${dh})`}>\n                <GeneralStation prevStnIds={prevStnIds} nextStnIds={nextStnIds} />\n            </g>\n        </SvgWrapper>\n    );\n};\n\nexport default RunInSHMetro;\n\nconst DefsSHMetro = memo(() => (\n    <defs>\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"slope\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n\n        {/* Outline filter of white pass color in Pujiang Line */}\n        <filter\n            id=\"pujiang_outline_runin\"\n            colorInterpolationFilters=\"sRGB\"\n            // TODO: remove the absolute value while make the filter works correctly\n            filterUnits=\"userSpaceOnUse\"\n            x=\"0\"\n            y=\"-1000\"\n            width=\"5000\"\n            height=\"2000\"\n        >\n            <feMorphology operator=\"erode\" in=\"SourceAlpha\" radius=\"0\" result=\"e1\" />\n            <feMorphology operator=\"erode\" in=\"SourceAlpha\" radius=\"1\" result=\"e2\" />\n            <feComposite in=\"e1\" in2=\"e2\" operator=\"xor\" result=\"outline\" />\n            <feComposite in=\"outline\" in2=\"SourceGraphic\" operator=\"over\" result=\"output\" />\n        </filter>\n    </defs>\n));\n\ninterface RunInGeneralProps {\n    prevStnIds: string[];\n    nextStnIds: string[];\n}\n\nconst GeneralStation = (props: RunInGeneralProps) => {\n    const { prevStnIds, nextStnIds } = props;\n    const { info_panel_type, svgWidth, stn_list } = useRootSelector(store => store.param);\n\n    const middle = svgWidth.runin / 2;\n    const terminal = nextStnIds.length === 1 && ['linestart', 'lineend'].includes(nextStnIds[0]);\n    const original = prevStnIds.length === 1 && ['linestart', 'lineend'].includes(prevStnIds[0]);\n\n    const nextNames = nextStnIds.map(stnId => stn_list[stnId].name);\n    const prevNames = prevStnIds.map(stnId => stn_list[stnId].name);\n\n    const nextBranchLineDy =\n        (nextStnIds.length > 1\n            ? (nextNames[0][0].split('\\\\').length - 1) * -50 + (nextNames[0][1].split('\\\\').length - 1) * -30\n            : 0) + 10;\n    const prevBranchLineDy =\n        (prevStnIds.length > 1\n            ? (prevNames[0][0].split('\\\\').length - 1) * -50 + (prevNames[0][1].split('\\\\').length - 1) * -30\n            : 0) + 10;\n\n    return (\n        <>\n            <BranchLine\n                prevStnIds={prevStnIds}\n                nextStnIds={nextStnIds}\n                nextBranchLineDy={nextBranchLineDy}\n                prevBranchLineDy={prevBranchLineDy}\n            />\n\n            {terminal && info_panel_type !== 'sh2020' ? (\n                <TerminalStation mode=\"terminal\" prevStnIds={prevStnIds} nextStnIds={nextStnIds} />\n            ) : original && info_panel_type !== 'sh2020' ? (\n                <TerminalStation mode=\"original\" prevStnIds={prevStnIds} nextStnIds={nextStnIds} />\n            ) : (\n                <>\n                    {/* General Station */}\n                    <Line prevStnIds={prevStnIds} nextStnIds={nextStnIds} />\n\n                    <g transform={`translate(${middle},160)`} textAnchor=\"middle\">\n                        <CurrentText />\n                    </g>\n                </>\n            )}\n\n            {(original || !terminal) && <NextStn stnIds={props.nextStnIds} />}\n            {(terminal || !original) && <PrevStn stnIds={props.prevStnIds} />}\n        </>\n    );\n};\n\nconst TerminalStation = (props: { mode: 'terminal' | 'original'; prevStnIds: string[]; nextStnIds: string[] }) => {\n    const { mode, prevStnIds, nextStnIds } = props;\n    const { current_stn_idx, theme, svgWidth, direction, coline } = useRootSelector(store => store.param);\n    const { branches } = useRootSelector(store => store.helper);\n\n    const textProps = {\n        l: { original: { x: svgWidth.runin - 36, anchor: 'end' }, terminal: { x: 36, anchor: 'start' } },\n        r: { original: { x: 36, anchor: 'start' }, terminal: { x: svgWidth.runin - 36, anchor: 'end' } },\n    };\n\n    const colineStns = calculateColineStations(Object.values(coline), branches);\n    const nextColineColorFrom = mode === 'terminal' ? prevStnIds : nextStnIds;\n    const nextColineColor =\n        nextStnIds.length > 1\n            ? 'var(--rmg-theme-colour)' // BranchLine will handle color of next line well\n            : colineStns\n                  .filter(co => co.linePath.includes(current_stn_idx) && co.linePath.includes(nextColineColorFrom[0]))\n                  // TODO-coline: handle multiple coline colors\n                  .map(co => co.colors[0][2])[0] ?? 'var(--rmg-theme-colour)';\n\n    return (\n        <>\n            {mode === 'original' && (\n                <path\n                    transform={`translate(0,${coline.length ? '198' : '220'})${coline.length ? 'scale(1,2)' : ''}`}\n                    stroke={nextColineColor}\n                    strokeWidth={12}\n                    d={direction === 'l' ? `M ${svgWidth.runin - 24},16 H 36` : `M24,16 H ${svgWidth.runin - 36}`}\n                    markerEnd=\"url(#slope)\"\n                />\n            )}\n\n            {mode === 'terminal' && (\n                <g filter={theme[2] === '#999999' ? 'url(#pujiang_outline_runin)' : undefined}>\n                    <path\n                        transform={`translate(0,${coline.length ? '198' : '220'})${coline.length ? 'scale(1,2)' : ''}`}\n                        stroke=\"var(--rmg-grey)\"\n                        strokeWidth={12}\n                        d={`M24,16 H ${svgWidth.runin - 24}`}\n                    />\n                </g>\n            )}\n\n            <g\n                transform={`translate(${textProps[direction][mode].x},160)`}\n                textAnchor={textProps[direction][mode].anchor}\n            >\n                <CurrentText />\n            </g>\n        </>\n    );\n};\n\nconst Line = (props: RunInGeneralProps) => {\n    const { prevStnIds, nextStnIds } = props;\n    const {\n        direction,\n        svgWidth,\n        theme,\n        coline,\n        current_stn_idx,\n        stn_list: stnList,\n    } = useRootSelector(store => store.param);\n    const { branches } = useRootSelector(store => store.helper);\n    const middle = svgWidth.runin / 2;\n\n    // determine the end with linestart/lineend or .length === 0\n    const isEnd = (stnIds: string[]) => stnIds.includes('linestart') || stnIds.includes('lineend');\n\n    const colineStns = calculateColineStations(Object.values(coline), branches);\n\n    // whether the next line is single color(var(--rmg-theme-colour) or coline color) or multiple colors\n    // let nextColineMode: 'single' | 'multiple' = 'single';\n    // TODO-coline: if coline is allowed in other segments, then this should be considered more precisely\n    const nextColineMode =\n        nextStnIds.length > 1\n            ? // needs to be single since BranchLine is in effect\n              'single'\n            : isEnd(nextStnIds)\n            ? colineStns.filter(co => [current_stn_idx, prevStnIds[0]].every(stnId => co.linePath.includes(stnId)))\n                  .length > 0\n                ? // if this the terminal station, look back to see if it falls in coline\n                  'multiple'\n                : 'single'\n            : [current_stn_idx, nextStnIds[0]].every(stnId => branches[0].includes(stnId)) && // is in the main line\n              // and has coline from current_stn_idx to nextStnIds[0]\n              colineStns.filter(co => [current_stn_idx, nextStnIds[0]].every(stnId => co.linePath.includes(stnId)))\n                  .length > 0\n            ? 'multiple'\n            : 'single';\n\n    const nextColineColorFrom = isEnd(nextStnIds) ? prevStnIds : nextStnIds;\n    const nextColineColor =\n        nextStnIds.length > 1\n            ? 'var(--rmg-theme-colour)' // BranchLine will handle color of next line well\n            : colineStns\n                  .filter(co => co.linePath.includes(current_stn_idx) && co.linePath.includes(nextColineColorFrom[0]))\n                  // TODO-coline: handle multiple coline colors\n                  .map(co => co.colors[0][2])[0] ?? 'var(--rmg-theme-colour)';\n\n    // curr and next/pass segment is in the coline branch\n    const isInColineBranch = (\n        branches: string[][],\n        current_stn_idx: string,\n        nextOrPassStnIds: string[],\n        stnList: StationDict\n    ) =>\n        branches\n            .slice(1)\n            .filter(branch => [current_stn_idx, nextOrPassStnIds[0]].every(stnId => branch.includes(stnId)))\n            .filter(branch => isColineBranch(branch, stnList)).length > 0;\n\n    // change color to coline color only if it has coline and the curr and next stations are in the coline branch\n    const nextColor =\n        Object.keys(coline).length > 0 && isInColineBranch(branches, current_stn_idx, nextStnIds, stnList)\n            ? nextColineColor\n            : 'var(--rmg-theme-colour)';\n\n    // stretch the next line element if curr and next stations aren't in main line with coline\n    const nextLineStretch =\n        Object.keys(coline).length > 0 &&\n        nextStnIds.length === 1 && // BranchLine will add branch next line so no stretch is needed\n        (isEnd(prevStnIds) || isEnd(nextStnIds)\n            ? true // terminal station with coline(prevent linestart/lineend)\n            : !(\n                  [current_stn_idx, nextStnIds[0]].every(stnId => branches[0].includes(stnId)) &&\n                  colineStns.filter(co => co.linePath.includes(current_stn_idx) && co.linePath.includes(nextStnIds[0]))\n                      .length !== 0\n              )); // no stretch if it is in main line with coline\n\n    // stretch the pass line element if BranchLine is not in effect\n    const passLineStretch = Object.keys(coline).length > 0 && prevStnIds.length === 1;\n\n    return (\n        <g transform=\"translate(0,220)\" strokeWidth={12}>\n            <>\n                {nextColor !== 'var(--rmg-theme-colour)' && (\n                    <marker id={`slope_${nextColor}`} viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n                        <path d=\"M0,0L1,1H-1z\" fill={nextColor} />\n                    </marker>\n                )}\n                <path\n                    stroke={nextColor}\n                    d={`M ${middle},16 H ${direction === 'l' ? 36 : svgWidth.runin - 36}`}\n                    // markerEnd=\"url(#slope)\"\n                    markerEnd={nextColor === 'var(--rmg-theme-colour)' ? 'url(#slope)' : `url(#slope_${nextColor})`}\n                    transform={nextLineStretch ? 'translate(0,-22)scale(1,2)' : undefined}\n                />\n            </>\n            {nextColineMode === 'multiple' && (\n                <>\n                    <marker id={`slope_${nextColineColor}`} viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n                        <path d=\"M0,0L1,1H-1z\" fill={nextColineColor} />\n                    </marker>\n                    <path\n                        stroke={nextColineColor}\n                        d={`M ${middle},16 H ${\n                            direction === 'l' ? 36 + LINE_WIDTH : svgWidth.runin - (36 + LINE_WIDTH)\n                        }`}\n                        markerEnd={`url(#slope_${nextColineColor})`}\n                        transform=\"translate(0,-12)\"\n                    />\n                </>\n            )}\n\n            <g\n                filter={theme[2] === '#999999' ? 'url(#pujiang_outline_runin)' : undefined}\n                transform={`translate(0,${passLineStretch ? -22 : 0})scale(1,${passLineStretch ? 2 : 1})`}\n            >\n                <path\n                    stroke=\"var(--rmg-grey)\"\n                    d={`M ${middle},16 H ${direction === 'l' ? svgWidth.runin - 24 : 24} `}\n                />\n            </g>\n        </g>\n    );\n};\n\ninterface RunInBranchLineProps {\n    prevStnIds: string[];\n    nextStnIds: string[];\n    nextBranchLineDy: number;\n    prevBranchLineDy: number;\n}\n\nconst BranchLine = (props: RunInBranchLineProps) => {\n    const { prevStnIds, nextStnIds, nextBranchLineDy, prevBranchLineDy } = props;\n\n    const { direction, svgWidth, current_stn_idx, coline, theme } = useRootSelector(store => store.param);\n    const { branches } = useRootSelector(store => store.helper);\n    const middle = svgWidth.runin / 2;\n\n    const LINE_BRANCH_Y = 125;\n\n    // draw a line between these dots\n    const dotToPos = (dot: [number, number]) => `${dot[0]},${dot[1]}`;\n    const dotsToPath = (dots: [number, number][]) =>\n        `M${dotToPos(dots.at(0)!)} ` +\n        dots\n            .slice(1)\n            .map(dot => `L${dotToPos(dot)}`)\n            .join(' ');\n\n    let nextDots = (\n        direction === 'l'\n            ? [\n                  [svgWidth.runin / 3, LINE_BRANCH_Y],\n                  [svgWidth.runin / 6, nextBranchLineDy],\n                  [36, nextBranchLineDy],\n              ]\n            : [\n                  [(svgWidth.runin / 3) * 2, LINE_BRANCH_Y],\n                  [(svgWidth.runin / 6) * 5, nextBranchLineDy],\n                  [svgWidth.runin - 36, nextBranchLineDy],\n              ]\n    ) as [number, number][];\n    let prevDots = (\n        direction === 'l'\n            ? [\n                  [(svgWidth.runin / 3) * 2, LINE_BRANCH_Y],\n                  [(svgWidth.runin / 6) * 5, prevBranchLineDy],\n                  [svgWidth.runin - 24, prevBranchLineDy],\n              ]\n            : [\n                  [svgWidth.runin / 3, LINE_BRANCH_Y],\n                  [svgWidth.runin / 6, prevBranchLineDy],\n                  [24, prevBranchLineDy],\n              ]\n    ) as [number, number][];\n\n    let nextColor = 'var(--rmg-theme-colour)';\n\n    if (Object.keys(coline).length > 0) {\n        const colineStns = calculateColineStations(Object.values(coline), branches);\n\n        // If the next stns have coline branch here,\n        // uplift branch a little bit with coline color.\n        if (\n            nextStnIds.length > 1 &&\n            colineStns.filter(\n                stns =>\n                    stns.linePath.includes(current_stn_idx) && nextStnIds.some(stnId => stns.linePath.includes(stnId))\n            )\n        ) {\n            // no idea why strokeWidth is 12 but only when dy = -11 will be perfect\n            nextDots[0][1] -= LINE_WIDTH - 1;\n            nextDots.unshift([middle, LINE_BRANCH_Y - LINE_WIDTH + 1]);\n            nextColor = colineStns\n                .filter(\n                    stns =>\n                        stns.linePath.includes(current_stn_idx) &&\n                        nextStnIds.some(stnId => stns.linePath.includes(stnId))\n                )\n                // TODO-coline: known undefined issues when coline is removed if the station is removed via removeInvalidColineOnRemoveStation\n                .at(0)!\n                .colors.at(0)![2];\n        }\n\n        // If the prev stns have coline branch here,\n        // uplift branch a little bit.\n        if (\n            prevStnIds.length > 1 &&\n            colineStns.filter(\n                stns =>\n                    stns.linePath.includes(current_stn_idx) && prevStnIds.some(stnId => stns.linePath.includes(stnId))\n            )\n        ) {\n            // no idea why strokeWidth is 12 but only when dy = -11 will be perfect\n            prevDots[0][1] -= LINE_WIDTH - 1;\n            prevDots.unshift([middle, LINE_BRANCH_Y - LINE_WIDTH + 1]);\n        }\n    }\n\n    return (\n        <g\n            transform=\"translate(0,110)\"\n            strokeWidth={12}\n            fill=\"none\"\n            filter={theme[2] === '#999999' ? 'url(#pujiang_outline_runin)' : undefined}\n        >\n            {/* An extension of the line/path with coline color. */}\n            <marker id=\"slope_branch\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n                <path d=\"M0,0L1,1H-1z\" fill={nextColor} />\n            </marker>\n\n            {nextStnIds.length > 1 && (\n                <path stroke={nextColor} d={dotsToPath(nextDots)} markerEnd=\"url(#slope_branch)\" />\n            )}\n            {prevStnIds.length > 1 && <path stroke=\"var(--rmg-grey)\" d={dotsToPath(prevDots)} />}\n        </g>\n    );\n};\n\nconst CurrentText = () => {\n    const param = useRootSelector(store => store.param);\n    const { name } = param.stn_list[param.current_stn_idx];\n    return useMemo(\n        () => (\n            <>\n                <text className=\"rmg-name__zh\" fontSize={112}>\n                    {name[0].replace('\\\\', '')}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={36} dy={50}>\n                    {name[1].replace('\\\\', '')}\n                </text>\n            </>\n        ),\n        [...name]\n    );\n};\n\nconst NextText = (props: { nextName: Name } & React.SVGProps<SVGGElement>) => {\n    const { nextName, ...others } = props;\n    return (\n        <g {...others}>\n            {useMemo(\n                () => (\n                    <>\n                        {nextName[0].split('\\\\').map((name, i, array) => (\n                            <text\n                                className=\"rmg-name__zh\"\n                                fontSize={48}\n                                key={name}\n                                dy={(array.length - 1 - i) * -50 - (nextName[1].split('\\\\').length - 1) * 30}\n                            >\n                                {name}\n                            </text>\n                        ))}\n                        {nextName[1].split('\\\\').map((name, i, array) => (\n                            <text\n                                className=\"rmg-name__en\"\n                                fontSize={24}\n                                key={name}\n                                dy={28 + (array.length - 1 - i) * -30}\n                            >\n                                {name}\n                            </text>\n                        ))}\n                    </>\n                ),\n                [...nextName]\n            )}\n        </g>\n    );\n};\n\nconst PrevStn = (props: { stnIds: string[] }) => {\n    const param = useRootSelector(store => store.param);\n    const nextNames = props.stnIds.map(stnId => param.stn_list[stnId].name);\n    const prevHintDy =\n        (props.stnIds.length > 1 ? 15 : 125) +\n        nextNames.map(name => name[0].split('\\\\').length).reduce((acc, cur) => acc + cur, -nextNames.length) * -50 +\n        nextNames.map(name => name[1].split('\\\\').length).reduce((acc, cur) => acc + cur, -nextNames.length) * -30;\n    const nextBranchTextDy =\n        (props.stnIds.length > 1\n            ? (nextNames[0][0].split('\\\\').length - 1) * -50 + (nextNames[0][1].split('\\\\').length - 1) * -30\n            : 0) + 70;\n\n    return (\n        <g\n            fill=\"gray\"\n            textAnchor={param.direction === 'l' ? 'end' : 'start'}\n            transform={`translate(${param.direction === 'l' ? param.svgWidth.runin - 36 : 36},0)`}\n        >\n            <NextText nextName={nextNames[0]} transform=\"translate(0,183)\" />\n            {props.stnIds.length > 1 && (\n                <NextText nextName={nextNames[1]} transform={`translate(0,${nextBranchTextDy})`} />\n            )}\n            <g transform={`translate(0, ${prevHintDy})`}>\n                <text className=\"rmg-name__zh\" fontSize={22}>\n                    上一站\n                </text>\n                <text className=\"rmg-name__en\" fontSize={12} dx={param.direction === 'l' ? -70 : 70}>\n                    Past Stop\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst NextStn = (props: { stnIds: string[] }) => {\n    const param = useRootSelector(store => store.param);\n    const nextNames = props.stnIds.map(stnId => param.stn_list[stnId].name);\n    const nextHintDy =\n        (props.stnIds.length > 1 ? 15 : 125) +\n        nextNames.map(name => name[0].split('\\\\').length).reduce((acc, cur) => acc + cur, -nextNames.length) * -50 +\n        nextNames.map(name => name[1].split('\\\\').length).reduce((acc, cur) => acc + cur, -nextNames.length) * -30;\n    const nextBranchTextDy =\n        (props.stnIds.length > 1\n            ? (nextNames[0][0].split('\\\\').length - 1) * -50 + (nextNames[0][1].split('\\\\').length - 1) * -30\n            : 0) + 70;\n\n    return (\n        <g\n            textAnchor={param.direction === 'l' ? 'start' : 'end'}\n            transform={`translate(${param.direction === 'l' ? 36 : param.svgWidth.runin - 36},0)`}\n        >\n            <NextText nextName={param.stn_list[props.stnIds[0]].name} transform=\"translate(0,183)\" />\n            {props.stnIds.length > 1 && (\n                <NextText\n                    nextName={param.stn_list[props.stnIds[1]].name}\n                    transform={`translate(0,${nextBranchTextDy})`}\n                />\n            )}\n            <g transform={`translate(0, ${nextHintDy})`}>\n                <text className=\"rmg-name__zh\" fontSize={22}>\n                    下一站\n                </text>\n                <text className=\"rmg-name__en\" fontSize={12} dx={param.direction === 'l' ? 70 : -70}>\n                    Next Stop\n                </text>\n            </g>\n        </g>\n    );\n};\n","import { CanvasType, Theme } from '../constants/constants';\nimport React, { ReactNode } from 'react';\n\ninterface SvgWrapperProps {\n    type: CanvasType;\n    svgWidth: number;\n    svgHeight: number;\n    canvasScale: number;\n    theme: Theme;\n    children: ReactNode;\n}\n\nexport default function SvgWrapper(props: SvgWrapperProps) {\n    const { type, svgWidth, svgHeight, canvasScale, theme, children } = props;\n\n    return (\n        <svg\n            id={type}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            height={svgHeight * canvasScale}\n            viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n            colorInterpolationFilters=\"sRGB\"\n            style={{\n                ['--rmg-svg-width' as any]: svgWidth + 'px',\n                ['--rmg-svg-height' as any]: svgHeight + 'px',\n                ['--rmg-theme-colour' as any]: theme[2],\n                ['--rmg-theme-fg' as any]: theme[3],\n            }}\n        >\n            <rect\n                id=\"canvas-bg\"\n                fill=\"white\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n            {children}\n            <rect\n                id=\"canvas-border\"\n                fill=\"none\"\n                strokeWidth={3}\n                stroke=\"none\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n        </svg>\n    );\n}\n"],"names":["CANVAS_TYPE","CanvasType","canvasScale","useRootSelector","state","app","store","helper","branches","routes","deps","depsStr","param","svgWidths","svgWidth","svg_height","current_stn_idx","direction","loop","theme","dh","prevStnIds","useMemo","filter","route","includes","map","indexOf","reduce","acc","cur","concat","length","nextStnIds","type","svgHeight","DefsSHMetro","transform","GeneralStation","memo","id","viewBox","refY","d","fill","colorInterpolationFilters","filterUnits","x","y","width","height","operator","in","radius","result","in2","props","info_panel_type","stn_list","middle","runin","terminal","original","nextNames","stnId","name","prevNames","nextBranchLineDy","split","prevBranchLineDy","BranchLine","TerminalStation","mode","Line","textAnchor","CurrentText","NextStn","stnIds","PrevStn","coline","textProps","l","anchor","r","colineStns","calculateColineStations","Object","values","nextColineColorFrom","nextColineColor","co","linePath","colors","stroke","strokeWidth","markerEnd","undefined","stnList","isEnd","nextColineMode","every","nextColor","keys","nextOrPassStnIds","slice","branch","isColineBranch","isInColineBranch","nextLineStretch","passLineStretch","LINE_BRANCH_Y","dotToPos","dot","dotsToPath","dots","at","join","nextDots","prevDots","stns","some","LINE_WIDTH","unshift","className","fontSize","replace","dy","NextText","nextName","others","i","array","prevHintDy","nextBranchTextDy","dx","nextHintDy","SvgWrapper","children","xmlns","xmlnsXlink","style"],"sourceRoot":""}