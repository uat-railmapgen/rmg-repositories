{"version":3,"file":"static/js/7250.c3341dc6.chunk.js","mappings":"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","sources":["svgs/railmap/main/station/station-shmetro.tsx"],"sourcesContent":["import React from 'react';\nimport { InterchangeInfo, Name, Facilities, ColourHex } from '../../../../constants/constants';\nimport { useRootSelector } from '../../../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    color?: ColourHex; // Control the station color if coline is in effect.\n    bank?: -1 | 0 | 1; // Loopline requires station element to be horizontal. Default to 0 (no bank to other side).\n    direction?: 'l' | 'r'; // Loopline requires station element to change direction. Default to current param.\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { stnId, stnState, color, bank: bank_, direction: direction_override } = props;\n    const { direction: direction_param, info_panel_type, stn_list, loop } = useRootSelector(store => store.param);\n    const stnInfo = stn_list[stnId];\n    const direction = direction_override ?? direction_param;\n\n    // shift station name if the line bifurcate here\n    // no shift for loop as there is no vertical line covering the station\n    const branchNameDX = loop\n        ? 0\n        : ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n          (direction === 'r' ? -1 : 1);\n\n    let stationIconStyle = '';\n    let stationIconColor: { [pos: string]: string } = {};\n    if (info_panel_type === 'sh2020') {\n        if (stnInfo.services.length === 3) stationIconStyle = 'stn_sh_2020_direct';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'stn_sh_2020_express';\n        else stationIconStyle = 'stn_sh_2020';\n        stationIconColor.fill = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    } else {\n        // param.info_panel_type === 'sh' or others (from other styles)\n        if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n        else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n            stationIconStyle = 'int2_sh';\n        else stationIconStyle = 'stn_sh';\n        stationIconColor.stroke = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    }\n\n    const bank = bank_ ?? 0;\n    const dx = (direction === 'l' ? 6 : -6) + branchNameDX + bank * 30;\n    const dy = (info_panel_type === 'sh2020' ? -20 : -6) + Math.abs(bank) * (info_panel_type === 'sh2020' ? 25 : 11);\n    const dr = bank ? 0 : direction === 'l' ? -45 : 45;\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                {...stationIconColor} // different styles use either `fill` or `stroke`\n                // sh and sh2020 have different headings of int_sh, so -1 | 1 is multiplied\n                transform={\n                    `translate(${bank * (info_panel_type === 'sh2020' ? 5 : 0)},0)` +\n                    `rotate(${bank * 90 * (info_panel_type === 'sh2020' ? 1 : -1)})`\n                }\n            />\n            <g transform={`translate(${dx},${dy})rotate(${dr})`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={stnState}\n                    direction={direction}\n                    facility={stnInfo.facility}\n                    bank={bank}\n                    oneLine={stnInfo.one_line}\n                    intPadding={stnInfo.int_padding}\n                />\n            </g>\n            {stnState === 0 ? <CurrentStationText /> : undefined}\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    facility: Facilities;\n    bank: -1 | 0 | 1;\n    oneLine: boolean;\n    intPadding: number;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, stnState, direction, facility, bank, oneLine, intPadding } = props;\n\n    // legacy ref to get the exact station name width\n    const stnNameEl = React.useRef<SVGGElement | null>(null);\n\n    // simplify the calculation times\n    const directionPolarity = direction === 'l' ? 1 : -1;\n\n    // main elements icon's dx will change if there is a facility icon or not\n    const mainDx = facility !== Facilities.none ? 30 : 0;\n\n    // interchange will have a line under the name, and should be stretched when placed horizontal in loop\n    const lineDx = bank ? -12 : 0;\n\n    const intEl = React.useRef<SVGGElement | null>(null);\n    const [intWidth, setIntWidth] = React.useState(0);\n    React.useEffect(() => setIntWidth(intEl.current?.getBBox().width ?? 0), [...JSON.stringify(infos)]);\n    const intDx = intPadding - intWidth;\n\n    return (\n        <>\n            {infos.flat().length > 0 && (\n                <>\n                    <line\n                        x1={(lineDx + mainDx) * directionPolarity}\n                        x2={intDx * directionPolarity}\n                        stroke={stnState === -1 ? 'gray' : 'black'}\n                        strokeWidth={0.5}\n                    />\n                    <IntBoxGroup\n                        ref={intEl}\n                        intInfos={infos}\n                        direction={direction}\n                        transform={`translate(${intDx * directionPolarity},-10.75)`}\n                    />\n                </>\n            )}\n\n            {facility !== Facilities.none && <use xlinkHref={'#' + facility} x={10 * directionPolarity} y={-30} />}\n\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${mainDx * directionPolarity},-14)`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={name}\n                    oneLine={oneLine}\n                    directionPolarity={directionPolarity}\n                    fill={stnState === -1 ? 'gray' : stnState === 0 ? 'red' : 'black'}\n                />\n\n                {/* deal out-of-station here as it is a y axis element. leave out-of-system in IntBoxGroup */}\n                {infos[1]?.length > 0 && (\n                    <g transform={`translate(${(intDx + intWidth / 2) * directionPolarity},-30)`}>\n                        <OSIText osiInfos={infos[1]} />\n                    </g>\n                )}\n\n                {/* deal out-of-system here as it's dx is fixed and has nothing to do with IntBoxGroup */}\n                {[...(infos[2] || [])].length > 0 && (\n                    <g transform={`translate(${(intPadding + 5) * directionPolarity},0)`}>\n                        <OSysIText osysiInfos={infos[2]} direction={props.direction} />\n                    </g>\n                )}\n            </g>\n        </>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (\n        props: { stnName: Name; oneLine: boolean; directionPolarity: 1 | -1 } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { stnName, oneLine, directionPolarity, ...others } = props;\n\n        const zhEl = React.useRef<SVGGElement | null>(null);\n        const [enDx, setEnDx] = React.useState(0);\n        React.useEffect(() => {\n            if (oneLine) setEnDx(zhEl.current!.getBBox().width + 5);\n            else setEnDx(0);\n        }, [...stnName, oneLine]);\n\n        const [ZH_HEIGHT, EN_HEIGHT] = [20, 8];\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            <g ref={zhEl}>\n                                {stnName[0].split('\\\\').map((txt, i, arr) => (\n                                    <text\n                                        key={i}\n                                        className=\"rmg-name__zh\"\n                                        dy={\n                                            (arr.length - 1 - i) * -ZH_HEIGHT +\n                                            (oneLine ? EN_HEIGHT : (stnName[1].split('\\\\').length - 1) * -EN_HEIGHT)\n                                        }\n                                    >\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                            <g fontSize={8} transform={`translate(${enDx * directionPolarity},0)`}>\n                                {stnName[1].split('\\\\').map((txt, i, arr) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={(arr.length - 2 - i) * -EN_HEIGHT + 2}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    [...stnName, oneLine, enDx, directionPolarity]\n                )}\n            </g>\n        );\n    }\n);\n\nconst CurrentStationText = () => {\n    const { stn_list } = useRootSelector(store => store.param);\n    const servicesPresent = new Set(\n        Object.values(stn_list)\n            .map(stn => stn.services)\n            .flat()\n    );\n    const dy = [-1, 35, 50, 75][servicesPresent.size];\n\n    return (\n        <g transform={`translate(0, ${dy})`}>\n            <text className=\"rmg-name__zh\" fill=\"red\" textAnchor=\"middle\">\n                本站\n            </text>\n        </g>\n    );\n};\n\nconst IntBoxGroup = React.forwardRef(\n    (\n        props: { intInfos: InterchangeInfo[][]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { intInfos, direction, ...others } = props;\n\n        // also known as non out-of-system transfers\n        const boxInfos = [\n            ...intInfos[0],\n            ...(intInfos[1] || []),\n            // some dirty tricks here as shmetro shows maglev icon even it is a out-of-system transfer\n            // and display a maglev icon is much easier in boxInfos than in OSysIText\n            ...(intInfos[2]?.filter(info => Boolean(info[4].match(/^磁(悬)*浮/))) || []),\n        ];\n\n        let dx = 0; // update in every boxInfos\n\n        return (\n            <g ref={ref} fontSize={14} textAnchor=\"middle\" {...others}>\n                {boxInfos.map((info, i) => {\n                    const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                    const isMaglev = Boolean(info[4].match(/^磁(悬)*浮/));\n\n                    if (props.direction === 'r') {\n                        dx -= (isLineNumber || isMaglev ? 20 : info[4].length * 14 + 12) + (i === 0 ? 0 : 5);\n                    }\n\n                    let el = <g />;\n                    if (isMaglev) {\n                        el = (\n                            <g transform={`translate(${dx},-16)scale(0.1428571429)`} key={i}>\n                                <IntBoxMaglev info={info} />\n                            </g>\n                        );\n                    } else if (isLineNumber) {\n                        el = (\n                            <g transform={`translate(${dx},0)`} key={i}>\n                                <IntBoxNumber info={info} />\n                            </g>\n                        );\n                    } else {\n                        el = (\n                            <g transform={`translate(${dx},0)`} key={i}>\n                                <IntBoxLetter info={info} />\n                            </g>\n                        );\n                    }\n\n                    if (props.direction === 'l') {\n                        dx += isLineNumber || isMaglev ? 20 + 5 : info[4].length * 14 + 12 + 5;\n                    }\n                    return el;\n                })}\n            </g>\n        );\n    }\n);\n\nconst IntBoxMaglev = React.memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_maglev\" fill={props.info[2]} stroke={props.info[2]} />\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxNumber = React.memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = React.memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station interchanges\n    const lineNames = props.osiInfos.map(info => info[4]).join('，');\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; direction: 'l' | 'r' }) => {\n    // get the all names from out of system transfers\n    const lineNames = props.osysiInfos.map(info => info[4]).join('，');\n    const lineNamesEn = props.osysiInfos.map(info => info[5]).join(', ');\n\n    return React.useMemo(\n        () => (\n            <g textAnchor={props.direction === 'l' ? 'start' : 'end'} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={3}>\n                    转乘{lineNames}\n                </text>\n                <text className=\"rmg-name__en\" dy={10} fontSize=\"75%\">\n                    To {lineNamesEn}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.direction]\n    );\n};\n"],"names":["props","stnId","stnState","color","bank_","bank","direction_override","direction","useRootSelector","store","param","direction_param","info_panel_type","stn_list","loop","stnInfo","branchNameDX","branch","left","right","length","name","split","stationIconStyle","stationIconColor","services","fill","transfer","info","stroke","dx","dy","Math","abs","dr","xlinkHref","transform","StationNameGElement","infos","facility","oneLine","one_line","intPadding","int_padding","CurrentStationText","undefined","stnNameEl","React","directionPolarity","mainDx","Facilities","lineDx","intEl","intWidth","setIntWidth","current","getBBox","width","JSON","stringify","intDx","flat","x1","x2","strokeWidth","IntBoxGroup","ref","intInfos","x","y","textAnchor","StationName","stnName","OSIText","osiInfos","OSysIText","osysiInfos","others","zhEl","enDx","setEnDx","map","txt","i","arr","className","fontSize","Set","Object","values","stn","size","boxInfos","filter","Boolean","match","isLineNumber","isMaglev","el","IntBoxMaglev","IntBoxNumber","IntBoxLetter","prevProps","nextProps","toString","dominantBaseline","textCount","height","lineNames","join","lineNamesEn"],"sourceRoot":""}