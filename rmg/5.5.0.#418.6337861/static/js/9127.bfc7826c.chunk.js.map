{"version":3,"file":"static/js/9127.bfc7826c.chunk.js","mappings":"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","sources":["setupTests.tsx","svgs/mtr/station/interchange-tick.tsx","svgs/mtr/station/osi-station.test.tsx","svgs/mtr/station/osi-station.tsx","svgs/mtr/station/station-icon.tsx","test-utils.tsx"],"sourcesContent":["import createMockStore from 'redux-mock-store';\nimport { BranchStyle, StationDict } from './constants/constants';\nimport rootReducer, { RootState } from './redux';\nimport { getDefaultMiddleware, ThunkDispatch } from '@reduxjs/toolkit';\n\n// FIXME: any -> AnyAction?\ntype DispatchExts = ThunkDispatch<RootState, void, any>;\nexport const createMockAppStore = createMockStore<RootState, DispatchExts>(getDefaultMiddleware());\n\nconst realStore = rootReducer.getState();\nexport const createMockStoreWithMockStations = (stationList: StationDict) =>\n    createMockAppStore({\n        ...realStore,\n        param: { ...realStore.param, stn_list: stationList },\n    });\n\n/**\n * Before reversing:\n * stn0 - stn1 - stn2 (main)\n *             \\\n *              stn3 - stn4 (branch)\n *\n * After reversing:\n * (branch) stn4 - stn3\n *                      \\\n *          (main) stn2 - stn1 - stn0\n */\nexport const mockSimpleStationList: StationDict = {\n    linestart: {\n        parents: [],\n        children: ['stn0'],\n        branch: { left: [], right: [] },\n    },\n    stn0: {\n        parents: ['linestart'],\n        children: ['stn1'],\n        branch: { left: [], right: [] },\n    },\n    stn1: {\n        parents: ['stn0'],\n        children: ['stn2', 'stn3'],\n        branch: { left: [], right: [BranchStyle.through, 'stn3'] },\n    },\n    stn2: {\n        parents: ['stn1'],\n        children: ['lineend'],\n        branch: { left: [], right: [] },\n    },\n    stn3: {\n        parents: ['stn1'],\n        children: ['stn4'],\n        branch: { left: [], right: [] },\n    },\n    stn4: {\n        parents: ['stn3'],\n        children: ['lineend'],\n        branch: { left: [], right: [] },\n    },\n    lineend: {\n        parents: ['stn2', 'stn4'],\n        children: [],\n        branch: { left: [BranchStyle.through, 'stn4'], right: [] },\n    },\n} as any;\n","import React, { memo } from 'react';\nimport { Direction, InterchangeInfo, Position } from '../../../constants/constants';\n\nconst getRotation = (position: Position): number => {\n    switch (position) {\n        case Position.UP:\n            return 180;\n        case Position.DOWN:\n            return 0;\n        case Position.LEFT:\n            return 90;\n        case Position.RIGHT:\n            return -90;\n    }\n};\n\ninterface InterchangeTickProps {\n    interchangeInfo: InterchangeInfo;\n    isPassed?: boolean;\n    position: Position;\n    repel?: Direction; // osi22\n}\n\nfunction InterchangeTick(props: InterchangeTickProps) {\n    const { interchangeInfo, isPassed, position, repel } = props;\n\n    const zhNameLines = interchangeInfo[4].split('\\\\').length;\n    const enNameLines = interchangeInfo[5].split('\\\\').length;\n\n    const textAnchor =\n        position === Position.LEFT || repel === Direction.left\n            ? 'end'\n            : position === Position.RIGHT || repel === Direction.right\n            ? 'start'\n            : 'middle';\n\n    const transforms = {\n        path: {\n            rotate: getRotation(position),\n        },\n        g: {\n            x:\n                (position === Position.LEFT ? -24 : position === Position.RIGHT ? 24 : 0) +\n                (repel === Direction.left ? -3 : repel === Direction.right ? 3 : 0),\n            y:\n                position === Position.UP\n                    ? -37 - 10 * (zhNameLines - 1) - 7 * (enNameLines - 1)\n                    : position === Position.DOWN\n                    ? 31\n                    : 6 - (20 + 10 * (zhNameLines - 1) + 7 * (enNameLines - 1) - 1) / 2,\n        },\n    };\n\n    return (\n        <>\n            <path\n                d=\"M0,0v17\"\n                strokeLinecap=\"round\"\n                stroke={isPassed ? 'var(--rmg-grey)' : interchangeInfo[2]}\n                strokeWidth={8}\n                transform={`rotate(${transforms.path.rotate})`}\n            />\n            <g\n                textAnchor={textAnchor}\n                transform={`translate(${transforms.g.x},${transforms.g.y})`}\n                fill={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n            >\n                {interchangeInfo[4].split('\\\\').map((txt, i) => (\n                    <text key={i} dy={10 * i} className=\"rmg-name__zh\" fontSize={10}>\n                        {txt}\n                    </text>\n                ))}\n                {interchangeInfo[5].split('\\\\').map((txt, j) => (\n                    <text key={zhNameLines + j} dy={zhNameLines * 10 - 1 + 7 * j} className=\"rmg-name__en\" fontSize={7}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        </>\n    );\n}\n\nexport default memo(\n    InterchangeTick,\n    (prevProps, nextProps) =>\n        prevProps.interchangeInfo.toString() === nextProps.interchangeInfo.toString() &&\n        prevProps.isPassed === nextProps.isPassed &&\n        prevProps.position === nextProps.position &&\n        prevProps.repel === nextProps.repel\n);\n","import React from 'react';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { Direction, InterchangeInfo, MonoColour } from '../../../constants/constants';\nimport OsiStation from './osi-station';\nimport { render } from '../../../test-utils';\nimport { screen } from '@testing-library/react';\n\nconst mockInterchangeInfo: InterchangeInfo = [CityCode.Hongkong, 'twl', '#E2231A', MonoColour.white, '', ''];\n\ndescribe('MTR OsiStation', () => {\n    describe('MTR OsiStation - OSI name', () => {\n        const setup = (size: number, direction: Direction, isTerminal: boolean = false) =>\n            render(\n                <svg>\n                    <OsiStation\n                        interchangeInfoList={Array(size).fill(mockInterchangeInfo)}\n                        direction={direction}\n                        isTerminal={isTerminal}\n                        stationName={['ZH name', 'EN name']}\n                    />\n                </svg>\n            );\n\n        it('Can render osi name for 1-left as expected', () => {\n            setup(1, Direction.left);\n\n            const [x] = screen.getByText('ZH name').closest('g')?.getAttribute('transform')?.match(/-?\\d+/g)!;\n            expect(Number(x)).toBeLessThan(0);\n        });\n\n        it('Can render osi name for 1-right as expected', () => {\n            setup(1, Direction.right);\n\n            const [x] = screen.getByText('ZH name').closest('g')?.getAttribute('transform')?.match(/-?\\d+/g)!;\n            expect(Number(x)).toBeGreaterThan(0);\n        });\n\n        it('Can render osi name for 2-left as expected', () => {\n            setup(2, Direction.left);\n\n            const [x] = screen.getByText('ZH name').closest('g')?.getAttribute('transform')?.match(/-?\\d+/g)!;\n            expect(Number(x)).toBeGreaterThan(0);\n        });\n\n        it('Can render osi name for 2-right as expected', () => {\n            setup(2, Direction.right);\n\n            const [x] = screen.getByText('ZH name').closest('g')?.getAttribute('transform')?.match(/-?\\d+/g)!;\n            expect(Number(x)).toBeLessThan(0);\n        });\n\n        it('Can render osi name for 1-left terminal as expected', () => {\n            setup(1, Direction.left, true);\n\n            const [x, y] = screen.getByText('ZH name').closest('g')?.getAttribute('transform')?.match(/-?\\d+/g)!;\n            expect(Number(x)).toBe(0);\n            expect(Number(y)).toBeLessThan(0);\n        });\n    });\n});\n","import React from 'react';\nimport { Direction, InterchangeInfo, Name, Position } from '../../../constants/constants';\nimport InterchangeTick from './interchange-tick';\nimport StationIcon from './station-icon';\n\ninterface OsiStationProps {\n    interchangeInfoList: InterchangeInfo[];\n    direction: Direction;\n    isPassed?: boolean;\n    isReversed?: boolean;\n    isTerminal?: boolean;\n    stationName?: Name;\n}\n\nexport default function OsiStation(props: OsiStationProps) {\n    const { interchangeInfoList, direction, isPassed, isReversed, isTerminal, stationName } = props;\n\n    const enNameLines = stationName?.[1]?.split('\\\\')?.length ?? 1;\n\n    const iconLength = 18 * (interchangeInfoList.length - 1);\n    const transforms = {\n        name: {\n            x: isTerminal\n                ? 0\n                : interchangeInfoList.length === 1\n                ? direction === Direction.left\n                    ? -13\n                    : 13\n                : direction === Direction.left\n                ? 13\n                : -13,\n            y: isTerminal\n                ? isReversed\n                    ? 19\n                    : -28\n                : -4 + (isReversed ? -9 : 9) * (interchangeInfoList.length - 1) - 5 * (enNameLines - 1),\n        },\n    };\n\n    return (\n        <g>\n            {interchangeInfoList.map((info, i, arr) => (\n                <g key={i} transform={`translate(0,${isReversed ? -18 * i : 18 * i})`}>\n                    <InterchangeTick\n                        interchangeInfo={info}\n                        isPassed={isPassed}\n                        position={\n                            arr.length === 1\n                                ? isReversed\n                                    ? Position.UP\n                                    : Position.DOWN\n                                : direction === Direction.right\n                                ? Position.RIGHT\n                                : Position.LEFT\n                        }\n                    />\n                </g>\n            ))}\n\n            <StationIcon length={iconLength} isPassed={isPassed} isReversed={isReversed} />\n\n            <g\n                textAnchor={transforms.name.x === 0 ? 'middle' : transforms.name.x > 0 ? 'start' : 'end'}\n                fill={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                transform={`translate(${transforms.name.x},${transforms.name.y})`}\n            >\n                <text className=\"rmg-name__zh\" fontSize={14}>\n                    {stationName?.[0]}\n                </text>\n                {stationName?.[1]?.split('\\\\')?.map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en\" fontSize={9} dy={12 + 10 * i}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        </g>\n    );\n}\n","import React from 'react';\n\ninterface StationIconProps {\n    length: number;\n    isPassed?: boolean;\n    isReversed?: boolean;\n}\n\nexport default function StationIcon(props: StationIconProps) {\n    const { length, isPassed, isReversed } = props;\n\n    return (\n        <path\n            d={`M-8,0 v${length} a8,8 0 0,0 16,0 v-${length} a8,8 0 0,0 -16,0Z`}\n            className=\"rmg-stn__mtr\"\n            stroke={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n            transform={`scale(1,${isReversed ? -1 : 1})`}\n        />\n    );\n}\n","import '@testing-library/jest-dom';\nimport React, { ReactElement, ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { Store } from '@reduxjs/toolkit';\nimport { I18nextProvider } from 'react-i18next';\nimport i18n from './i18n/config';\nimport { Provider } from 'react-redux';\nimport rootReducer from './redux';\nimport { createMockAppStore } from './setupTests';\nimport { MemoryRouter } from 'react-router-dom';\n\ninterface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n    store: Store;\n}\n\nconst initialOptions: CustomRenderOptions = {\n    store: createMockAppStore({ ...rootReducer.getState() }),\n};\n\ninterface TestingProviderProps {\n    children?: ReactNode;\n    store: Store;\n}\n\nexport const TestingProvider = (props: TestingProviderProps) => {\n    const { children, store } = props;\n\n    return (\n        <I18nextProvider i18n={i18n}>\n            <Provider store={store}>\n                <MemoryRouter>{children}</MemoryRouter>\n            </Provider>\n        </I18nextProvider>\n    );\n};\n\nconst customRender = (ui: ReactElement, { store, ...renderOptions } = initialOptions) => {\n    return render(ui, {\n        wrapper: props => <TestingProvider store={store} {...props} />,\n        ...renderOptions,\n    });\n};\n\nexport { customRender as render };\n"],"names":["createMockAppStore","createMockStore","getDefaultMiddleware","realStore","rootReducer","createMockStoreWithMockStations","stationList","param","stn_list","BranchStyle","getRotation","position","Position","InterchangeTick","props","interchangeInfo","isPassed","repel","zhNameLines","split","length","enNameLines","textAnchor","Direction","transforms","path","rotate","g","x","y","d","strokeLinecap","stroke","strokeWidth","transform","fill","map","txt","i","dy","className","fontSize","j","memo","prevProps","nextProps","toString","mockInterchangeInfo","CityCode","MonoColour","describe","setup","size","direction","isTerminal","render","interchangeInfoList","Array","stationName","it","screen","closest","getAttribute","match","expect","Number","toBeLessThan","toBeGreaterThan","toBe","OsiStation","isReversed","iconLength","name","info","arr","StationIcon","initialOptions","store","TestingProvider","children","i18n","customRender","ui","renderOptions","wrapper"],"sourceRoot":""}