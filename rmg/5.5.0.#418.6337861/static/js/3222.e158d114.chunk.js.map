{"version":3,"file":"static/js/3222.e158d114.chunk.js","mappings":"4JAUA,WAAeA,EAAAA,EAAAA,OACX,SAAqBC,GACjB,IAAQC,EAA6BD,EAA7BC,QAASC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MAErBC,GAASC,EAAAA,EAAAA,QAAoB,MAE7BC,EAAiB,WACX,OAARJ,QAAQ,IAARA,GAAAA,EAAWE,EAAOG,QAASC,UAC9B,GAEDC,EAAAA,EAAAA,YAAU,WACNH,KACAI,EAAAA,EAAAA,oBAAmBC,OAAOC,MAAMC,QAAQC,KAAKC,QAAQT,EACxD,GAAE,CAACL,EAAQe,WAAYb,IAexB,OACI,eAAGc,IAAKb,EAAQc,WAdE,SAACC,GACnB,OAAQA,GACJ,KAAKC,EAAAA,GAAAA,KACD,MAAO,QACX,KAAKA,EAAAA,GAAAA,MACD,MAAO,MACX,QACI,MAAO,SAElB,CAK+BC,CAAclB,GAA1C,WACI,iBAAMmB,UAAU,sCAAhB,SAAuDrB,EAAQ,KAE9DA,EAAQ,GAAGsB,MAAM,MAAMC,KAAI,SAACC,EAAKC,GAAN,OACxB,iBAAcJ,UAAU,sCAAsCK,IAP3DC,EAOqEF,EAPnD,GAAK,GAAKE,GAO/B,SACKH,GADMC,GAPT,IAACE,CAMqB,MAOvC,IACD,SAACC,EAAWC,GAAZ,OACID,EAAU5B,QAAQe,aAAec,EAAU7B,QAAQe,YAAca,EAAU1B,QAAU2B,EAAU3B,KADnG,G,4HChDSO,EAAgB,mCAAG,0FACxBqB,EAAe,EADS,WAGrBA,IAHqB,iCAKEC,SAASC,MAAMC,MALjB,OAKlBC,EALkB,OAMlBC,EAAKD,EAAYE,SANC,YAQdC,EAAOF,EAAGE,QACPC,KATW,wDAaM,gBAAtBD,EAAKE,MAAMC,OAbK,iFAkBxB5B,QAAQC,IAAI,oDAAsDiB,EAAe,QAlBzD,WAmBlBW,EAAAA,EAAAA,IAAU,KAnBQ,qCAsBtB,IAAIC,MAAM,4CAtBY,4CAAH,oD","sources":["svgs/mtr/station/station-name/station-name.tsx","svgs/mtr/utils.ts"],"sourcesContent":["import React, { memo, useEffect, useRef } from 'react';\nimport { Direction, Name } from '../../../../constants/constants';\nimport { waitForFontReady } from '../../utils';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    align?: Direction;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate, align } = props;\n\n        const nameEl = useRef<SVGGElement>(null);\n\n        const updateNameBBox = () => {\n            onUpdate?.(nameEl.current!.getBBox());\n        };\n\n        useEffect(() => {\n            updateNameBBox();\n            waitForFontReady().then().catch(console.log).finally(updateNameBBox);\n        }, [stnName.toString(), align]);\n\n        const getTextAnchor = (direction?: Direction) => {\n            switch (direction) {\n                case Direction.left:\n                    return 'start';\n                case Direction.right:\n                    return 'end';\n                default:\n                    return 'middle';\n            }\n        };\n\n        const getDy = (index: number) => 17 + 11 * index;\n\n        return (\n            <g ref={nameEl} textAnchor={getTextAnchor(align)}>\n                <text className=\"rmg-name__zh rmg-name__mtr--station\">{stnName[0]}</text>\n\n                {stnName[1].split('\\\\').map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en rmg-name__mtr--station\" dy={getDy(i)}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.stnName.toString() === nextProps.stnName.toString() && prevProps.align === nextProps.align\n);\n","import { waitForMs } from '../../utils';\n\nexport const waitForFontReady = async () => {\n    let retryAttempt = 3;\n\n    while (retryAttempt--) {\n        // #274 ready font fact set may not contain GenYoMin when first resolved\n        const fontFaceSet = await document.fonts.ready;\n        const it = fontFaceSet.values();\n        while (true) {\n            const next = it.next();\n            if (next.done) {\n                break;\n            }\n\n            if (next.value.family === 'GenYoMin TW') {\n                return;\n            }\n        }\n\n        console.log('GenYoMin is NOT ready. Retry attempts remaining: ' + retryAttempt + ' ...');\n        await waitForMs(500);\n    }\n\n    throw new Error('Failed to load GenYoMin after 3 attempts');\n};\n"],"names":["memo","props","stnName","onUpdate","align","nameEl","useRef","updateNameBBox","current","getBBox","useEffect","waitForFontReady","then","catch","console","log","finally","toString","ref","textAnchor","direction","Direction","getTextAnchor","className","split","map","txt","i","dy","index","prevProps","nextProps","retryAttempt","document","fonts","ready","fontFaceSet","it","values","next","done","value","family","waitForMs","Error"],"sourceRoot":""}