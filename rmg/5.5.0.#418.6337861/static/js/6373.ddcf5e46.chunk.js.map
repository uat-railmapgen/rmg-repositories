{"version":3,"file":"static/js/6373.ddcf5e46.chunk.js","mappings":"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","sources":["svgs/gzmtr/station-name/express-tag.tsx","svgs/gzmtr/station-name/station-name-wrapper.tsx","svgs/gzmtr/station-name/station-name.tsx","svgs/gzmtr/station-name/station-secondary-name.tsx"],"sourcesContent":["import React, { SVGProps } from 'react';\n\ninterface ExpressTagProps extends SVGProps<SVGGElement> {\n    passed?: boolean;\n}\n\nexport default function ExpressTag(props: ExpressTagProps) {\n    const { passed, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={passed ? '#aaa' : 'var(--rmg-theme-colour)'} {...others}>\n            <text className=\"rmg-name__zh\" fontSize={13}>\n                快车停靠站\n            </text>\n            <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                Express Station\n            </text>\n        </g>\n    );\n}\n","import React, { useState } from 'react';\nimport { Name, StationState } from '../../../constants/constants';\nimport StationName from './station-name';\nimport StationSecondaryName from './station-secondary-name';\nimport ExpressTag from './express-tag';\n\ninterface StationNameWrapperProps {\n    primaryName: Name;\n    secondaryName?: Name;\n    stationState: StationState;\n    flipped?: boolean;\n    express?: boolean;\n}\n\nexport default function StationNameWrapper(props: StationNameWrapperProps) {\n    const { primaryName, secondaryName, stationState, flipped, express } = props;\n\n    const [primaryBBox, setPrimaryBBox] = useState({ width: 0 } as SVGRect);\n    const [secondaryBBox, setSecondaryBBox] = useState({ x: 0, width: -20 } as SVGRect);\n\n    const getFill = (state: StationState) => {\n        switch (state) {\n            case StationState.PASSED:\n                return '#aaa';\n            case StationState.CURRENT:\n                return '#f00';\n            case StationState.FUTURE:\n                return '#000';\n        }\n    };\n\n    const primaryNameEnRows = primaryName[1].split('\\\\').length;\n    const transforms = {\n        g: {\n            x: 0,\n            y: flipped ? 17.5 : -20 - primaryNameEnRows * 14 * Math.cos(-45),\n        },\n        StationSecondaryName: {\n            x: (primaryBBox.width + secondaryBBox.width / 2 + 10) * (flipped ? -1 : 1),\n            y: 2 + 5 * (primaryNameEnRows - 1),\n        },\n        ExpressTag: {\n            x: (primaryBBox.width + secondaryBBox.width + 20 + 35) * (flipped ? -1 : 1),\n            y: 2 + 5 * (primaryNameEnRows - 1),\n        },\n    };\n\n    return (\n        <g\n            textAnchor={flipped ? 'end' : 'start'}\n            fill={getFill(stationState)}\n            transform={`translate(${transforms.g.x},${transforms.g.y})rotate(-45)`}\n        >\n            <StationName stnName={primaryName} onUpdate={setPrimaryBBox} />\n\n            {secondaryName && (\n                <StationSecondaryName\n                    stnName={secondaryName}\n                    onUpdate={setSecondaryBBox}\n                    passed={stationState === StationState.PASSED}\n                    transform={`translate(${transforms.StationSecondaryName.x},${transforms.StationSecondaryName.y})`}\n                />\n            )}\n\n            {express && (\n                <ExpressTag\n                    passed={stationState === StationState.PASSED}\n                    transform={`translate(${transforms.ExpressTag.x},${transforms.ExpressTag.y})`}\n                />\n            )}\n        </g>\n    );\n}\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate } = props;\n\n        const nameEl = useRef<SVGGElement | null>(null);\n\n        useEffect(() => {\n            onUpdate && onUpdate(nameEl.current!.getBBox());\n        }, [stnName.toString()]);\n\n        return (\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {stnName[0]}\n                </text>\n                <g fontSize={10.5}>\n                    {stnName[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={16 + i * 11}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.stnName.toString() === nextProps.stnName.toString()\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationSecondaryNameProps extends SVGProps<SVGGElement> {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    passed?: boolean;\n}\n\nexport default function StationSecondaryName(props: StationSecondaryNameProps) {\n    const { stnName, onUpdate, passed, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    useEffect(() => {\n        const nextBBox = nameEl.current!.getBBox();\n        setBBox(nextBBox);\n        onUpdate && onUpdate(nextBBox);\n    }, [stnName.toString()]);\n\n    return (\n        <g fill={passed ? '#aaa' : '#000'} {...others}>\n            <g transform=\"translate(0,3)\" fontSize={18}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={13}>\n                    {stnName[0]}\n                </text>\n                <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                    {stnName[1]}\n                </text>\n            </g>\n        </g>\n    );\n}\n"],"names":["ExpressTag","props","passed","others","textAnchor","fill","className","fontSize","dy","StationNameWrapper","primaryName","secondaryName","stationState","flipped","express","useState","width","primaryBBox","setPrimaryBBox","x","secondaryBBox","setSecondaryBBox","primaryNameEnRows","split","length","transforms","g","y","Math","cos","StationSecondaryName","state","StationState","getFill","transform","stnName","onUpdate","memo","nameEl","useRef","useEffect","current","getBBox","toString","ref","map","txt","i","prevProps","nextProps","bBox","setBBox","nextBBox"],"sourceRoot":""}