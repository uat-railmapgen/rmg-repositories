{"version":3,"file":"static/js/2901.74394a44.chunk.js","mappings":"4IAOA,WAAeA,EAAAA,EAAAA,OACX,SAAqBC,GACjB,IAAQC,EAAkBD,EAAlBC,OAEFC,EAFoBF,EAAVG,MAGV,yFACA,kFAEN,OAAO,iBAAMC,EAAGF,EAAOG,KAAK,OAAOC,YAAa,EAAGC,OAAQN,EAAS,OAAS,2BAChF,IACD,SAACO,EAAWC,GAAZ,OAA0BD,EAAUP,SAAWQ,EAAUR,QAAUO,EAAUL,QAAUM,EAAUN,KAAjG,G,kLCLW,SAASO,EAAcV,GAClC,IAAQW,EAA8CX,EAA9CW,QAASC,EAAqCZ,EAArCY,OAAQX,EAA6BD,EAA7BC,OAAQE,EAAqBH,EAArBG,MAAUU,GAA3C,OAAsDb,EAAtD,GAEMc,GAAYC,EAAAA,EAAAA,QAA8B,MAC1CC,GAAWD,EAAAA,EAAAA,QAA8B,MAE/C,GAAsCE,EAAAA,EAAAA,UAAS,CAAEC,MAAO,IAAxD,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAoCH,EAAAA,EAAAA,UAAS,CAAEC,MAAO,IAAtD,eAAOG,EAAP,KAAmBC,EAAnB,MAEAC,EAAAA,EAAAA,YAAU,WACNH,EAAeN,EAAUU,QAASC,WAClCH,EAAcN,EAASQ,QAASC,UACnC,GAAE,CAACd,EAASC,IAEb,IAAMc,EAvBa,GAuBmBC,KAAKC,IAvBxB,GAuB4CT,EAAYD,OACrEW,EACiB,IAAnBlB,EAAQmB,QAAkC,IAAlBlB,EAAOkB,OACzBJ,EA1BS,GA2BQC,KAAKC,IA3Bb,GA2BiCP,EAAWH,OAE/D,OACI,iCAAOL,GAAP,eACI,SAAC,UAAD,CAAaZ,OAAQA,EAAQE,MAAOA,KACpC,eACI4B,WAAW,SACXC,SAAU,KACVC,UAAW9B,EAAQ,aAAe,GAClCE,KAAMJ,EAAS,OAAS,OAJ5B,WAMI,cAAGgC,UAAS,kCAA6BP,EAA7B,KAAZ,UACI,iBAAMQ,IAAKpB,EAAWqB,UAAU,eAAhC,SACKxB,OAGT,cAAGsB,UAAS,iCAA4BJ,EAA5B,KAAZ,UACI,iBAAMK,IAAKlB,EAAUmB,UAAU,eAA/B,SACKvB,YAMxB,C","sources":["svgs/gzmtr/station-icon/station-icon.tsx","svgs/gzmtr/station-icon/station-number.tsx"],"sourcesContent":["import React, { memo } from 'react';\n\ninterface StationIconProps {\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default memo(\n    function StationIcon(props: StationIconProps) {\n        const { passed, large } = props;\n\n        const pathD = large\n            ? 'M0,12.95 V-12.95 H-12.95 a12.95,12.95 0 0,0 0,25.9 h25.9 a12.95,12.95 0 0,0 0,-25.9 H0'\n            : 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\n\n        return <path d={pathD} fill=\"#fff\" strokeWidth={2} stroke={passed ? '#aaa' : 'var(--rmg-theme-colour)'} />;\n    },\n    (prevProps, nextProps) => prevProps.passed === nextProps.passed && prevProps.large === nextProps.large\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport StationIcon from './station-icon';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, passed, large, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g {...others}>\n            <StationIcon passed={passed} large={large} />\n            <g\n                textAnchor=\"middle\"\n                fontSize={13.5}\n                transform={large ? 'scale(1.4)' : ''}\n                fill={passed ? '#aaa' : '#000'}\n            >\n                <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                    <text ref={lineNumEl} className=\"rmg-name__zh\">\n                        {lineNum}\n                    </text>\n                </g>\n                <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                    <text ref={stnNumEl} className=\"rmg-name__zh\">\n                        {stnNum}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n}\n"],"names":["memo","props","passed","pathD","large","d","fill","strokeWidth","stroke","prevProps","nextProps","StationNumber","lineNum","stnNum","others","lineNumEl","useRef","stnNumEl","useState","width","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","useEffect","current","getBBox","lineNumScale","Math","max","stnNumScale","length","textAnchor","fontSize","transform","ref","className"],"sourceRoot":""}