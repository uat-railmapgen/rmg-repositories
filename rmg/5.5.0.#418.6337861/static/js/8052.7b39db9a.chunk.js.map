{"version":3,"file":"static/js/8052.7b39db9a.chunk.js","mappings":"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","sources":["svgs/gzmtr/line-icon/interchange-box.tsx","svgs/gzmtr/line-icon/line-icon-type2.tsx","svgs/gzmtr/line-icon/line-icon.tsx"],"sourcesContent":["import React, { SVGProps } from 'react';\n\nexport default function InterchangeBox(props: SVGProps<SVGRectElement>) {\n    return <rect x={-22.5} height={24} width={45} rx={4.5} {...props} />;\n}\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\nimport { MAX_WIDTH } from './line-icon';\n\ninterface LineIconType2Props {\n    lineName: Name;\n    commonPart: string;\n}\n\nexport default memo(\n    function LineIconType2(props: LineIconType2Props) {\n        const { lineName, commonPart } = props;\n\n        const wrapperEl = useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = useState({ x: 0, height: 0, width: 0 } as DOMRect);\n        useEffect(() => {\n            wrapperEl.current && setBBox(wrapperEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const scale = MAX_WIDTH / Math.max(MAX_WIDTH, bBox.width);\n        const dx = (-bBox.x - bBox.width / 2) * scale;\n        const dy = (bBox.height * (1 - scale) * 1.2) / 2;\n\n        return (\n            <g ref={wrapperEl} transform={`translate(${dx},${dy})scale(${scale})`}>\n                <text className=\"rmg-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                    {commonPart}\n                    <tspan className=\"rmg-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                        {lineName[0].slice(commonPart.length).trim()}\n                    </tspan>\n                    <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                        {lineName[1].slice(commonPart.length).trim()}\n                    </tspan>\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.lineName.toString() === nextProps.lineName.toString()\n);\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { ColourHex, MonoColour, Name } from '../../../constants/constants';\nimport LineIconType2 from './line-icon-type2';\nimport InterchangeBox from './interchange-box';\n\nexport const MAX_WIDTH = 42;\n\ninterface LineIconProps {\n    lineName: Name;\n    foregroundColour: MonoColour;\n    backgroundColour: ColourHex;\n    passed?: boolean;\n}\n\nexport default memo(\n    function LineIcon(props: LineIconProps) {\n        const { lineName, foregroundColour, backgroundColour, passed } = props;\n\n        const [type, commonPart] = getType(lineName);\n\n        const nameZhEl = useRef<SVGTextElement | null>(null);\n        const nameEnEl = useRef<SVGTextElement | null>(null);\n\n        const [nameZhBBox, setNameZhBBox] = useState({ width: 0 } as DOMRect);\n        const [nameEnBBox, setNameEnBBox] = useState({ width: 0 } as DOMRect);\n\n        useEffect(() => {\n            nameZhEl.current && setNameZhBBox(nameZhEl.current.getBBox());\n            nameEnEl.current && setNameEnBBox(nameEnEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const nameZhScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameZhBBox.width);\n        const nameEnScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameEnBBox.width);\n\n        return (\n            <g textAnchor=\"middle\" fill={passed ? MonoColour.white : foregroundColour}>\n                <InterchangeBox fill={passed ? '#aaa' : backgroundColour} />\n                {type === 2 ? (\n                    <LineIconType2 lineName={lineName} commonPart={commonPart} />\n                ) : (\n                    <>\n                        <text\n                            ref={nameZhEl}\n                            y={getYByType(type, 'zh', nameZhScale)}\n                            className=\"rmg-name__zh\"\n                            fontSize={12}\n                            transform={`scale(${nameZhScale})`}\n                        >\n                            {type === 1 ? (\n                                <>\n                                    <tspan fontSize={16} dy={0.7} className=\"rmg-name__zh\">\n                                        {commonPart}\n                                    </tspan>\n                                    <tspan dy={-0.7} className=\"rmg-name__zh\">\n                                        {lineName[0].slice(commonPart.length)}\n                                    </tspan>\n                                </>\n                            ) : (\n                                lineName[0]\n                            )}\n                        </text>\n                        <text\n                            ref={nameEnEl}\n                            y={getYByType(type, 'en', nameEnScale)}\n                            className=\"rmg-name__en\"\n                            fontSize={8}\n                            transform={`scale(${nameEnScale})`}\n                        >\n                            {lineName[1]}\n                        </text>\n                    </>\n                )}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.lineName.toString() === nextProps.lineName.toString() &&\n        prevProps.foregroundColour === nextProps.foregroundColour &&\n        prevProps.backgroundColour === nextProps.backgroundColour &&\n        prevProps.passed === nextProps.passed\n);\n\n/**\n * type 1: 2号线\n * type 2: APM线\n * type 3: 佛山2号线\n */\nconst getType = (name: Name): [1 | 2 | 3, string] => {\n    const matchResultForType1 = name[0].match(/^(\\d+)\\D+$/);\n    if (matchResultForType1) return [1, matchResultForType1[1]];\n\n    const matchResultForType2 = name.map(text => text.match(/^([\\w\\d]+).+$/));\n    if (matchResultForType2[0] && matchResultForType2[1] && matchResultForType2[0][1] === matchResultForType2[1][1]) {\n        return [2, matchResultForType2[0][1]];\n    }\n\n    return [3, ''];\n};\n\nconst getYByType = (type: ReturnType<typeof getType>[0], field: 'zh' | 'en', scale: number) => {\n    switch (type) {\n        case 1:\n            return (field === 'zh' ? 7.3 : 19.5) * (1 + 1 - scale);\n        case 2:\n            return 0;\n        case 3:\n            if (field === 'zh') {\n                return 8 * (2 - scale);\n            } else {\n                return 19.5 + 19.5 * (19.5 / 8) * (1 - scale) - (scale === 1 ? 0 : 5.5);\n            }\n    }\n};\n"],"names":["InterchangeBox","props","x","height","width","rx","memo","lineName","commonPart","wrapperEl","useRef","useState","bBox","setBBox","useEffect","current","getBBox","toString","scale","MAX_WIDTH","Math","max","dx","dy","ref","transform","className","fontSize","y","textAnchor","slice","length","trim","prevProps","nextProps","foregroundColour","backgroundColour","passed","getType","type","nameZhEl","nameEnEl","nameZhBBox","setNameZhBBox","nameEnBBox","setNameEnBBox","nameZhScale","nameEnScale","fill","MonoColour","getYByType","name","matchResultForType1","match","matchResultForType2","map","text","field"],"sourceRoot":""}