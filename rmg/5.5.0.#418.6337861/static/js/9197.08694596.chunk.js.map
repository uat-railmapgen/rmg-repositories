{"version":3,"file":"static/js/9197.08694596.chunk.js","mappings":"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","sources":["svgs/gzmtr/line-icon/interchange-box.tsx","svgs/gzmtr/line-icon/line-icon-type2.tsx","svgs/gzmtr/line-icon/line-icon.tsx","svgs/gzmtr/station-icon/station-icon.tsx","svgs/gzmtr/station-icon/station-number.tsx","svgs/gzmtr/station-name/express-tag.tsx","svgs/gzmtr/station-name/station-name-wrapper.tsx","svgs/gzmtr/station-name/station-name.tsx","svgs/gzmtr/station-name/station-secondary-name.tsx","svgs/railmap/main/station/station-gzmtr.tsx"],"sourcesContent":["import React, { SVGProps } from 'react';\n\nexport default function InterchangeBox(props: SVGProps<SVGRectElement>) {\n    return <rect x={-22.5} height={24} width={45} rx={4.5} {...props} />;\n}\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\nimport { MAX_WIDTH } from './line-icon';\n\ninterface LineIconType2Props {\n    lineName: Name;\n    commonPart: string;\n}\n\nexport default memo(\n    function LineIconType2(props: LineIconType2Props) {\n        const { lineName, commonPart } = props;\n\n        const wrapperEl = useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = useState({ x: 0, height: 0, width: 0 } as DOMRect);\n        useEffect(() => {\n            wrapperEl.current && setBBox(wrapperEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const scale = MAX_WIDTH / Math.max(MAX_WIDTH, bBox.width);\n        const dx = (-bBox.x - bBox.width / 2) * scale;\n        const dy = (bBox.height * (1 - scale) * 1.2) / 2;\n\n        return (\n            <g ref={wrapperEl} transform={`translate(${dx},${dy})scale(${scale})`}>\n                <text className=\"rmg-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                    {commonPart}\n                    <tspan className=\"rmg-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                        {lineName[0].slice(commonPart.length).trim()}\n                    </tspan>\n                    <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                        {lineName[1].slice(commonPart.length).trim()}\n                    </tspan>\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.lineName.toString() === nextProps.lineName.toString()\n);\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { ColourHex, MonoColour, Name } from '../../../constants/constants';\nimport LineIconType2 from './line-icon-type2';\nimport InterchangeBox from './interchange-box';\n\nexport const MAX_WIDTH = 42;\n\ninterface LineIconProps {\n    lineName: Name;\n    foregroundColour: MonoColour;\n    backgroundColour: ColourHex;\n    passed?: boolean;\n}\n\nexport default memo(\n    function LineIcon(props: LineIconProps) {\n        const { lineName, foregroundColour, backgroundColour, passed } = props;\n\n        const [type, commonPart] = getType(lineName);\n\n        const nameZhEl = useRef<SVGTextElement | null>(null);\n        const nameEnEl = useRef<SVGTextElement | null>(null);\n\n        const [nameZhBBox, setNameZhBBox] = useState({ width: 0 } as DOMRect);\n        const [nameEnBBox, setNameEnBBox] = useState({ width: 0 } as DOMRect);\n\n        useEffect(() => {\n            nameZhEl.current && setNameZhBBox(nameZhEl.current.getBBox());\n            nameEnEl.current && setNameEnBBox(nameEnEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const nameZhScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameZhBBox.width);\n        const nameEnScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameEnBBox.width);\n\n        return (\n            <g textAnchor=\"middle\" fill={passed ? MonoColour.white : foregroundColour}>\n                <InterchangeBox fill={passed ? '#aaa' : backgroundColour} />\n                {type === 2 ? (\n                    <LineIconType2 lineName={lineName} commonPart={commonPart} />\n                ) : (\n                    <>\n                        <text\n                            ref={nameZhEl}\n                            y={getYByType(type, 'zh', nameZhScale)}\n                            className=\"rmg-name__zh\"\n                            fontSize={12}\n                            transform={`scale(${nameZhScale})`}\n                        >\n                            {type === 1 ? (\n                                <>\n                                    <tspan fontSize={16} dy={0.7} className=\"rmg-name__zh\">\n                                        {commonPart}\n                                    </tspan>\n                                    <tspan dy={-0.7} className=\"rmg-name__zh\">\n                                        {lineName[0].slice(commonPart.length)}\n                                    </tspan>\n                                </>\n                            ) : (\n                                lineName[0]\n                            )}\n                        </text>\n                        <text\n                            ref={nameEnEl}\n                            y={getYByType(type, 'en', nameEnScale)}\n                            className=\"rmg-name__en\"\n                            fontSize={8}\n                            transform={`scale(${nameEnScale})`}\n                        >\n                            {lineName[1]}\n                        </text>\n                    </>\n                )}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.lineName.toString() === nextProps.lineName.toString() &&\n        prevProps.foregroundColour === nextProps.foregroundColour &&\n        prevProps.backgroundColour === nextProps.backgroundColour &&\n        prevProps.passed === nextProps.passed\n);\n\n/**\n * type 1: 2号线\n * type 2: APM线\n * type 3: 佛山2号线\n */\nconst getType = (name: Name): [1 | 2 | 3, string] => {\n    const matchResultForType1 = name[0].match(/^(\\d+)\\D+$/);\n    if (matchResultForType1) return [1, matchResultForType1[1]];\n\n    const matchResultForType2 = name.map(text => text.match(/^([\\w\\d]+).+$/));\n    if (matchResultForType2[0] && matchResultForType2[1] && matchResultForType2[0][1] === matchResultForType2[1][1]) {\n        return [2, matchResultForType2[0][1]];\n    }\n\n    return [3, ''];\n};\n\nconst getYByType = (type: ReturnType<typeof getType>[0], field: 'zh' | 'en', scale: number) => {\n    switch (type) {\n        case 1:\n            return (field === 'zh' ? 7.3 : 19.5) * (1 + 1 - scale);\n        case 2:\n            return 0;\n        case 3:\n            if (field === 'zh') {\n                return 8 * (2 - scale);\n            } else {\n                return 19.5 + 19.5 * (19.5 / 8) * (1 - scale) - (scale === 1 ? 0 : 5.5);\n            }\n    }\n};\n","import React, { memo } from 'react';\n\ninterface StationIconProps {\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default memo(\n    function StationIcon(props: StationIconProps) {\n        const { passed, large } = props;\n\n        const pathD = large\n            ? 'M0,12.95 V-12.95 H-12.95 a12.95,12.95 0 0,0 0,25.9 h25.9 a12.95,12.95 0 0,0 0,-25.9 H0'\n            : 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\n\n        return <path d={pathD} fill=\"#fff\" strokeWidth={2} stroke={passed ? '#aaa' : 'var(--rmg-theme-colour)'} />;\n    },\n    (prevProps, nextProps) => prevProps.passed === nextProps.passed && prevProps.large === nextProps.large\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport StationIcon from './station-icon';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, passed, large, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g {...others}>\n            <StationIcon passed={passed} large={large} />\n            <g\n                textAnchor=\"middle\"\n                fontSize={13.5}\n                transform={large ? 'scale(1.4)' : ''}\n                fill={passed ? '#aaa' : '#000'}\n            >\n                <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                    <text ref={lineNumEl} className=\"rmg-name__zh\">\n                        {lineNum}\n                    </text>\n                </g>\n                <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                    <text ref={stnNumEl} className=\"rmg-name__zh\">\n                        {stnNum}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React, { SVGProps } from 'react';\n\ninterface ExpressTagProps extends SVGProps<SVGGElement> {\n    passed?: boolean;\n}\n\nexport default function ExpressTag(props: ExpressTagProps) {\n    const { passed, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={passed ? '#aaa' : 'var(--rmg-theme-colour)'} {...others}>\n            <text className=\"rmg-name__zh\" fontSize={13}>\n                快车停靠站\n            </text>\n            <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                Express Station\n            </text>\n        </g>\n    );\n}\n","import React, { useState } from 'react';\nimport { Name, StationState } from '../../../constants/constants';\nimport StationName from './station-name';\nimport StationSecondaryName from './station-secondary-name';\nimport ExpressTag from './express-tag';\n\ninterface StationNameWrapperProps {\n    primaryName: Name;\n    secondaryName?: Name;\n    stationState: StationState;\n    flipped?: boolean;\n    express?: boolean;\n}\n\nexport default function StationNameWrapper(props: StationNameWrapperProps) {\n    const { primaryName, secondaryName, stationState, flipped, express } = props;\n\n    const [primaryBBox, setPrimaryBBox] = useState({ width: 0 } as SVGRect);\n    const [secondaryBBox, setSecondaryBBox] = useState({ x: 0, width: -20 } as SVGRect);\n\n    const getFill = (state: StationState) => {\n        switch (state) {\n            case StationState.PASSED:\n                return '#aaa';\n            case StationState.CURRENT:\n                return '#f00';\n            case StationState.FUTURE:\n                return '#000';\n        }\n    };\n\n    const primaryNameEnRows = primaryName[1].split('\\\\').length;\n    const transforms = {\n        g: {\n            x: 0,\n            y: flipped ? 17.5 : -20 - primaryNameEnRows * 14 * Math.cos(-45),\n        },\n        StationSecondaryName: {\n            x: (primaryBBox.width + secondaryBBox.width / 2 + 10) * (flipped ? -1 : 1),\n            y: 2 + 5 * (primaryNameEnRows - 1),\n        },\n        ExpressTag: {\n            x: (primaryBBox.width + secondaryBBox.width + 20 + 35) * (flipped ? -1 : 1),\n            y: 2 + 5 * (primaryNameEnRows - 1),\n        },\n    };\n\n    return (\n        <g\n            textAnchor={flipped ? 'end' : 'start'}\n            fill={getFill(stationState)}\n            transform={`translate(${transforms.g.x},${transforms.g.y})rotate(-45)`}\n        >\n            <StationName stnName={primaryName} onUpdate={setPrimaryBBox} />\n\n            {secondaryName && (\n                <StationSecondaryName\n                    stnName={secondaryName}\n                    onUpdate={setSecondaryBBox}\n                    passed={stationState === StationState.PASSED}\n                    transform={`translate(${transforms.StationSecondaryName.x},${transforms.StationSecondaryName.y})`}\n                />\n            )}\n\n            {express && (\n                <ExpressTag\n                    passed={stationState === StationState.PASSED}\n                    transform={`translate(${transforms.ExpressTag.x},${transforms.ExpressTag.y})`}\n                />\n            )}\n        </g>\n    );\n}\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate } = props;\n\n        const nameEl = useRef<SVGGElement | null>(null);\n\n        useEffect(() => {\n            onUpdate && onUpdate(nameEl.current!.getBBox());\n        }, [stnName.toString()]);\n\n        return (\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {stnName[0]}\n                </text>\n                <g fontSize={10.5}>\n                    {stnName[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={16 + i * 11}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.stnName.toString() === nextProps.stnName.toString()\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationSecondaryNameProps extends SVGProps<SVGGElement> {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    passed?: boolean;\n}\n\nexport default function StationSecondaryName(props: StationSecondaryNameProps) {\n    const { stnName, onUpdate, passed, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    useEffect(() => {\n        const nextBBox = nameEl.current!.getBBox();\n        setBBox(nextBBox);\n        onUpdate && onUpdate(nextBBox);\n    }, [stnName.toString()]);\n\n    return (\n        <g fill={passed ? '#aaa' : '#000'} {...others}>\n            <g transform=\"translate(0,3)\" fontSize={18}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={13}>\n                    {stnName[0]}\n                </text>\n                <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                    {stnName[1]}\n                </text>\n            </g>\n        </g>\n    );\n}\n","import React from 'react';\nimport StationNumber from '../../../gzmtr/station-icon/station-number';\nimport { InterchangeInfo, Services } from '../../../../constants/constants';\nimport { useRootSelector } from '../../../../redux';\nimport LineIcon from '../../../gzmtr/line-icon/line-icon';\nimport StationNameWrapper from '../../../gzmtr/station-name/station-name-wrapper';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    stnY: number;\n}\n\nconst StationGZMTR = (props: Props) => {\n    const { stnId, stnState, stnY } = props;\n\n    const theme = useRootSelector(store => store.param.theme);\n    const lineName = useRootSelector(store => store.param.line_name);\n    const lineNumber = useRootSelector(store => store.param.line_num);\n    const stnInfo = useRootSelector(store => store.param.stn_list[stnId]);\n\n    const isNameShift = stnInfo.parents.length === 2 || stnInfo.children.length === 2;\n    const tickRotation =\n        stnY > 0\n            ? 180\n            : stnInfo.parents.indexOf(stnInfo.branch.left[1] || '') === 1 ||\n              stnInfo.children.indexOf(stnInfo.branch.right[1] || '') === 1\n            ? 180\n            : 0;\n    const nameENLns = stnInfo.name[1].split('\\\\').length;\n    const nameDX = isNameShift\n        ? tickRotation === 180\n            ? 16 + (nameENLns - 1) * 12 * Math.cos(-45)\n            : -9\n        : tickRotation === 180\n        ? -6\n        : (25 + (nameENLns - 1) * 15) * Math.cos(-45);\n\n    return (\n        <>\n            <IntGroup\n                intInfos={\n                    isNameShift\n                        ? (\n                              [\n                                  [theme[0], theme[1], 'var(--rmg-theme-colour)', 'var(--rmg-theme-fg)', ...lineName],\n                              ] as any[] as InterchangeInfo[]\n                          ).concat(stnInfo.transfer.info[0])\n                        : stnInfo.transfer.info[0]\n                }\n                stnState={stnState}\n                tickRotation={tickRotation}\n            />\n            <StationNumber lineNum={lineNumber} stnNum={stnInfo.num} passed={stnState === -1} />\n            <g transform={`translate(${-nameDX},0)`}>\n                <StationNameWrapper\n                    primaryName={stnInfo.name}\n                    secondaryName={stnInfo.secondaryName || undefined}\n                    stationState={stnState}\n                    flipped={tickRotation === 180}\n                    express={stnInfo.services.includes(Services.express)}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationGZMTR;\n\ninterface IntGroupProps {\n    intInfos: InterchangeInfo[];\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n}\n\nconst IntGroup = (props: IntGroupProps) => (\n    <>\n        <IntTicks strokeWidth={4} {...props} />\n        <IntBoxs transform={`translate(0,${props.tickRotation === 180 ? -47 : 23})`} {...props} />\n    </>\n);\n\nconst IntTicks = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, stnState, tickRotation, ...others } = props;\n\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => (\n                <use\n                    key={i}\n                    xlinkHref=\"#inttick\"\n                    stroke={stnState === -1 ? '#aaa' : info[2]}\n                    transform={`translate(${-2 * (intInfos.length - 1) + 4 * i},0)rotate(${\n                        tickRotation === 180 ? 180 : 0\n                    })`}\n                />\n            ))}\n        </g>\n    );\n};\n\nconst IntBoxs = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, tickRotation, stnState, ...other } = props;\n\n    return (\n        <g {...other}>\n            {intInfos.map((info, i) => (\n                <g key={i} transform={`translate(0,${i * 28 * (tickRotation === 180 ? -1 : 1)})`}>\n                    <LineIcon\n                        lineName={[info[4], info[5]]}\n                        foregroundColour={info[3]}\n                        backgroundColour={info[2]}\n                        passed={stnState === -1}\n                    />\n                </g>\n            ))}\n        </g>\n    );\n};\n"],"names":["InterchangeBox","props","x","height","width","rx","memo","lineName","commonPart","wrapperEl","useRef","useState","bBox","setBBox","useEffect","current","getBBox","toString","scale","MAX_WIDTH","Math","max","dx","dy","ref","transform","className","fontSize","y","textAnchor","slice","length","trim","prevProps","nextProps","foregroundColour","backgroundColour","passed","getType","type","nameZhEl","nameEnEl","nameZhBBox","setNameZhBBox","nameEnBBox","setNameEnBBox","nameZhScale","nameEnScale","fill","MonoColour","getYByType","name","matchResultForType1","match","matchResultForType2","map","text","field","pathD","large","d","strokeWidth","stroke","StationNumber","lineNum","stnNum","others","lineNumEl","stnNumEl","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","lineNumScale","stnNumScale","ExpressTag","StationNameWrapper","primaryName","secondaryName","stationState","flipped","express","primaryBBox","setPrimaryBBox","secondaryBBox","setSecondaryBBox","primaryNameEnRows","split","transforms","g","cos","StationSecondaryName","state","StationState","getFill","stnName","onUpdate","nameEl","txt","i","nextBBox","stnId","stnState","stnY","theme","useRootSelector","store","param","line_name","lineNumber","line_num","stnInfo","stn_list","isNameShift","parents","children","tickRotation","indexOf","branch","left","right","nameENLns","nameDX","IntGroup","intInfos","concat","transfer","info","num","undefined","services","includes","Services","IntTicks","IntBoxs","xlinkHref","other"],"sourceRoot":""}