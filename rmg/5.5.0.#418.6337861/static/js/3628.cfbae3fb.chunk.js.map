{"version":3,"file":"static/js/3628.cfbae3fb.chunk.js","mappings":"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","sources":["svgs/indoor/station-shmetro.tsx","svgs/railmap/main/loop/loop-branches-shmetro.tsx","svgs/railmap/main/station/station-shmetro.tsx"],"sourcesContent":["import React from 'react';\nimport { ColourHex, InterchangeInfo, Name, Services } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\n\nexport type NameDirection = 'upward' | 'downward' | 'left' | 'right';\n\ninterface Props {\n    stnId: string;\n    nameDirection: NameDirection;\n    services: Services[];\n    color?: ColourHex; // Control the station color if coline is in effect.\n}\n\nexport const StationSHMetro = (props: Props) => {\n    const { stnId, nameDirection, services, color } = props;\n    const stnInfo = useRootSelector(store => store.param.stn_list[stnId]);\n\n    const transfer = [...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])];\n    let stationIconStyle = '';\n    if (stnInfo.services.length === 3) stationIconStyle = 'direct_indoor_sh';\n    else if (stnInfo.services.length === 2) stationIconStyle = 'express_indoor_sh';\n    else if (transfer.length > 0) stationIconStyle = 'int2_indoor_sh';\n    else stationIconStyle = 'stn_indoor_sh';\n\n    const dr = nameDirection === 'left' || nameDirection === 'right' ? 90 : 0;\n    return (\n        <>\n            <StationNameGElement\n                name={stnInfo.name}\n                infos={stnInfo.transfer.info}\n                nameDirection={nameDirection}\n                services={services}\n            />\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                stroke={transfer.length > 0 ? 'var(--rmg-black)' : color ?? 'var(--rmg-theme-colour)'}\n                transform={`rotate(${dr})`}\n            />\n            {/* This should be in IntBoxGroupProps, put here because the station icon will cover this */}\n            {stnInfo.services.length > 1 && (\n                <text className=\"rmg-name__zh\" writingMode=\"tb\" fontSize=\"60%\" dy=\"-12\">\n                    {`大站车${stnInfo.services.length > 2 ? ' 直达车' : ''}停靠`}\n                </text>\n            )}\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    nameDirection: NameDirection;\n    services: Services[];\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, nameDirection, services } = props;\n    const dy = { upward: 60, downward: -30, left: 0, right: 0 }[nameDirection];\n    const osi_dx = { upward: 0, downward: 0, left: 85, right: -85 }[nameDirection];\n    const osi_dy = {\n        upward: -185,\n        downward: 150 + (services.length === 3 ? 40 : 0),\n        left: -30,\n        right: -30,\n    }[nameDirection];\n    const osysi_dx =\n        // only compute when there is a out-of-system transfer\n        infos[2]?.length > 0\n            ? {\n                  upward: 0,\n                  downward: 0,\n                  left: infos[0].length + infos[1].length !== 0 ? 85 : 25,\n                  right: infos[0].length + infos[1].length !== 0 ? -85 : -25,\n              }[nameDirection]\n            : 0;\n    const osysi_dy =\n        // only compute when there is a out-of-system transfer\n        infos[2]?.length > 0\n            ? {\n                  upward: infos[1]?.length ? -210 : infos[0].length ? -180 : -100,\n                  downward: (infos[1]?.length ? 190 : infos[0].length ? 160 : 100) + (services.length === 3 ? 40 : 0),\n                  left: infos[1]?.length ? -60 : infos[0].length ? -30 : 0,\n                  right: infos[1]?.length ? -60 : infos[0].length ? -30 : 0,\n              }[nameDirection]\n            : 0;\n    return (\n        <g transform={`translate(0,${dy})`}>\n            {nameDirection === 'upward' || nameDirection === 'downward' ? (\n                <>\n                    <line\n                        x1={-30}\n                        x2={30}\n                        y1={nameDirection === 'upward' ? -23 : -10}\n                        y2={nameDirection === 'upward' ? -23 : -10}\n                        stroke=\"black\"\n                    />\n                    <line\n                        y1={nameDirection === 'upward' ? -23 : -10}\n                        y2={nameDirection === 'upward' ? -23 - 25 : 20}\n                        stroke=\"black\"\n                    />\n                </>\n            ) : (\n                <>\n                    <line\n                        x1={nameDirection === 'left' ? -50 : 15}\n                        x2={nameDirection === 'left' ? -15 : 50}\n                        y1={0}\n                        y2={0}\n                        stroke=\"black\"\n                    />\n                    <line\n                        x1={nameDirection === 'left' ? -50 : 50}\n                        x2={nameDirection === 'left' ? -50 : 50}\n                        y1={-30}\n                        y2={30}\n                        stroke=\"black\"\n                    />\n                </>\n            )}\n\n            {[...infos[0], ...(infos[1] || [])].length > 0 && (\n                <IntBoxGroup\n                    intInfos={[...infos[0], ...(infos[1] || [])]}\n                    arrowDirection={nameDirection}\n                    services={services}\n                />\n            )}\n\n            <StationName stnName={name} nameDirection={nameDirection} fill=\"black\" />\n\n            {infos[1]?.length > 0 && (\n                <g transform={`translate(${osi_dx},${osi_dy})`}>\n                    <OSIText osiInfos={infos[1]} nameDirection={nameDirection} />\n                </g>\n            )}\n\n            {infos[2]?.length > 0 && (\n                <g transform={`translate(${osysi_dx},${osysi_dy})`}>\n                    <OSysIText osysiInfos={infos[2]} nameDirection={nameDirection} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (\n        props: { stnName: Name; nameDirection: NameDirection } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { stnName, nameDirection, ...others } = props;\n        const name = stnName[0].split('\\\\');\n        const nameENLn = stnName[1].split('\\\\').length;\n        const dx = { upward: 0, downward: 0, left: -60, right: 60 }[nameDirection];\n        const dy = {\n            upward: -2,\n            downward: -30 - 12 * (nameENLn - 1),\n            left: -10 * (nameENLn - 1),\n            right: -10 * (nameENLn - 1),\n        }[nameDirection];\n        const anchor = { upward: 'middle', downward: 'middle', left: 'end', right: 'start' }[nameDirection];\n\n        return (\n            <g ref={ref} {...others} textAnchor={anchor} transform={`translate(${dx},${dy})`}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {name.map((txt, i, array) => (\n                                <text\n                                    key={i}\n                                    className=\"rmg-name__zh\"\n                                    dy={nameDirection === 'upward' ? 16 * i : (array.length - 1 - i) * -16}\n                                >\n                                    {txt}\n                                </text>\n                            ))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text\n                                        key={i}\n                                        className=\"rmg-name__en\"\n                                        dy={\n                                            12 * (i + 1) +\n                                            (nameDirection === 'upward' ? (name.length > 1 ? name.length * 7.5 : 0) : 0)\n                                        }\n                                    >\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\ninterface IntBoxGroupProps {\n    intInfos: InterchangeInfo[];\n    arrowDirection: NameDirection;\n    services: Services[];\n}\n\nconst IntBoxGroup = (props: IntBoxGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, arrowDirection, services } = props;\n\n    // name each different linearGradient that will fill the arrow\n    const intNameId = intInfos.map(intInfo => intInfo[2]).reduce((name, color) => name + color, '');\n\n    // get the interchange line names\n    const lineNames = [\n        intInfos\n            .filter(intInfo => intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4].replace(/^(\\d+)(.*)$/, '$1'))\n            .join('，')\n            .concat('号线'),\n        intInfos\n            .filter(intInfo => !intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4])\n            .join('，'),\n    ]\n        .filter(name => name && name !== '号线')\n        .join('，');\n    const lineNamesEn = [\n        'Line '.concat(\n            intInfos\n                .filter(intInfo => intInfo[5].match(/^L|line$/))\n                .map(intInfo => intInfo[5].replace('Line', '').replace('line', '').trim())\n                .join(',')\n        ),\n        intInfos\n            .filter(intInfo => !intInfo[5].match(/^L|line$/))\n            .map(intInfo => intInfo[5])\n            .join('，'),\n    ]\n        .filter(name => name && name !== 'Line ')\n        .join(',');\n\n    // for services contains three level (normal, express, direct)\n    // additional length is required on transfer arrow otherwise\n    // the station icon will be longer than the arrow itself\n    const arrowLength = services.length === 3 ? 80 : 45;\n    const transfer_dy = { upward: -145, downward: 125 + (services.length === 3 ? 40 : 0), left: 7, right: 7 }[\n        arrowDirection\n    ];\n\n    // bunch of constants for all four directions\n    const arrow_dx = { upward: 0, downward: 0, left: 20, right: -20 }[arrowDirection];\n    const arrow_dy = { upward: -74, downward: 44, left: 0, right: 0 }[arrowDirection];\n    const arrow_dr = { upward: 0, downward: 180, left: 90, right: -90 }[arrowDirection];\n    const transfer_dx = { upward: 0, downward: 0, left: 85, right: -85 }[arrowDirection];\n    const transfer_anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[arrowDirection];\n    return (\n        <g>\n            <path\n                id=\"int_indoor_arrow_sh\"\n                stroke=\"var(--rmg-black)\"\n                strokeWidth={1}\n                transform={`translate(${arrow_dx},${arrow_dy})rotate(${arrow_dr})`}\n                fill={intInfos.length === 1 ? intInfos[0][2] : `url(#grad${intNameId})`}\n                d={`M -7.5,0 v -${arrowLength} h -7.5 l 15,-15 l 15,15 h -7.5 v ${arrowLength} Z`}\n            />\n\n            {intInfos.length > 1 && (\n                <>\n                    <linearGradient\n                        id={`grad${intNameId}`}\n                        y1=\"0\"\n                        y2=\"0\"\n                        x1={arrowDirection === 'upward' ? '25%' : '75%'}\n                        x2={arrowDirection === 'upward' ? '75%' : '25%'}\n                    >\n                        {intInfos.map((intInfo, i) => (\n                            <React.Fragment key={i}>\n                                {/* more about React.Fragment on https://stackoverflow.com/a/59390967 */}\n                                <stop // start from\n                                    offset={`${(100 / intInfos.length) * (i + 0)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                                <stop // to\n                                    offset={`${(100 / intInfos.length) * (i + 1)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                            </React.Fragment>\n                        ))}\n                    </linearGradient>\n\n                    {/* a range inplementation [0, 1, 2 ... intInfos.length - 1] */}\n                    {/* {[...Array(intInfos.length - 1).keys()].map(i => (<line\n                        x1={-7.5 + (15 / intInfos.length) * (i + 1)}\n                        x2={-7.5 + (15 / intInfos.length) * (i + 1)}\n                        y1=\"-74\"\n                        y2={-104 - 7.5 - 7.5 / (intInfos.length - 1) * (i+1)}\n                        stroke=\"black\"\n                    />))} */}\n                </>\n            )}\n\n            <g transform={`translate(${transfer_dx},${transfer_dy})`} textAnchor={`${transfer_anchor}`}>\n                <text className=\"rmg-name__zh\" dy={-7}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={5} fontSize={9.6}>\n                    {`Interchange ${lineNamesEn}`}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[]; nameDirection: NameDirection }) => {\n    const anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[props.nameDirection];\n    return React.useMemo(\n        () => (\n            <g textAnchor={`${anchor}`} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${props.osiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osiInfos.toString(), props.nameDirection]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; nameDirection: NameDirection }) => {\n    const anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[props.nameDirection];\n    return React.useMemo(\n        () => (\n            <g textAnchor={`${anchor}`}>\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`转乘${props.osysiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={7.5} fontSize={9.6}>\n                    {`To ${props.osysiInfos.map(info => info[5]).join(', ')}`}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.nameDirection]\n    );\n};\n","import { useRootSelector } from '../../../../redux';\nimport { CanvasType, ColourHex, Services } from '../../../../constants/constants';\nimport StationSHMetro from '../station/station-shmetro';\nimport { StationSHMetro as StationSHMetroIndoor } from '../../../indoor/station-shmetro';\nimport React from 'react';\n\nexport const get_loop_branches = (\n    branches: string[][],\n    branch_stn_ids: string[],\n    svg_width: number,\n    padding: number,\n    left_and_right_factor: number,\n    bottom_factor: number\n) => {\n    const loopline = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n\n    const loop_branches = branches.slice(1, 3).map(branch => branch.slice(1, branch.length - 1));\n    // calculate the length of top stations + branch(es) stations\n    const critical_path_length =\n        loop_branches.reduce(\n            (acc, cur) =>\n                acc + cur.filter(stn_id => !['linestart', 'lineend', ...branch_stn_ids].includes(stn_id)).length,\n            0\n        ) +\n        loopline.length -\n        bottom_factor -\n        left_and_right_factor * 2;\n    // interval for each station on the top side with branches\n    // note the interval of station for the top side will be smaller because of e = 0.1 in get_xshares_yshares_of_loop\n    const x_interval = (svg_width - ((svg_width * padding) / 100) * 2) / (1 + critical_path_length);\n    // split lines_xs for branches, used to shrink loop line's lines_xs\n    const line_xs_branches = [\n        (svg_width * padding) / 100 + (loop_branches.at(0) ?? []).length * x_interval,\n        svg_width * (1 - padding / 100) - (loop_branches.at(1) ?? []).length * x_interval,\n    ] as [number, number];\n    const xs_branches = {\n        ...Object.fromEntries(\n            (loop_branches.at(0) ?? []).map((stn, i) => [stn, (svg_width * padding) / 100 + i * x_interval])\n        ),\n        ...Object.fromEntries(\n            (loop_branches.at(1) ?? []).map((stn, i) => [stn, line_xs_branches[1] + (1 + i) * x_interval])\n        ),\n    };\n    return { loop_branches, line_xs_branches, xs_branches };\n};\n\nexport const LoopBranches = (props: {\n    loop_branches: string[][];\n    edges: [number, number, number, number];\n    xs: {\n        [k: string]: number;\n    };\n    ys: {\n        [k: string]: number;\n    };\n    canvas: CanvasType.RailMap | CanvasType.Indoor;\n}) => {\n    const { loop_branches, edges, xs, ys, canvas } = props;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM] = edges;\n\n    const { branches } = useRootSelector(store => store.helper);\n    const { current_stn_idx: current_stn_id, direction, coline } = useRootSelector(store => store.param);\n\n    const e = canvas === CanvasType.RailMap ? 30 : 0;\n    const branches_paths = [\n        `M ${X_LEFT},${Y_TOP} H ${Number(xs[loop_branches.at(0)?.at(0) ?? '']) - e}`,\n        `M ${X_RIGHT},${Y_TOP} H ${Number(xs[loop_branches.at(1)?.at(-1) ?? '']) + e}`,\n    ];\n\n    const loopline = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n    const branches_coline_color = Object.values(coline)\n        .filter(co => ![co.from, co.to].every(stn_id => loopline.includes(stn_id)))\n        .map(co => co.colors);\n\n    return (\n        <>\n            {loop_branches.map((loop_branch, i) => (\n                <React.Fragment key={loop_branch.at(0)}>\n                    {branches_coline_color\n                        // remove duplicate\n                        .filter((c, i, self) => i === self.findIndex(t => t.at(0)?.at(2) === c.at(0)?.at(2)))\n                        // generate marker with coline color\n                        .map(color => (\n                            <marker key={color[0][2]} id={`arrow_theme_${color[0][2]}`} refX={1} refY={0.5}>\n                                <path d=\"M0,1H2L1,0z\" fill={color[0][2]} />\n                            </marker>\n                        ))}\n                    <path\n                        stroke={branches_coline_color.at(i)?.at(0)?.at(2) ?? 'var(--rmg-theme-colour)'}\n                        strokeWidth={12}\n                        fill=\"none\"\n                        d={branches_paths[i]}\n                        markerEnd={\n                            canvas === CanvasType.RailMap &&\n                            ((direction === 'l' && i === 0) || (direction === 'r' && i === 1))\n                                ? branches_coline_color.at(i)\n                                    ? `url(#arrow_theme_${branches_coline_color[i][0][2]})`\n                                    : 'url(#arrow_theme)'\n                                : undefined\n                        }\n                    />\n                    {loop_branch\n                        .filter(stn_id => !['linestart', 'lineend'].includes(stn_id))\n                        .map(stn_id => (\n                            <React.Fragment key={stn_id}>\n                                {canvas === CanvasType.RailMap && (\n                                    <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                                        <StationSHMetro\n                                            stnId={stn_id}\n                                            stnState={current_stn_id === stn_id ? 0 : 1}\n                                            bank={0}\n                                            direction={direction}\n                                            color={branches_coline_color.at(i)?.at(0)?.at(2) as ColourHex | undefined}\n                                        />\n                                    </g>\n                                )}\n\n                                {canvas === CanvasType.Indoor && (\n                                    <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                                        <StationSHMetroIndoor\n                                            stnId={stn_id}\n                                            nameDirection={\n                                                loop_branches\n                                                    .filter(branch => branch.includes(stn_id))\n                                                    .map(branch =>\n                                                        branch.indexOf(stn_id) % 2 === 0 ? 'downward' : 'upward'\n                                                    )[0] as 'upward' | 'downward'\n                                            }\n                                            services={[Services.local]}\n                                            color={branches_coline_color.at(i)?.at(0)?.at(2) as ColourHex | undefined}\n                                        />\n                                    </g>\n                                )}\n                            </React.Fragment>\n                        ))}\n                </React.Fragment>\n            ))}\n        </>\n    );\n};\n","import React from 'react';\nimport { InterchangeInfo, Name, Facilities, ColourHex } from '../../../../constants/constants';\nimport { useRootSelector } from '../../../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    color?: ColourHex; // Control the station color if coline is in effect.\n    bank?: -1 | 0 | 1; // Loopline requires station element to be horizontal. Default to 0 (no bank to other side).\n    direction?: 'l' | 'r'; // Loopline requires station element to change direction. Default to current param.\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { stnId, stnState, color, bank: bank_, direction: direction_override } = props;\n    const { direction: direction_param, info_panel_type, stn_list, loop } = useRootSelector(store => store.param);\n    const stnInfo = stn_list[stnId];\n    const direction = direction_override ?? direction_param;\n\n    // shift station name if the line bifurcate here\n    // no shift for loop as there is no vertical line covering the station\n    const branchNameDX = loop\n        ? 0\n        : ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n          (direction === 'r' ? -1 : 1);\n\n    let stationIconStyle = '';\n    let stationIconColor: { [pos: string]: string } = {};\n    if (info_panel_type === 'sh2020') {\n        if (stnInfo.services.length === 3) stationIconStyle = 'stn_sh_2020_direct';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'stn_sh_2020_express';\n        else stationIconStyle = 'stn_sh_2020';\n        stationIconColor.fill = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    } else {\n        // param.info_panel_type === 'sh' or others (from other styles)\n        if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n        else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n            stationIconStyle = 'int2_sh';\n        else stationIconStyle = 'stn_sh';\n        stationIconColor.stroke = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    }\n\n    const bank = bank_ ?? 0;\n    const dx = (direction === 'l' ? 6 : -6) + branchNameDX + bank * 30;\n    const dy = (info_panel_type === 'sh2020' ? -20 : -6) + Math.abs(bank) * (info_panel_type === 'sh2020' ? 25 : 11);\n    const dr = bank ? 0 : direction === 'l' ? -45 : 45;\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                {...stationIconColor} // different styles use either `fill` or `stroke`\n                // sh and sh2020 have different headings of int_sh, so -1 | 1 is multiplied\n                transform={\n                    `translate(${bank * (info_panel_type === 'sh2020' ? 5 : 0)},0)` +\n                    `rotate(${bank * 90 * (info_panel_type === 'sh2020' ? 1 : -1)})`\n                }\n            />\n            <g transform={`translate(${dx},${dy})rotate(${dr})`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={stnState}\n                    direction={direction}\n                    facility={stnInfo.facility}\n                    bank={bank}\n                    oneLine={stnInfo.one_line}\n                    intPadding={stnInfo.int_padding}\n                />\n            </g>\n            {stnState === 0 ? <CurrentStationText /> : undefined}\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    facility: Facilities;\n    bank: -1 | 0 | 1;\n    oneLine: boolean;\n    intPadding: number;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, stnState, direction, facility, bank, oneLine, intPadding } = props;\n\n    // legacy ref to get the exact station name width\n    const stnNameEl = React.useRef<SVGGElement | null>(null);\n\n    // simplify the calculation times\n    const directionPolarity = direction === 'l' ? 1 : -1;\n\n    // main elements icon's dx will change if there is a facility icon or not\n    const mainDx = facility !== Facilities.none ? 30 : 0;\n\n    // interchange will have a line under the name, and should be stretched when placed horizontal in loop\n    const lineDx = bank ? -12 : 0;\n\n    const intEl = React.useRef<SVGGElement | null>(null);\n    const [intWidth, setIntWidth] = React.useState(0);\n    React.useEffect(() => setIntWidth(intEl.current?.getBBox().width ?? 0), [...JSON.stringify(infos)]);\n    const intDx = intPadding - intWidth;\n\n    return (\n        <>\n            {infos.flat().length > 0 && (\n                <>\n                    <line\n                        x1={(lineDx + mainDx) * directionPolarity}\n                        x2={intDx * directionPolarity}\n                        stroke={stnState === -1 ? 'gray' : 'black'}\n                        strokeWidth={0.5}\n                    />\n                    <IntBoxGroup\n                        ref={intEl}\n                        intInfos={infos}\n                        direction={direction}\n                        transform={`translate(${intDx * directionPolarity},-10.75)`}\n                    />\n                </>\n            )}\n\n            {facility !== Facilities.none && <use xlinkHref={'#' + facility} x={10 * directionPolarity} y={-30} />}\n\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${mainDx * directionPolarity},-14)`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={name}\n                    oneLine={oneLine}\n                    directionPolarity={directionPolarity}\n                    fill={stnState === -1 ? 'gray' : stnState === 0 ? 'red' : 'black'}\n                />\n\n                {/* deal out-of-station here as it is a y axis element. leave out-of-system in IntBoxGroup */}\n                {infos[1]?.length > 0 && (\n                    <g transform={`translate(${(intDx + intWidth / 2) * directionPolarity},-30)`}>\n                        <OSIText osiInfos={infos[1]} />\n                    </g>\n                )}\n\n                {/* deal out-of-system here as it's dx is fixed and has nothing to do with IntBoxGroup */}\n                {[...(infos[2] || [])].length > 0 && (\n                    <g transform={`translate(${(intPadding + 5) * directionPolarity},0)`}>\n                        <OSysIText osysiInfos={infos[2]} direction={props.direction} />\n                    </g>\n                )}\n            </g>\n        </>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (\n        props: { stnName: Name; oneLine: boolean; directionPolarity: 1 | -1 } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { stnName, oneLine, directionPolarity, ...others } = props;\n\n        const zhEl = React.useRef<SVGGElement | null>(null);\n        const [enDx, setEnDx] = React.useState(0);\n        React.useEffect(() => {\n            if (oneLine) setEnDx(zhEl.current!.getBBox().width + 5);\n            else setEnDx(0);\n        }, [...stnName, oneLine]);\n\n        const [ZH_HEIGHT, EN_HEIGHT] = [20, 8];\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            <g ref={zhEl}>\n                                {stnName[0].split('\\\\').map((txt, i, arr) => (\n                                    <text\n                                        key={i}\n                                        className=\"rmg-name__zh\"\n                                        dy={\n                                            (arr.length - 1 - i) * -ZH_HEIGHT +\n                                            (oneLine ? EN_HEIGHT : (stnName[1].split('\\\\').length - 1) * -EN_HEIGHT)\n                                        }\n                                    >\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                            <g fontSize={8} transform={`translate(${enDx * directionPolarity},0)`}>\n                                {stnName[1].split('\\\\').map((txt, i, arr) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={(arr.length - 2 - i) * -EN_HEIGHT + 2}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    [...stnName, oneLine, enDx, directionPolarity]\n                )}\n            </g>\n        );\n    }\n);\n\nconst CurrentStationText = () => {\n    const { stn_list } = useRootSelector(store => store.param);\n    const servicesPresent = new Set(\n        Object.values(stn_list)\n            .map(stn => stn.services)\n            .flat()\n    );\n    const dy = [-1, 35, 50, 75][servicesPresent.size];\n\n    return (\n        <g transform={`translate(0, ${dy})`}>\n            <text className=\"rmg-name__zh\" fill=\"red\" textAnchor=\"middle\">\n                本站\n            </text>\n        </g>\n    );\n};\n\nconst IntBoxGroup = React.forwardRef(\n    (\n        props: { intInfos: InterchangeInfo[][]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { intInfos, direction, ...others } = props;\n\n        // also known as non out-of-system transfers\n        const boxInfos = [\n            ...intInfos[0],\n            ...(intInfos[1] || []),\n            // some dirty tricks here as shmetro shows maglev icon even it is a out-of-system transfer\n            // and display a maglev icon is much easier in boxInfos than in OSysIText\n            ...(intInfos[2]?.filter(info => Boolean(info[4].match(/^磁(悬)*浮/))) || []),\n        ];\n\n        let dx = 0; // update in every boxInfos\n\n        return (\n            <g ref={ref} fontSize={14} textAnchor=\"middle\" {...others}>\n                {boxInfos.map((info, i) => {\n                    const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                    const isMaglev = Boolean(info[4].match(/^磁(悬)*浮/));\n\n                    if (props.direction === 'r') {\n                        dx -= (isLineNumber || isMaglev ? 20 : info[4].length * 14 + 12) + (i === 0 ? 0 : 5);\n                    }\n\n                    let el = <g />;\n                    if (isMaglev) {\n                        el = (\n                            <g transform={`translate(${dx},-16)scale(0.1428571429)`} key={i}>\n                                <IntBoxMaglev info={info} />\n                            </g>\n                        );\n                    } else if (isLineNumber) {\n                        el = (\n                            <g transform={`translate(${dx},0)`} key={i}>\n                                <IntBoxNumber info={info} />\n                            </g>\n                        );\n                    } else {\n                        el = (\n                            <g transform={`translate(${dx},0)`} key={i}>\n                                <IntBoxLetter info={info} />\n                            </g>\n                        );\n                    }\n\n                    if (props.direction === 'l') {\n                        dx += isLineNumber || isMaglev ? 20 + 5 : info[4].length * 14 + 12 + 5;\n                    }\n                    return el;\n                })}\n            </g>\n        );\n    }\n);\n\nconst IntBoxMaglev = React.memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_maglev\" fill={props.info[2]} stroke={props.info[2]} />\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxNumber = React.memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = React.memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station interchanges\n    const lineNames = props.osiInfos.map(info => info[4]).join('，');\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; direction: 'l' | 'r' }) => {\n    // get the all names from out of system transfers\n    const lineNames = props.osysiInfos.map(info => info[4]).join('，');\n    const lineNamesEn = props.osysiInfos.map(info => info[5]).join(', ');\n\n    return React.useMemo(\n        () => (\n            <g textAnchor={props.direction === 'l' ? 'start' : 'end'} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={3}>\n                    转乘{lineNames}\n                </text>\n                <text className=\"rmg-name__en\" dy={10} fontSize=\"75%\">\n                    To {lineNamesEn}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.direction]\n    );\n};\n"],"names":["StationSHMetro","props","stnId","nameDirection","services","color","stnInfo","useRootSelector","store","param","stn_list","transfer","info","stationIconStyle","length","dr","StationNameGElement","name","infos","xlinkHref","stroke","transform","className","writingMode","fontSize","dy","upward","downward","left","right","osi_dx","osi_dy","osysi_dx","osysi_dy","x1","x2","y1","y2","IntBoxGroup","intInfos","arrowDirection","StationName","stnName","fill","OSIText","osiInfos","OSysIText","osysiInfos","React","ref","others","split","nameENLn","dx","anchor","textAnchor","map","txt","i","array","intNameId","intInfo","reduce","lineNames","filter","match","replace","join","concat","lineNamesEn","trim","arrowLength","transfer_dy","arrow_dx","arrow_dy","arrow_dr","transfer_dx","transfer_anchor","id","strokeWidth","d","offset","stopColor","toString","get_loop_branches","branches","branch_stn_ids","svg_width","padding","left_and_right_factor","bottom_factor","loopline","stn_id","includes","loop_branches","slice","branch","critical_path_length","acc","cur","x_interval","line_xs_branches","at","xs_branches","Object","fromEntries","stn","LoopBranches","edges","xs","ys","canvas","X_LEFT","X_RIGHT","Y_TOP","helper","current_stn_id","current_stn_idx","direction","coline","e","CanvasType","branches_paths","Number","branches_coline_color","values","co","from","to","every","colors","loop_branch","c","self","findIndex","t","refX","refY","markerEnd","undefined","stnState","bank","indexOf","Services","bank_","direction_override","direction_param","info_panel_type","loop","branchNameDX","stationIconColor","Math","abs","facility","oneLine","one_line","intPadding","int_padding","CurrentStationText","stnNameEl","directionPolarity","mainDx","Facilities","lineDx","intEl","intWidth","setIntWidth","current","getBBox","width","JSON","stringify","intDx","flat","x","y","zhEl","enDx","setEnDx","arr","Set","size","boxInfos","Boolean","isLineNumber","isMaglev","el","IntBoxMaglev","IntBoxNumber","IntBoxLetter","prevProps","nextProps","dominantBaseline","textCount","height"],"sourceRoot":""}