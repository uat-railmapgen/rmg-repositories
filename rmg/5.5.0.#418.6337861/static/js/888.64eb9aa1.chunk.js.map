{"version":3,"file":"static/js/888.64eb9aa1.chunk.js","mappings":"gOAQe,SAASA,EAAUC,GAC9B,IAAQC,EAA4BD,EAA5BC,IAAKC,EAAuBF,EAAvBE,QAAYC,GAAzB,OAAoCH,EAApC,GAEA,OACI,+BAAGI,WAAW,SAASC,KAAMH,EAAUI,EAAAA,GAAAA,MAAmB,uBAA2BH,GAArF,eACI,iBAAMI,OAAQ,GAAIC,MAAO,GAAIC,GAAI,EAAGC,GAAI,GAAIL,KAAMH,EAAU,OAAS,6BACrE,iBAAMS,UAAU,eAAeC,SAAU,GAAIC,GAAI,GAAjD,SACKZ,KAEL,iBAAMU,UAAU,eAAeC,SAAU,GAAIC,GAAI,GAAjD,iCAGA,iBAAMF,UAAU,eAAeC,SAAU,IAAKC,GAAI,GAAlD,4BAKX,C,wFCmDD,UAlEmB,SAACb,GAChB,IAAMc,EAAe,SAAAC,GACjB,OAAQA,GACJ,IAAK,OACL,IAAK,UACL,IAAK,MACL,IAAK,OACD,OAAO,GACX,IAAK,MACL,IAAK,MACD,OAAO,GACX,IAAK,MACL,IAAK,MACL,IAAK,SACD,OAAO,GACX,QACI,OAAO,EAElB,CAjBoB,CAiBlBf,EAAMe,SAEHC,EAAiBC,EAAAA,SAAc,WACjC,OAAQjB,EAAMe,SACV,IAAK,MACD,OAAO,mBAAQG,IAAK,GAAIC,EAAG,GAAId,KAAK,QACxC,IAAK,OACL,IAAK,UACD,OAAO,oBAASa,IAAK,GAAIT,GAAI,GAAIW,GAAI,GAAIf,KAAK,WAClD,IAAK,MACD,OAAO,iBAAMK,GAAI,GAAIW,GAAI,GAAId,OAAQ,GAAIC,MAAO,GAAIH,KAAK,QAC7D,IAAK,MACD,OAAO,oBAASa,IAAK,GAAIT,GAAI,GAAIW,GAAI,GAAIf,KAAK,UAClD,IAAK,SACD,OAAO,oBAASa,IAAK,GAAIT,GAAI,GAAIW,GAAI,GAAIf,KAAK,WAClD,IAAK,MACD,OAAO,iBAAMK,GAAI,GAAIW,GAAI,GAAId,OAAQ,GAAIC,MAAO,GAAIH,KAAK,WAC7D,IAAK,MACD,OAAO,iBAAMK,GAAI,GAAIW,GAAI,GAAId,OAAQ,GAAIC,MAAO,IAAKH,KAAK,eAC9D,IAAK,OACD,OAAO,iBAAMK,GAAI,GAAIW,GAAI,GAAId,OAAQ,GAAIC,MAAO,GAAIH,KAAK,WAC7D,QACI,OAAO,wBAElB,GAAE,CAACL,EAAMe,UAIV,OACI,eAAGO,UAAS,sBAAmC,QAAlBtB,EAAMe,SAHtB,GAGoD,EAArD,KAAZ,WACI,iBACIQ,GAAG,WACHC,OAAK,UACA,WADA,UACuBV,EADvB,UAIT,cACIU,MAAO,CACHF,UAAW,mEAFnB,SAKKtB,EAAMyB,aAAeT,KAEL,IAApBhB,EAAM0B,YAAuB,SAACC,GAAD,UAAS3B,MAGlD,EAID,IAAM2B,EAAMV,EAAAA,MACR,SAACjB,GAAkB,IAAD,EAIR4B,EAAY,CAAC,OAAQ,UAAW,MAAO,QAAQC,SAAS7B,EAAMe,SAC9De,EAAS,SAACf,GACZ,OAAQA,GACJ,IAAK,MACL,IAAK,MACD,MAAO,OACX,IAAK,MACD,MAAO,OACX,IAAK,MACD,MAAO,OACX,IAAK,SACD,MAAO,OACX,QACI,MAAO,OAElB,CAdc,CAcZf,EAAMe,SAET,OACI,SAAC,UAAD,CACId,IAAKD,EAAM0B,UACXxB,QAAS0B,EACTJ,OAAK,eACA,WAAoBM,IADpB,qBAEU,sDAFV,SAGA,gBAAyB,0CAHzB,SAIA,gBAAyB,qDAJzB,IAQhB,IACD,SAACC,EAAWC,GAAZ,OAA0BD,EAAUhB,UAAYiB,EAAUjB,SAAWgB,EAAUL,YAAcM,EAAUN,SAAvG,G","sources":["svgs/gzmtr/psd-number.tsx","svgs/strip/strip-gzmtr.tsx"],"sourcesContent":["import React, { SVGProps } from 'react';\nimport { MonoColour } from '../../constants/constants';\n\ninterface PsdNumberProps extends SVGProps<SVGGElement> {\n    num: string;\n    inStrip?: boolean;\n}\n\nexport default function PsdNumber(props: PsdNumberProps) {\n    const { num, inStrip, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={inStrip ? MonoColour.black : 'var(--rmg-theme-fg)'} {...others}>\n            <rect height={40} width={40} rx={4} x={-20} fill={inStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n            <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                屏蔽门\n            </text>\n            <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                Screen Door\n            </text>\n        </g>\n    );\n}\n","import React from 'react';\nimport { PanelTypeGZMTR, PanelTypeShmetro } from '../../constants/constants';\nimport PsdNumber from '../gzmtr/psd-number';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <PsdNumber\n                num={props.isShowPSD as string}\n                inStrip={isInStrip}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            />\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n"],"names":["PsdNumber","props","num","inStrip","others","textAnchor","fill","MonoColour","height","width","rx","x","className","fontSize","dy","stripHeight","variant","indicatorLight","React","cy","r","ry","y","transform","id","style","isShowLight","isShowPSD","PSD","isInStrip","includes","psdDy","prevProps","nextProps"],"sourceRoot":""}