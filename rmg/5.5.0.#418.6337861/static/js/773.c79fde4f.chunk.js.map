{"version":3,"file":"static/js/773.c79fde4f.chunk.js","mappings":"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","sources":["svgs/mtr/station/interchange-station.tsx","svgs/mtr/station/interchange-tick.tsx","svgs/mtr/station/osi-station.tsx","svgs/mtr/station/station-icon.tsx","svgs/mtr/station/station-name/station-name-wrapper.tsx","svgs/mtr/station/station-name/station-name.tsx","svgs/mtr/station/station.tsx","svgs/mtr/utils.ts","svgs/railmap/main/main-mtr.tsx"],"sourcesContent":["import React from 'react';\nimport { Direction, InterchangeInfo, Position } from '../../../constants/constants';\nimport InterchangeTick from './interchange-tick';\nimport StationIcon from './station-icon';\n\ninterface InterchangeStationProps {\n    interchangeInfoList: InterchangeInfo[];\n    direction?: Direction;\n    isPassed?: boolean;\n    isReversed?: boolean;\n    repel?: Direction;\n}\n\nexport default function InterchangeStation(props: InterchangeStationProps) {\n    const { interchangeInfoList, direction, isPassed, isReversed, repel } = props;\n\n    const iconLength = interchangeInfoList.length <= 1 ? 0 : 18 * interchangeInfoList.length;\n\n    return (\n        <g>\n            {interchangeInfoList.length === 1 && (\n                <InterchangeTick\n                    interchangeInfo={interchangeInfoList[0]}\n                    isPassed={isPassed}\n                    position={isReversed ? Position.UP : Position.DOWN}\n                    repel={repel}\n                />\n            )}\n\n            {interchangeInfoList.length > 1 &&\n                interchangeInfoList.map((info, i) => (\n                    <g key={i} transform={`translate(0,${isReversed ? -18 * (i + 1) : 18 * (i + 1)})`}>\n                        <InterchangeTick\n                            interchangeInfo={info}\n                            isPassed={isPassed}\n                            position={direction === Direction.right ? Position.RIGHT : Position.LEFT}\n                        />\n                    </g>\n                ))}\n\n            <StationIcon length={iconLength} isPassed={isPassed} isReversed={isReversed} />\n        </g>\n    );\n}\n","import React, { memo } from 'react';\nimport { Direction, InterchangeInfo, Position } from '../../../constants/constants';\n\nconst getRotation = (position: Position): number => {\n    switch (position) {\n        case Position.UP:\n            return 180;\n        case Position.DOWN:\n            return 0;\n        case Position.LEFT:\n            return 90;\n        case Position.RIGHT:\n            return -90;\n    }\n};\n\ninterface InterchangeTickProps {\n    interchangeInfo: InterchangeInfo;\n    isPassed?: boolean;\n    position: Position;\n    repel?: Direction; // osi22\n}\n\nfunction InterchangeTick(props: InterchangeTickProps) {\n    const { interchangeInfo, isPassed, position, repel } = props;\n\n    const zhNameLines = interchangeInfo[4].split('\\\\').length;\n    const enNameLines = interchangeInfo[5].split('\\\\').length;\n\n    const textAnchor =\n        position === Position.LEFT || repel === Direction.left\n            ? 'end'\n            : position === Position.RIGHT || repel === Direction.right\n            ? 'start'\n            : 'middle';\n\n    const transforms = {\n        path: {\n            rotate: getRotation(position),\n        },\n        g: {\n            x:\n                (position === Position.LEFT ? -24 : position === Position.RIGHT ? 24 : 0) +\n                (repel === Direction.left ? -3 : repel === Direction.right ? 3 : 0),\n            y:\n                position === Position.UP\n                    ? -37 - 10 * (zhNameLines - 1) - 7 * (enNameLines - 1)\n                    : position === Position.DOWN\n                    ? 31\n                    : 6 - (20 + 10 * (zhNameLines - 1) + 7 * (enNameLines - 1) - 1) / 2,\n        },\n    };\n\n    return (\n        <>\n            <path\n                d=\"M0,0v17\"\n                strokeLinecap=\"round\"\n                stroke={isPassed ? 'var(--rmg-grey)' : interchangeInfo[2]}\n                strokeWidth={8}\n                transform={`rotate(${transforms.path.rotate})`}\n            />\n            <g\n                textAnchor={textAnchor}\n                transform={`translate(${transforms.g.x},${transforms.g.y})`}\n                fill={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n            >\n                {interchangeInfo[4].split('\\\\').map((txt, i) => (\n                    <text key={i} dy={10 * i} className=\"rmg-name__zh\" fontSize={10}>\n                        {txt}\n                    </text>\n                ))}\n                {interchangeInfo[5].split('\\\\').map((txt, j) => (\n                    <text key={zhNameLines + j} dy={zhNameLines * 10 - 1 + 7 * j} className=\"rmg-name__en\" fontSize={7}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        </>\n    );\n}\n\nexport default memo(\n    InterchangeTick,\n    (prevProps, nextProps) =>\n        prevProps.interchangeInfo.toString() === nextProps.interchangeInfo.toString() &&\n        prevProps.isPassed === nextProps.isPassed &&\n        prevProps.position === nextProps.position &&\n        prevProps.repel === nextProps.repel\n);\n","import React from 'react';\nimport { Direction, InterchangeInfo, Name, Position } from '../../../constants/constants';\nimport InterchangeTick from './interchange-tick';\nimport StationIcon from './station-icon';\n\ninterface OsiStationProps {\n    interchangeInfoList: InterchangeInfo[];\n    direction: Direction;\n    isPassed?: boolean;\n    isReversed?: boolean;\n    isTerminal?: boolean;\n    stationName?: Name;\n}\n\nexport default function OsiStation(props: OsiStationProps) {\n    const { interchangeInfoList, direction, isPassed, isReversed, isTerminal, stationName } = props;\n\n    const enNameLines = stationName?.[1]?.split('\\\\')?.length ?? 1;\n\n    const iconLength = 18 * (interchangeInfoList.length - 1);\n    const transforms = {\n        name: {\n            x: isTerminal\n                ? 0\n                : interchangeInfoList.length === 1\n                ? direction === Direction.left\n                    ? -13\n                    : 13\n                : direction === Direction.left\n                ? 13\n                : -13,\n            y: isTerminal\n                ? isReversed\n                    ? 19\n                    : -28\n                : -4 + (isReversed ? -9 : 9) * (interchangeInfoList.length - 1) - 5 * (enNameLines - 1),\n        },\n    };\n\n    return (\n        <g>\n            {interchangeInfoList.map((info, i, arr) => (\n                <g key={i} transform={`translate(0,${isReversed ? -18 * i : 18 * i})`}>\n                    <InterchangeTick\n                        interchangeInfo={info}\n                        isPassed={isPassed}\n                        position={\n                            arr.length === 1\n                                ? isReversed\n                                    ? Position.UP\n                                    : Position.DOWN\n                                : direction === Direction.right\n                                ? Position.RIGHT\n                                : Position.LEFT\n                        }\n                    />\n                </g>\n            ))}\n\n            <StationIcon length={iconLength} isPassed={isPassed} isReversed={isReversed} />\n\n            <g\n                textAnchor={transforms.name.x === 0 ? 'middle' : transforms.name.x > 0 ? 'start' : 'end'}\n                fill={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                transform={`translate(${transforms.name.x},${transforms.name.y})`}\n            >\n                <text className=\"rmg-name__zh\" fontSize={14}>\n                    {stationName?.[0]}\n                </text>\n                {stationName?.[1]?.split('\\\\')?.map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en\" fontSize={9} dy={12 + 10 * i}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        </g>\n    );\n}\n","import React from 'react';\n\ninterface StationIconProps {\n    length: number;\n    isPassed?: boolean;\n    isReversed?: boolean;\n}\n\nexport default function StationIcon(props: StationIconProps) {\n    const { length, isPassed, isReversed } = props;\n\n    return (\n        <path\n            d={`M-8,0 v${length} a8,8 0 0,0 16,0 v-${length} a8,8 0 0,0 -16,0Z`}\n            className=\"rmg-stn__mtr\"\n            stroke={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n            transform={`scale(1,${isReversed ? -1 : 1})`}\n        />\n    );\n}\n","import React, { SVGProps, useState } from 'react';\nimport { Direction, Facilities, Name, StationState } from '../../../../constants/constants';\nimport StationName from './station-name';\n\n/**\n * Top (in pixels) of station's Chinese name.\n */\nconst NAME_ZH_TOP = -10.8125;\n/**\n * Height (in pixels) of station's Chinese name.\n */\n// const NAME_ZH_HEIGHT = 21.625;\n/**\n * Top (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_TOP = -8;\n/**\n * Height (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_HEIGHT = 13.21875;\n/**\n * Difference of `y`s of station's Chinese name and English name (1 line). (This number should used as the `dy` of the English `text` element after Chinese `text` elements. )\n */\nconst NAME_ZH_EN_GAP = 17;\n/**\n * Height (in pixels) from the top of station's Chinese name to the bottom of English name (1 line).\n */\nexport const NAME_FULL_HEIGHT = -NAME_ZH_TOP + NAME_ZH_EN_GAP + NAME_EN_HEIGHT + NAME_EN_TOP;\n/**\n * Height (in pixels) of the gap between the centre of the line and the top of station's Chinese name.\n */\nconst STN_NAME_LINE_GAP = 14;\n\ninterface StationNameWrapperProps extends SVGProps<SVGGElement> {\n    stationName: Name;\n    stationState: StationState;\n    facility: Facilities;\n    lower?: boolean;\n    align?: Direction;\n}\n\nexport default function StationNameWrapper(props: StationNameWrapperProps) {\n    const { stationName, stationState, lower, align, facility, ...others } = props;\n\n    /**\n     * align = undefined: { x: -40, width: 80 }\n     * align = left: { x: 0, width: 80 }\n     * align = right: { x: -80, width: 80 }\n     */\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    const getFill = (state: StationState) => {\n        switch (state) {\n            case StationState.PASSED:\n                return 'var(--rmg-grey)';\n            case StationState.CURRENT:\n                return '#fff';\n            case StationState.FUTURE:\n                return 'var(--rmg-black)';\n        }\n    };\n\n    const nameEnRows = stationName[1].split('\\\\').length;\n    const transforms = {\n        g: {\n            x: align ? (align === Direction.right ? -3 : 3) : 0,\n            y:\n                (lower\n                    ? STN_NAME_LINE_GAP - NAME_ZH_TOP\n                    : -STN_NAME_LINE_GAP - NAME_ZH_TOP - NAME_FULL_HEIGHT - 11 * (nameEnRows - 1)) +\n                (align ? (lower ? 10 : -10) : 0),\n        },\n        rect: {\n            x:\n                bBox.x -\n                3 +\n                (facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? -3 - NAME_FULL_HEIGHT\n                        : 0\n                    : (NAME_FULL_HEIGHT + 5) / 2 - 3 - NAME_FULL_HEIGHT),\n            y: NAME_ZH_TOP - 1,\n            width: bBox.width + 6 + (facility === Facilities.none ? 0 : NAME_FULL_HEIGHT + 3),\n            height: NAME_FULL_HEIGHT + 2 + 11 * (nameEnRows - 1),\n        },\n        use: {\n            x: align\n                ? align === Direction.right\n                    ? -(NAME_FULL_HEIGHT + 2) / 2 - bBox.width - 3\n                    : (NAME_FULL_HEIGHT + 2) / 2 - 2\n                : -(bBox.width + 3) / 2,\n            y: NAME_ZH_TOP - 1 + 5.5 * (nameEnRows - 1),\n        },\n        StationName: {\n            x:\n                facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? 0\n                        : NAME_FULL_HEIGHT + 3\n                    : (NAME_FULL_HEIGHT + 5) / 2,\n            y: 0,\n        },\n    };\n\n    return (\n        <g {...others}>\n            <g fill={getFill(stationState)} transform={`translate(${transforms.g.x},${transforms.g.y})`}>\n                {stationState === StationState.CURRENT && (\n                    <rect\n                        x={transforms.rect.x}\n                        y={transforms.rect.y}\n                        width={transforms.rect.width}\n                        height={transforms.rect.height}\n                        fill=\"var(--rmg-black)\"\n                    />\n                )}\n\n                {facility !== Facilities.none && (\n                    <use\n                        xlinkHref={`#${facility}`}\n                        fill={stationState === StationState.PASSED ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                        x={transforms.use.x}\n                        y={transforms.use.y}\n                    />\n                )}\n\n                <g transform={`translate(${transforms.StationName.x},${transforms.StationName.y})`}>\n                    <StationName stnName={stationName} onUpdate={setBBox} align={align} />\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Direction, Name } from '../../../../constants/constants';\nimport { waitForFontReady } from '../../utils';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    align?: Direction;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate, align } = props;\n\n        const nameEl = useRef<SVGGElement>(null);\n\n        const updateNameBBox = () => {\n            onUpdate?.(nameEl.current!.getBBox());\n        };\n\n        useEffect(() => {\n            updateNameBBox();\n            waitForFontReady().then().catch(console.log).finally(updateNameBBox);\n        }, [stnName.toString(), align]);\n\n        const getTextAnchor = (direction?: Direction) => {\n            switch (direction) {\n                case Direction.left:\n                    return 'start';\n                case Direction.right:\n                    return 'end';\n                default:\n                    return 'middle';\n            }\n        };\n\n        const getDy = (index: number) => 17 + 11 * index;\n\n        return (\n            <g ref={nameEl} textAnchor={getTextAnchor(align)}>\n                <text className=\"rmg-name__zh rmg-name__mtr--station\">{stnName[0]}</text>\n\n                {stnName[1].split('\\\\').map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en rmg-name__mtr--station\" dy={getDy(i)}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.stnName.toString() === nextProps.stnName.toString() && prevProps.align === nextProps.align\n);\n","import React from 'react';\nimport { Direction, ShortDirection, StationState } from '../../../constants/constants';\nimport InterchangeStation from './interchange-station';\nimport { useRootSelector } from '../../../redux';\nimport OsiStation from './osi-station';\nimport StationNameWrapper from './station-name/station-name-wrapper';\n\ninterface StationProps {\n    stationId: string;\n    stationState: StationState;\n    isReversed: boolean; // reverse = up\n}\n\nexport default function Station(props: StationProps) {\n    const { stationId, stationState, isReversed } = props;\n\n    const {\n        name,\n        parents,\n        children,\n        transfer: { info, tick_direc, osi_names, paid_area },\n        facility,\n    } = useRootSelector(state => state.param.stn_list[stationId]);\n\n    const end: Direction | undefined = info[0]?.length\n        ? parents.includes('linestart')\n            ? Direction.left\n            : children.includes('lineend')\n            ? Direction.right\n            : undefined\n        : undefined;\n    const isRepelled = Boolean(info[1]?.length && !end);\n\n    const transforms = {\n        link: {\n            scaleX: end === Direction.left ? -1 : 1,\n            scaleY: isReversed ? -1 : 1,\n        },\n        osi: {\n            x: end ? (end === Direction.left ? -41 : 41) : 0,\n            y: end ? 0 : !isReversed ? 26 : -26,\n        },\n    };\n\n    return (\n        <g data-testid=\"station-icon-wrapper\">\n            {info[1]?.length && (\n                <path\n                    d={end && info[0]?.length ? 'M0,0H41' : 'M0,0V26'}\n                    strokeWidth={2.69}\n                    strokeDasharray={paid_area ? 0 : 2.5}\n                    stroke={stationState === StationState.PASSED ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                    transform={`scale(${transforms.link.scaleX},${transforms.link.scaleY})`}\n                />\n            )}\n\n            <InterchangeStation\n                interchangeInfoList={info[0]}\n                direction={tick_direc === ShortDirection.right ? Direction.right : Direction.left}\n                isPassed={stationState === StationState.PASSED}\n                isReversed={!end && info[1]?.length ? !isReversed : isReversed}\n                repel={\n                    isRepelled ? (tick_direc === ShortDirection.right ? Direction.right : Direction.left) : undefined\n                }\n            />\n\n            {info[1]?.length && (\n                <g transform={`translate(${transforms.osi.x},${transforms.osi.y})`}>\n                    <OsiStation\n                        interchangeInfoList={info[1]}\n                        direction={end ? end : tick_direc === ShortDirection.right ? Direction.right : Direction.left}\n                        stationName={osi_names[0]}\n                        isPassed={stationState === StationState.PASSED}\n                        isReversed={end ? !isReversed : isReversed}\n                        isTerminal={Boolean(end)}\n                    />\n                </g>\n            )}\n\n            <StationNameWrapper\n                stationName={name}\n                stationState={stationState}\n                facility={facility}\n                lower={isReversed}\n                align={\n                    info[0]?.length && isRepelled\n                        ? tick_direc === ShortDirection.left\n                            ? Direction.left\n                            : Direction.right\n                        : undefined\n                }\n            />\n        </g>\n    );\n}\n","import { waitForMs } from '../../utils';\n\nexport const waitForFontReady = async () => {\n    let retryAttempt = 3;\n\n    while (retryAttempt--) {\n        // #274 ready font fact set may not contain GenYoMin when first resolved\n        const fontFaceSet = await document.fonts.ready;\n        const it = fontFaceSet.values();\n        while (true) {\n            const next = it.next();\n            if (next.done) {\n                break;\n            }\n\n            if (next.value.family === 'GenYoMin TW') {\n                return;\n            }\n        }\n\n        console.log('GenYoMin is NOT ready. Retry attempts remaining: ' + retryAttempt + ' ...');\n        await waitForMs(500);\n    }\n\n    throw new Error('Failed to load GenYoMin after 3 attempts');\n};\n","import React, { useMemo } from 'react';\nimport { adjacencyList, criticalPathMethod, getStnState, getXShareMTR } from '../methods/share';\nimport { leftWideFactor, rightWideFactor, StationsMTR } from '../methods/mtr';\nimport { CanvasType, RMGParam } from '../../../constants/constants';\nimport { useRootSelector } from '../../../redux';\nimport Station from '../../mtr/station/station';\nimport { getStationYShare } from '../../mtr/line-diagram-utils';\n\nconst getNamePos = (stnId: string, branches: string[][], { isStagger, isFlip }: RMGParam['namePosMTR']) => {\n    if (!isStagger) return isFlip;\n    let res: number;\n    if (branches[0].includes(stnId)) {\n        res = branches[0].indexOf(stnId) % 2;\n    } else {\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        res = (branches[0].indexOf(branchOfStn[0]) + branchOfStn.indexOf(stnId) + 1) % 2;\n    }\n    return res === 0 ? isFlip : !isFlip;\n};\n\nconst MainMTR = () => {\n    const { branches, routes, depsStr: deps } = useRootSelector(store => store.helper);\n\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgH,\n        y_pc: yPercentage,\n        padding: paddingPercentage,\n        branchSpacingPct,\n        direction,\n        namePosMTR: namePosition,\n        current_stn_idx: currentStationIndex,\n        stn_list: stationList,\n    } = useRootSelector(store => store.param);\n\n    const adjMat = adjacencyList(stationList, leftWideFactor, rightWideFactor);\n\n    const criticalPath = useMemo(\n        () => criticalPathMethod('linestart', 'lineend', adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n    const realCP = useMemo(\n        () => criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(stationList).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100,\n        svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const ys = useMemo(\n        () =>\n            Object.keys(stationList).reduce<Record<string, number>>(\n                (acc, cur) => ({\n                    ...acc,\n                    [cur]: (getStationYShare(cur, branches, stationList) * branchSpacingPct * svgH) / 200,\n                }),\n                {}\n            ),\n        [deps, branchSpacingPct, svgH]\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(currentStationIndex, routes, direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const namePoss = Object.keys(stationList).reduce<{ [stnId: string]: boolean }>(\n        (acc, id) => ({ ...acc, [id]: getNamePos(id, branches, namePosition) }),\n        {}\n    );\n\n    const linePaths = StationsMTR.drawLine(\n        branches,\n        stnStates,\n        stationList,\n        lineXs,\n        xs,\n        ys,\n        (branchSpacingPct * svgH) / 200,\n        criticalPath\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: yPercentage,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Lines paths={linePaths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} namePoss={namePoss} />\n        </g>\n    );\n};\n\nexport default MainMTR;\n\nconst Lines = React.memo(\n    (props: { paths: { main: string[]; pass: string[]; sidingMain: string[]; sidingPass: string[] } }) => {\n        return (\n            <g fill=\"none\" strokeWidth={9.68}>\n                <g stroke=\"var(--rmg-grey)\">\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                    {props.paths.sidingPass.map((path, i) => (\n                        <path key={i} d={path} strokeDasharray={path.match(/a/g)?.length === 4 ? '10 4' : undefined} />\n                    ))}\n                </g>\n\n                <g stroke=\"var(--rmg-theme-colour)\">\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                    {props.paths.sidingMain.map((path, i) => (\n                        <path key={i} d={path} strokeDasharray={path.match(/a/g)?.length === 4 ? '10 4' : undefined} />\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n    namePoss: { [stnId: string]: boolean };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates, namePoss } = props;\n\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(stationList)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${xs[stnId]}px,${ys[stnId]}px)`,\n                        }}\n                    >\n                        <Station stationId={stnId} stationState={stnStates[stnId]} isReversed={namePoss[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n"],"names":["InterchangeStation","props","interchangeInfoList","direction","isPassed","isReversed","repel","iconLength","length","interchangeInfo","position","Position","map","info","i","transform","Direction","getRotation","InterchangeTick","zhNameLines","split","enNameLines","textAnchor","transforms","path","rotate","g","x","y","d","strokeLinecap","stroke","strokeWidth","fill","txt","dy","className","fontSize","j","memo","prevProps","nextProps","toString","OsiStation","isTerminal","stationName","name","arr","StationIcon","NAME_FULL_HEIGHT","StationNameWrapper","stationState","lower","align","facility","others","useState","width","bBox","setBBox","nameEnRows","STN_NAME_LINE_GAP","rect","Facilities","NAME_ZH_TOP","height","use","StationName","state","StationState","getFill","xlinkHref","stnName","onUpdate","nameEl","useRef","updateNameBBox","current","getBBox","useEffect","waitForFontReady","then","catch","console","log","finally","ref","getTextAnchor","index","Station","stationId","useRootSelector","param","stn_list","parents","children","transfer","tick_direc","osi_names","paid_area","end","includes","undefined","isRepelled","Boolean","link","scaleX","scaleY","osi","strokeDasharray","ShortDirection","retryAttempt","document","fonts","ready","fontFaceSet","it","values","next","done","value","family","waitForMs","Error","store","helper","branches","routes","deps","depsStr","svgWidths","svgWidth","svgH","svg_height","yPercentage","y_pc","paddingPercentage","padding","branchSpacingPct","namePosition","namePosMTR","currentStationIndex","current_stn_idx","stationList","adjMat","adjacencyList","leftWideFactor","rightWideFactor","criticalPath","useMemo","criticalPathMethod","JSON","stringify","realCP","nodes","slice","xShares","Object","keys","reduce","acc","cur","getXShareMTR","lineXs","CanvasType","xs","len","ys","getStationYShare","stnStates","getStnState","namePoss","id","stnId","res","isStagger","isFlip","indexOf","branchOfStn","filter","branch","getNamePos","linePaths","StationsMTR","style","Lines","paths","StationGroup","React","pass","sidingPass","match","main","sidingMain"],"sourceRoot":""}