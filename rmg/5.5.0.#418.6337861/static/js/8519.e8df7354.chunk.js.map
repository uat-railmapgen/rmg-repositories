{"version":3,"file":"static/js/8519.e8df7354.chunk.js","mappings":"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","sources":["svgs/gzmtr/line-icon/interchange-box.tsx","svgs/gzmtr/line-icon/line-icon-type2.tsx","svgs/gzmtr/line-icon/line-icon.tsx","svgs/gzmtr/station-icon/station-icon.tsx","svgs/gzmtr/station-icon/station-number.tsx","svgs/gzmtr/station-name/express-tag.tsx","svgs/gzmtr/station-name/station-name-wrapper.tsx","svgs/gzmtr/station-name/station-name.tsx","svgs/gzmtr/station-name/station-secondary-name.tsx","svgs/railmap/main/main-gzmtr.tsx","svgs/railmap/main/station/station-gzmtr.tsx","svgs/railmap/methods/share.ts","../javascript/esm|/home/runner/work/rmg/rmg/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import React, { SVGProps } from 'react';\n\nexport default function InterchangeBox(props: SVGProps<SVGRectElement>) {\n    return <rect x={-22.5} height={24} width={45} rx={4.5} {...props} />;\n}\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\nimport { MAX_WIDTH } from './line-icon';\n\ninterface LineIconType2Props {\n    lineName: Name;\n    commonPart: string;\n}\n\nexport default memo(\n    function LineIconType2(props: LineIconType2Props) {\n        const { lineName, commonPart } = props;\n\n        const wrapperEl = useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = useState({ x: 0, height: 0, width: 0 } as DOMRect);\n        useEffect(() => {\n            wrapperEl.current && setBBox(wrapperEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const scale = MAX_WIDTH / Math.max(MAX_WIDTH, bBox.width);\n        const dx = (-bBox.x - bBox.width / 2) * scale;\n        const dy = (bBox.height * (1 - scale) * 1.2) / 2;\n\n        return (\n            <g ref={wrapperEl} transform={`translate(${dx},${dy})scale(${scale})`}>\n                <text className=\"rmg-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                    {commonPart}\n                    <tspan className=\"rmg-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                        {lineName[0].slice(commonPart.length).trim()}\n                    </tspan>\n                    <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                        {lineName[1].slice(commonPart.length).trim()}\n                    </tspan>\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.lineName.toString() === nextProps.lineName.toString()\n);\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { ColourHex, MonoColour, Name } from '../../../constants/constants';\nimport LineIconType2 from './line-icon-type2';\nimport InterchangeBox from './interchange-box';\n\nexport const MAX_WIDTH = 42;\n\ninterface LineIconProps {\n    lineName: Name;\n    foregroundColour: MonoColour;\n    backgroundColour: ColourHex;\n    passed?: boolean;\n}\n\nexport default memo(\n    function LineIcon(props: LineIconProps) {\n        const { lineName, foregroundColour, backgroundColour, passed } = props;\n\n        const [type, commonPart] = getType(lineName);\n\n        const nameZhEl = useRef<SVGTextElement | null>(null);\n        const nameEnEl = useRef<SVGTextElement | null>(null);\n\n        const [nameZhBBox, setNameZhBBox] = useState({ width: 0 } as DOMRect);\n        const [nameEnBBox, setNameEnBBox] = useState({ width: 0 } as DOMRect);\n\n        useEffect(() => {\n            nameZhEl.current && setNameZhBBox(nameZhEl.current.getBBox());\n            nameEnEl.current && setNameEnBBox(nameEnEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const nameZhScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameZhBBox.width);\n        const nameEnScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameEnBBox.width);\n\n        return (\n            <g textAnchor=\"middle\" fill={passed ? MonoColour.white : foregroundColour}>\n                <InterchangeBox fill={passed ? '#aaa' : backgroundColour} />\n                {type === 2 ? (\n                    <LineIconType2 lineName={lineName} commonPart={commonPart} />\n                ) : (\n                    <>\n                        <text\n                            ref={nameZhEl}\n                            y={getYByType(type, 'zh', nameZhScale)}\n                            className=\"rmg-name__zh\"\n                            fontSize={12}\n                            transform={`scale(${nameZhScale})`}\n                        >\n                            {type === 1 ? (\n                                <>\n                                    <tspan fontSize={16} dy={0.7} className=\"rmg-name__zh\">\n                                        {commonPart}\n                                    </tspan>\n                                    <tspan dy={-0.7} className=\"rmg-name__zh\">\n                                        {lineName[0].slice(commonPart.length)}\n                                    </tspan>\n                                </>\n                            ) : (\n                                lineName[0]\n                            )}\n                        </text>\n                        <text\n                            ref={nameEnEl}\n                            y={getYByType(type, 'en', nameEnScale)}\n                            className=\"rmg-name__en\"\n                            fontSize={8}\n                            transform={`scale(${nameEnScale})`}\n                        >\n                            {lineName[1]}\n                        </text>\n                    </>\n                )}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.lineName.toString() === nextProps.lineName.toString() &&\n        prevProps.foregroundColour === nextProps.foregroundColour &&\n        prevProps.backgroundColour === nextProps.backgroundColour &&\n        prevProps.passed === nextProps.passed\n);\n\n/**\n * type 1: 2号线\n * type 2: APM线\n * type 3: 佛山2号线\n */\nconst getType = (name: Name): [1 | 2 | 3, string] => {\n    const matchResultForType1 = name[0].match(/^(\\d+)\\D+$/);\n    if (matchResultForType1) return [1, matchResultForType1[1]];\n\n    const matchResultForType2 = name.map(text => text.match(/^([\\w\\d]+).+$/));\n    if (matchResultForType2[0] && matchResultForType2[1] && matchResultForType2[0][1] === matchResultForType2[1][1]) {\n        return [2, matchResultForType2[0][1]];\n    }\n\n    return [3, ''];\n};\n\nconst getYByType = (type: ReturnType<typeof getType>[0], field: 'zh' | 'en', scale: number) => {\n    switch (type) {\n        case 1:\n            return (field === 'zh' ? 7.3 : 19.5) * (1 + 1 - scale);\n        case 2:\n            return 0;\n        case 3:\n            if (field === 'zh') {\n                return 8 * (2 - scale);\n            } else {\n                return 19.5 + 19.5 * (19.5 / 8) * (1 - scale) - (scale === 1 ? 0 : 5.5);\n            }\n    }\n};\n","import React, { memo } from 'react';\n\ninterface StationIconProps {\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default memo(\n    function StationIcon(props: StationIconProps) {\n        const { passed, large } = props;\n\n        const pathD = large\n            ? 'M0,12.95 V-12.95 H-12.95 a12.95,12.95 0 0,0 0,25.9 h25.9 a12.95,12.95 0 0,0 0,-25.9 H0'\n            : 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\n\n        return <path d={pathD} fill=\"#fff\" strokeWidth={2} stroke={passed ? '#aaa' : 'var(--rmg-theme-colour)'} />;\n    },\n    (prevProps, nextProps) => prevProps.passed === nextProps.passed && prevProps.large === nextProps.large\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport StationIcon from './station-icon';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, passed, large, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g {...others}>\n            <StationIcon passed={passed} large={large} />\n            <g\n                textAnchor=\"middle\"\n                fontSize={13.5}\n                transform={large ? 'scale(1.4)' : ''}\n                fill={passed ? '#aaa' : '#000'}\n            >\n                <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                    <text ref={lineNumEl} className=\"rmg-name__zh\">\n                        {lineNum}\n                    </text>\n                </g>\n                <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                    <text ref={stnNumEl} className=\"rmg-name__zh\">\n                        {stnNum}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React, { SVGProps } from 'react';\n\ninterface ExpressTagProps extends SVGProps<SVGGElement> {\n    passed?: boolean;\n}\n\nexport default function ExpressTag(props: ExpressTagProps) {\n    const { passed, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={passed ? '#aaa' : 'var(--rmg-theme-colour)'} {...others}>\n            <text className=\"rmg-name__zh\" fontSize={13}>\n                快车停靠站\n            </text>\n            <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                Express Station\n            </text>\n        </g>\n    );\n}\n","import React, { useState } from 'react';\nimport { Name, StationState } from '../../../constants/constants';\nimport StationName from './station-name';\nimport StationSecondaryName from './station-secondary-name';\nimport ExpressTag from './express-tag';\n\ninterface StationNameWrapperProps {\n    primaryName: Name;\n    secondaryName?: Name;\n    stationState: StationState;\n    flipped?: boolean;\n    express?: boolean;\n}\n\nexport default function StationNameWrapper(props: StationNameWrapperProps) {\n    const { primaryName, secondaryName, stationState, flipped, express } = props;\n\n    const [primaryBBox, setPrimaryBBox] = useState({ width: 0 } as SVGRect);\n    const [secondaryBBox, setSecondaryBBox] = useState({ x: 0, width: -20 } as SVGRect);\n\n    const getFill = (state: StationState) => {\n        switch (state) {\n            case StationState.PASSED:\n                return '#aaa';\n            case StationState.CURRENT:\n                return '#f00';\n            case StationState.FUTURE:\n                return '#000';\n        }\n    };\n\n    const primaryNameEnRows = primaryName[1].split('\\\\').length;\n    const transforms = {\n        g: {\n            x: 0,\n            y: flipped ? 17.5 : -20 - primaryNameEnRows * 14 * Math.cos(-45),\n        },\n        StationSecondaryName: {\n            x: (primaryBBox.width + secondaryBBox.width / 2 + 10) * (flipped ? -1 : 1),\n            y: 2 + 5 * (primaryNameEnRows - 1),\n        },\n        ExpressTag: {\n            x: (primaryBBox.width + secondaryBBox.width + 20 + 35) * (flipped ? -1 : 1),\n            y: 2 + 5 * (primaryNameEnRows - 1),\n        },\n    };\n\n    return (\n        <g\n            textAnchor={flipped ? 'end' : 'start'}\n            fill={getFill(stationState)}\n            transform={`translate(${transforms.g.x},${transforms.g.y})rotate(-45)`}\n        >\n            <StationName stnName={primaryName} onUpdate={setPrimaryBBox} />\n\n            {secondaryName && (\n                <StationSecondaryName\n                    stnName={secondaryName}\n                    onUpdate={setSecondaryBBox}\n                    passed={stationState === StationState.PASSED}\n                    transform={`translate(${transforms.StationSecondaryName.x},${transforms.StationSecondaryName.y})`}\n                />\n            )}\n\n            {express && (\n                <ExpressTag\n                    passed={stationState === StationState.PASSED}\n                    transform={`translate(${transforms.ExpressTag.x},${transforms.ExpressTag.y})`}\n                />\n            )}\n        </g>\n    );\n}\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate } = props;\n\n        const nameEl = useRef<SVGGElement | null>(null);\n\n        useEffect(() => {\n            onUpdate && onUpdate(nameEl.current!.getBBox());\n        }, [stnName.toString()]);\n\n        return (\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {stnName[0]}\n                </text>\n                <g fontSize={10.5}>\n                    {stnName[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={16 + i * 11}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.stnName.toString() === nextProps.stnName.toString()\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationSecondaryNameProps extends SVGProps<SVGGElement> {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    passed?: boolean;\n}\n\nexport default function StationSecondaryName(props: StationSecondaryNameProps) {\n    const { stnName, onUpdate, passed, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    useEffect(() => {\n        const nextBBox = nameEl.current!.getBBox();\n        setBBox(nextBBox);\n        onUpdate && onUpdate(nextBBox);\n    }, [stnName.toString()]);\n\n    return (\n        <g fill={passed ? '#aaa' : '#000'} {...others}>\n            <g transform=\"translate(0,3)\" fontSize={18}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={13}>\n                    {stnName[0]}\n                </text>\n                <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                    {stnName[1]}\n                </text>\n            </g>\n        </g>\n    );\n}\n","import React, { useMemo } from 'react';\nimport StationGZMTR from './station/station-gzmtr';\nimport { adjacencyList, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport { CanvasType, ColourHex, MonoColour, ShortDirection, StationDict } from '../../../constants/constants';\nimport { useRootSelector } from '../../../redux';\nimport LineIcon from '../../gzmtr/line-icon/line-icon';\n\nconst wideFactor = (stnList: StationDict, stnId: string) =>\n    stnList[stnId].parents.length === 2 || stnList[stnId].children.length === 2 ? 0.25 : 0;\n\nconst getXShare = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]): number => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        if (branchOfStn.toString() === branches[0].toString()) {\n            // station on main line, expand to fit\n            let lens = [];\n            if (!leftOpenJaw && !rightOpenJaw) {\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else if (leftOpenJaw) {\n                lens[0] = 0;\n                lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n                lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else {\n                // right open jaw\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n            }\n            return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n        } else {\n            if (!leftOpenJaw && !rightOpenJaw) {\n                let lens = [];\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n                return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n            } else if (leftOpenJaw) {\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len -\n                    criticalPathMethod(stnId, partSink, adjMat).len\n                );\n            } else {\n                // right open jaw\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len +\n                    criticalPathMethod(partSource, stnId, adjMat).len\n                );\n            }\n        }\n    }\n};\n\nconst MainGZMTR = () => {\n    const { branches, routes, depsStr: deps } = useRootSelector(store => store.helper);\n\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgH,\n        y_pc: yPercentage,\n        padding: paddingPercentage,\n        branchSpacingPct,\n        direction,\n        line_name: lineName,\n        current_stn_idx: currentStationIndex,\n        stn_list: stationList,\n    } = useRootSelector(store => store.param);\n\n    const adjMat = adjacencyList(stationList, wideFactor, wideFactor);\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(stationList).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShare(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const lineXs: [number, number] =\n        direction === ShortDirection.right\n            ? [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100 + 65,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 20,\n              ]\n            : [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 65,\n              ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(stationList).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    let branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: stationList[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -2 : 2 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: (-yShares[cur] * branchSpacingPct * svgH) / 200 }),\n        {} as typeof yShares\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(currentStationIndex, routes, direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const linePaths = branches\n        .map(branch => drawLine(branch, stnStates))\n        .reduce(\n            (acc, cur) => {\n                acc.main.push(cur.main);\n                acc.pass.push(cur.pass);\n                return acc;\n            },\n            { main: [], pass: [] } as { main: string[][]; pass: string[][] }\n        );\n\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, xs, ys)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: yPercentage,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <g\n                id=\"line_name\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.right ? `${lineXs[0] - 65}px` : `${lineXs[1] + 65}px`,\n                }}\n            >\n                <LineIcon\n                    lineName={lineName}\n                    foregroundColour={'var(--rmg-theme-fg)' as MonoColour}\n                    backgroundColour={'var(--rmg-theme-colour)' as ColourHex}\n                />\n            </g>\n        </g>\n    );\n};\n\nexport default MainGZMTR;\n\nconst Line = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => (\n        <g fill=\"none\" strokeWidth={4}>\n            <g stroke=\"#aaa\" strokeDasharray={4}>\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n            <g stroke=\"var(--rmg-theme-colour)\">\n                {props.paths.main.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n        </g>\n    ),\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\nconst _linePath = (stnIds: string[], realXs: { [stnId: string]: number }, realYs: { [stnId: string]: number }) => {\n    let prevY: number;\n    var path = [] as string[];\n\n    stnIds.forEach(stnId => {\n        let x = realXs[stnId];\n        let y = realYs[stnId];\n        if (!prevY && prevY !== 0) {\n            prevY = y;\n            path.push(`M ${x},${y}`);\n            return;\n        }\n        if (y === 0) {\n            if (y < prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,0 40,-40', `V ${y}`);\n            if (y > prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,1 40,40', `V ${y}`);\n        } else {\n            if (y < prevY) path.push(`V ${y + 40}`, 'a 40,40 0 0,1 40,-40', `H ${x}`);\n            if (y > prevY) path.push(`V ${y - 40}`, 'a 40,40 0 0,0 40,40', `H ${x}`);\n        }\n        path.push(`H ${x}`);\n        prevY = y;\n    });\n\n    // simplify path\n    return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates } = props;\n\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(stationList)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${xs[stnId]}px,${ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationGZMTR stnId={stnId} stnState={stnStates[stnId]} stnY={ys[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import React from 'react';\nimport StationNumber from '../../../gzmtr/station-icon/station-number';\nimport { InterchangeInfo, Services } from '../../../../constants/constants';\nimport { useRootSelector } from '../../../../redux';\nimport LineIcon from '../../../gzmtr/line-icon/line-icon';\nimport StationNameWrapper from '../../../gzmtr/station-name/station-name-wrapper';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    stnY: number;\n}\n\nconst StationGZMTR = (props: Props) => {\n    const { stnId, stnState, stnY } = props;\n\n    const theme = useRootSelector(store => store.param.theme);\n    const lineName = useRootSelector(store => store.param.line_name);\n    const lineNumber = useRootSelector(store => store.param.line_num);\n    const stnInfo = useRootSelector(store => store.param.stn_list[stnId]);\n\n    const isNameShift = stnInfo.parents.length === 2 || stnInfo.children.length === 2;\n    const tickRotation =\n        stnY > 0\n            ? 180\n            : stnInfo.parents.indexOf(stnInfo.branch.left[1] || '') === 1 ||\n              stnInfo.children.indexOf(stnInfo.branch.right[1] || '') === 1\n            ? 180\n            : 0;\n    const nameENLns = stnInfo.name[1].split('\\\\').length;\n    const nameDX = isNameShift\n        ? tickRotation === 180\n            ? 16 + (nameENLns - 1) * 12 * Math.cos(-45)\n            : -9\n        : tickRotation === 180\n        ? -6\n        : (25 + (nameENLns - 1) * 15) * Math.cos(-45);\n\n    return (\n        <>\n            <IntGroup\n                intInfos={\n                    isNameShift\n                        ? (\n                              [\n                                  [theme[0], theme[1], 'var(--rmg-theme-colour)', 'var(--rmg-theme-fg)', ...lineName],\n                              ] as any[] as InterchangeInfo[]\n                          ).concat(stnInfo.transfer.info[0])\n                        : stnInfo.transfer.info[0]\n                }\n                stnState={stnState}\n                tickRotation={tickRotation}\n            />\n            <StationNumber lineNum={lineNumber} stnNum={stnInfo.num} passed={stnState === -1} />\n            <g transform={`translate(${-nameDX},0)`}>\n                <StationNameWrapper\n                    primaryName={stnInfo.name}\n                    secondaryName={stnInfo.secondaryName || undefined}\n                    stationState={stnState}\n                    flipped={tickRotation === 180}\n                    express={stnInfo.services.includes(Services.express)}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationGZMTR;\n\ninterface IntGroupProps {\n    intInfos: InterchangeInfo[];\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n}\n\nconst IntGroup = (props: IntGroupProps) => (\n    <>\n        <IntTicks strokeWidth={4} {...props} />\n        <IntBoxs transform={`translate(0,${props.tickRotation === 180 ? -47 : 23})`} {...props} />\n    </>\n);\n\nconst IntTicks = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, stnState, tickRotation, ...others } = props;\n\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => (\n                <use\n                    key={i}\n                    xlinkHref=\"#inttick\"\n                    stroke={stnState === -1 ? '#aaa' : info[2]}\n                    transform={`translate(${-2 * (intInfos.length - 1) + 4 * i},0)rotate(${\n                        tickRotation === 180 ? 180 : 0\n                    })`}\n                />\n            ))}\n        </g>\n    );\n};\n\nconst IntBoxs = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, tickRotation, stnState, ...other } = props;\n\n    return (\n        <g {...other}>\n            {intInfos.map((info, i) => (\n                <g key={i} transform={`translate(0,${i * 28 * (tickRotation === 180 ? -1 : 1)})`}>\n                    <LineIcon\n                        lineName={[info[4], info[5]]}\n                        foregroundColour={info[3]}\n                        backgroundColour={info[2]}\n                        passed={stnState === -1}\n                    />\n                </g>\n            ))}\n        </g>\n    );\n};\n","import { ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n}\n\nexport const drawLine = (branch: string[], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n    let lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n    let linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n    if (lineMainStns.length === 1) {\n        linePassStns = branch;\n    }\n\n    if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n        // if two set disjoint\n        if (linePassStns[0] === branch[0]) {\n            // -1 -1 1 1\n            linePassStns.push(lineMainStns[0]);\n        } else if (\n            lineMainStns[0] === branch[0] &&\n            lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n            linePassStns.length\n        ) {\n            linePassStns = branch;\n            lineMainStns = [];\n        } else {\n            // 1 1 -1 -1\n            linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n        }\n    }\n\n    return {\n        main: lineMainStns,\n        pass: linePassStns,\n    };\n};\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["InterchangeBox","props","x","height","width","rx","memo","lineName","commonPart","wrapperEl","useRef","useState","bBox","setBBox","useEffect","current","getBBox","toString","scale","MAX_WIDTH","Math","max","dx","dy","ref","transform","className","fontSize","y","textAnchor","slice","length","trim","prevProps","nextProps","foregroundColour","backgroundColour","passed","getType","type","nameZhEl","nameEnEl","nameZhBBox","setNameZhBBox","nameEnBBox","setNameEnBBox","nameZhScale","nameEnScale","fill","MonoColour","getYByType","name","matchResultForType1","match","matchResultForType2","map","text","field","pathD","large","d","strokeWidth","stroke","StationNumber","lineNum","stnNum","others","lineNumEl","stnNumEl","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","lineNumScale","stnNumScale","ExpressTag","StationNameWrapper","primaryName","secondaryName","stationState","flipped","express","primaryBBox","setPrimaryBBox","secondaryBBox","setSecondaryBBox","primaryNameEnRows","split","transforms","g","cos","StationSecondaryName","state","StationState","getFill","stnName","onUpdate","nameEl","txt","i","nextBBox","wideFactor","stnList","stnId","parents","children","useRootSelector","store","helper","branches","routes","deps","depsStr","param","svgWidths","svgWidth","svgH","svg_height","yPercentage","y_pc","paddingPercentage","padding","branchSpacingPct","direction","line_name","currentStationIndex","current_stn_idx","stationList","stn_list","adjMat","adjacencyList","xShares","useMemo","console","log","Object","keys","reduce","acc","cur","criticalPath","criticalPathMethod","nodes","includes","len","branchOfStn","filter","branch","partSource","indexOf","partSink","leftOpenJaw","rightOpenJaw","lens","getXShare","JSON","stringify","realCP","lineXs","ShortDirection","CanvasType","xs","yShares","ys","stnStates","getStnState","linePaths","drawLine","main","push","pass","paths","stns","_linePath","id","style","Line","StationGroup","React","strokeDasharray","path","stnIds","realXs","realYs","prevY","forEach","join","replace","stnState","stnY","theme","lineNumber","line_num","stnInfo","isNameShift","tickRotation","left","right","nameENLns","nameDX","IntGroup","intInfos","concat","transfer","info","num","undefined","services","Services","IntTicks","IntBoxs","xlinkHref","other","leftW","rightW","a","c","from","to","allLengths","criticalPaths","child","cp","unshift","maxLength","getXShareMTR","currentId","Set","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","namePoss","leftWideFactor","rightWideFactor","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","stnPred","res","getYShare","e","prevId","prevX","stnDX","stnExtraH","stnSpareH","warn","stations","lineMainStns","linePassStns","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","F","s","n","done","value","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2"],"sourceRoot":""}