{"version":3,"file":"static/js/8987.44379862.chunk.js","mappings":"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","sources":["svgs/railmap/main/main-template.tsx","svgs/railmap/methods/share.ts","../javascript/esm|/home/runner/work/rmg/rmg/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { adjacencyList, criticalPathMethod, getXShareMTR } from '../methods/share';\nimport { StationDict } from '../../../constants/constants';\nimport { useRootSelector } from '../../../redux';\n\nconst MainTemplate = () => {\n    const { branches } = useRootSelector(store => store.helper);\n    const param = useRootSelector(store => store.param);\n\n    const adjMat = adjacencyList(param.stn_list, leftWideFactor, rightWideFactor);\n    const criticalPath = useMemo(\n        () => criticalPathMethod('linestart', 'lineend', adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n    const realCP = useMemo(\n        () => criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShare(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: param.y_pc,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        />\n    );\n};\n\nexport default MainTemplate;\n\nconst leftWideFactor = (stnList: StationDict, stnId: string) => 1;\nconst rightWideFactor = (stnList: StationDict, stnId: string) => 1;\n\nconst getXShare = getXShareMTR;\n","import { ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n}\n\nexport const drawLine = (branch: string[], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n    let lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n    let linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n    if (lineMainStns.length === 1) {\n        linePassStns = branch;\n    }\n\n    if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n        // if two set disjoint\n        if (linePassStns[0] === branch[0]) {\n            // -1 -1 1 1\n            linePassStns.push(lineMainStns[0]);\n        } else if (\n            lineMainStns[0] === branch[0] &&\n            lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n            linePassStns.length\n        ) {\n            linePassStns = branch;\n            lineMainStns = [];\n        } else {\n            // 1 1 -1 -1\n            linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n        }\n    }\n\n    return {\n        main: lineMainStns,\n        pass: linePassStns,\n    };\n};\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["branches","useRootSelector","store","helper","param","adjMat","adjacencyList","stn_list","leftWideFactor","rightWideFactor","criticalPath","useMemo","criticalPathMethod","JSON","stringify","realCP","nodes","slice","xShares","console","log","Object","keys","reduce","acc","cur","getXShare","toString","lineXs","svgWidth","railmap","padding","len","id","style","y_pc","stnList","stnId","getXShareMTR","leftW","rightW","children","a","c","from","to","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","indexOf","includes","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","getStnState","currentId","routes","direction","Set","concat","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","namePoss","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","length","stnPred","res","getYShare","stnIds","realXs","realYs","e","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","stations","drawLine","stnStates","lineMainStns","linePassStns","main","pass","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","i","F","s","n","done","value","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2"],"sourceRoot":""}