{"version":3,"file":"static/js/9112.37103a22.chunk.js","mappings":"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","sources":["svgs/gzmtr/current-station-name.tsx","svgs/gzmtr/otis-frame.tsx","svgs/gzmtr/platform-number.tsx","svgs/gzmtr/psd-number.tsx","svgs/runin/info-gzmtr.tsx","svgs/runin/runin-gzmtr.tsx","svgs/strip/strip-gzmtr.tsx","svgs/svg-wrapper.tsx"],"sourcesContent":["import React, { memo, SVGProps, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../constants/constants';\n\ninterface CurrentStationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n}\n\nexport default memo(\n    function CurrentStationName(props: CurrentStationNameProps) {\n        const { stnName, onUpdate } = props;\n\n        const nameEl = useRef<SVGGElement | null>(null);\n\n        useEffect(() => {\n            onUpdate?.(nameEl.current!.getBBox());\n        }, [stnName.toString()]);\n\n        return (\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={90}>\n                    {stnName[0]}\n                </text>\n                <g fontSize={36}>\n                    {stnName[1].split('\\\\').map((txt, i) => (\n                        <text className=\"rmg-name__en\" key={i} dy={70 + i * 36}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.stnName.toString() === nextProps.stnName.toString()\n);\n\ninterface CurrentStationSecondaryNameProps extends SVGProps<SVGGElement> {\n    secondaryName: Name;\n}\n\nexport const CurrentStationSecondaryName = (props: CurrentStationSecondaryNameProps) => {\n    const { secondaryName, transform } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(() => setBBox(nameEl.current!.getBBox()), [secondaryName.toString()]);\n\n    return (\n        <g transform={transform}>\n            <g transform=\"translate(0,4.5)\" fontSize={36}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={26}>\n                    {secondaryName[0]}\n                </text>\n                <text dy={22} className=\"rmg-name__en\" fontSize={14}>\n                    {secondaryName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n","import React from 'react';\nimport { useRootSelector } from '../../redux';\nimport { CanvasType } from '../../constants/constants';\n\ninterface OtisFrameProps {\n    canvasType: CanvasType;\n}\n\nexport default function OtisFrame(props: OtisFrameProps) {\n    const { canvasType } = props;\n    const { svgWidth: svgWidths, svg_height: svgHeight } = useRootSelector(store => store.param);\n\n    return (\n        <g id=\"otis_frame\" strokeWidth={3} stroke=\"black\">\n            <line y2={svgHeight} transform={`translate(${svgWidths[canvasType] / 2},0)`} />\n            <line x2={svgWidths[canvasType]} transform=\"translate(0,90)\" />\n        </g>\n    );\n}\n","import React, { SVGProps } from 'react';\n\ninterface PlatformNumberProps extends SVGProps<SVGGElement> {\n    num: string | false;\n}\n\nexport default function PlatformNumber(props: PlatformNumberProps) {\n    const { num, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill=\"var(--rmg-theme-fg)\" {...others}>\n            <circle cx={0} cy={0} r={30} fill=\"var(--rmg-theme-colour)\" />\n            <text className=\"rmg-name__en\" fontSize={38} dy={-9.5}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={13} dy={10}>\n                站台\n            </text>\n            <text className=\"rmg-name__en\" fontSize={9} dy={21}>\n                Platform\n            </text>\n        </g>\n    );\n}\n","import React, { SVGProps } from 'react';\nimport { MonoColour } from '../../constants/constants';\n\ninterface PsdNumberProps extends SVGProps<SVGGElement> {\n    num: string;\n    inStrip?: boolean;\n}\n\nexport default function PsdNumber(props: PsdNumberProps) {\n    const { num, inStrip, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={inStrip ? MonoColour.black : 'var(--rmg-theme-fg)'} {...others}>\n            <rect height={40} width={40} rx={4} x={-20} fill={inStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n            <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                屏蔽门\n            </text>\n            <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                Screen Door\n            </text>\n        </g>\n    );\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport StationNumber from '../gzmtr/station-icon/station-number';\nimport { CanvasType, Name, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport CurrentStationName, { CurrentStationSecondaryName } from '../gzmtr/current-station-name';\n\nconst InfoGZMTR = () => {\n    const svgHeight = useRootSelector(store => store.param.svg_height);\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const infoPanelType = useRootSelector(store => store.param.info_panel_type);\n    const lineNumber = useRootSelector(store => store.param.line_num);\n    const currentStationIndex = useRootSelector(store => store.param.current_stn_idx);\n    const curStnInfo = useRootSelector(store => store.param.stn_list[currentStationIndex]);\n\n    const [nameBBox, setNameBBox] = useState({ width: 0 } as SVGRect);\n\n    const nextStnId = curStnInfo[direction === ShortDirection.left ? 'parents' : 'children'];\n\n    const otisTransforms = {\n        name: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 4},45)`,\n        next: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 10},45)`,\n    };\n\n    const transforms = {\n        nameGroup: {\n            x: svgWidths.runin / 2,\n            y:\n                0.5 * svgHeight -\n                50 -\n                (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                (curStnInfo.secondaryName ? 29 : 0),\n        },\n        secondaryName: {\n            x: 0,\n            y: 70 + curStnInfo.name[1].split('\\\\').length * 36,\n        },\n    };\n\n    return (\n        <g>\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.name : ''}>\n                <g textAnchor=\"middle\" transform={`translate(${transforms.nameGroup.x},${transforms.nameGroup.y})`}>\n                    <CurrentStationName stnName={curStnInfo.name} onUpdate={setNameBBox} />\n                    {curStnInfo.secondaryName && (\n                        <CurrentStationSecondaryName\n                            secondaryName={curStnInfo.secondaryName}\n                            transform={`translate(${transforms.secondaryName.x},${transforms.secondaryName.y})`}\n                        />\n                    )}\n                </g>\n\n                <StationNumber\n                    lineNum={lineNumber}\n                    stnNum={curStnInfo.num}\n                    style={{\n                        ['--translate-x' as any]: `${(svgWidths[CanvasType.RunIn] + nameBBox.width) / 2 + 55}px`,\n                        ['--translate-y' as any]: `${\n                            0.5 * svgHeight -\n                            30 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                        transform: 'translate(var(--translate-x, 800px), var(--translate-y, 145px))',\n                    }}\n                    large\n                />\n            </g>\n\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.next : ''}>\n                {!nextStnId || nextStnId.includes('linestart') || nextStnId.includes('lineend') ? (\n                    <></>\n                ) : nextStnId.length === 1 ? (\n                    <BigNext nextId={nextStnId[0]} nameBBox={nameBBox} />\n                ) : (\n                    <BigNext2 nextIds={nextStnId} nameBBox={nameBBox} />\n                )}\n            </g>\n        </g>\n    );\n};\n\nexport default InfoGZMTR;\n\nconst BigNext = (props: { nextId: string; nameBBox: DOMRect }) => {\n    const { nextId, nameBBox } = props;\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const nextInfo = useRootSelector(store => store.param.stn_list[nextId]);\n    const { name, secondaryName } = nextInfo;\n\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEl = React.useRef<SVGGElement | null>(null);\n    useEffect(\n        () => setNextBBox(nextNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [name.toString()]\n    );\n\n    const nextNameZHCount = name[0].length;\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next\">\n                <g\n                    textAnchor=\"middle\"\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? '80px'\n                                : nextNameZHCount <= 2\n                                ? `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 70}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 35 * 1.5}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        下站\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={17} dy={30}>\n                        Next\n                    </text>\n                </g>\n                <g\n                    textAnchor=\"start\"\n                    ref={nextNameEl}\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? nextNameZHCount <= 2\n                                    ? `${115 + 35}px`\n                                    : `${115 + 35 / 2}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        {name[0]}\n                    </text>\n                    <g fontSize={17}>\n                        {name[1].split('\\\\').map((txt: string, i: number) => (\n                            <text className=\"rmg-name__en\" dy={30 + i * 17} key={i}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n                {secondaryName && (\n                    <g\n                        textAnchor=\"middle\"\n                        style={{\n                            ['--translate-x' as any]:\n                                direction === ShortDirection.left\n                                    ? nextNameZHCount <= 2\n                                        ? `${115 + 35}px`\n                                        : `${115 + 35 / 2}px`\n                                    : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                        }}\n                    >\n                        <BigNextSec\n                            secName={secondaryName}\n                            transform={`translate(${nextBBox.width / 2},${30 + name[1].split('\\\\').length * 17 + 5})`}\n                        />\n                    </g>\n                )}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${\n                                  (115 + 35 * ((nextNameZHCount <= 2 ? 1 : 0.5) + nextNameZHCount) + nameBcrX) / 2 - 20\n                              }px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      (nextNameZHCount <= 2 ? 70 + 35 : 35 * 2.5) +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n\nconst BigNextSec = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,2.5)\" fontSize={25}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {secName[0]}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={10} dy={15}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigNext2 = (props: { nextIds: string[]; nameBBox: DOMRect }) => {\n    const { nextIds, nameBBox } = props;\n    const { routes } = useRootSelector(store => store.helper);\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    const nextNames = nextIds.map(id => stationList[id].name);\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEls = useRef<(SVGGElement | null)[]>([]);\n    useEffect(\n        () => {\n            setNextBBox(prevBBox => ({ ...prevBBox, width: 0 }));\n            nextNameEls.current.forEach(el => {\n                let nextBBox = el?.getBBox();\n                setNextBBox(prevBBox => {\n                    if (nextBBox) {\n                        return prevBBox.width > nextBBox.width ? prevBBox : nextBBox;\n                    } else {\n                        return prevBBox;\n                    }\n                });\n            });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [nextNames.toString()]\n    );\n\n    const validEnds = props.nextIds.map(stnId =>\n        routes.reduce(\n            (acc, route) =>\n                // filter routes not containing next station's id\n                route.includes(stnId)\n                    ? acc.concat(\n                          route\n                              .filter(s => !['linestart', 'lineend'].includes(s))\n                              // select first/last station's id\n                              .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                      )\n                    : acc,\n            [] as string[]\n        )\n    );\n\n    const nextNameZHCount = Math.max(...nextNames.map(names => names[0].length));\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next_2\">\n                {nextNames.map((name, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            <g\n                                textAnchor=\"middle\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '72px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 41}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">下站</text>\n                                <text className=\"rmg-name__en\" y={22}>\n                                    Next\n                                </text>\n                            </g>\n                            <g\n                                ref={el => (nextNameEls.current[i] = el)}\n                                textAnchor=\"start\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '113px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">{name[0]}</text>\n                                {name[1].split('\\\\').map((txt, j) => (\n                                    <text key={j} className=\"rmg-name__en\" y={22 + j * 13}>\n                                        {txt}\n                                    </text>\n                                ))}\n                                <text className=\"rmg-name__zh\" y={-35}>\n                                    {validEnds[i].map(s => stationList[s].name[0]).join('/') + '方向'}\n                                </text>\n                                <text className=\"rmg-name__en rmg-name__gzmtr--next2-dest\" y={-20}>\n                                    {'Towards ' +\n                                        validEnds[i]\n                                            .map(s => stationList[s].name[1])\n                                            .join('/')\n                                            .replace('\\\\', ' ')}\n                                </text>\n                            </g>\n                        </React.Fragment>\n                    );\n                })}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${(99 + 27 * (1 + nextNameZHCount) + nameBcrX) / 2 - 20}px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      41 -\n                                      27 +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n","import React from 'react';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport InfoGZMTR from './info-gzmtr';\nimport { useRootSelector } from '../../redux';\nimport { CanvasType, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport PlatformNumber from '../gzmtr/platform-number';\nimport SvgWrapper from '../svg-wrapper';\nimport OtisFrame from '../gzmtr/otis-frame';\n\nconst CANVAS_TYPE = CanvasType.RunIn;\n\nexport default function RunInGZMTR() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgHeight,\n        direction,\n        info_panel_type: infoPanelType,\n        platform_num: platformNumber,\n        psd_num: psdNumber,\n        theme,\n    } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    const otisTransforms = {\n        platform: `translate(${direction === ShortDirection.left ? 50 : -50},45)`,\n    };\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType !== PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType !== PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.platform : ''}>\n                <PlatformNumber\n                    num={platformNumber}\n                    style={{\n                        ['--translate-x' as any]: `${direction === ShortDirection.left ? svgWidth - 100 : 100}px`,\n                        ['--translate-y' as any]: 'calc(var(--rmg-svg-height) / 2 - 30px)',\n                        transform: 'translate(var(--translate-x, 100px), var(--translate-y))',\n                    }}\n                />\n            </g>\n\n            <InfoGZMTR />\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && <OtisFrame canvasType={CANVAS_TYPE} />}\n        </SvgWrapper>\n    );\n}\n","import React from 'react';\nimport { PanelTypeGZMTR, PanelTypeShmetro } from '../../constants/constants';\nimport PsdNumber from '../gzmtr/psd-number';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <PsdNumber\n                num={props.isShowPSD as string}\n                inStrip={isInStrip}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            />\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import { CanvasType, Theme } from '../constants/constants';\nimport React, { ReactNode } from 'react';\n\ninterface SvgWrapperProps {\n    type: CanvasType;\n    svgWidth: number;\n    svgHeight: number;\n    canvasScale: number;\n    theme: Theme;\n    children: ReactNode;\n}\n\nexport default function SvgWrapper(props: SvgWrapperProps) {\n    const { type, svgWidth, svgHeight, canvasScale, theme, children } = props;\n\n    return (\n        <svg\n            id={type}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            height={svgHeight * canvasScale}\n            viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n            colorInterpolationFilters=\"sRGB\"\n            style={{\n                ['--rmg-svg-width' as any]: svgWidth + 'px',\n                ['--rmg-svg-height' as any]: svgHeight + 'px',\n                ['--rmg-theme-colour' as any]: theme[2],\n                ['--rmg-theme-fg' as any]: theme[3],\n            }}\n        >\n            <rect\n                id=\"canvas-bg\"\n                fill=\"white\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n            {children}\n            <rect\n                id=\"canvas-border\"\n                fill=\"none\"\n                strokeWidth={3}\n                stroke=\"none\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n        </svg>\n    );\n}\n"],"names":["memo","props","stnName","onUpdate","nameEl","useRef","useEffect","current","getBBox","toString","ref","className","fontSize","split","map","txt","i","dy","prevProps","nextProps","CurrentStationSecondaryName","secondaryName","transform","useState","x","width","bBox","setBBox","textAnchor","OtisFrame","canvasType","useRootSelector","store","param","svgWidths","svgWidth","svgHeight","svg_height","id","strokeWidth","stroke","y2","x2","PlatformNumber","num","others","fill","cx","cy","r","PsdNumber","inStrip","MonoColour","height","rx","direction","infoPanelType","info_panel_type","lineNumber","line_num","currentStationIndex","current_stn_idx","curStnInfo","stn_list","nameBBox","setNameBBox","nextStnId","ShortDirection","otisTransforms","name","CanvasType","next","transforms","nameGroup","runin","y","length","PanelTypeGZMTR","lineNum","stnNum","style","large","includes","BigNext","nextId","BigNext2","nextIds","nextInfo","nextBBox","setNextBBox","nextNameEl","React","nextNameZHCount","nameBcrX","BigNextSec","secName","d","routes","helper","stationList","nextNames","nextNameEls","prevBBox","forEach","el","validEnds","stnId","reduce","acc","route","concat","filter","s","slice","Math","max","names","j","join","replace","CANVAS_TYPE","RunInGZMTR","canvasScale","state","app","platformNumber","platform_num","psdNumber","psd_num","theme","platform","type","variant","isShowLight","isShowPSD","stripHeight","indicatorLight","ry","PSD","isInStrip","psdDy","SvgWrapper","children","xmlns","xmlnsXlink","viewBox","colorInterpolationFilters"],"sourceRoot":""}