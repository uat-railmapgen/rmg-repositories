{"version":3,"file":"static/js/5704.48165d7c.chunk.js","mappings":"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","sources":["svgs/mtr/station/station-name/station-name-wrapper.tsx","svgs/mtr/station/station-name/station-name.tsx","svgs/mtr/utils.ts"],"sourcesContent":["import React, { SVGProps, useState } from 'react';\nimport { Direction, Facilities, Name, StationState } from '../../../../constants/constants';\nimport StationName from './station-name';\n\n/**\n * Top (in pixels) of station's Chinese name.\n */\nconst NAME_ZH_TOP = -10.8125;\n/**\n * Height (in pixels) of station's Chinese name.\n */\n// const NAME_ZH_HEIGHT = 21.625;\n/**\n * Top (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_TOP = -8;\n/**\n * Height (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_HEIGHT = 13.21875;\n/**\n * Difference of `y`s of station's Chinese name and English name (1 line). (This number should used as the `dy` of the English `text` element after Chinese `text` elements. )\n */\nconst NAME_ZH_EN_GAP = 17;\n/**\n * Height (in pixels) from the top of station's Chinese name to the bottom of English name (1 line).\n */\nexport const NAME_FULL_HEIGHT = -NAME_ZH_TOP + NAME_ZH_EN_GAP + NAME_EN_HEIGHT + NAME_EN_TOP;\n/**\n * Height (in pixels) of the gap between the centre of the line and the top of station's Chinese name.\n */\nconst STN_NAME_LINE_GAP = 14;\n\ninterface StationNameWrapperProps extends SVGProps<SVGGElement> {\n    stationName: Name;\n    stationState: StationState;\n    facility: Facilities;\n    lower?: boolean;\n    align?: Direction;\n}\n\nexport default function StationNameWrapper(props: StationNameWrapperProps) {\n    const { stationName, stationState, lower, align, facility, ...others } = props;\n\n    /**\n     * align = undefined: { x: -40, width: 80 }\n     * align = left: { x: 0, width: 80 }\n     * align = right: { x: -80, width: 80 }\n     */\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    const getFill = (state: StationState) => {\n        switch (state) {\n            case StationState.PASSED:\n                return 'var(--rmg-grey)';\n            case StationState.CURRENT:\n                return '#fff';\n            case StationState.FUTURE:\n                return 'var(--rmg-black)';\n        }\n    };\n\n    const nameEnRows = stationName[1].split('\\\\').length;\n    const transforms = {\n        g: {\n            x: align ? (align === Direction.right ? -3 : 3) : 0,\n            y:\n                (lower\n                    ? STN_NAME_LINE_GAP - NAME_ZH_TOP\n                    : -STN_NAME_LINE_GAP - NAME_ZH_TOP - NAME_FULL_HEIGHT - 11 * (nameEnRows - 1)) +\n                (align ? (lower ? 10 : -10) : 0),\n        },\n        rect: {\n            x:\n                bBox.x -\n                3 +\n                (facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? -3 - NAME_FULL_HEIGHT\n                        : 0\n                    : (NAME_FULL_HEIGHT + 5) / 2 - 3 - NAME_FULL_HEIGHT),\n            y: NAME_ZH_TOP - 1,\n            width: bBox.width + 6 + (facility === Facilities.none ? 0 : NAME_FULL_HEIGHT + 3),\n            height: NAME_FULL_HEIGHT + 2 + 11 * (nameEnRows - 1),\n        },\n        use: {\n            x: align\n                ? align === Direction.right\n                    ? -(NAME_FULL_HEIGHT + 2) / 2 - bBox.width - 3\n                    : (NAME_FULL_HEIGHT + 2) / 2 - 2\n                : -(bBox.width + 3) / 2,\n            y: NAME_ZH_TOP - 1 + 5.5 * (nameEnRows - 1),\n        },\n        StationName: {\n            x:\n                facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? 0\n                        : NAME_FULL_HEIGHT + 3\n                    : (NAME_FULL_HEIGHT + 5) / 2,\n            y: 0,\n        },\n    };\n\n    return (\n        <g {...others}>\n            <g fill={getFill(stationState)} transform={`translate(${transforms.g.x},${transforms.g.y})`}>\n                {stationState === StationState.CURRENT && (\n                    <rect\n                        x={transforms.rect.x}\n                        y={transforms.rect.y}\n                        width={transforms.rect.width}\n                        height={transforms.rect.height}\n                        fill=\"var(--rmg-black)\"\n                    />\n                )}\n\n                {facility !== Facilities.none && (\n                    <use\n                        xlinkHref={`#${facility}`}\n                        fill={stationState === StationState.PASSED ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                        x={transforms.use.x}\n                        y={transforms.use.y}\n                    />\n                )}\n\n                <g transform={`translate(${transforms.StationName.x},${transforms.StationName.y})`}>\n                    <StationName stnName={stationName} onUpdate={setBBox} align={align} />\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Direction, Name } from '../../../../constants/constants';\nimport { waitForFontReady } from '../../utils';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    align?: Direction;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate, align } = props;\n\n        const nameEl = useRef<SVGGElement>(null);\n\n        const updateNameBBox = () => {\n            onUpdate?.(nameEl.current!.getBBox());\n        };\n\n        useEffect(() => {\n            updateNameBBox();\n            waitForFontReady().then().catch(console.log).finally(updateNameBBox);\n        }, [stnName.toString(), align]);\n\n        const getTextAnchor = (direction?: Direction) => {\n            switch (direction) {\n                case Direction.left:\n                    return 'start';\n                case Direction.right:\n                    return 'end';\n                default:\n                    return 'middle';\n            }\n        };\n\n        const getDy = (index: number) => 17 + 11 * index;\n\n        return (\n            <g ref={nameEl} textAnchor={getTextAnchor(align)}>\n                <text className=\"rmg-name__zh rmg-name__mtr--station\">{stnName[0]}</text>\n\n                {stnName[1].split('\\\\').map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en rmg-name__mtr--station\" dy={getDy(i)}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.stnName.toString() === nextProps.stnName.toString() && prevProps.align === nextProps.align\n);\n","import { waitForMs } from '../../utils';\n\nexport const waitForFontReady = async () => {\n    let retryAttempt = 3;\n\n    while (retryAttempt--) {\n        // #274 ready font fact set may not contain GenYoMin when first resolved\n        const fontFaceSet = await document.fonts.ready;\n        const it = fontFaceSet.values();\n        while (true) {\n            const next = it.next();\n            if (next.done) {\n                break;\n            }\n\n            if (next.value.family === 'GenYoMin TW') {\n                return;\n            }\n        }\n\n        console.log('GenYoMin is NOT ready. Retry attempts remaining: ' + retryAttempt + ' ...');\n        await waitForMs(500);\n    }\n\n    throw new Error('Failed to load GenYoMin after 3 attempts');\n};\n"],"names":["NAME_FULL_HEIGHT","StationNameWrapper","props","stationName","stationState","lower","align","facility","others","useState","x","width","bBox","setBBox","nameEnRows","split","length","transforms","g","Direction","y","STN_NAME_LINE_GAP","rect","Facilities","NAME_ZH_TOP","height","use","StationName","fill","state","StationState","getFill","transform","xlinkHref","stnName","onUpdate","memo","nameEl","useRef","updateNameBBox","current","getBBox","useEffect","waitForFontReady","then","catch","console","log","finally","toString","ref","textAnchor","direction","getTextAnchor","className","map","txt","i","dy","index","prevProps","nextProps","retryAttempt","document","fonts","ready","fontFaceSet","it","values","next","done","value","family","waitForMs","Error"],"sourceRoot":""}