{"version":3,"file":"static/js/4013.30cd403d.chunk.js","mappings":"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","sources":["setupTests.tsx","svgs/gzmtr/station-icon/station-icon.tsx","svgs/gzmtr/station-icon/station-number.test.tsx","svgs/gzmtr/station-icon/station-number.tsx","test-utils.tsx"],"sourcesContent":["import createMockStore from 'redux-mock-store';\nimport { BranchStyle, StationDict } from './constants/constants';\nimport rootReducer, { RootState } from './redux';\nimport { getDefaultMiddleware, ThunkDispatch } from '@reduxjs/toolkit';\n\n// FIXME: any -> AnyAction?\ntype DispatchExts = ThunkDispatch<RootState, void, any>;\nexport const createMockAppStore = createMockStore<RootState, DispatchExts>(getDefaultMiddleware());\n\nconst realStore = rootReducer.getState();\nexport const createMockStoreWithMockStations = (stationList: StationDict) =>\n    createMockAppStore({\n        ...realStore,\n        param: { ...realStore.param, stn_list: stationList },\n    });\n\n/**\n * Before reversing:\n * stn0 - stn1 - stn2 (main)\n *             \\\n *              stn3 - stn4 (branch)\n *\n * After reversing:\n * (branch) stn4 - stn3\n *                      \\\n *          (main) stn2 - stn1 - stn0\n */\nexport const mockSimpleStationList: StationDict = {\n    linestart: {\n        parents: [],\n        children: ['stn0'],\n        branch: { left: [], right: [] },\n    },\n    stn0: {\n        parents: ['linestart'],\n        children: ['stn1'],\n        branch: { left: [], right: [] },\n    },\n    stn1: {\n        parents: ['stn0'],\n        children: ['stn2', 'stn3'],\n        branch: { left: [], right: [BranchStyle.through, 'stn3'] },\n    },\n    stn2: {\n        parents: ['stn1'],\n        children: ['lineend'],\n        branch: { left: [], right: [] },\n    },\n    stn3: {\n        parents: ['stn1'],\n        children: ['stn4'],\n        branch: { left: [], right: [] },\n    },\n    stn4: {\n        parents: ['stn3'],\n        children: ['lineend'],\n        branch: { left: [], right: [] },\n    },\n    lineend: {\n        parents: ['stn2', 'stn4'],\n        children: [],\n        branch: { left: [BranchStyle.through, 'stn4'], right: [] },\n    },\n} as any;\n","import React, { memo } from 'react';\n\ninterface StationIconProps {\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default memo(\n    function StationIcon(props: StationIconProps) {\n        const { passed, large } = props;\n\n        const pathD = large\n            ? 'M0,12.95 V-12.95 H-12.95 a12.95,12.95 0 0,0 0,25.9 h25.9 a12.95,12.95 0 0,0 0,-25.9 H0'\n            : 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\n\n        return <path d={pathD} fill=\"#fff\" strokeWidth={2} stroke={passed ? '#aaa' : 'var(--rmg-theme-colour)'} />;\n    },\n    (prevProps, nextProps) => prevProps.passed === nextProps.passed && prevProps.large === nextProps.large\n);\n","import React from 'react';\nimport StationNumber from './station-number';\nimport { render } from '../../../test-utils';\nimport { screen } from '@testing-library/react';\n\nconst getScaleFromTransform = (transformAttr?: string | null) => {\n    return transformAttr?.match(/scale\\(([\\d.]+)\\)/)?.[1];\n};\n\nconst mockGetBBox = jest.fn();\n(SVGElement.prototype as any).getBBox = mockGetBBox;\n\ndescribe('GZMTRStationNumber', () => {\n    it('Can apply same scale to both line and stn numbers when both have char length 2', async () => {\n        mockGetBBox.mockReturnValueOnce({ width: 20 }); // mock line num bbox\n        mockGetBBox.mockReturnValueOnce({ width: 14 }); // mock stn num bbox\n        render(\n            <svg>\n                <StationNumber lineNum=\"GF\" stnNum=\"11\" />\n            </svg>\n        );\n\n        const lineNumScale = getScaleFromTransform(screen.getByText('GF').closest('g')?.getAttribute('transform'));\n        expect(lineNumScale).toBe((15 / 20).toString());\n\n        const stnNumScale = getScaleFromTransform(screen.getByText('11').closest('g')?.getAttribute('transform'));\n        expect(stnNumScale).toBe((15 / 20).toString()); // will apply line num scale\n    });\n\n    it('Can apply different scales as expected', async () => {\n        mockGetBBox.mockReturnValueOnce({ width: 10 }); // mock line num bbox\n        mockGetBBox.mockReturnValueOnce({ width: 20 }); // mock stn num bbox\n        render(\n            <svg>\n                <StationNumber lineNum=\"7\" stnNum=\"01-6\" />\n            </svg>\n        );\n\n        const lineNumScale = getScaleFromTransform(screen.getByText('7').closest('g')?.getAttribute('transform'));\n        expect(lineNumScale).toBe('1'); // will not be scaled\n\n        const stnNumScale = getScaleFromTransform(screen.getByText('01-6').closest('g')?.getAttribute('transform'));\n        expect(stnNumScale).toBe((15 / 20).toString());\n    });\n});\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport StationIcon from './station-icon';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, passed, large, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g {...others}>\n            <StationIcon passed={passed} large={large} />\n            <g\n                textAnchor=\"middle\"\n                fontSize={13.5}\n                transform={large ? 'scale(1.4)' : ''}\n                fill={passed ? '#aaa' : '#000'}\n            >\n                <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                    <text ref={lineNumEl} className=\"rmg-name__zh\">\n                        {lineNum}\n                    </text>\n                </g>\n                <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                    <text ref={stnNumEl} className=\"rmg-name__zh\">\n                        {stnNum}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n}\n","import '@testing-library/jest-dom';\nimport React, { ReactElement, ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { Store } from '@reduxjs/toolkit';\nimport { I18nextProvider } from 'react-i18next';\nimport i18n from './i18n/config';\nimport { Provider } from 'react-redux';\nimport rootReducer from './redux';\nimport { createMockAppStore } from './setupTests';\nimport { MemoryRouter } from 'react-router-dom';\n\ninterface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n    store: Store;\n}\n\nconst initialOptions: CustomRenderOptions = {\n    store: createMockAppStore({ ...rootReducer.getState() }),\n};\n\ninterface TestingProviderProps {\n    children?: ReactNode;\n    store: Store;\n}\n\nexport const TestingProvider = (props: TestingProviderProps) => {\n    const { children, store } = props;\n\n    return (\n        <I18nextProvider i18n={i18n}>\n            <Provider store={store}>\n                <MemoryRouter>{children}</MemoryRouter>\n            </Provider>\n        </I18nextProvider>\n    );\n};\n\nconst customRender = (ui: ReactElement, { store, ...renderOptions } = initialOptions) => {\n    return render(ui, {\n        wrapper: props => <TestingProvider store={store} {...props} />,\n        ...renderOptions,\n    });\n};\n\nexport { customRender as render };\n"],"names":["createMockAppStore","createMockStore","getDefaultMiddleware","realStore","rootReducer","createMockStoreWithMockStations","stationList","param","stn_list","BranchStyle","memo","props","passed","pathD","large","d","fill","strokeWidth","stroke","prevProps","nextProps","getScaleFromTransform","transformAttr","match","mockGetBBox","jest","fn","SVGElement","prototype","getBBox","describe","it","mockReturnValueOnce","width","render","lineNum","stnNum","lineNumScale","screen","closest","getAttribute","expect","toBe","toString","stnNumScale","StationNumber","others","lineNumEl","useRef","stnNumEl","useState","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","useEffect","current","Math","max","length","textAnchor","fontSize","transform","ref","className","initialOptions","store","TestingProvider","children","i18n","customRender","ui","renderOptions","wrapper"],"sourceRoot":""}