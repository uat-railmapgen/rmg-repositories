{"version":3,"file":"static/js/5810.2c4cb062.chunk.js","mappings":"0HAEAA,SAAS,YAAY,WACjBA,SAAS,mBAAmB,WACxB,IAAMC,EAAiB,WAA8B,IAAD,uBAAzBC,EAAyB,yBAAzBA,EAAyB,gBAC/CC,SAASC,UAAkBC,MAAQ,CAChCC,MAAOC,QAAQC,QAAQN,EAAWO,KAAI,SAAAC,GAAM,MAAK,CAAEA,OAAAA,EAAP,KAEnD,EAEKC,EAAcC,KAAKC,KACnBC,EAAaF,KAAKC,KAExBE,GAAG,4EAA4E,SAAAC,GAC3Ef,EAAe,UACfgB,EAAAA,EAAAA,oBACKC,KAAKP,GACLQ,MAAML,GACNM,SAAQ,WACLC,OAAOV,GAAaW,gBAAgB,GACpCD,OAAOP,GAAYQ,gBAAgB,GACnCN,GACH,GACR,IAEDD,GAAG,2DAA2D,SAAAC,GAC1Df,EAAe,QAAS,gBACxBgB,EAAAA,EAAAA,oBACKC,KAAKP,GACLQ,MAAML,GACNM,SAAQ,WACLC,OAAOV,GAAaW,gBAAgB,GACpCD,OAAOP,GAAYQ,gBAAgB,GACnCN,GACH,GACR,GACJ,GACJ,G,4HCnCYC,EAAgB,mCAAG,0FACxBM,EAAe,EADS,WAGrBA,IAHqB,iCAKEC,SAASnB,MAAMC,MALjB,OAKlBmB,EALkB,OAMlBV,EAAKU,EAAYC,SANC,YAQdC,EAAOZ,EAAGY,QACPX,KATW,wDAaM,gBAAtBW,EAAKC,MAAMlB,OAbK,iFAkBxBmB,QAAQC,IAAI,oDAAsDP,EAAe,QAlBzD,WAmBlBQ,EAAAA,EAAAA,IAAU,KAnBQ,qCAsBtB,IAAIC,MAAM,4CAtBY,4CAAH,oD","sources":["svgs/mtr/utils.test.ts","svgs/mtr/utils.ts"],"sourcesContent":["import { waitForFontReady } from './utils';\n\ndescribe('MTRUtils', () => {\n    describe('MTRUtils - font', () => {\n        const setFontFaceSet = (...familyList: string[]) => {\n            (Document.prototype as any).fonts = {\n                ready: Promise.resolve(familyList.map(family => ({ family }))),\n            };\n        };\n\n        const mockResolve = jest.fn();\n        const mockReject = jest.fn();\n\n        it('Can reject font ready promise if GenYoMin is not loaded after 3 attempts', done => {\n            setFontFaceSet('Arial');\n            waitForFontReady()\n                .then(mockResolve)\n                .catch(mockReject)\n                .finally(() => {\n                    expect(mockResolve).toBeCalledTimes(0);\n                    expect(mockReject).toBeCalledTimes(1);\n                    done();\n                });\n        });\n\n        it('Can reject font ready promise if GenYoMin is not loaded', done => {\n            setFontFaceSet('Arial', 'GenYoMin TW');\n            waitForFontReady()\n                .then(mockResolve)\n                .catch(mockReject)\n                .finally(() => {\n                    expect(mockResolve).toBeCalledTimes(1);\n                    expect(mockReject).toBeCalledTimes(0);\n                    done();\n                });\n        });\n    });\n});\n","import { waitForMs } from '../../utils';\n\nexport const waitForFontReady = async () => {\n    let retryAttempt = 3;\n\n    while (retryAttempt--) {\n        // #274 ready font fact set may not contain GenYoMin when first resolved\n        const fontFaceSet = await document.fonts.ready;\n        const it = fontFaceSet.values();\n        while (true) {\n            const next = it.next();\n            if (next.done) {\n                break;\n            }\n\n            if (next.value.family === 'GenYoMin TW') {\n                return;\n            }\n        }\n\n        console.log('GenYoMin is NOT ready. Retry attempts remaining: ' + retryAttempt + ' ...');\n        await waitForMs(500);\n    }\n\n    throw new Error('Failed to load GenYoMin after 3 attempts');\n};\n"],"names":["describe","setFontFaceSet","familyList","Document","prototype","fonts","ready","Promise","resolve","map","family","mockResolve","jest","fn","mockReject","it","done","waitForFontReady","then","catch","finally","expect","toBeCalledTimes","retryAttempt","document","fontFaceSet","values","next","value","console","log","waitForMs","Error"],"sourceRoot":""}