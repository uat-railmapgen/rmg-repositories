{"version":3,"file":"static/js/7335.e200263a.chunk.js","mappings":"uNAOaA,GAAqBC,EAAAA,EAAAA,IAAyCC,EAAAA,EAAAA,OAErEC,EAAYC,EAAAA,GAAAA,WACLC,EAAkC,SAACC,GAAD,OAC3CN,GAAmB,kBACZG,GADW,IAEdI,OAAM,kBAAMJ,EAAUI,OAAjB,IAAwBC,SAAUF,MAHA,EA+BXG,EAAAA,GAAAA,QAoBXA,EAAAA,GAAAA,O,6ECzDnBC,EAAcC,KAAKC,KACxBC,WAAWC,UAAkBC,QAAUL,EAExC,IAAMM,EAAWL,KAAKC,KAEhBK,EAAW,CAAEC,MAAO,GAAIC,OAAQ,IAEtCC,SAAS,oBAAoB,WACzBC,YAAW,WACPX,EAAYY,oBAAoBL,EACnC,IAEDM,GAAG,uEAAuE,YACtEC,EAAAA,EAAAA,IACI,0BACI,SAAC,UAAD,CAAaC,QAAS,CAAC,2BAAQ,aAAcT,SAAUA,OAI/DU,OAAOV,GAAUW,gBAAgB,GACjCD,OAAOV,GAAUY,eAAeX,EACnC,GACJ,G,yDClBD,WAAeY,EAAAA,EAAAA,OACX,SAAqBC,GACjB,IAAQL,EAAsBK,EAAtBL,QAAST,EAAac,EAAbd,SAEXe,GAASC,EAAAA,EAAAA,QAA2B,MAM1C,OAJAC,EAAAA,EAAAA,YAAU,WACNjB,GAAYA,EAASe,EAAOG,QAASnB,UACxC,GAAE,CAACU,EAAQU,cAGR,eAAGC,IAAKL,EAAR,WACI,iBAAMM,UAAU,eAAeC,SAAU,GAAzC,SACKb,EAAQ,MAEb,cAAGa,SAAU,KAAb,SACKb,EAAQ,GAAGc,MAAM,MAAMC,KAAI,SAACC,EAAKC,GAAN,OACxB,iBAAcL,UAAU,eAAeM,GAAI,GAAS,GAAJD,EAAhD,SACKD,GADMC,EADa,QAQ3C,IACD,SAACE,EAAWC,GAAZ,OAA0BD,EAAUnB,QAAQU,aAAeU,EAAUpB,QAAQU,UAA7E,G,yMClBEW,EAAsC,CACxCC,OAAO/C,EAAAA,EAAAA,KAAmB,UAAKI,EAAAA,GAAAA,cAQtB4C,EAAkB,SAAClB,GAC5B,IAAQmB,EAAoBnB,EAApBmB,SAAUF,EAAUjB,EAAViB,MAElB,OACI,SAAC,IAAD,CAAiBG,KAAMA,EAAAA,EAAvB,UACI,SAAC,KAAD,CAAUH,MAAOA,EAAjB,UACI,SAAC,KAAD,UAAeE,OAI9B,EAEKE,EAAe,SAACC,GAAoE,IAAD,yDAAnBN,EAA5BC,EAA+C,EAA/CA,MAAUM,GAAqC,YACrF,OAAO7B,EAAAA,EAAAA,IAAO4B,GAAD,QACTE,QAAS,SAAAxB,GAAK,OAAI,SAACkB,GAAD,QAAiBD,MAAOA,GAAWjB,GAAvC,GACXuB,GAEV,C","sources":["setupTests.tsx","svgs/gzmtr/station-name/station-name.test.tsx","svgs/gzmtr/station-name/station-name.tsx","test-utils.tsx"],"sourcesContent":["import createMockStore from 'redux-mock-store';\nimport { BranchStyle, StationDict } from './constants/constants';\nimport rootReducer, { RootState } from './redux';\nimport { getDefaultMiddleware, ThunkDispatch } from '@reduxjs/toolkit';\n\n// FIXME: any -> AnyAction?\ntype DispatchExts = ThunkDispatch<RootState, void, any>;\nexport const createMockAppStore = createMockStore<RootState, DispatchExts>(getDefaultMiddleware());\n\nconst realStore = rootReducer.getState();\nexport const createMockStoreWithMockStations = (stationList: StationDict) =>\n    createMockAppStore({\n        ...realStore,\n        param: { ...realStore.param, stn_list: stationList },\n    });\n\n/**\n * Before reversing:\n * stn0 - stn1 - stn2 (main)\n *             \\\n *              stn3 - stn4 (branch)\n *\n * After reversing:\n * (branch) stn4 - stn3\n *                      \\\n *          (main) stn2 - stn1 - stn0\n */\nexport const mockSimpleStationList: StationDict = {\n    linestart: {\n        parents: [],\n        children: ['stn0'],\n        branch: { left: [], right: [] },\n    },\n    stn0: {\n        parents: ['linestart'],\n        children: ['stn1'],\n        branch: { left: [], right: [] },\n    },\n    stn1: {\n        parents: ['stn0'],\n        children: ['stn2', 'stn3'],\n        branch: { left: [], right: [BranchStyle.through, 'stn3'] },\n    },\n    stn2: {\n        parents: ['stn1'],\n        children: ['lineend'],\n        branch: { left: [], right: [] },\n    },\n    stn3: {\n        parents: ['stn1'],\n        children: ['stn4'],\n        branch: { left: [], right: [] },\n    },\n    stn4: {\n        parents: ['stn3'],\n        children: ['lineend'],\n        branch: { left: [], right: [] },\n    },\n    lineend: {\n        parents: ['stn2', 'stn4'],\n        children: [],\n        branch: { left: [BranchStyle.through, 'stn4'], right: [] },\n    },\n} as any;\n","import React from 'react';\nimport StationName from './station-name';\nimport { render } from '../../../test-utils';\n\nconst mockGetBBox = jest.fn();\n(SVGElement.prototype as any).getBBox = mockGetBBox;\n\nconst onUpdate = jest.fn();\n\nconst mockBBox = { width: 70, height: 30 } as DOMRect;\n\ndescribe('GZMTRStationName', () => {\n    beforeEach(() => {\n        mockGetBBox.mockReturnValueOnce(mockBBox);\n    });\n\n    it('Can invoke onChange event when name passed through props is updated', () => {\n        render(\n            <svg>\n                <StationName stnName={['体育西路', 'Tiyu Xilu']} onUpdate={onUpdate} />\n            </svg>\n        );\n\n        expect(onUpdate).toBeCalledTimes(1);\n        expect(onUpdate).toBeCalledWith(mockBBox);\n    });\n});\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate } = props;\n\n        const nameEl = useRef<SVGGElement | null>(null);\n\n        useEffect(() => {\n            onUpdate && onUpdate(nameEl.current!.getBBox());\n        }, [stnName.toString()]);\n\n        return (\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {stnName[0]}\n                </text>\n                <g fontSize={10.5}>\n                    {stnName[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={16 + i * 11}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.stnName.toString() === nextProps.stnName.toString()\n);\n","import '@testing-library/jest-dom';\nimport React, { ReactElement, ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { Store } from '@reduxjs/toolkit';\nimport { I18nextProvider } from 'react-i18next';\nimport i18n from './i18n/config';\nimport { Provider } from 'react-redux';\nimport rootReducer from './redux';\nimport { createMockAppStore } from './setupTests';\nimport { MemoryRouter } from 'react-router-dom';\n\ninterface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n    store: Store;\n}\n\nconst initialOptions: CustomRenderOptions = {\n    store: createMockAppStore({ ...rootReducer.getState() }),\n};\n\ninterface TestingProviderProps {\n    children?: ReactNode;\n    store: Store;\n}\n\nexport const TestingProvider = (props: TestingProviderProps) => {\n    const { children, store } = props;\n\n    return (\n        <I18nextProvider i18n={i18n}>\n            <Provider store={store}>\n                <MemoryRouter>{children}</MemoryRouter>\n            </Provider>\n        </I18nextProvider>\n    );\n};\n\nconst customRender = (ui: ReactElement, { store, ...renderOptions } = initialOptions) => {\n    return render(ui, {\n        wrapper: props => <TestingProvider store={store} {...props} />,\n        ...renderOptions,\n    });\n};\n\nexport { customRender as render };\n"],"names":["createMockAppStore","createMockStore","getDefaultMiddleware","realStore","rootReducer","createMockStoreWithMockStations","stationList","param","stn_list","BranchStyle","mockGetBBox","jest","fn","SVGElement","prototype","getBBox","onUpdate","mockBBox","width","height","describe","beforeEach","mockReturnValueOnce","it","render","stnName","expect","toBeCalledTimes","toBeCalledWith","memo","props","nameEl","useRef","useEffect","current","toString","ref","className","fontSize","split","map","txt","i","dy","prevProps","nextProps","initialOptions","store","TestingProvider","children","i18n","customRender","ui","renderOptions","wrapper"],"sourceRoot":""}