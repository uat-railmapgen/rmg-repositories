{"version":3,"file":"static/js/9952.1309d87e.chunk.js","mappings":"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","sources":["svgs/gzmtr/psd-number.tsx","svgs/railmap/railmap-gzmtr.tsx","svgs/strip/strip-gzmtr.tsx","svgs/svg-wrapper.tsx"],"sourcesContent":["import React, { SVGProps } from 'react';\nimport { MonoColour } from '../../constants/constants';\n\ninterface PsdNumberProps extends SVGProps<SVGGElement> {\n    num: string;\n    inStrip?: boolean;\n}\n\nexport default function PsdNumber(props: PsdNumberProps) {\n    const { num, inStrip, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={inStrip ? MonoColour.black : 'var(--rmg-theme-fg)'} {...others}>\n            <rect height={40} width={40} rx={4} x={-20} fill={inStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n            <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                屏蔽门\n            </text>\n            <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                Screen Door\n            </text>\n        </g>\n    );\n}\n","import React, { memo, useMemo } from 'react';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport MainGZMTR from './main/main-gzmtr';\nimport { CanvasType, Note, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport SvgWrapper from '../svg-wrapper';\n\nconst CANVAS_TYPE = CanvasType.RailMap;\n\nconst RailMapGZMTR = () => {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgHeight,\n        direction,\n        psd_num: psdNumber,\n        info_panel_type: infoPanelType,\n        notesGZMTR: notes,\n        current_stn_idx: currentStationIndex,\n        stn_list: stationList,\n        theme,\n    } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n    const curStnInfo = stationList[currentStationIndex];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsGZMTR />\n\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType === PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType === PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            {(direction === ShortDirection.left && curStnInfo.parents.includes('linestart')) ||\n            (direction === ShortDirection.right && curStnInfo.children.includes('lineend')) ? (\n                <TerminusFlag />\n            ) : (\n                <>\n                    <MainGZMTR />\n                    <DirectionIndicator />\n                    {notes.map((note, i) => (\n                        <NoteBox key={i} note={note} />\n                    ))}\n                </>\n            )}\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && (\n                <line x2={svgWidth} transform=\"translate(0,90)\" strokeWidth={3} stroke=\"black\" />\n            )}\n        </SvgWrapper>\n    );\n};\n\nexport default RailMapGZMTR;\n\nconst DefsGZMTR = memo(() => (\n    <defs>\n        <path id=\"arrow_direction\" d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\" fill=\"black\" />\n        <path id=\"inttick\" d=\"M 0,0 v 18\" strokeLinecap=\"square\" />\n    </defs>\n));\n\nconst DirectionIndicator = () => {\n    const { routes } = useRootSelector(store => store.helper);\n    const {\n        direction,\n        direction_gz_x: directionIndicatorX,\n        direction_gz_y: directionIndicatorY,\n        current_stn_idx: currentStationIndex,\n    } = useRootSelector(store => store.param);\n\n    const validDests = useMemo(\n        () => [\n            ...new Set(\n                routes\n                    .reduce(\n                        (acc, cur) =>\n                            cur.includes(currentStationIndex)\n                                ? acc.concat(\n                                      cur\n                                          .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                                          .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                                  )\n                                : acc,\n                        []\n                    )\n                    .filter(id => id !== currentStationIndex)\n            ),\n        ],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const textGroupProps: TextGroupProps = {\n        textAnchor: direction === ShortDirection.left ? 'start' : 'end',\n        transform: `translate(${direction === ShortDirection.left ? 65 : -65},-5)`,\n        destIds: validDests,\n    };\n\n    return (\n        <g\n            id=\"direction_gz\"\n            style={{ ['--x-percentage' as any]: directionIndicatorX, ['--y-percentage' as any]: directionIndicatorY }}\n        >\n            <use\n                xlinkHref=\"#arrow_direction\"\n                style={{ ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg' }}\n            />\n\n            {validDests.length !== 2 ? (\n                <DirectionIndicatorTextGroup {...textGroupProps} />\n            ) : (\n                <DirectionIndicatorTextGroup2 {...textGroupProps} />\n            )}\n        </g>\n    );\n};\n\ntype TextGroupProps = {\n    destIds: string[];\n} & React.SVGProps<SVGGElement>;\n\nconst DirectionIndicatorTextGroup = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const stationList = useRootSelector(store => store.param.stn_list);\n    return (\n        <g {...others}>\n            <text className=\"rmg-name__zh\" fontSize={28}>\n                {destIds.map(stnId => stationList[stnId].name[0]).join('/') + '方向'}\n            </text>\n            <text className=\"rmg-name__en\" fontSize={14} dy={22}>\n                {'Towards ' + destIds.map(stnId => stationList[stnId].name[1].replace('\\\\', ' ')).join('/')}\n            </text>\n        </g>\n    );\n};\n\nconst DirectionIndicatorTextGroup2 = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n\n    const direction = useRootSelector(store => store.param.direction);\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    const charCounts = destIds.map(stnId => stationList[stnId].name[0].length);\n    const minCharCounts = Math.min(...charCounts);\n    const charSpacing =\n        minCharCounts > 1 && charCounts[0] !== charCounts[1]\n            ? Math.abs(charCounts[0] - charCounts[1]) / (minCharCounts - 1)\n            : 0;\n\n    return (\n        <g {...others}>\n            {destIds.map((id, i) => (\n                <React.Fragment key={id}>\n                    <text\n                        className=\"rmg-name__zh\"\n                        fontSize={25}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-21 + 42 * i}\n                        letterSpacing={charCounts[i] > charCounts[1 - i] ? '0em' : `${charSpacing}em`}\n                    >\n                        {stationList[id].name[0]}\n                    </text>\n                    <text\n                        className=\"rmg-name__en\"\n                        fontSize={11.5}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-1 + 42 * i}\n                    >\n                        {'Towards ' + stationList[id].name[1].replace('\\\\', ' ')}\n                    </text>\n                </React.Fragment>\n            ))}\n            <text\n                className=\"rmg-name__zh\"\n                fontSize={28}\n                x={direction === ShortDirection.left ? 25 * (Math.max(...charCounts) + 1) : 0}\n                y={5}\n            >\n                方向\n            </text>\n        </g>\n    );\n};\n\nconst TerminusFlag = React.memo(() => (\n    <g id=\"terminus_gz\" textAnchor=\"middle\">\n        <text className=\"rmg-name__zh\" fontSize={90}>\n            终 点 站\n        </text>\n        <text dy={70} className=\"rmg-name__en\" fontSize={36}>\n            Terminal\n        </text>\n        <g strokeWidth={8} stroke=\"#000\">\n            <path d=\"M -160,68 h -160\" />\n            <path d=\"M 160,68 h 160\" />\n        </g>\n    </g>\n));\n\nconst NoteBox = React.memo(\n    (props: { note: Note }) => {\n        const noteTextEl = React.useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = React.useState({ width: 0, height: 0, y: 0 } as DOMRect);\n        React.useEffect(\n            () => setBBox(noteTextEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.note[0], props.note[1]]\n        );\n\n        return (\n            <g\n                className=\"note-box\"\n                style={{ ['--x-percentage' as any]: props.note[2], ['--y-percentage' as any]: props.note[3] }}\n            >\n                {props.note[4] && (\n                    <rect\n                        height={bBox.height + 4}\n                        width={bBox.width + 4}\n                        x={-2}\n                        y={bBox.y - 2}\n                        fill=\"none\"\n                        stroke=\"black\"\n                        strokeWidth={0.5}\n                    />\n                )}\n                <g ref={noteTextEl}>\n                    <g fontSize={16} letterSpacing={1.2}>\n                        {props.note[0].split('\\n').map((txt, i) => (\n                            <text key={i} className=\"rmg-name__zh\" y={i * 18}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n\n                    <g\n                        fontSize={10}\n                        letterSpacing={0.33}\n                        transform={`translate(0,${18 * props.note[0].split('\\n').length})`}\n                    >\n                        {props.note[1].split('\\n').map((txt, i) => (\n                            <text\n                                key={i}\n                                className=\"rmg-name__en\"\n                                y={i * 11}\n                                textLength={\n                                    i < (props.note[1].match(/\\n/g)?.length || 0)\n                                        ? bBox.width\n                                        : navigator.userAgent.includes('Firefox')\n                                        ? -1\n                                        : 0\n                                }\n                                lengthAdjust=\"spacing\"\n                            >\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.note.toString() === nextProps.note.toString()\n);\n","import React from 'react';\nimport { PanelTypeGZMTR, PanelTypeShmetro } from '../../constants/constants';\nimport PsdNumber from '../gzmtr/psd-number';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <PsdNumber\n                num={props.isShowPSD as string}\n                inStrip={isInStrip}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            />\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import { CanvasType, Theme } from '../constants/constants';\nimport React, { ReactNode } from 'react';\n\ninterface SvgWrapperProps {\n    type: CanvasType;\n    svgWidth: number;\n    svgHeight: number;\n    canvasScale: number;\n    theme: Theme;\n    children: ReactNode;\n}\n\nexport default function SvgWrapper(props: SvgWrapperProps) {\n    const { type, svgWidth, svgHeight, canvasScale, theme, children } = props;\n\n    return (\n        <svg\n            id={type}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            height={svgHeight * canvasScale}\n            viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n            colorInterpolationFilters=\"sRGB\"\n            style={{\n                ['--rmg-svg-width' as any]: svgWidth + 'px',\n                ['--rmg-svg-height' as any]: svgHeight + 'px',\n                ['--rmg-theme-colour' as any]: theme[2],\n                ['--rmg-theme-fg' as any]: theme[3],\n            }}\n        >\n            <rect\n                id=\"canvas-bg\"\n                fill=\"white\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n            {children}\n            <rect\n                id=\"canvas-border\"\n                fill=\"none\"\n                strokeWidth={3}\n                stroke=\"none\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n        </svg>\n    );\n}\n"],"names":["PsdNumber","props","num","inStrip","others","textAnchor","fill","MonoColour","height","width","rx","x","className","fontSize","dy","CANVAS_TYPE","CanvasType","canvasScale","useRootSelector","state","app","store","param","svgWidths","svgWidth","svgHeight","svg_height","direction","psdNumber","psd_num","infoPanelType","info_panel_type","notes","notesGZMTR","currentStationIndex","current_stn_idx","stationList","stn_list","theme","curStnInfo","type","DefsGZMTR","variant","isShowLight","PanelTypeGZMTR","isShowPSD","ShortDirection","parents","includes","children","TerminusFlag","DirectionIndicator","map","note","i","NoteBox","x2","transform","strokeWidth","stroke","memo","id","d","strokeLinecap","routes","helper","directionIndicatorX","direction_gz_x","directionIndicatorY","direction_gz_y","validDests","useMemo","Set","reduce","acc","cur","concat","filter","stnId","slice","toString","textGroupProps","destIds","style","xlinkHref","length","DirectionIndicatorTextGroup","DirectionIndicatorTextGroup2","name","join","replace","charCounts","minCharCounts","Math","min","charSpacing","abs","y","letterSpacing","max","React","noteTextEl","bBox","setBBox","current","getBBox","ref","split","txt","textLength","match","navigator","userAgent","lengthAdjust","prevProps","nextProps","stripHeight","indicatorLight","cy","r","ry","PSD","isInStrip","psdDy","SvgWrapper","xmlns","xmlnsXlink","viewBox","colorInterpolationFilters"],"sourceRoot":""}