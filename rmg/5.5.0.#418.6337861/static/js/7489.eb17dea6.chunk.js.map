{"version":3,"file":"static/js/7489.eb17dea6.chunk.js","mappings":"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","sources":["svgs/destination/destination-shmetro.tsx","svgs/indoor/indoor-shmetro.tsx","svgs/railmap/railmap-shmetro.tsx","svgs/shmetro/index.tsx"],"sourcesContent":["import React, { forwardRef, memo, useEffect, useMemo, useRef, useState } from 'react';\nimport { useRootSelector } from '../../redux';\nimport { isColineBranch } from '../../redux/param/coline-action';\nimport { CanvasType, ColineInfo, ColourHex, MonoColour, Name, ShortDirection } from '../../constants/constants';\nimport { get_pivot_stations } from '../railmap/methods/shmetro-loop';\nimport SvgWrapper from '../svg-wrapper';\n\nconst CANVAS_TYPE = CanvasType.Destination;\n\nexport default function DestinationSHMetro() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const { svgWidth: svgWidths, svg_height: svgHeight, theme } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsSHMetro />\n            <DestSHMetro />\n        </SvgWrapper>\n    );\n}\n\nconst DefsSHMetro = memo(() => (\n    <defs>\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"slope\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n    </defs>\n));\n\nconst DestSHMetro = () => {\n    const { routes, branches } = useRootSelector(store => store.helper);\n    const {\n        line_name,\n        theme,\n        current_stn_idx: current_stn_id,\n        direction,\n        stn_list,\n        info_panel_type,\n        loop,\n        coline,\n    } = useRootSelector(store => store.param);\n\n    // get valid destination of each branch\n    const get_valid_destinations = (routes: string[][], direction: ShortDirection, current_stn_id: string) => [\n        ...new Set(\n            routes\n                .filter(route => route.includes(current_stn_id))\n                .map(route => {\n                    const res = route.filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n                    return direction === 'l' ? res[0] : res.reverse()[0];\n                })\n        ),\n    ];\n    // get the name from the destination id(s)\n    const get_dest_names = (dest_ids: string[], one_line: boolean) =>\n        !one_line\n            ? dest_ids.map(id => stn_list[id].name.map(s => s.replace('\\\\', '')) as Name)\n            : [\n                  // only one line in `sh` type\n                  [\n                      dest_ids.map(id => stn_list[id].name[0]).join('，'),\n                      dest_ids.map(id => stn_list[id].name[1]).join(', '),\n                  ].map(s => s.replace('\\\\', '')) as Name,\n              ];\n\n    // get destination id(s)\n    const valid_dest_ids = !loop\n        ? get_valid_destinations(routes, direction, current_stn_id)\n        : get_pivot_stations(branches, direction, stn_list, current_stn_id);\n    // get coline destination id(s)\n    // note that for loop, coline branches' destination id(s) are needed\n    const coline_dest_ids = (!loop ? valid_dest_ids : get_valid_destinations(routes, direction, current_stn_id)).filter(\n        valid_dest_id =>\n            branches\n                .slice(1)\n                .filter(branch => isColineBranch(branch, stn_list))\n                .some(branch => branch.includes(valid_dest_id))\n    );\n    // filter out coline destination id(s)\n    const regular_dest_ids = valid_dest_ids.filter(valid_dest_id => !coline_dest_ids.includes(valid_dest_id));\n\n    // destination names of loop line, `sh2020` type will always be two lines\n    const dest_names = get_dest_names(regular_dest_ids, !loop && !(info_panel_type === 'sh2020'));\n    console.log(dest_names);\n    const coline_dest_names = get_dest_names(coline_dest_ids, true);\n\n    // this will give the space for at most two lines of dest_names\n    const coline_dy = 250;\n    // get coline info from coline_dest_ids\n    const colines = Object.fromEntries(\n        coline_dest_ids\n            .map(coline_dest_id => [\n                coline_dest_id,\n                Object.values(coline)\n                    .filter(co => co.from === coline_dest_id || co.to === coline_dest_id)\n                    .at(0),\n            ])\n            .filter(([key, val]) => val)\n    ) as {\n        [k: string]: ColineInfo;\n    };\n    return (\n        <>\n            <Dest\n                dest_names={dest_names}\n                line_name={line_name}\n                line_color={[theme[2], theme[3]]}\n                coline={coline_dest_ids.length ? true : false}\n                upper={coline_dest_ids.length ? true : false}\n            />\n            {coline_dest_ids.length &&\n                // multiple coline dest is not supported yet\n                coline_dest_ids.map(coline_dest_id => (\n                    <g key={`coline_${coline_dest_id}`} transform={`translate(0,${-coline_dy})`}>\n                        <Dest\n                            dest_names={[coline_dest_names.at(0)!]}\n                            line_name={colines[coline_dest_id]?.colors.at(0)!.slice(4) as Name}\n                            line_color={[\n                                colines[coline_dest_id]?.colors.at(0)![2],\n                                colines[coline_dest_id]?.colors.at(0)![3],\n                            ]}\n                            coline\n                            upper={false}\n                        />\n                    </g>\n                ))}\n        </>\n    );\n};\n\nconst Dest = (props: {\n    dest_names: Name[];\n    line_name: Name;\n    line_color: [ColourHex, MonoColour]; // override coline color\n    coline: boolean; // hide the marker if it is a coline\n    upper: boolean; // coline needs the line in the upper position\n}) => {\n    const { dest_names, line_name, line_color, coline, upper } = props;\n    const {\n        current_stn_idx: current_stn_id,\n        direction,\n        platform_num,\n        svgWidth,\n        svg_height,\n    } = useRootSelector(store => store.param);\n\n    const terminalEl = useRef<SVGGElement | null>(null);\n    const [terminalBBox, setTerminalBBox] = useState({ width: 0 } as SVGRect);\n    useEffect(\n        () => setTerminalBBox(terminalEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(dest_names), JSON.stringify(current_stn_id)]\n    );\n\n    const [middle, MARGIN, PADDING, LINEBOX_WIDTH, PLATFORM_WIDTH] = [svgWidth.destination / 2, 10, 36, 264, 325];\n    // Alignment Priority:\n    // 1. Centre of canvas\n    // 2. Centre of remaining\n    const platformX =\n        middle - MARGIN - PADDING - terminalBBox.width >= PLATFORM_WIDTH / 2 &&\n        middle - MARGIN - PADDING - LINEBOX_WIDTH >= PLATFORM_WIDTH / 2\n            ? middle\n            : direction === 'l'\n            ? (svgWidth.destination + terminalBBox.width - LINEBOX_WIDTH) / 2\n            : (svgWidth.destination - terminalBBox.width + LINEBOX_WIDTH) / 2;\n\n    // the platform screen doors flash light\n    // #20\n    // $('g#station_info_shmetro > rect').attr({ transform: `translate(${this._svgDestWidth / 2},${250 + dh})` })\n\n    return (\n        <g transform={`translate(0,${svg_height - 300})`}>\n            <path\n                stroke={line_color[0]}\n                strokeWidth={12}\n                d={\n                    direction === 'l'\n                        ? `M${svgWidth.destination - 24},16 H 36`\n                        : `M24,16 H ${svgWidth.destination - 36}`\n                }\n                transform={`translate(0,${!upper ? 220 : -20})`}\n                markerEnd={!coline ? 'url(#slope)' : undefined}\n            />\n\n            <Terminal ref={terminalEl} dest_names={dest_names} />\n            {platform_num !== '' && (\n                <g transform={`translate(${platformX},0)`}>\n                    <PlatformNum />\n                </g>\n            )}\n\n            {line_name[0].match(/^[\\w\\d]+/) ? (\n                <LineNameBoxNumber line_name={line_name} line_color={line_color} />\n            ) : (\n                <LineNameBoxText line_name={line_name} line_color={line_color} />\n            )}\n        </g>\n    );\n};\n\nconst Terminal = forwardRef((props: { dest_names: Name[] }, ref: React.Ref<SVGGElement>) => {\n    const { dest_names } = props;\n    const { direction, svgWidth } = useRootSelector(store => store.param);\n\n    return (\n        <g ref={ref} transform={`translate(${direction === 'l' ? 36 : svgWidth.destination - 36},145)`}>\n            {/* this is not a generalized implementation, only dest length of 1 and 2 are supported */}\n            <g transform={`translate(0,${dest_names.length === 2 ? -20 : 20})`}>\n                <path\n                    d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\"\n                    fill=\"black\"\n                    transform={`rotate(${direction === 'l' ? 0 : 180})scale(0.8)`}\n                />\n            </g>\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${direction === 'l' ? 128 + 20 : -128 - 20},25)`}\n            >\n                {dest_names.map((name, i) => (\n                    <React.Fragment key={i}>\n                        <text className=\"rmg-name__zh\" fontSize={70} dy={i * -100 + 7} key={`zh${i}`}>\n                            {'往' + name[0]}\n                        </text>\n                        <text className=\"rmg-name__en\" fontSize={25} dy={i * -100 + 40} key={`en${i}`}>\n                            {'To ' + name[1]}\n                        </text>\n                    </React.Fragment>\n                ))}\n            </g>\n        </g>\n    );\n});\n\nconst PlatformNum = () => {\n    const { platform_num } = useRootSelector(store => store.param);\n\n    // Total width: 325\n    return useMemo(\n        () => (\n            <g transform={`translate(${-325 / 2 + 60},150)`}>\n                <circle r={60} fill=\"none\" stroke=\"black\" strokeWidth={2} />\n                <text className=\"rmg-name__en\" dominantBaseline=\"central\" fontSize={120} textAnchor=\"middle\">\n                    {platform_num}\n                </text>\n                <text className=\"rmg-name__zh\" fontSize={100} dominantBaseline=\"central\" x={65}>\n                    站台\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [platform_num]\n    );\n};\n\nconst LineNameBoxText = (props: { line_name: Name; line_color: [ColourHex, MonoColour] }) => {\n    const { line_name, line_color } = props;\n    const { direction, svgWidth } = useRootSelector(store => store.param);\n\n    const boxX = direction === 'l' ? svgWidth.destination - 42 : 42;\n\n    // get the exact station name width so that the\n    // line color rectangle can be the right width.\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...line_name]\n    );\n\n    const rectDx = (direction === 'l' ? -bBox.width : 0) - 6;\n    const stnNameEnDx = ((direction === 'l' ? -1 : 1) * bBox.width) / 2;\n\n    return useMemo(\n        () => (\n            <g transform={`translate(${boxX},92)`}>\n                <rect fill={line_color[0]} x={rectDx} width={bBox.width + 10} height={120} />\n                <g textAnchor={direction === 'r' ? 'start' : 'end'} transform=\"translate(0,68)\" fill={line_color[1]}>\n                    <g ref={stnNameEl}>\n                        <text className=\"rmg-name__zh\" fontSize={68}>\n                            {line_name[0]}\n                        </text>\n                    </g>\n                    <text className=\"rmg-name__en\" fontSize={30} textAnchor=\"middle\" x={stnNameEnDx} dy={42}>\n                        {line_name[1]}\n                    </text>\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [bBox, ...line_name, ...line_color, direction, svgWidth.destination]\n    );\n};\n\nconst LineNameBoxNumber = (props: { line_name: Name; line_color: [ColourHex, MonoColour] }) => {\n    const { line_name, line_color } = props;\n    const { direction, svgWidth } = useRootSelector(store => store.param);\n\n    const [lineNumber, lineNameRes] = line_name[0].match(/^[\\w\\d]+|.+/g) as string[];\n\n    // Number width: 108\n    // Text width: 136\n    // Gap: 20\n    // Left: 108/2 + 20 + 136 = 210\n    // Right: 108/2 = 54\n    const boxX = direction === 'l' ? svgWidth.destination - 36 - 210 : 36 + 54;\n\n    // Total width: 264\n    return useMemo(\n        () => (\n            <g transform={`translate(${boxX},92)`}>\n                <rect fill={line_color[0]} x={-54} width={108} height={120} />\n                <text\n                    className=\"rmg-name__zh\"\n                    fill={line_color[1]}\n                    fontSize={96}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    transform=\"translate(0,60)\"\n                    letterSpacing={-5}\n                >\n                    {lineNumber}\n                </text>\n                <g textAnchor=\"start\" transform=\"translate(74,68)\">\n                    <text className=\"rmg-name__zh\" fontSize={68}>\n                        {lineNameRes}\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={30} dy={42}>\n                        {line_name[1]}\n                    </text>\n                </g>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [boxX, ...line_name, ...line_color, direction, svgWidth.destination]\n    );\n};\n","import React, { useMemo } from 'react';\nimport { adjacencyList, criticalPathMethod, getStnState, getXShareMTR } from '../railmap/methods/share';\nimport StationSHMetro from './station-shmetro';\nimport { StationsSHMetro } from '../railmap/methods/mtr';\nimport { CanvasType, Services, StationDict } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport LoopSHMetro from '../railmap/main/loop/loop-shmetro';\nimport SvgWrapper from '../svg-wrapper';\n\nconst CANVAS_TYPE = CanvasType.Indoor;\n\nexport default function IndoorWrapperSHMetro() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const { svgWidth: svgWidths, svg_height: svgHeight, theme, loop } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsSHMetro />\n            {loop ? <LoopSHMetro bank_angle={false} canvas={CanvasType.Indoor} /> : <IndoorSHMetro />}\n            <InfoElements />\n        </SvgWrapper>\n    );\n}\n\nexport const DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_indoor_sh\" fill=\"var(--rmg-white)\" strokeWidth={5} r={8} transform=\"scale(1.5)\" />\n        <path\n            id=\"int2_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"express_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"direct_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V40 a 5,5 0 1 1 -10,0Z\"\n        />\n    </defs>\n));\n\nconst leftWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0;\n    if (stnList[stnId].parents.length === 2) res += 1;\n    if (stnList[stnList[stnId].parents[0]].children.length === 2) res += 1;\n    return res;\n};\n\nconst rightWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0;\n    if (stnList[stnId].children.length === 2) res += 1;\n    if (stnList[stnList[stnId].children[0]].parents.length === 2) res += 1;\n    return res;\n};\n\nconst IndoorSHMetro = () => {\n    const { routes, branches, depsStr: deps } = useRootSelector(store => store.helper);\n    const param = useRootSelector(store => store.param);\n\n    const adjMat = adjacencyList(param.stn_list, leftWideFactor, rightWideFactor);\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.indoor * param.padding) / 100,\n        param.svgWidth.indoor * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => StationsSHMetro.getYShares(param.stn_list, branches),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: (yShares[cur] * param.branchSpacingPct * param.svg_height) / 200 }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const servicesAll = Object.values(Services);\n    const servicesPresent = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat() // all services in all stations\n        .reduce(\n            (acc, cur) => {\n                acc[servicesAll.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        ) // set the flag in order\n        .map((bool, i) => [servicesAll[i], bool] as [Services, boolean]) // zip\n        .filter(s => s[1]) // get the existing service\n        .map(s => s[0]); // maintain the services' order\n\n    const linePaths = StationsSHMetro.drawLine(\n        branches,\n        stnStates,\n        param.stn_list,\n        lineXs,\n        xs,\n        ys,\n        (param.branchSpacingPct * param.svg_height) / 200,\n        criticalPath,\n        0\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height / 2})`}>\n            <Lines paths={linePaths} services={servicesPresent} />\n            <StationGroup xs={xs} ys={ys} services={servicesPresent} />\n        </g>\n    );\n};\n\nconst Lines = (props: { paths: { main: string[]; pass: string[] }; services: Services[] }) => {\n    return (\n        <g fill=\"none\" strokeWidth={12} stroke=\"var(--rmg-theme-colour)\">\n            {props.services.map((service, i) => (\n                <g key={`indoor_line_${i}`} transform={`translate(0, ${i * 30})`}>\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n            ))}\n        </g>\n    );\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    services: Services[]; // determine if all station text should be upward\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { branches } = useRootSelector(store => store.helper);\n    const param = useRootSelector(store => store.param);\n    const { xs, ys, services } = props;\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .filter(stnId => param.stn_list[stnId].services.length !== 0)\n                .map(stnId => (\n                    <g key={stnId} transform={`translate(${xs[stnId]},${ys[stnId]})`}>\n                        <StationSHMetro\n                            stnId={stnId}\n                            nameDirection={\n                                branches\n                                    .filter(branch => branch.includes(stnId))\n                                    .map(branch =>\n                                        branch.indexOf(stnId) % 2 === 0 || services.length > 1 ? 'downward' : 'upward'\n                                    )[0] as 'upward' | 'downward'\n                            }\n                            services={services}\n                        />\n                    </g>\n                ))}\n        </g>\n    );\n};\n\nconst InfoElements = () => {\n    const param = useRootSelector(store => store.param);\n\n    return React.useMemo(\n        () => (\n            <>\n                <g transform={`translate(${param.svgWidth.indoor / 2},50)`}>\n                    <text textAnchor=\"middle\" fontSize=\"30\" className=\"rmg-name__zh\">\n                        轨道交通{param.line_name[0]}运营线路示意图\n                    </text>\n                </g>\n                <g transform={`translate(${param.svgWidth.indoor / 2},${param.svg_height - 270})`}>\n                    <text textAnchor=\"middle\" fontSize=\"18\" className=\"rmg-name__zh\" dx=\"-30\" dy=\"230\">\n                        友情提示：请留意您需要换乘线路的首末班时间，以免耽误您的出行，末班车进站前三分钟停售该末班车车票。\n                    </text>\n                    <text textAnchor=\"middle\" fontSize=\"12\" className=\"rmg-name__en\" dx=\"10\" dy=\"250\">\n                        Please pay attention to the interchange schedule if you want to transfer to other lines. Stop\n                        selling tickets 3 minutes before the last train services.\n                    </text>\n                    <g transform=\"translate(-600,215)\">\n                        <rect x=\"-5\" y=\"-25\" width=\"100\" height=\"70\" fill=\"none\" stroke=\"black\" rx=\"5\"></rect>\n                        <line x1=\"28\" x2=\"28\" y1=\"-20\" y2=\"40\" stroke=\"black\"></line>\n                        <text className=\"rmg-name__zh\" dx=\"3\" fontSize=\"18\">\n                            图\n                        </text>\n                        <text className=\"rmg-name__zh\" dx=\"3\" dy=\"18\" fontSize=\"18\">\n                            例\n                        </text>\n                        <text className=\"rmg-name__en\" dy=\"35\" fontSize=\"8\">\n                            legend\n                        </text>\n                        <use\n                            transform=\"translate(45,10)\"\n                            xlinkHref=\"#int2_indoor_sh\"\n                            stroke=\"var(--rmg-theme-colour)\"\n                        />\n                        <text className=\"rmg-name__zh\" dx=\"60\" dy=\"10\" fontSize=\"10\">\n                            换乘站\n                        </text>\n                        <text className=\"rmg-name__en\" dx=\"60\" dy=\"20\" fontSize=\"6\">\n                            Interchange\n                        </text>\n                        <text className=\"rmg-name__en\" dx=\"60\" dy=\"30\" fontSize=\"6\">\n                            Station\n                        </text>\n                    </g>\n                </g>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.svgWidth.indoor, param.svg_height, param.line_name]\n    );\n};\n\n/* Some unused functions to split branches from the main line.\n * Note the branches here has a slightly different meaning.\n * It refers to all the line sections that have a parallel line\n * rather than the upper or the bottom branch section.\n *\n * Currently these functions only can be used on a line that\n * branches in the middle and ends at the linestart, which also\n * means that linestart has two children in the adjMat.\n */\n/*\nconst getPathLength = (adjMat: ReturnType<typeof adjacencyList>, from: string, to: string): number => {\n    let cnt = 0, cur = from\n    while (Object.keys(adjMat[cur]).length > 0) {\n        cnt += 1\n        // we choose the first for all the cases so that the length for different branches will end in the same node\n        cur = Object.keys(adjMat[cur])[0]\n    }\n    return cnt\n}\nconst getIntersectionStn = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n\n    let a = start[0], b = start[1]\n    const lenA = getPathLength(adjMat, a, 'lineend')\n    const lenB = getPathLength(adjMat, b, 'lineend')\n    if (lenA < lenB) {\n        for (let i = 0; i < lenB - lenA; i++) b = Object.keys(adjMat[b])[0]\n    } else {\n        for (let i = 0; i < lenA - lenB; i++) a = Object.keys(adjMat[a])[0]\n    }\n    while (a !== b) {\n        a = Object.keys(adjMat[a])[0]\n        b = Object.keys(adjMat[b])[0]\n    }\n    return a\n}\nconst getBranchesAndMainLine = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n    const intersection = getIntersectionStn(adjMat)\n    return {\n        'branches': [\n            criticalPathMethod(start[0], intersection, adjMat).nodes,\n            criticalPathMethod(start[1], intersection, adjMat).nodes\n        ],\n        'main': criticalPathMethod(intersection, 'lineend', adjMat).nodes\n    }\n}\nconst getYShares = (adjMat: ReturnType<typeof adjacencyList>,\n    branchesAndMainLine: ReturnType<typeof getBranchesAndMainLine>,\n    stnId: string) => {\n    const branches = branchesAndMainLine.branches\n    const main = branchesAndMainLine.main\n\n    if (main.includes(stnId)) {\n        return 3\n    } else if (branches[0].includes(stnId)) {\n        return 0\n    } else {\n        return 6\n    }\n}\n*/\n","import * as React from 'react';\nimport { CanvasType } from '../../constants/constants';\nimport MainSHMetro, { DirectionElements } from './main/main-shmetro';\nimport LoopSHMetro from './main/loop/loop-shmetro';\nimport { useRootSelector } from '../../redux';\nimport SvgWrapper from '../svg-wrapper';\n\nconst CANVAS_TYPE = CanvasType.RailMap;\n\nexport default function RailMapSHMetro() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgHeight,\n        theme,\n        loop,\n        loop_info: { bank },\n    } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsSHMetro />\n\n            {loop ? <LoopSHMetro bank_angle={bank} canvas={CanvasType.RailMap} /> : <MainSHMetro />}\n\n            <DirectionElements />\n        </SvgWrapper>\n    );\n}\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} r={5} />\n        <path id=\"int2_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\" />\n        <path\n            id=\"express_sh\"\n            fill=\"var(--rmg-white)\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"direct_sh\"\n            fill=\"var(--rmg-white)\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V50 a 5,5 0 1 1 -10,0Z\"\n        />\n        <rect id=\"stn_sh_2020\" stroke=\"none\" height={24} width={12} x={-6} y={-18} />\n        <rect id=\"stn_sh_2020_express\" stroke=\"none\" height={49} width={12} x={-6} y={-18} />\n        <rect id=\"stn_sh_2020_direct\" stroke=\"none\" height={74} width={12} x={-6} y={-18} />\n\n        <rect id=\"intbox_number\" height={22} width={20} y={-11} />\n\n        <g id=\"intbox_maglev\" transform=\"translate(-25,0)\">\n            <rect id=\"maglev_5\" height={144} width={130} y=\"40\" x=\"30\" strokeWidth={10} />\n            <path\n                id=\"maglev_3\"\n                fill=\"var(--rmg-white)\"\n                d=\"m90,55a40,5 0 0 0 -40,3a5,5 0 0 0 -5,5a5,60 0 0 0 -3,60a5,5 0 0 0 5,5l96,0a5,5 0 0 0 5,-5a5,60 0 0 0 -3,-60a5,5 0 0 0 -5,-5a40,5 0 0 0 -40,-3l-5,-10l-5,10\"\n            />\n            <path\n                id=\"maglev_4\"\n                fill=\"var(--rmg-white)\"\n                d=\"m90,140l-40,0a10,5 0 0 1 -10,-5l0,25a10,15 0 0 0 10,15l15,0l0,-10l-15,0l0,-15l90,0l0,15l-15,0l0,10l15,0a10,15 0 0 0 10,-15l0,-25a10,5 0 0 1 -10,5l-50,0\"\n            />\n            <rect id=\"maglev_1\" height=\"25\" width=\"40\" y=\"80\" x=\"50\" />\n            <rect id=\"maglev_2\" height=\"25\" width=\"40\" y=\"80\" x=\"100\" />\n        </g>\n\n        <g id=\"airport\" transform=\"scale(0.5)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" />\n            <path\n                id=\"airport\"\n                d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                transform=\"translate(-28.9697,0.14347)\"\n                fill=\"var(--rmg-white)\"\n            />\n        </g>\n        <g id=\"disney\" transform=\"scale(0.5)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" />\n            <path\n                fill=\"var(--rmg-white)\"\n                d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                transform=\"translate(-28.9697 0.13398)\"\n            />\n        </g>\n        {/* Special thanks to Wikimedia Commons, see https://commons.wikimedia.org/wiki/File:China_Railways.svg */}\n        <g id=\"railway\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" transform=\"translate(0,-2)scale(0.5)\" />\n            <path\n                fill=\"var(--rmg-white)\"\n                d=\"M169,273.5c0-19,14.7-34.8,33.7-36.3c18.9-1.5,38.1-2.2,57.4-2.2c19.3,0,38.4,0.8,57.3,2.2  c19,1.5,33.7,17.3,33.7,36.3v47.3l-51.3,14.7c-11.2,3.2-18.9,13.4-18.9,25v147.8c0,17.4,12.2,32.3,29.3,35.7l110.6,22.1  c4.9,1,8.4,5.2,8.4,10.2V599H91v-22.7c0-5,3.5-9.2,8.4-10.2L209.9,544c17-3.4,29.3-18.3,29.3-35.7V360.5c0-11.6-7.7-21.8-18.9-25  L169,320.8V273.5z M309.4,31.7c0.2-1.2,0.3-2.4,0.3-3.6c0-14-11.1-25.4-24.9-26C276.6,1.4,268.3,1,260,1c-8.3,0-16.6,0.4-24.7,1.1  c-13.9,0.6-24.9,12-24.9,26c0,1.2,0.1,2.5,0.3,3.6C90.6,54.8,0,160.3,0,287c0,97.2,53.4,182,132.4,226.6l36.8-48.1  C104.3,432.4,59.8,364.9,59.8,287c0-110.6,89.6-200.2,200.2-200.2S460.2,176.4,460.2,287c0,77.9-44.5,145.4-109.4,178.5  c15,19.6,25.6,33.5,36.8,48.1C466.6,469,520,384.2,520,287C520,160.3,429.4,54.8,309.4,31.7z\"\n                transform=\"translate(-10,0)scale(0.04)\"\n            />\n        </g>\n\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"arrow_gray\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-grey)\" />\n        </marker>\n        <marker id=\"arrow_theme_left\" refX={1} refY={0.5}>\n            <path d=\"M1,0L0,1H1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n        <marker id=\"arrow_theme_right\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n        <marker id=\"arrow_theme\" refX={1} refY={0.5}>\n            <path d=\"M0,1H2L1,0z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n\n        {/* Contrast filters for lines. */}\n        <filter id=\"contrast-direct\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncG type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncB type=\"linear\" slope={0.5} intercept={0.25} />\n            </feComponentTransfer>\n        </filter>\n        <filter id=\"contrast-express\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncG type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncB type=\"linear\" slope={0.75} intercept={0.125} />\n            </feComponentTransfer>\n        </filter>\n\n        <filter\n            id=\"pujiang_outline_railmap\"\n            colorInterpolationFilters=\"sRGB\"\n            // TODO: remove the absolute value while make the filter works correctly\n            filterUnits=\"userSpaceOnUse\"\n            x=\"0\"\n            y=\"-1000\"\n            width=\"5000\"\n            height=\"2000\"\n        >\n            {/* Replace pass gray color with white.\n                https://stackoverflow.com/questions/41639049/replace-one-color-using-svg-filters */}\n            <feComponentTransfer in=\"SourceGraphic\">\n                <feFuncR\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n                <feFuncG\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n                <feFuncB\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n            </feComponentTransfer>\n            <feColorMatrix\n                type=\"matrix\"\n                values=\"1 0 0 0 0\n                                                 0 1 0 0 0\n                                                 0 0 1 0 0\n                                                 1 1 1 1 -3\"\n                result=\"selectedColor1\"\n            />\n\n            {/* Draw an outline line around the pass line.\n                https://stackoverflow.com/questions/49693471/svg-border-outline-for-group-of-elements\n                Also see #181 why we do not simply outline the pass line element. */}\n            <feMorphology operator=\"erode\" in=\"selectedColor1\" radius=\"0\" result=\"e1\" />\n            <feMorphology operator=\"erode\" in=\"selectedColor1\" radius=\"1\" result=\"e2\" />\n            <feComposite in=\"e1\" in2=\"e2\" operator=\"xor\" result=\"uncoloredOutline\" />\n            {/* As the pass line is colored in white, we need to recolor the outline with black. */}\n            <feFlood floodColor=\"rgb(0,0,0)\" />\n            <feComposite operator=\"in\" in2=\"uncoloredOutline\" result=\"outline\" />\n            {/* Put the outline on the white not gray pass line. */}\n            <feComposite in=\"outline\" in2=\"selectedColor1\" operator=\"over\" result=\"result\" />\n            {/* Put the white pass line with outline on the original line. */}\n            <feComposite in=\"result\" in2=\"SourceGraphic\" operator=\"over\" />\n        </filter>\n    </defs>\n));\n","import { CanvasType } from '../../constants/constants';\nimport { ReactNode } from 'react';\nimport DestinationSHMetro from '../destination/destination-shmetro';\nimport RunInSHMetro from '../runin/runin-shmetro';\nimport RailMapSHMetro from '../railmap/railmap-shmetro';\nimport IndoorSHMetro from '../indoor/indoor-shmetro';\n\nconst shmetroSvgs: Partial<Record<CanvasType, ReactNode>> = {\n    destination: <DestinationSHMetro />,\n    runin: <RunInSHMetro />,\n    railmap: <RailMapSHMetro />,\n    indoor: <IndoorSHMetro />,\n};\n\nexport default shmetroSvgs;\n"],"names":["CANVAS_TYPE","CanvasType","DestinationSHMetro","canvasScale","useRootSelector","state","app","store","param","svgWidths","svgWidth","svgHeight","svg_height","theme","type","DefsSHMetro","DestSHMetro","memo","id","viewBox","refY","d","fill","helper","routes","branches","line_name","current_stn_id","current_stn_idx","direction","stn_list","info_panel_type","loop","coline","get_valid_destinations","Set","filter","route","includes","map","res","stn_id","reverse","get_dest_names","dest_ids","one_line","name","join","s","replace","valid_dest_ids","get_pivot_stations","coline_dest_ids","valid_dest_id","slice","branch","isColineBranch","some","dest_names","console","log","coline_dest_names","colines","Object","fromEntries","coline_dest_id","values","co","from","to","at","Dest","line_color","length","upper","transform","colors","props","platform_num","terminalEl","useRef","useState","width","terminalBBox","setTerminalBBox","useEffect","current","getBBox","JSON","stringify","middle","destination","platformX","PLATFORM_WIDTH","stroke","strokeWidth","markerEnd","undefined","Terminal","ref","PlatformNum","match","LineNameBoxNumber","LineNameBoxText","forwardRef","textAnchor","i","className","fontSize","dy","useMemo","r","dominantBaseline","x","boxX","stnNameEl","React","bBox","setBBox","rectDx","stnNameEnDx","height","lineNumber","lineNameRes","letterSpacing","IndoorWrapperSHMetro","bank_angle","canvas","IndoorSHMetro","InfoElements","leftWideFactor","stnList","stnId","parents","children","rightWideFactor","deps","depsStr","adjMat","adjacencyList","criticalPath","criticalPathMethod","realCP","nodes","xShares","keys","reduce","acc","cur","getXShareMTR","toString","lineXs","indoor","padding","xs","len","yShares","StationsSHMetro","ys","branchSpacingPct","stnStates","getStnState","servicesAll","Services","servicesPresent","stationInfo","services","flat","indexOf","bool","linePaths","Lines","paths","StationGroup","service","main","path","pass","nameDirection","dx","y","rx","x1","x2","y1","y2","xlinkHref","RailMapSHMetro","bank","loop_info","DirectionElements","cx","cy","refX","filterUnits","slope","intercept","colorInterpolationFilters","in","tableValues","result","operator","radius","in2","floodColor","shmetroSvgs","runin","railmap"],"sourceRoot":""}