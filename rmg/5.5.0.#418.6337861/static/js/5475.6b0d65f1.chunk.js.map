{"version":3,"file":"static/js/5475.6b0d65f1.chunk.js","mappings":"uNAOaA,GAAqBC,EAAAA,EAAAA,IAAyCC,EAAAA,EAAAA,OAErEC,EAAYC,EAAAA,GAAAA,WACLC,EAAkC,SAACC,GAAD,OAC3CN,GAAmB,kBACZG,GADW,IAEdI,OAAM,kBAAMJ,EAAUI,OAAjB,IAAwBC,SAAUF,MAHA,EA+BXG,EAAAA,GAAAA,QAoBXA,EAAAA,GAAAA,O,wFCxDnBC,EAAcC,KAAKC,KACxBC,WAAWC,UAAkBC,QAAUL,EAExC,IAAMM,EAAWL,KAAKC,KAEhBK,EAAW,CAAEC,GAAI,GAAIC,MAAO,IAElCC,SAAS,iDAAiD,WACtDC,YAAW,WACPX,EAAYY,oBAAoBL,EACnC,IAEDM,GAAG,8CAA8C,WAAO,IAAD,KACnDC,EAAAA,EAAAA,IACI,0BACI,SAAC,UAAD,CAAsBC,QAAS,CAAC,4BAAS,cAAeT,SAAUA,OAI1EU,OAAOV,GAAUW,gBAAgB,GACjCD,OAAOV,GAAUY,eAAeX,GAEhCS,OAAM,UAACG,EAAAA,GAAAA,UAAiB,YAAlB,aAAC,EAAuBC,aAAa,MAAMC,KAAK,OACtDL,OAAM,UAACG,EAAAA,GAAAA,UAAiB,YAAlB,aAAC,EAAuBC,aAAa,MAAMC,KAAK,KACzD,GACJ,G,iKCrBc,SAASC,EAAqBC,GACzC,IAAQR,EAAyCQ,EAAzCR,QAAST,EAAgCiB,EAAhCjB,SAAUkB,EAAsBD,EAAtBC,OAAWC,GAAtC,OAAiDF,EAAjD,GAEMG,GAASC,EAAAA,EAAAA,QAA2B,MAC1C,GAAwBC,EAAAA,EAAAA,UAAS,CAAEpB,EAAG,EAAGC,MAAO,IAAhD,eAAOoB,EAAP,KAAaC,EAAb,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAWN,EAAOO,QAAS5B,UACjCyB,EAAQE,GACR1B,GAAYA,EAAS0B,EACxB,GAAE,CAACjB,EAAQmB,cAGR,+BAAGC,KAAMX,EAAS,OAAS,QAAYC,GAAvC,eACI,eAAGW,UAAU,iBAAiBC,SAAU,GAAxC,WACI,iBAAMC,WAAW,MAAM9B,EAAGqB,EAAKrB,EAAI,EAAG+B,UAAU,eAAhD,SACK,OAEL,iBAAMD,WAAW,QAAQ9B,EAAGqB,EAAKpB,MAAQoB,EAAKrB,EAAI,EAAG+B,UAAU,eAA/D,SACK,UAGT,eAAGC,IAAKd,EAAQY,WAAW,SAA3B,WACI,iBAAMC,UAAU,eAAeF,SAAU,GAAzC,SACKtB,EAAQ,MAEb,iBAAM0B,GAAI,GAAIF,UAAU,eAAeF,SAAU,IAAjD,SACKtB,EAAQ,WAK5B,C,yMC1BK2B,EAAsC,CACxCC,OAAOrD,EAAAA,EAAAA,KAAmB,UAAKI,EAAAA,GAAAA,cAQtBkD,EAAkB,SAACrB,GAC5B,IAAQsB,EAAoBtB,EAApBsB,SAAUF,EAAUpB,EAAVoB,MAElB,OACI,SAAC,IAAD,CAAiBG,KAAMA,EAAAA,EAAvB,UACI,SAAC,KAAD,CAAUH,MAAOA,EAAjB,UACI,SAAC,KAAD,UAAeE,OAI9B,EAEKE,EAAe,SAACC,GAAoE,IAAD,yDAAnBN,EAA5BC,EAA+C,EAA/CA,MAAUM,GAAqC,YACrF,OAAOnC,EAAAA,EAAAA,IAAOkC,GAAD,QACTE,QAAS,SAAA3B,GAAK,OAAI,SAACqB,GAAD,QAAiBD,MAAOA,GAAWpB,GAAvC,GACX0B,GAEV,C","sources":["setupTests.tsx","svgs/gzmtr/station-name/station-secondary-name.test.tsx","svgs/gzmtr/station-name/station-secondary-name.tsx","test-utils.tsx"],"sourcesContent":["import createMockStore from 'redux-mock-store';\nimport { BranchStyle, StationDict } from './constants/constants';\nimport rootReducer, { RootState } from './redux';\nimport { getDefaultMiddleware, ThunkDispatch } from '@reduxjs/toolkit';\n\n// FIXME: any -> AnyAction?\ntype DispatchExts = ThunkDispatch<RootState, void, any>;\nexport const createMockAppStore = createMockStore<RootState, DispatchExts>(getDefaultMiddleware());\n\nconst realStore = rootReducer.getState();\nexport const createMockStoreWithMockStations = (stationList: StationDict) =>\n    createMockAppStore({\n        ...realStore,\n        param: { ...realStore.param, stn_list: stationList },\n    });\n\n/**\n * Before reversing:\n * stn0 - stn1 - stn2 (main)\n *             \\\n *              stn3 - stn4 (branch)\n *\n * After reversing:\n * (branch) stn4 - stn3\n *                      \\\n *          (main) stn2 - stn1 - stn0\n */\nexport const mockSimpleStationList: StationDict = {\n    linestart: {\n        parents: [],\n        children: ['stn0'],\n        branch: { left: [], right: [] },\n    },\n    stn0: {\n        parents: ['linestart'],\n        children: ['stn1'],\n        branch: { left: [], right: [] },\n    },\n    stn1: {\n        parents: ['stn0'],\n        children: ['stn2', 'stn3'],\n        branch: { left: [], right: [BranchStyle.through, 'stn3'] },\n    },\n    stn2: {\n        parents: ['stn1'],\n        children: ['lineend'],\n        branch: { left: [], right: [] },\n    },\n    stn3: {\n        parents: ['stn1'],\n        children: ['stn4'],\n        branch: { left: [], right: [] },\n    },\n    stn4: {\n        parents: ['stn3'],\n        children: ['lineend'],\n        branch: { left: [], right: [] },\n    },\n    lineend: {\n        parents: ['stn2', 'stn4'],\n        children: [],\n        branch: { left: [BranchStyle.through, 'stn4'], right: [] },\n    },\n} as any;\n","import React from 'react';\nimport StationSecondaryName from './station-secondary-name';\nimport { render } from '../../../test-utils';\nimport { screen } from '@testing-library/react';\n\nconst mockGetBBox = jest.fn();\n(SVGElement.prototype as any).getBBox = mockGetBBox;\n\nconst onUpdate = jest.fn();\n\nconst mockBBox = { x: -30, width: 59 } as SVGRect;\n\ndescribe('Unit tests for StationSecondaryName component', () => {\n    beforeEach(() => {\n        mockGetBBox.mockReturnValueOnce(mockBBox);\n    });\n\n    it('Can shift parentheses to expected position', () => {\n        render(\n            <svg>\n                <StationSecondaryName stnName={['1号航站楼', 'Terminal 1']} onUpdate={onUpdate} />\n            </svg>\n        );\n\n        expect(onUpdate).toBeCalledTimes(1);\n        expect(onUpdate).toBeCalledWith(mockBBox);\n\n        expect(screen.getByText('(')?.getAttribute('x')).toBe('-33');\n        expect(screen.getByText(')')?.getAttribute('x')).toBe('32');\n    });\n});\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationSecondaryNameProps extends SVGProps<SVGGElement> {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    passed?: boolean;\n}\n\nexport default function StationSecondaryName(props: StationSecondaryNameProps) {\n    const { stnName, onUpdate, passed, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    useEffect(() => {\n        const nextBBox = nameEl.current!.getBBox();\n        setBBox(nextBBox);\n        onUpdate && onUpdate(nextBBox);\n    }, [stnName.toString()]);\n\n    return (\n        <g fill={passed ? '#aaa' : '#000'} {...others}>\n            <g transform=\"translate(0,3)\" fontSize={18}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={13}>\n                    {stnName[0]}\n                </text>\n                <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                    {stnName[1]}\n                </text>\n            </g>\n        </g>\n    );\n}\n","import '@testing-library/jest-dom';\nimport React, { ReactElement, ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { Store } from '@reduxjs/toolkit';\nimport { I18nextProvider } from 'react-i18next';\nimport i18n from './i18n/config';\nimport { Provider } from 'react-redux';\nimport rootReducer from './redux';\nimport { createMockAppStore } from './setupTests';\nimport { MemoryRouter } from 'react-router-dom';\n\ninterface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n    store: Store;\n}\n\nconst initialOptions: CustomRenderOptions = {\n    store: createMockAppStore({ ...rootReducer.getState() }),\n};\n\ninterface TestingProviderProps {\n    children?: ReactNode;\n    store: Store;\n}\n\nexport const TestingProvider = (props: TestingProviderProps) => {\n    const { children, store } = props;\n\n    return (\n        <I18nextProvider i18n={i18n}>\n            <Provider store={store}>\n                <MemoryRouter>{children}</MemoryRouter>\n            </Provider>\n        </I18nextProvider>\n    );\n};\n\nconst customRender = (ui: ReactElement, { store, ...renderOptions } = initialOptions) => {\n    return render(ui, {\n        wrapper: props => <TestingProvider store={store} {...props} />,\n        ...renderOptions,\n    });\n};\n\nexport { customRender as render };\n"],"names":["createMockAppStore","createMockStore","getDefaultMiddleware","realStore","rootReducer","createMockStoreWithMockStations","stationList","param","stn_list","BranchStyle","mockGetBBox","jest","fn","SVGElement","prototype","getBBox","onUpdate","mockBBox","x","width","describe","beforeEach","mockReturnValueOnce","it","render","stnName","expect","toBeCalledTimes","toBeCalledWith","screen","getAttribute","toBe","StationSecondaryName","props","passed","others","nameEl","useRef","useState","bBox","setBBox","useEffect","nextBBox","current","toString","fill","transform","fontSize","textAnchor","className","ref","dy","initialOptions","store","TestingProvider","children","i18n","customRender","ui","renderOptions","wrapper"],"sourceRoot":""}