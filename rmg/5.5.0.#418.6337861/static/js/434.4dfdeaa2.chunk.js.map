{"version":3,"file":"static/js/434.4dfdeaa2.chunk.js","mappings":"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","sources":["svgs/railmap/methods/share.ts","svgs/railmap/railmap-shmetro.tsx","svgs/svg-wrapper.tsx","../javascript/esm|/home/runner/work/rmg/rmg/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import { ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n}\n\nexport const drawLine = (branch: string[], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n    let lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n    let linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n    if (lineMainStns.length === 1) {\n        linePassStns = branch;\n    }\n\n    if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n        // if two set disjoint\n        if (linePassStns[0] === branch[0]) {\n            // -1 -1 1 1\n            linePassStns.push(lineMainStns[0]);\n        } else if (\n            lineMainStns[0] === branch[0] &&\n            lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n            linePassStns.length\n        ) {\n            linePassStns = branch;\n            lineMainStns = [];\n        } else {\n            // 1 1 -1 -1\n            linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n        }\n    }\n\n    return {\n        main: lineMainStns,\n        pass: linePassStns,\n    };\n};\n","import * as React from 'react';\nimport { CanvasType } from '../../constants/constants';\nimport MainSHMetro, { DirectionElements } from './main/main-shmetro';\nimport LoopSHMetro from './main/loop/loop-shmetro';\nimport { useRootSelector } from '../../redux';\nimport SvgWrapper from '../svg-wrapper';\n\nconst CANVAS_TYPE = CanvasType.RailMap;\n\nexport default function RailMapSHMetro() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgHeight,\n        theme,\n        loop,\n        loop_info: { bank },\n    } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsSHMetro />\n\n            {loop ? <LoopSHMetro bank_angle={bank} canvas={CanvasType.RailMap} /> : <MainSHMetro />}\n\n            <DirectionElements />\n        </SvgWrapper>\n    );\n}\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} r={5} />\n        <path id=\"int2_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\" />\n        <path\n            id=\"express_sh\"\n            fill=\"var(--rmg-white)\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"direct_sh\"\n            fill=\"var(--rmg-white)\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V50 a 5,5 0 1 1 -10,0Z\"\n        />\n        <rect id=\"stn_sh_2020\" stroke=\"none\" height={24} width={12} x={-6} y={-18} />\n        <rect id=\"stn_sh_2020_express\" stroke=\"none\" height={49} width={12} x={-6} y={-18} />\n        <rect id=\"stn_sh_2020_direct\" stroke=\"none\" height={74} width={12} x={-6} y={-18} />\n\n        <rect id=\"intbox_number\" height={22} width={20} y={-11} />\n\n        <g id=\"intbox_maglev\" transform=\"translate(-25,0)\">\n            <rect id=\"maglev_5\" height={144} width={130} y=\"40\" x=\"30\" strokeWidth={10} />\n            <path\n                id=\"maglev_3\"\n                fill=\"var(--rmg-white)\"\n                d=\"m90,55a40,5 0 0 0 -40,3a5,5 0 0 0 -5,5a5,60 0 0 0 -3,60a5,5 0 0 0 5,5l96,0a5,5 0 0 0 5,-5a5,60 0 0 0 -3,-60a5,5 0 0 0 -5,-5a40,5 0 0 0 -40,-3l-5,-10l-5,10\"\n            />\n            <path\n                id=\"maglev_4\"\n                fill=\"var(--rmg-white)\"\n                d=\"m90,140l-40,0a10,5 0 0 1 -10,-5l0,25a10,15 0 0 0 10,15l15,0l0,-10l-15,0l0,-15l90,0l0,15l-15,0l0,10l15,0a10,15 0 0 0 10,-15l0,-25a10,5 0 0 1 -10,5l-50,0\"\n            />\n            <rect id=\"maglev_1\" height=\"25\" width=\"40\" y=\"80\" x=\"50\" />\n            <rect id=\"maglev_2\" height=\"25\" width=\"40\" y=\"80\" x=\"100\" />\n        </g>\n\n        <g id=\"airport\" transform=\"scale(0.5)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" />\n            <path\n                id=\"airport\"\n                d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                transform=\"translate(-28.9697,0.14347)\"\n                fill=\"var(--rmg-white)\"\n            />\n        </g>\n        <g id=\"disney\" transform=\"scale(0.5)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" />\n            <path\n                fill=\"var(--rmg-white)\"\n                d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                transform=\"translate(-28.9697 0.13398)\"\n            />\n        </g>\n        {/* Special thanks to Wikimedia Commons, see https://commons.wikimedia.org/wiki/File:China_Railways.svg */}\n        <g id=\"railway\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" transform=\"translate(0,-2)scale(0.5)\" />\n            <path\n                fill=\"var(--rmg-white)\"\n                d=\"M169,273.5c0-19,14.7-34.8,33.7-36.3c18.9-1.5,38.1-2.2,57.4-2.2c19.3,0,38.4,0.8,57.3,2.2  c19,1.5,33.7,17.3,33.7,36.3v47.3l-51.3,14.7c-11.2,3.2-18.9,13.4-18.9,25v147.8c0,17.4,12.2,32.3,29.3,35.7l110.6,22.1  c4.9,1,8.4,5.2,8.4,10.2V599H91v-22.7c0-5,3.5-9.2,8.4-10.2L209.9,544c17-3.4,29.3-18.3,29.3-35.7V360.5c0-11.6-7.7-21.8-18.9-25  L169,320.8V273.5z M309.4,31.7c0.2-1.2,0.3-2.4,0.3-3.6c0-14-11.1-25.4-24.9-26C276.6,1.4,268.3,1,260,1c-8.3,0-16.6,0.4-24.7,1.1  c-13.9,0.6-24.9,12-24.9,26c0,1.2,0.1,2.5,0.3,3.6C90.6,54.8,0,160.3,0,287c0,97.2,53.4,182,132.4,226.6l36.8-48.1  C104.3,432.4,59.8,364.9,59.8,287c0-110.6,89.6-200.2,200.2-200.2S460.2,176.4,460.2,287c0,77.9-44.5,145.4-109.4,178.5  c15,19.6,25.6,33.5,36.8,48.1C466.6,469,520,384.2,520,287C520,160.3,429.4,54.8,309.4,31.7z\"\n                transform=\"translate(-10,0)scale(0.04)\"\n            />\n        </g>\n\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"arrow_gray\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-grey)\" />\n        </marker>\n        <marker id=\"arrow_theme_left\" refX={1} refY={0.5}>\n            <path d=\"M1,0L0,1H1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n        <marker id=\"arrow_theme_right\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n        <marker id=\"arrow_theme\" refX={1} refY={0.5}>\n            <path d=\"M0,1H2L1,0z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n\n        {/* Contrast filters for lines. */}\n        <filter id=\"contrast-direct\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncG type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncB type=\"linear\" slope={0.5} intercept={0.25} />\n            </feComponentTransfer>\n        </filter>\n        <filter id=\"contrast-express\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncG type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncB type=\"linear\" slope={0.75} intercept={0.125} />\n            </feComponentTransfer>\n        </filter>\n\n        <filter\n            id=\"pujiang_outline_railmap\"\n            colorInterpolationFilters=\"sRGB\"\n            // TODO: remove the absolute value while make the filter works correctly\n            filterUnits=\"userSpaceOnUse\"\n            x=\"0\"\n            y=\"-1000\"\n            width=\"5000\"\n            height=\"2000\"\n        >\n            {/* Replace pass gray color with white.\n                https://stackoverflow.com/questions/41639049/replace-one-color-using-svg-filters */}\n            <feComponentTransfer in=\"SourceGraphic\">\n                <feFuncR\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n                <feFuncG\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n                <feFuncB\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n            </feComponentTransfer>\n            <feColorMatrix\n                type=\"matrix\"\n                values=\"1 0 0 0 0\n                                                 0 1 0 0 0\n                                                 0 0 1 0 0\n                                                 1 1 1 1 -3\"\n                result=\"selectedColor1\"\n            />\n\n            {/* Draw an outline line around the pass line.\n                https://stackoverflow.com/questions/49693471/svg-border-outline-for-group-of-elements\n                Also see #181 why we do not simply outline the pass line element. */}\n            <feMorphology operator=\"erode\" in=\"selectedColor1\" radius=\"0\" result=\"e1\" />\n            <feMorphology operator=\"erode\" in=\"selectedColor1\" radius=\"1\" result=\"e2\" />\n            <feComposite in=\"e1\" in2=\"e2\" operator=\"xor\" result=\"uncoloredOutline\" />\n            {/* As the pass line is colored in white, we need to recolor the outline with black. */}\n            <feFlood floodColor=\"rgb(0,0,0)\" />\n            <feComposite operator=\"in\" in2=\"uncoloredOutline\" result=\"outline\" />\n            {/* Put the outline on the white not gray pass line. */}\n            <feComposite in=\"outline\" in2=\"selectedColor1\" operator=\"over\" result=\"result\" />\n            {/* Put the white pass line with outline on the original line. */}\n            <feComposite in=\"result\" in2=\"SourceGraphic\" operator=\"over\" />\n        </filter>\n    </defs>\n));\n","import { CanvasType, Theme } from '../constants/constants';\nimport React, { ReactNode } from 'react';\n\ninterface SvgWrapperProps {\n    type: CanvasType;\n    svgWidth: number;\n    svgHeight: number;\n    canvasScale: number;\n    theme: Theme;\n    children: ReactNode;\n}\n\nexport default function SvgWrapper(props: SvgWrapperProps) {\n    const { type, svgWidth, svgHeight, canvasScale, theme, children } = props;\n\n    return (\n        <svg\n            id={type}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            height={svgHeight * canvasScale}\n            viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n            colorInterpolationFilters=\"sRGB\"\n            style={{\n                ['--rmg-svg-width' as any]: svgWidth + 'px',\n                ['--rmg-svg-height' as any]: svgHeight + 'px',\n                ['--rmg-theme-colour' as any]: theme[2],\n                ['--rmg-theme-fg' as any]: theme[3],\n            }}\n        >\n            <rect\n                id=\"canvas-bg\"\n                fill=\"white\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n            {children}\n            <rect\n                id=\"canvas-border\"\n                fill=\"none\"\n                strokeWidth={3}\n                stroke=\"none\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n        </svg>\n    );\n}\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["adjacencyList","stnList","leftW","rightW","Object","keys","reduce","acc","cur","children","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","indexOf","getXShareMTR","stnId","branches","criticalPath","includes","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","direction","console","log","Set","concat","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","length","stnPred","res","getYShare","stnIds","lineXs","realXs","realYs","e","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","stations","drawLine","stnStates","lineMainStns","linePassStns","main","pass","CANVAS_TYPE","CanvasType","RailMapSHMetro","canvasScale","useRootSelector","state","app","store","param","svgWidths","svgWidth","svgHeight","svg_height","theme","loop","bank","loop_info","type","DefsSHMetro","bank_angle","canvas","DirectionElements","React","id","fill","strokeWidth","r","d","stroke","height","width","transform","cx","cy","viewBox","refY","refX","filterUnits","slope","intercept","colorInterpolationFilters","in","tableValues","values","result","operator","radius","in2","floodColor","SvgWrapper","props","xmlns","xmlnsXlink","style","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","i","F","s","n","done","value","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2"],"sourceRoot":""}