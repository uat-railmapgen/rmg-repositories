{"version":3,"file":"static/js/5822.4ee31e35.chunk.js","mappings":"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","sources":["svgs/gzmtr/index.tsx","svgs/railmap/railmap-gzmtr.tsx"],"sourcesContent":["import { ReactNode } from 'react';\nimport { CanvasType } from '../../constants/constants';\nimport RailMapGZMTR from '../railmap/railmap-gzmtr';\nimport RunInGZMTR from '../runin/runin-gzmtr';\n\nconst gzmtrSvgs: Partial<Record<CanvasType, ReactNode>> = {\n    runin: <RunInGZMTR />,\n    railmap: <RailMapGZMTR />,\n};\n\nexport default gzmtrSvgs;\n","import React, { memo, useMemo } from 'react';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport MainGZMTR from './main/main-gzmtr';\nimport { CanvasType, Note, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport SvgWrapper from '../svg-wrapper';\n\nconst CANVAS_TYPE = CanvasType.RailMap;\n\nconst RailMapGZMTR = () => {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgHeight,\n        direction,\n        psd_num: psdNumber,\n        info_panel_type: infoPanelType,\n        notesGZMTR: notes,\n        current_stn_idx: currentStationIndex,\n        stn_list: stationList,\n        theme,\n    } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n    const curStnInfo = stationList[currentStationIndex];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsGZMTR />\n\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType === PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType === PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            {(direction === ShortDirection.left && curStnInfo.parents.includes('linestart')) ||\n            (direction === ShortDirection.right && curStnInfo.children.includes('lineend')) ? (\n                <TerminusFlag />\n            ) : (\n                <>\n                    <MainGZMTR />\n                    <DirectionIndicator />\n                    {notes.map((note, i) => (\n                        <NoteBox key={i} note={note} />\n                    ))}\n                </>\n            )}\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && (\n                <line x2={svgWidth} transform=\"translate(0,90)\" strokeWidth={3} stroke=\"black\" />\n            )}\n        </SvgWrapper>\n    );\n};\n\nexport default RailMapGZMTR;\n\nconst DefsGZMTR = memo(() => (\n    <defs>\n        <path id=\"arrow_direction\" d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\" fill=\"black\" />\n        <path id=\"inttick\" d=\"M 0,0 v 18\" strokeLinecap=\"square\" />\n    </defs>\n));\n\nconst DirectionIndicator = () => {\n    const { routes } = useRootSelector(store => store.helper);\n    const {\n        direction,\n        direction_gz_x: directionIndicatorX,\n        direction_gz_y: directionIndicatorY,\n        current_stn_idx: currentStationIndex,\n    } = useRootSelector(store => store.param);\n\n    const validDests = useMemo(\n        () => [\n            ...new Set(\n                routes\n                    .reduce(\n                        (acc, cur) =>\n                            cur.includes(currentStationIndex)\n                                ? acc.concat(\n                                      cur\n                                          .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                                          .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                                  )\n                                : acc,\n                        []\n                    )\n                    .filter(id => id !== currentStationIndex)\n            ),\n        ],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const textGroupProps: TextGroupProps = {\n        textAnchor: direction === ShortDirection.left ? 'start' : 'end',\n        transform: `translate(${direction === ShortDirection.left ? 65 : -65},-5)`,\n        destIds: validDests,\n    };\n\n    return (\n        <g\n            id=\"direction_gz\"\n            style={{ ['--x-percentage' as any]: directionIndicatorX, ['--y-percentage' as any]: directionIndicatorY }}\n        >\n            <use\n                xlinkHref=\"#arrow_direction\"\n                style={{ ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg' }}\n            />\n\n            {validDests.length !== 2 ? (\n                <DirectionIndicatorTextGroup {...textGroupProps} />\n            ) : (\n                <DirectionIndicatorTextGroup2 {...textGroupProps} />\n            )}\n        </g>\n    );\n};\n\ntype TextGroupProps = {\n    destIds: string[];\n} & React.SVGProps<SVGGElement>;\n\nconst DirectionIndicatorTextGroup = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const stationList = useRootSelector(store => store.param.stn_list);\n    return (\n        <g {...others}>\n            <text className=\"rmg-name__zh\" fontSize={28}>\n                {destIds.map(stnId => stationList[stnId].name[0]).join('/') + '方向'}\n            </text>\n            <text className=\"rmg-name__en\" fontSize={14} dy={22}>\n                {'Towards ' + destIds.map(stnId => stationList[stnId].name[1].replace('\\\\', ' ')).join('/')}\n            </text>\n        </g>\n    );\n};\n\nconst DirectionIndicatorTextGroup2 = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n\n    const direction = useRootSelector(store => store.param.direction);\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    const charCounts = destIds.map(stnId => stationList[stnId].name[0].length);\n    const minCharCounts = Math.min(...charCounts);\n    const charSpacing =\n        minCharCounts > 1 && charCounts[0] !== charCounts[1]\n            ? Math.abs(charCounts[0] - charCounts[1]) / (minCharCounts - 1)\n            : 0;\n\n    return (\n        <g {...others}>\n            {destIds.map((id, i) => (\n                <React.Fragment key={id}>\n                    <text\n                        className=\"rmg-name__zh\"\n                        fontSize={25}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-21 + 42 * i}\n                        letterSpacing={charCounts[i] > charCounts[1 - i] ? '0em' : `${charSpacing}em`}\n                    >\n                        {stationList[id].name[0]}\n                    </text>\n                    <text\n                        className=\"rmg-name__en\"\n                        fontSize={11.5}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-1 + 42 * i}\n                    >\n                        {'Towards ' + stationList[id].name[1].replace('\\\\', ' ')}\n                    </text>\n                </React.Fragment>\n            ))}\n            <text\n                className=\"rmg-name__zh\"\n                fontSize={28}\n                x={direction === ShortDirection.left ? 25 * (Math.max(...charCounts) + 1) : 0}\n                y={5}\n            >\n                方向\n            </text>\n        </g>\n    );\n};\n\nconst TerminusFlag = React.memo(() => (\n    <g id=\"terminus_gz\" textAnchor=\"middle\">\n        <text className=\"rmg-name__zh\" fontSize={90}>\n            终 点 站\n        </text>\n        <text dy={70} className=\"rmg-name__en\" fontSize={36}>\n            Terminal\n        </text>\n        <g strokeWidth={8} stroke=\"#000\">\n            <path d=\"M -160,68 h -160\" />\n            <path d=\"M 160,68 h 160\" />\n        </g>\n    </g>\n));\n\nconst NoteBox = React.memo(\n    (props: { note: Note }) => {\n        const noteTextEl = React.useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = React.useState({ width: 0, height: 0, y: 0 } as DOMRect);\n        React.useEffect(\n            () => setBBox(noteTextEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.note[0], props.note[1]]\n        );\n\n        return (\n            <g\n                className=\"note-box\"\n                style={{ ['--x-percentage' as any]: props.note[2], ['--y-percentage' as any]: props.note[3] }}\n            >\n                {props.note[4] && (\n                    <rect\n                        height={bBox.height + 4}\n                        width={bBox.width + 4}\n                        x={-2}\n                        y={bBox.y - 2}\n                        fill=\"none\"\n                        stroke=\"black\"\n                        strokeWidth={0.5}\n                    />\n                )}\n                <g ref={noteTextEl}>\n                    <g fontSize={16} letterSpacing={1.2}>\n                        {props.note[0].split('\\n').map((txt, i) => (\n                            <text key={i} className=\"rmg-name__zh\" y={i * 18}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n\n                    <g\n                        fontSize={10}\n                        letterSpacing={0.33}\n                        transform={`translate(0,${18 * props.note[0].split('\\n').length})`}\n                    >\n                        {props.note[1].split('\\n').map((txt, i) => (\n                            <text\n                                key={i}\n                                className=\"rmg-name__en\"\n                                y={i * 11}\n                                textLength={\n                                    i < (props.note[1].match(/\\n/g)?.length || 0)\n                                        ? bBox.width\n                                        : navigator.userAgent.includes('Firefox')\n                                        ? -1\n                                        : 0\n                                }\n                                lengthAdjust=\"spacing\"\n                            >\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.note.toString() === nextProps.note.toString()\n);\n"],"names":["gzmtrSvgs","runin","railmap","CANVAS_TYPE","CanvasType","canvasScale","useRootSelector","state","app","store","param","svgWidths","svgWidth","svgHeight","svg_height","direction","psdNumber","psd_num","infoPanelType","info_panel_type","notes","notesGZMTR","currentStationIndex","current_stn_idx","stationList","stn_list","theme","curStnInfo","type","DefsGZMTR","variant","isShowLight","PanelTypeGZMTR","isShowPSD","ShortDirection","parents","includes","children","TerminusFlag","DirectionIndicator","map","note","i","NoteBox","x2","transform","strokeWidth","stroke","memo","id","d","fill","strokeLinecap","routes","helper","directionIndicatorX","direction_gz_x","directionIndicatorY","direction_gz_y","validDests","useMemo","Set","reduce","acc","cur","concat","filter","stnId","slice","toString","textGroupProps","textAnchor","destIds","style","xlinkHref","length","DirectionIndicatorTextGroup","DirectionIndicatorTextGroup2","props","others","className","fontSize","name","join","dy","replace","charCounts","minCharCounts","Math","min","charSpacing","abs","x","y","letterSpacing","max","React","noteTextEl","width","height","bBox","setBBox","current","getBBox","ref","split","txt","textLength","match","navigator","userAgent","lengthAdjust","prevProps","nextProps"],"sourceRoot":""}