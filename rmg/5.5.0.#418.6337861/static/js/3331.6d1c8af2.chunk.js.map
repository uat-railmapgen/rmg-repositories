{"version":3,"file":"static/js/3331.6d1c8af2.chunk.js","mappings":"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","sources":["svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/methods/share.ts","../javascript/esm|/home/runner/work/rmg/rmg/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import React from 'react';\nimport { InterchangeInfo, Name, Facilities, ColourHex } from '../../../../constants/constants';\nimport { useRootSelector } from '../../../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    color?: ColourHex; // Control the station color if coline is in effect.\n    bank?: -1 | 0 | 1; // Loopline requires station element to be horizontal. Default to 0 (no bank to other side).\n    direction?: 'l' | 'r'; // Loopline requires station element to change direction. Default to current param.\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { stnId, stnState, color, bank: bank_, direction: direction_override } = props;\n    const { direction: direction_param, info_panel_type, stn_list, loop } = useRootSelector(store => store.param);\n    const stnInfo = stn_list[stnId];\n    const direction = direction_override ?? direction_param;\n\n    // shift station name if the line bifurcate here\n    // no shift for loop as there is no vertical line covering the station\n    const branchNameDX = loop\n        ? 0\n        : ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n          (direction === 'r' ? -1 : 1);\n\n    let stationIconStyle = '';\n    let stationIconColor: { [pos: string]: string } = {};\n    if (info_panel_type === 'sh2020') {\n        if (stnInfo.services.length === 3) stationIconStyle = 'stn_sh_2020_direct';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'stn_sh_2020_express';\n        else stationIconStyle = 'stn_sh_2020';\n        stationIconColor.fill = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    } else {\n        // param.info_panel_type === 'sh' or others (from other styles)\n        if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n        else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n            stationIconStyle = 'int2_sh';\n        else stationIconStyle = 'stn_sh';\n        stationIconColor.stroke = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    }\n\n    const bank = bank_ ?? 0;\n    const dx = (direction === 'l' ? 6 : -6) + branchNameDX + bank * 30;\n    const dy = (info_panel_type === 'sh2020' ? -20 : -6) + Math.abs(bank) * (info_panel_type === 'sh2020' ? 25 : 11);\n    const dr = bank ? 0 : direction === 'l' ? -45 : 45;\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                {...stationIconColor} // different styles use either `fill` or `stroke`\n                // sh and sh2020 have different headings of int_sh, so -1 | 1 is multiplied\n                transform={\n                    `translate(${bank * (info_panel_type === 'sh2020' ? 5 : 0)},0)` +\n                    `rotate(${bank * 90 * (info_panel_type === 'sh2020' ? 1 : -1)})`\n                }\n            />\n            <g transform={`translate(${dx},${dy})rotate(${dr})`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={stnState}\n                    direction={direction}\n                    facility={stnInfo.facility}\n                    bank={bank}\n                    oneLine={stnInfo.one_line}\n                    intPadding={stnInfo.int_padding}\n                />\n            </g>\n            {stnState === 0 ? <CurrentStationText /> : undefined}\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    facility: Facilities;\n    bank: -1 | 0 | 1;\n    oneLine: boolean;\n    intPadding: number;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, stnState, direction, facility, bank, oneLine, intPadding } = props;\n\n    // legacy ref to get the exact station name width\n    const stnNameEl = React.useRef<SVGGElement | null>(null);\n\n    // simplify the calculation times\n    const directionPolarity = direction === 'l' ? 1 : -1;\n\n    // main elements icon's dx will change if there is a facility icon or not\n    const mainDx = facility !== Facilities.none ? 30 : 0;\n\n    // interchange will have a line under the name, and should be stretched when placed horizontal in loop\n    const lineDx = bank ? -12 : 0;\n\n    const intEl = React.useRef<SVGGElement | null>(null);\n    const [intWidth, setIntWidth] = React.useState(0);\n    React.useEffect(() => setIntWidth(intEl.current?.getBBox().width ?? 0), [...JSON.stringify(infos)]);\n    const intDx = intPadding - intWidth;\n\n    return (\n        <>\n            {infos.flat().length > 0 && (\n                <>\n                    <line\n                        x1={(lineDx + mainDx) * directionPolarity}\n                        x2={intDx * directionPolarity}\n                        stroke={stnState === -1 ? 'gray' : 'black'}\n                        strokeWidth={0.5}\n                    />\n                    <IntBoxGroup\n                        ref={intEl}\n                        intInfos={infos}\n                        direction={direction}\n                        transform={`translate(${intDx * directionPolarity},-10.75)`}\n                    />\n                </>\n            )}\n\n            {facility !== Facilities.none && <use xlinkHref={'#' + facility} x={10 * directionPolarity} y={-30} />}\n\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${mainDx * directionPolarity},-14)`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={name}\n                    oneLine={oneLine}\n                    directionPolarity={directionPolarity}\n                    fill={stnState === -1 ? 'gray' : stnState === 0 ? 'red' : 'black'}\n                />\n\n                {/* deal out-of-station here as it is a y axis element. leave out-of-system in IntBoxGroup */}\n                {infos[1]?.length > 0 && (\n                    <g transform={`translate(${(intDx + intWidth / 2) * directionPolarity},-30)`}>\n                        <OSIText osiInfos={infos[1]} />\n                    </g>\n                )}\n\n                {/* deal out-of-system here as it's dx is fixed and has nothing to do with IntBoxGroup */}\n                {[...(infos[2] || [])].length > 0 && (\n                    <g transform={`translate(${(intPadding + 5) * directionPolarity},0)`}>\n                        <OSysIText osysiInfos={infos[2]} direction={props.direction} />\n                    </g>\n                )}\n            </g>\n        </>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (\n        props: { stnName: Name; oneLine: boolean; directionPolarity: 1 | -1 } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { stnName, oneLine, directionPolarity, ...others } = props;\n\n        const zhEl = React.useRef<SVGGElement | null>(null);\n        const [enDx, setEnDx] = React.useState(0);\n        React.useEffect(() => {\n            if (oneLine) setEnDx(zhEl.current!.getBBox().width + 5);\n            else setEnDx(0);\n        }, [...stnName, oneLine]);\n\n        const [ZH_HEIGHT, EN_HEIGHT] = [20, 8];\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            <g ref={zhEl}>\n                                {stnName[0].split('\\\\').map((txt, i, arr) => (\n                                    <text\n                                        key={i}\n                                        className=\"rmg-name__zh\"\n                                        dy={\n                                            (arr.length - 1 - i) * -ZH_HEIGHT +\n                                            (oneLine ? EN_HEIGHT : (stnName[1].split('\\\\').length - 1) * -EN_HEIGHT)\n                                        }\n                                    >\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                            <g fontSize={8} transform={`translate(${enDx * directionPolarity},0)`}>\n                                {stnName[1].split('\\\\').map((txt, i, arr) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={(arr.length - 2 - i) * -EN_HEIGHT + 2}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    [...stnName, oneLine, enDx, directionPolarity]\n                )}\n            </g>\n        );\n    }\n);\n\nconst CurrentStationText = () => {\n    const { stn_list } = useRootSelector(store => store.param);\n    const servicesPresent = new Set(\n        Object.values(stn_list)\n            .map(stn => stn.services)\n            .flat()\n    );\n    const dy = [-1, 35, 50, 75][servicesPresent.size];\n\n    return (\n        <g transform={`translate(0, ${dy})`}>\n            <text className=\"rmg-name__zh\" fill=\"red\" textAnchor=\"middle\">\n                本站\n            </text>\n        </g>\n    );\n};\n\nconst IntBoxGroup = React.forwardRef(\n    (\n        props: { intInfos: InterchangeInfo[][]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { intInfos, direction, ...others } = props;\n\n        // also known as non out-of-system transfers\n        const boxInfos = [\n            ...intInfos[0],\n            ...(intInfos[1] || []),\n            // some dirty tricks here as shmetro shows maglev icon even it is a out-of-system transfer\n            // and display a maglev icon is much easier in boxInfos than in OSysIText\n            ...(intInfos[2]?.filter(info => Boolean(info[4].match(/^磁(悬)*浮/))) || []),\n        ];\n\n        let dx = 0; // update in every boxInfos\n\n        return (\n            <g ref={ref} fontSize={14} textAnchor=\"middle\" {...others}>\n                {boxInfos.map((info, i) => {\n                    const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                    const isMaglev = Boolean(info[4].match(/^磁(悬)*浮/));\n\n                    if (props.direction === 'r') {\n                        dx -= (isLineNumber || isMaglev ? 20 : info[4].length * 14 + 12) + (i === 0 ? 0 : 5);\n                    }\n\n                    let el = <g />;\n                    if (isMaglev) {\n                        el = (\n                            <g transform={`translate(${dx},-16)scale(0.1428571429)`} key={i}>\n                                <IntBoxMaglev info={info} />\n                            </g>\n                        );\n                    } else if (isLineNumber) {\n                        el = (\n                            <g transform={`translate(${dx},0)`} key={i}>\n                                <IntBoxNumber info={info} />\n                            </g>\n                        );\n                    } else {\n                        el = (\n                            <g transform={`translate(${dx},0)`} key={i}>\n                                <IntBoxLetter info={info} />\n                            </g>\n                        );\n                    }\n\n                    if (props.direction === 'l') {\n                        dx += isLineNumber || isMaglev ? 20 + 5 : info[4].length * 14 + 12 + 5;\n                    }\n                    return el;\n                })}\n            </g>\n        );\n    }\n);\n\nconst IntBoxMaglev = React.memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_maglev\" fill={props.info[2]} stroke={props.info[2]} />\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxNumber = React.memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = React.memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station interchanges\n    const lineNames = props.osiInfos.map(info => info[4]).join('，');\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; direction: 'l' | 'r' }) => {\n    // get the all names from out of system transfers\n    const lineNames = props.osysiInfos.map(info => info[4]).join('，');\n    const lineNamesEn = props.osysiInfos.map(info => info[5]).join(', ');\n\n    return React.useMemo(\n        () => (\n            <g textAnchor={props.direction === 'l' ? 'start' : 'end'} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={3}>\n                    转乘{lineNames}\n                </text>\n                <text className=\"rmg-name__en\" dy={10} fontSize=\"75%\">\n                    To {lineNamesEn}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.direction]\n    );\n};\n","import { ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n}\n\nexport const drawLine = (branch: string[], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n    let lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n    let linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n    if (lineMainStns.length === 1) {\n        linePassStns = branch;\n    }\n\n    if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n        // if two set disjoint\n        if (linePassStns[0] === branch[0]) {\n            // -1 -1 1 1\n            linePassStns.push(lineMainStns[0]);\n        } else if (\n            lineMainStns[0] === branch[0] &&\n            lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n            linePassStns.length\n        ) {\n            linePassStns = branch;\n            lineMainStns = [];\n        } else {\n            // 1 1 -1 -1\n            linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n        }\n    }\n\n    return {\n        main: lineMainStns,\n        pass: linePassStns,\n    };\n};\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["props","stnId","stnState","color","bank_","bank","direction_override","direction","useRootSelector","store","param","direction_param","info_panel_type","stn_list","loop","stnInfo","branchNameDX","branch","left","right","length","name","split","stationIconStyle","stationIconColor","services","fill","transfer","info","stroke","dx","dy","Math","abs","dr","xlinkHref","transform","StationNameGElement","infos","facility","oneLine","one_line","intPadding","int_padding","CurrentStationText","undefined","stnNameEl","React","directionPolarity","mainDx","Facilities","lineDx","intEl","intWidth","setIntWidth","current","getBBox","width","JSON","stringify","intDx","flat","x1","x2","strokeWidth","IntBoxGroup","ref","intInfos","x","y","textAnchor","StationName","stnName","OSIText","osiInfos","OSysIText","osysiInfos","others","zhEl","enDx","setEnDx","map","txt","i","arr","className","fontSize","Set","Object","values","stn","size","boxInfos","filter","Boolean","match","isLineNumber","isMaglev","el","IntBoxMaglev","IntBoxNumber","IntBoxLetter","prevProps","nextProps","toString","dominantBaseline","textCount","height","lineNames","join","lineNamesEn","adjacencyList","stnList","leftW","rightW","keys","reduce","acc","cur","children","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","max","indexOf","getXShareMTR","branches","criticalPath","includes","branchOfStn","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","console","log","concat","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","stnIds","lineXs","realXs","realYs","e","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","replace","stations","drawLine","stnStates","lineMainStns","linePassStns","main","pass","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","F","s","n","done","value","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2"],"sourceRoot":""}