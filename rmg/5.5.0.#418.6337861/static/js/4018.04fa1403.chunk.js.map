{"version":3,"file":"static/js/4018.04fa1403.chunk.js","mappings":"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","sources":["svgs/indoor/indoor-shmetro.tsx","svgs/svg-wrapper.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { adjacencyList, criticalPathMethod, getStnState, getXShareMTR } from '../railmap/methods/share';\nimport StationSHMetro from './station-shmetro';\nimport { StationsSHMetro } from '../railmap/methods/mtr';\nimport { CanvasType, Services, StationDict } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport LoopSHMetro from '../railmap/main/loop/loop-shmetro';\nimport SvgWrapper from '../svg-wrapper';\n\nconst CANVAS_TYPE = CanvasType.Indoor;\n\nexport default function IndoorWrapperSHMetro() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const { svgWidth: svgWidths, svg_height: svgHeight, theme, loop } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsSHMetro />\n            {loop ? <LoopSHMetro bank_angle={false} canvas={CanvasType.Indoor} /> : <IndoorSHMetro />}\n            <InfoElements />\n        </SvgWrapper>\n    );\n}\n\nexport const DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_indoor_sh\" fill=\"var(--rmg-white)\" strokeWidth={5} r={8} transform=\"scale(1.5)\" />\n        <path\n            id=\"int2_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"express_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"direct_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V40 a 5,5 0 1 1 -10,0Z\"\n        />\n    </defs>\n));\n\nconst leftWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0;\n    if (stnList[stnId].parents.length === 2) res += 1;\n    if (stnList[stnList[stnId].parents[0]].children.length === 2) res += 1;\n    return res;\n};\n\nconst rightWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0;\n    if (stnList[stnId].children.length === 2) res += 1;\n    if (stnList[stnList[stnId].children[0]].parents.length === 2) res += 1;\n    return res;\n};\n\nconst IndoorSHMetro = () => {\n    const { routes, branches, depsStr: deps } = useRootSelector(store => store.helper);\n    const param = useRootSelector(store => store.param);\n\n    const adjMat = adjacencyList(param.stn_list, leftWideFactor, rightWideFactor);\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.indoor * param.padding) / 100,\n        param.svgWidth.indoor * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => StationsSHMetro.getYShares(param.stn_list, branches),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: (yShares[cur] * param.branchSpacingPct * param.svg_height) / 200 }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const servicesAll = Object.values(Services);\n    const servicesPresent = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat() // all services in all stations\n        .reduce(\n            (acc, cur) => {\n                acc[servicesAll.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        ) // set the flag in order\n        .map((bool, i) => [servicesAll[i], bool] as [Services, boolean]) // zip\n        .filter(s => s[1]) // get the existing service\n        .map(s => s[0]); // maintain the services' order\n\n    const linePaths = StationsSHMetro.drawLine(\n        branches,\n        stnStates,\n        param.stn_list,\n        lineXs,\n        xs,\n        ys,\n        (param.branchSpacingPct * param.svg_height) / 200,\n        criticalPath,\n        0\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height / 2})`}>\n            <Lines paths={linePaths} services={servicesPresent} />\n            <StationGroup xs={xs} ys={ys} services={servicesPresent} />\n        </g>\n    );\n};\n\nconst Lines = (props: { paths: { main: string[]; pass: string[] }; services: Services[] }) => {\n    return (\n        <g fill=\"none\" strokeWidth={12} stroke=\"var(--rmg-theme-colour)\">\n            {props.services.map((service, i) => (\n                <g key={`indoor_line_${i}`} transform={`translate(0, ${i * 30})`}>\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n            ))}\n        </g>\n    );\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    services: Services[]; // determine if all station text should be upward\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { branches } = useRootSelector(store => store.helper);\n    const param = useRootSelector(store => store.param);\n    const { xs, ys, services } = props;\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .filter(stnId => param.stn_list[stnId].services.length !== 0)\n                .map(stnId => (\n                    <g key={stnId} transform={`translate(${xs[stnId]},${ys[stnId]})`}>\n                        <StationSHMetro\n                            stnId={stnId}\n                            nameDirection={\n                                branches\n                                    .filter(branch => branch.includes(stnId))\n                                    .map(branch =>\n                                        branch.indexOf(stnId) % 2 === 0 || services.length > 1 ? 'downward' : 'upward'\n                                    )[0] as 'upward' | 'downward'\n                            }\n                            services={services}\n                        />\n                    </g>\n                ))}\n        </g>\n    );\n};\n\nconst InfoElements = () => {\n    const param = useRootSelector(store => store.param);\n\n    return React.useMemo(\n        () => (\n            <>\n                <g transform={`translate(${param.svgWidth.indoor / 2},50)`}>\n                    <text textAnchor=\"middle\" fontSize=\"30\" className=\"rmg-name__zh\">\n                        轨道交通{param.line_name[0]}运营线路示意图\n                    </text>\n                </g>\n                <g transform={`translate(${param.svgWidth.indoor / 2},${param.svg_height - 270})`}>\n                    <text textAnchor=\"middle\" fontSize=\"18\" className=\"rmg-name__zh\" dx=\"-30\" dy=\"230\">\n                        友情提示：请留意您需要换乘线路的首末班时间，以免耽误您的出行，末班车进站前三分钟停售该末班车车票。\n                    </text>\n                    <text textAnchor=\"middle\" fontSize=\"12\" className=\"rmg-name__en\" dx=\"10\" dy=\"250\">\n                        Please pay attention to the interchange schedule if you want to transfer to other lines. Stop\n                        selling tickets 3 minutes before the last train services.\n                    </text>\n                    <g transform=\"translate(-600,215)\">\n                        <rect x=\"-5\" y=\"-25\" width=\"100\" height=\"70\" fill=\"none\" stroke=\"black\" rx=\"5\"></rect>\n                        <line x1=\"28\" x2=\"28\" y1=\"-20\" y2=\"40\" stroke=\"black\"></line>\n                        <text className=\"rmg-name__zh\" dx=\"3\" fontSize=\"18\">\n                            图\n                        </text>\n                        <text className=\"rmg-name__zh\" dx=\"3\" dy=\"18\" fontSize=\"18\">\n                            例\n                        </text>\n                        <text className=\"rmg-name__en\" dy=\"35\" fontSize=\"8\">\n                            legend\n                        </text>\n                        <use\n                            transform=\"translate(45,10)\"\n                            xlinkHref=\"#int2_indoor_sh\"\n                            stroke=\"var(--rmg-theme-colour)\"\n                        />\n                        <text className=\"rmg-name__zh\" dx=\"60\" dy=\"10\" fontSize=\"10\">\n                            换乘站\n                        </text>\n                        <text className=\"rmg-name__en\" dx=\"60\" dy=\"20\" fontSize=\"6\">\n                            Interchange\n                        </text>\n                        <text className=\"rmg-name__en\" dx=\"60\" dy=\"30\" fontSize=\"6\">\n                            Station\n                        </text>\n                    </g>\n                </g>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.svgWidth.indoor, param.svg_height, param.line_name]\n    );\n};\n\n/* Some unused functions to split branches from the main line.\n * Note the branches here has a slightly different meaning.\n * It refers to all the line sections that have a parallel line\n * rather than the upper or the bottom branch section.\n *\n * Currently these functions only can be used on a line that\n * branches in the middle and ends at the linestart, which also\n * means that linestart has two children in the adjMat.\n */\n/*\nconst getPathLength = (adjMat: ReturnType<typeof adjacencyList>, from: string, to: string): number => {\n    let cnt = 0, cur = from\n    while (Object.keys(adjMat[cur]).length > 0) {\n        cnt += 1\n        // we choose the first for all the cases so that the length for different branches will end in the same node\n        cur = Object.keys(adjMat[cur])[0]\n    }\n    return cnt\n}\nconst getIntersectionStn = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n\n    let a = start[0], b = start[1]\n    const lenA = getPathLength(adjMat, a, 'lineend')\n    const lenB = getPathLength(adjMat, b, 'lineend')\n    if (lenA < lenB) {\n        for (let i = 0; i < lenB - lenA; i++) b = Object.keys(adjMat[b])[0]\n    } else {\n        for (let i = 0; i < lenA - lenB; i++) a = Object.keys(adjMat[a])[0]\n    }\n    while (a !== b) {\n        a = Object.keys(adjMat[a])[0]\n        b = Object.keys(adjMat[b])[0]\n    }\n    return a\n}\nconst getBranchesAndMainLine = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n    const intersection = getIntersectionStn(adjMat)\n    return {\n        'branches': [\n            criticalPathMethod(start[0], intersection, adjMat).nodes,\n            criticalPathMethod(start[1], intersection, adjMat).nodes\n        ],\n        'main': criticalPathMethod(intersection, 'lineend', adjMat).nodes\n    }\n}\nconst getYShares = (adjMat: ReturnType<typeof adjacencyList>,\n    branchesAndMainLine: ReturnType<typeof getBranchesAndMainLine>,\n    stnId: string) => {\n    const branches = branchesAndMainLine.branches\n    const main = branchesAndMainLine.main\n\n    if (main.includes(stnId)) {\n        return 3\n    } else if (branches[0].includes(stnId)) {\n        return 0\n    } else {\n        return 6\n    }\n}\n*/\n","import { CanvasType, Theme } from '../constants/constants';\nimport React, { ReactNode } from 'react';\n\ninterface SvgWrapperProps {\n    type: CanvasType;\n    svgWidth: number;\n    svgHeight: number;\n    canvasScale: number;\n    theme: Theme;\n    children: ReactNode;\n}\n\nexport default function SvgWrapper(props: SvgWrapperProps) {\n    const { type, svgWidth, svgHeight, canvasScale, theme, children } = props;\n\n    return (\n        <svg\n            id={type}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            height={svgHeight * canvasScale}\n            viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n            colorInterpolationFilters=\"sRGB\"\n            style={{\n                ['--rmg-svg-width' as any]: svgWidth + 'px',\n                ['--rmg-svg-height' as any]: svgHeight + 'px',\n                ['--rmg-theme-colour' as any]: theme[2],\n                ['--rmg-theme-fg' as any]: theme[3],\n            }}\n        >\n            <rect\n                id=\"canvas-bg\"\n                fill=\"white\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n            {children}\n            <rect\n                id=\"canvas-border\"\n                fill=\"none\"\n                strokeWidth={3}\n                stroke=\"none\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n        </svg>\n    );\n}\n"],"names":["CANVAS_TYPE","CanvasType","IndoorWrapperSHMetro","canvasScale","useRootSelector","state","app","store","param","svgWidths","svgWidth","svgHeight","svg_height","theme","loop","type","DefsSHMetro","bank_angle","canvas","IndoorSHMetro","InfoElements","React","id","fill","strokeWidth","r","transform","d","leftWideFactor","stnList","stnId","res","parents","length","children","rightWideFactor","helper","routes","branches","deps","depsStr","adjMat","adjacencyList","stn_list","criticalPath","criticalPathMethod","realCP","nodes","slice","xShares","console","log","Object","keys","reduce","acc","cur","getXShareMTR","toString","JSON","stringify","lineXs","indoor","padding","xs","len","yShares","useMemo","StationsSHMetro","ys","branchSpacingPct","stnStates","getStnState","current_stn_idx","direction","servicesAll","values","Services","servicesPresent","map","stationInfo","services","flat","indexOf","bool","i","filter","s","linePaths","Lines","paths","StationGroup","props","stroke","service","main","path","pass","includes","nameDirection","branch","textAnchor","fontSize","className","line_name","dx","dy","x","y","width","height","rx","x1","x2","y1","y2","xlinkHref","SvgWrapper","xmlns","xmlnsXlink","viewBox","colorInterpolationFilters","style"],"sourceRoot":""}