{"version":3,"file":"static/js/2977.daa844d3.chunk.js","mappings":"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","sources":["svgs/indoor/station-shmetro.tsx","svgs/railmap/main/loop/loop-branches-shmetro.tsx","svgs/railmap/main/loop/loop-coline-shmetro.tsx","svgs/railmap/main/loop/loop-shmetro.tsx","svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/methods/share.ts","svgs/railmap/methods/shmetro-loop.ts","../javascript/esm|/home/runner/work/rmg/rmg/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import React from 'react';\nimport { ColourHex, InterchangeInfo, Name, Services } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\n\nexport type NameDirection = 'upward' | 'downward' | 'left' | 'right';\n\ninterface Props {\n    stnId: string;\n    nameDirection: NameDirection;\n    services: Services[];\n    color?: ColourHex; // Control the station color if coline is in effect.\n}\n\nexport const StationSHMetro = (props: Props) => {\n    const { stnId, nameDirection, services, color } = props;\n    const stnInfo = useRootSelector(store => store.param.stn_list[stnId]);\n\n    const transfer = [...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])];\n    let stationIconStyle = '';\n    if (stnInfo.services.length === 3) stationIconStyle = 'direct_indoor_sh';\n    else if (stnInfo.services.length === 2) stationIconStyle = 'express_indoor_sh';\n    else if (transfer.length > 0) stationIconStyle = 'int2_indoor_sh';\n    else stationIconStyle = 'stn_indoor_sh';\n\n    const dr = nameDirection === 'left' || nameDirection === 'right' ? 90 : 0;\n    return (\n        <>\n            <StationNameGElement\n                name={stnInfo.name}\n                infos={stnInfo.transfer.info}\n                nameDirection={nameDirection}\n                services={services}\n            />\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                stroke={transfer.length > 0 ? 'var(--rmg-black)' : color ?? 'var(--rmg-theme-colour)'}\n                transform={`rotate(${dr})`}\n            />\n            {/* This should be in IntBoxGroupProps, put here because the station icon will cover this */}\n            {stnInfo.services.length > 1 && (\n                <text className=\"rmg-name__zh\" writingMode=\"tb\" fontSize=\"60%\" dy=\"-12\">\n                    {`大站车${stnInfo.services.length > 2 ? ' 直达车' : ''}停靠`}\n                </text>\n            )}\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    nameDirection: NameDirection;\n    services: Services[];\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, nameDirection, services } = props;\n    const dy = { upward: 60, downward: -30, left: 0, right: 0 }[nameDirection];\n    const osi_dx = { upward: 0, downward: 0, left: 85, right: -85 }[nameDirection];\n    const osi_dy = {\n        upward: -185,\n        downward: 150 + (services.length === 3 ? 40 : 0),\n        left: -30,\n        right: -30,\n    }[nameDirection];\n    const osysi_dx =\n        // only compute when there is a out-of-system transfer\n        infos[2]?.length > 0\n            ? {\n                  upward: 0,\n                  downward: 0,\n                  left: infos[0].length + infos[1].length !== 0 ? 85 : 25,\n                  right: infos[0].length + infos[1].length !== 0 ? -85 : -25,\n              }[nameDirection]\n            : 0;\n    const osysi_dy =\n        // only compute when there is a out-of-system transfer\n        infos[2]?.length > 0\n            ? {\n                  upward: infos[1]?.length ? -210 : infos[0].length ? -180 : -100,\n                  downward: (infos[1]?.length ? 190 : infos[0].length ? 160 : 100) + (services.length === 3 ? 40 : 0),\n                  left: infos[1]?.length ? -60 : infos[0].length ? -30 : 0,\n                  right: infos[1]?.length ? -60 : infos[0].length ? -30 : 0,\n              }[nameDirection]\n            : 0;\n    return (\n        <g transform={`translate(0,${dy})`}>\n            {nameDirection === 'upward' || nameDirection === 'downward' ? (\n                <>\n                    <line\n                        x1={-30}\n                        x2={30}\n                        y1={nameDirection === 'upward' ? -23 : -10}\n                        y2={nameDirection === 'upward' ? -23 : -10}\n                        stroke=\"black\"\n                    />\n                    <line\n                        y1={nameDirection === 'upward' ? -23 : -10}\n                        y2={nameDirection === 'upward' ? -23 - 25 : 20}\n                        stroke=\"black\"\n                    />\n                </>\n            ) : (\n                <>\n                    <line\n                        x1={nameDirection === 'left' ? -50 : 15}\n                        x2={nameDirection === 'left' ? -15 : 50}\n                        y1={0}\n                        y2={0}\n                        stroke=\"black\"\n                    />\n                    <line\n                        x1={nameDirection === 'left' ? -50 : 50}\n                        x2={nameDirection === 'left' ? -50 : 50}\n                        y1={-30}\n                        y2={30}\n                        stroke=\"black\"\n                    />\n                </>\n            )}\n\n            {[...infos[0], ...(infos[1] || [])].length > 0 && (\n                <IntBoxGroup\n                    intInfos={[...infos[0], ...(infos[1] || [])]}\n                    arrowDirection={nameDirection}\n                    services={services}\n                />\n            )}\n\n            <StationName stnName={name} nameDirection={nameDirection} fill=\"black\" />\n\n            {infos[1]?.length > 0 && (\n                <g transform={`translate(${osi_dx},${osi_dy})`}>\n                    <OSIText osiInfos={infos[1]} nameDirection={nameDirection} />\n                </g>\n            )}\n\n            {infos[2]?.length > 0 && (\n                <g transform={`translate(${osysi_dx},${osysi_dy})`}>\n                    <OSysIText osysiInfos={infos[2]} nameDirection={nameDirection} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (\n        props: { stnName: Name; nameDirection: NameDirection } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { stnName, nameDirection, ...others } = props;\n        const name = stnName[0].split('\\\\');\n        const nameENLn = stnName[1].split('\\\\').length;\n        const dx = { upward: 0, downward: 0, left: -60, right: 60 }[nameDirection];\n        const dy = {\n            upward: -2,\n            downward: -30 - 12 * (nameENLn - 1),\n            left: -10 * (nameENLn - 1),\n            right: -10 * (nameENLn - 1),\n        }[nameDirection];\n        const anchor = { upward: 'middle', downward: 'middle', left: 'end', right: 'start' }[nameDirection];\n\n        return (\n            <g ref={ref} {...others} textAnchor={anchor} transform={`translate(${dx},${dy})`}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {name.map((txt, i, array) => (\n                                <text\n                                    key={i}\n                                    className=\"rmg-name__zh\"\n                                    dy={nameDirection === 'upward' ? 16 * i : (array.length - 1 - i) * -16}\n                                >\n                                    {txt}\n                                </text>\n                            ))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text\n                                        key={i}\n                                        className=\"rmg-name__en\"\n                                        dy={\n                                            12 * (i + 1) +\n                                            (nameDirection === 'upward' ? (name.length > 1 ? name.length * 7.5 : 0) : 0)\n                                        }\n                                    >\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\ninterface IntBoxGroupProps {\n    intInfos: InterchangeInfo[];\n    arrowDirection: NameDirection;\n    services: Services[];\n}\n\nconst IntBoxGroup = (props: IntBoxGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, arrowDirection, services } = props;\n\n    // name each different linearGradient that will fill the arrow\n    const intNameId = intInfos.map(intInfo => intInfo[2]).reduce((name, color) => name + color, '');\n\n    // get the interchange line names\n    const lineNames = [\n        intInfos\n            .filter(intInfo => intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4].replace(/^(\\d+)(.*)$/, '$1'))\n            .join('，')\n            .concat('号线'),\n        intInfos\n            .filter(intInfo => !intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4])\n            .join('，'),\n    ]\n        .filter(name => name && name !== '号线')\n        .join('，');\n    const lineNamesEn = [\n        'Line '.concat(\n            intInfos\n                .filter(intInfo => intInfo[5].match(/^L|line$/))\n                .map(intInfo => intInfo[5].replace('Line', '').replace('line', '').trim())\n                .join(',')\n        ),\n        intInfos\n            .filter(intInfo => !intInfo[5].match(/^L|line$/))\n            .map(intInfo => intInfo[5])\n            .join('，'),\n    ]\n        .filter(name => name && name !== 'Line ')\n        .join(',');\n\n    // for services contains three level (normal, express, direct)\n    // additional length is required on transfer arrow otherwise\n    // the station icon will be longer than the arrow itself\n    const arrowLength = services.length === 3 ? 80 : 45;\n    const transfer_dy = { upward: -145, downward: 125 + (services.length === 3 ? 40 : 0), left: 7, right: 7 }[\n        arrowDirection\n    ];\n\n    // bunch of constants for all four directions\n    const arrow_dx = { upward: 0, downward: 0, left: 20, right: -20 }[arrowDirection];\n    const arrow_dy = { upward: -74, downward: 44, left: 0, right: 0 }[arrowDirection];\n    const arrow_dr = { upward: 0, downward: 180, left: 90, right: -90 }[arrowDirection];\n    const transfer_dx = { upward: 0, downward: 0, left: 85, right: -85 }[arrowDirection];\n    const transfer_anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[arrowDirection];\n    return (\n        <g>\n            <path\n                id=\"int_indoor_arrow_sh\"\n                stroke=\"var(--rmg-black)\"\n                strokeWidth={1}\n                transform={`translate(${arrow_dx},${arrow_dy})rotate(${arrow_dr})`}\n                fill={intInfos.length === 1 ? intInfos[0][2] : `url(#grad${intNameId})`}\n                d={`M -7.5,0 v -${arrowLength} h -7.5 l 15,-15 l 15,15 h -7.5 v ${arrowLength} Z`}\n            />\n\n            {intInfos.length > 1 && (\n                <>\n                    <linearGradient\n                        id={`grad${intNameId}`}\n                        y1=\"0\"\n                        y2=\"0\"\n                        x1={arrowDirection === 'upward' ? '25%' : '75%'}\n                        x2={arrowDirection === 'upward' ? '75%' : '25%'}\n                    >\n                        {intInfos.map((intInfo, i) => (\n                            <React.Fragment key={i}>\n                                {/* more about React.Fragment on https://stackoverflow.com/a/59390967 */}\n                                <stop // start from\n                                    offset={`${(100 / intInfos.length) * (i + 0)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                                <stop // to\n                                    offset={`${(100 / intInfos.length) * (i + 1)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                            </React.Fragment>\n                        ))}\n                    </linearGradient>\n\n                    {/* a range inplementation [0, 1, 2 ... intInfos.length - 1] */}\n                    {/* {[...Array(intInfos.length - 1).keys()].map(i => (<line\n                        x1={-7.5 + (15 / intInfos.length) * (i + 1)}\n                        x2={-7.5 + (15 / intInfos.length) * (i + 1)}\n                        y1=\"-74\"\n                        y2={-104 - 7.5 - 7.5 / (intInfos.length - 1) * (i+1)}\n                        stroke=\"black\"\n                    />))} */}\n                </>\n            )}\n\n            <g transform={`translate(${transfer_dx},${transfer_dy})`} textAnchor={`${transfer_anchor}`}>\n                <text className=\"rmg-name__zh\" dy={-7}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={5} fontSize={9.6}>\n                    {`Interchange ${lineNamesEn}`}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[]; nameDirection: NameDirection }) => {\n    const anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[props.nameDirection];\n    return React.useMemo(\n        () => (\n            <g textAnchor={`${anchor}`} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${props.osiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osiInfos.toString(), props.nameDirection]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; nameDirection: NameDirection }) => {\n    const anchor = { upward: 'middle', downward: 'middle', left: 'start', right: 'end' }[props.nameDirection];\n    return React.useMemo(\n        () => (\n            <g textAnchor={`${anchor}`}>\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`转乘${props.osysiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={7.5} fontSize={9.6}>\n                    {`To ${props.osysiInfos.map(info => info[5]).join(', ')}`}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.nameDirection]\n    );\n};\n","import { useRootSelector } from '../../../../redux';\nimport { CanvasType, ColourHex, Services } from '../../../../constants/constants';\nimport StationSHMetro from '../station/station-shmetro';\nimport { StationSHMetro as StationSHMetroIndoor } from '../../../indoor/station-shmetro';\nimport React from 'react';\n\nexport const get_loop_branches = (\n    branches: string[][],\n    branch_stn_ids: string[],\n    svg_width: number,\n    padding: number,\n    left_and_right_factor: number,\n    bottom_factor: number\n) => {\n    const loopline = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n\n    const loop_branches = branches.slice(1, 3).map(branch => branch.slice(1, branch.length - 1));\n    // calculate the length of top stations + branch(es) stations\n    const critical_path_length =\n        loop_branches.reduce(\n            (acc, cur) =>\n                acc + cur.filter(stn_id => !['linestart', 'lineend', ...branch_stn_ids].includes(stn_id)).length,\n            0\n        ) +\n        loopline.length -\n        bottom_factor -\n        left_and_right_factor * 2;\n    // interval for each station on the top side with branches\n    // note the interval of station for the top side will be smaller because of e = 0.1 in get_xshares_yshares_of_loop\n    const x_interval = (svg_width - ((svg_width * padding) / 100) * 2) / (1 + critical_path_length);\n    // split lines_xs for branches, used to shrink loop line's lines_xs\n    const line_xs_branches = [\n        (svg_width * padding) / 100 + (loop_branches.at(0) ?? []).length * x_interval,\n        svg_width * (1 - padding / 100) - (loop_branches.at(1) ?? []).length * x_interval,\n    ] as [number, number];\n    const xs_branches = {\n        ...Object.fromEntries(\n            (loop_branches.at(0) ?? []).map((stn, i) => [stn, (svg_width * padding) / 100 + i * x_interval])\n        ),\n        ...Object.fromEntries(\n            (loop_branches.at(1) ?? []).map((stn, i) => [stn, line_xs_branches[1] + (1 + i) * x_interval])\n        ),\n    };\n    return { loop_branches, line_xs_branches, xs_branches };\n};\n\nexport const LoopBranches = (props: {\n    loop_branches: string[][];\n    edges: [number, number, number, number];\n    xs: {\n        [k: string]: number;\n    };\n    ys: {\n        [k: string]: number;\n    };\n    canvas: CanvasType.RailMap | CanvasType.Indoor;\n}) => {\n    const { loop_branches, edges, xs, ys, canvas } = props;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM] = edges;\n\n    const { branches } = useRootSelector(store => store.helper);\n    const { current_stn_idx: current_stn_id, direction, coline } = useRootSelector(store => store.param);\n\n    const e = canvas === CanvasType.RailMap ? 30 : 0;\n    const branches_paths = [\n        `M ${X_LEFT},${Y_TOP} H ${Number(xs[loop_branches.at(0)?.at(0) ?? '']) - e}`,\n        `M ${X_RIGHT},${Y_TOP} H ${Number(xs[loop_branches.at(1)?.at(-1) ?? '']) + e}`,\n    ];\n\n    const loopline = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n    const branches_coline_color = Object.values(coline)\n        .filter(co => ![co.from, co.to].every(stn_id => loopline.includes(stn_id)))\n        .map(co => co.colors);\n\n    return (\n        <>\n            {loop_branches.map((loop_branch, i) => (\n                <React.Fragment key={loop_branch.at(0)}>\n                    {branches_coline_color\n                        // remove duplicate\n                        .filter((c, i, self) => i === self.findIndex(t => t.at(0)?.at(2) === c.at(0)?.at(2)))\n                        // generate marker with coline color\n                        .map(color => (\n                            <marker key={color[0][2]} id={`arrow_theme_${color[0][2]}`} refX={1} refY={0.5}>\n                                <path d=\"M0,1H2L1,0z\" fill={color[0][2]} />\n                            </marker>\n                        ))}\n                    <path\n                        stroke={branches_coline_color.at(i)?.at(0)?.at(2) ?? 'var(--rmg-theme-colour)'}\n                        strokeWidth={12}\n                        fill=\"none\"\n                        d={branches_paths[i]}\n                        markerEnd={\n                            canvas === CanvasType.RailMap &&\n                            ((direction === 'l' && i === 0) || (direction === 'r' && i === 1))\n                                ? branches_coline_color.at(i)\n                                    ? `url(#arrow_theme_${branches_coline_color[i][0][2]})`\n                                    : 'url(#arrow_theme)'\n                                : undefined\n                        }\n                    />\n                    {loop_branch\n                        .filter(stn_id => !['linestart', 'lineend'].includes(stn_id))\n                        .map(stn_id => (\n                            <React.Fragment key={stn_id}>\n                                {canvas === CanvasType.RailMap && (\n                                    <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                                        <StationSHMetro\n                                            stnId={stn_id}\n                                            stnState={current_stn_id === stn_id ? 0 : 1}\n                                            bank={0}\n                                            direction={direction}\n                                            color={branches_coline_color.at(i)?.at(0)?.at(2) as ColourHex | undefined}\n                                        />\n                                    </g>\n                                )}\n\n                                {canvas === CanvasType.Indoor && (\n                                    <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                                        <StationSHMetroIndoor\n                                            stnId={stn_id}\n                                            nameDirection={\n                                                loop_branches\n                                                    .filter(branch => branch.includes(stn_id))\n                                                    .map(branch =>\n                                                        branch.indexOf(stn_id) % 2 === 0 ? 'downward' : 'upward'\n                                                    )[0] as 'upward' | 'downward'\n                                            }\n                                            services={[Services.local]}\n                                            color={branches_coline_color.at(i)?.at(0)?.at(2) as ColourHex | undefined}\n                                        />\n                                    </g>\n                                )}\n                            </React.Fragment>\n                        ))}\n                </React.Fragment>\n            ))}\n        </>\n    );\n};\n","import { useRootSelector } from '../../../../redux';\nimport { isColineBranch } from '../../../../redux/param/coline-action';\nimport { CanvasType } from '../../../../constants/constants';\n\nexport const LoopColine = (props: {\n    edges: [number, number, number, number];\n    loop_stns: {\n        top: string[];\n        left: string[];\n        right: string[];\n        bottom: string[];\n    };\n    xs: {\n        [stn_id: string]: number;\n    };\n    ys: {\n        [stn_id: string]: number;\n    };\n    canvas: CanvasType.RailMap | CanvasType.Indoor;\n}) => {\n    const { edges, loop_stns, xs, ys, canvas } = props;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM] = edges;\n    const { info_panel_type, stn_list, coline } = useRootSelector(store => store.param);\n\n    const { branches } = useRootSelector(store => store.helper);\n\n    // find the coline color on the main/loop line\n    const coline_main_color = Object.values(coline)\n        .filter(co =>\n            [co.from, co.to].every(stn_id =>\n                branches\n                    .slice(1, 3)\n                    .filter(branch => isColineBranch(branch, stn_list))\n                    .flat()\n                    .includes(stn_id)\n            )\n        )\n        .map(co => co.colors)\n        .at(0); // only one coline in loop line is supported\n\n    const LINE_WIDTH = 12;\n    const COLINE_GAP = canvas === CanvasType.RailMap && info_panel_type === 'sh2020' ? 3 : 0;\n    return (\n        <g id=\"coline_main\">\n            <path d={`M ${X_LEFT},${Y_TOP} H${X_RIGHT}`} strokeWidth={12} stroke={coline_main_color?.at(0)?.at(2)} />\n            {\n                // additional station cover on the rail map\n                canvas === CanvasType.RailMap &&\n                    Object.keys(coline).length > 0 &&\n                    loop_stns.top.map(stn_id => (\n                        <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                            {info_panel_type === 'sh2020' ? (\n                                <>\n                                    <rect\n                                        stroke=\"none\"\n                                        height={24}\n                                        width={12}\n                                        x={-6}\n                                        y={-COLINE_GAP - 1}\n                                        fill={coline_main_color?.at(0)?.at(2)}\n                                    />\n                                    <rect\n                                        stroke=\"none\"\n                                        height={COLINE_GAP + LINE_WIDTH}\n                                        width={12}\n                                        x={-6}\n                                        y={LINE_WIDTH - 2}\n                                        fill=\"var(--rmg-theme-colour)\"\n                                    />\n                                </>\n                            ) : (\n                                <use\n                                    xlinkHref=\"#int2_sh\"\n                                    stroke=\"var(--rmg-theme-colour)\"\n                                    transform={`translate(0,${1 + LINE_WIDTH})`}\n                                />\n                            )}\n                        </g>\n                    ))\n            }\n        </g>\n    );\n};\n","import React from 'react';\nimport StationSHMetro from '../station/station-shmetro';\nimport { NameDirection, StationSHMetro as StationSHMetroIndoor } from '../../../indoor/station-shmetro';\nimport { CanvasType, Services, ShortDirection } from '../../../../constants/constants';\nimport { useRootSelector } from '../../../../redux';\nimport { isColineBranch } from '../../../../redux/param/coline-action';\nimport {\n    get_xshares_yshares_of_loop,\n    LoopStns,\n    split_loop_stns,\n    split_loop_stns_with_branch,\n    split_loop_stns_with_branches,\n} from '../../methods/shmetro-loop';\nimport { get_loop_branches, LoopBranches } from './loop-branches-shmetro';\nimport { LoopColine } from './loop-coline-shmetro';\n\nconst LoopSHMetro = (props: { bank_angle: boolean; canvas: CanvasType.RailMap | CanvasType.Indoor }) => {\n    const { bank_angle, canvas } = props;\n    const { branches } = useRootSelector(store => store.helper);\n    const {\n        current_stn_idx: current_stn_id,\n        svgWidth: svg_width,\n        svg_height,\n        padding,\n        branchSpacingPct,\n        direction,\n        info_panel_type,\n        stn_list,\n        loop_info: { left_and_right_factor, bottom_factor },\n        coline,\n    } = useRootSelector(store => store.param);\n\n    const loopline = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n    const branch_stn_ids = branches\n        .slice(0, 3) // drop additional branches\n        .flat()\n        .filter(\n            (\n                o => v =>\n                    (o[v] = (o[v] || 0) + 1) === 2\n            )({} as { [stn_id: string]: number })\n        ) // count each occurrence\n        .filter(stn_id => !['linestart', 'lineend'].includes(stn_id)); // find branch stations\n\n    // find which arc would be displayed on the top side from coline info\n    const arc =\n        Object.values(coline)\n            .filter(co =>\n                [co.from, co.to].every(stn_id =>\n                    branches\n                        .slice(1, 3)\n                        .filter(branch => isColineBranch(branch, stn_list))\n                        .flat()\n                        .includes(stn_id)\n                )\n            )\n            .map(co => {\n                const from_idx = loopline.findIndex(stn_id => stn_id === co.from);\n                const to_idx = loopline.findIndex(stn_id => stn_id === co.to);\n                return Math.abs(to_idx - from_idx) > loopline.length - 2 - Math.abs(to_idx - from_idx)\n                    ? 'major'\n                    : 'minor';\n            })\n            .at(0) ?? 'minor';\n\n    // use different split methods for different numbers of branches\n    const loop_stns = branch_stn_ids.at(1)\n        ? split_loop_stns_with_branches(loopline, branch_stn_ids as [string, string], left_and_right_factor, arc)\n        : branch_stn_ids.at(0)\n        ? split_loop_stns_with_branch(loopline, branch_stn_ids[0], bottom_factor, left_and_right_factor)\n        : split_loop_stns(loopline, current_stn_id, bottom_factor, left_and_right_factor);\n    const { x_shares: x_shares_loop, y_shares: y_shares_loop } = get_xshares_yshares_of_loop(loopline, loop_stns);\n\n    // calculate xs and ys for branches\n    const { loop_branches, line_xs_branches, xs_branches } = get_loop_branches(\n        branches,\n        branch_stn_ids,\n        svg_width[canvas],\n        padding,\n        left_and_right_factor,\n        loop_stns.bottom.length // respect to the new bottom_factor if there are 2 branches for critical_path_length\n    );\n\n    // all y_shares in branches will be 0\n    const y_shares = { ...y_shares_loop, ...Object.fromEntries(loop_branches.flat().map(stn => [stn, 0])) };\n    // before: branch_spacing / 400 * svg_height (Chito)\n    const verticalPadding = ((branchSpacingPct * svg_height) / 300 / 400) * svg_height;\n    const line_ys = [\n        225 + verticalPadding,\n        svg_height - 75 - (canvas === CanvasType.RailMap ? 0 : 125) - verticalPadding,\n    ] as [number, number];\n    const ys = Object.keys(y_shares).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: line_ys[0] + y_shares[cur] * (line_ys[1] - line_ys[0]),\n        }),\n        {} as typeof y_shares\n    );\n    const line_xs = [\n        // in railmap and bank, we need to add extra padding for the 45-degree angle\n        // also if there are branches, we need to leave additional spaces\n        Math.max(\n            (svg_width[canvas] * padding) / 100 + (bank_angle && canvas === CanvasType.RailMap ? 100 : 0),\n            line_xs_branches[0]\n        ),\n        Math.min(\n            svg_width[canvas] * (1 - padding / 100) - (bank_angle && canvas === CanvasType.RailMap ? 100 : 0),\n            line_xs_branches[1]\n        ),\n    ] as [number, number];\n    const xs_loop = Object.keys(x_shares_loop).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: line_xs[0] + x_shares_loop[cur] * (line_xs[1] - line_xs[0]),\n        }),\n        {} as typeof x_shares_loop\n    );\n\n    // bank the right, bottom, left side if bank_angle\n    const bank = (bank_angle ? { l: 1, r: -1 }[direction] : 0) as -1 | 0 | 1;\n    [...loop_stns.right, ...loop_stns.left].forEach(stn_id => {\n        xs_loop[stn_id] -= (ys[stn_id] - line_ys[0]) * bank;\n    });\n    loop_stns.bottom.forEach(stn_id => {\n        xs_loop[stn_id] -= (line_ys[1] - line_ys[0]) * bank;\n    });\n\n    const xs = { ...xs_branches, ...xs_loop };\n\n    // generate loop path used in svg\n    const path = _linePath(loop_stns, xs, ys, bank, [...line_xs, ...line_ys], direction);\n\n    // coline stuff\n    const LINE_WIDTH = 12;\n    const COLINE_GAP = canvas === CanvasType.RailMap && info_panel_type === 'sh2020' ? 3 : 0;\n    // move up to display the full station name and int\n    if (Object.keys(coline).length > 0) {\n        loop_stns.top.forEach(stn_id => {\n            ys[stn_id] -= COLINE_GAP + LINE_WIDTH;\n        });\n    }\n\n    // FIXME: branches with only one station could not display properly\n    const dy = loop_branches.length ? 0 : ((line_ys[1] - line_ys[0]) * bank) / 2;\n    return (\n        <g id=\"loop\" transform={`translate(${dy},0)`}>\n            <path stroke=\"var(--rmg-theme-colour)\" strokeWidth={12} fill=\"none\" d={path} strokeLinejoin=\"round\" />\n            {/* Order matters. The LoopColine should cover the station in RailMap. */}\n            {canvas === CanvasType.RailMap && (\n                <LoopStationGroup canvas={canvas} loop_stns={loop_stns} xs={xs} ys={ys} />\n            )}\n            <g transform={`translate(0,${Object.keys(coline).length > 0 ? -LINE_WIDTH - COLINE_GAP : 0})`}>\n                <LoopBranches\n                    loop_branches={loop_branches}\n                    edges={[...line_xs, ...line_ys]}\n                    xs={xs}\n                    ys={ys}\n                    canvas={canvas}\n                />\n                {Object.keys(coline).length > 0 && (\n                    <LoopColine\n                        edges={[...line_xs, ...line_ys]}\n                        loop_stns={loop_stns}\n                        xs={xs}\n                        ys={ys}\n                        canvas={canvas}\n                    />\n                )}\n            </g>\n            {/* Order matters. The station should cover LoopColine's main path in Indoor. */}\n            {canvas === CanvasType.Indoor && <LoopStationGroup canvas={canvas} loop_stns={loop_stns} xs={xs} ys={ys} />}\n        </g>\n    );\n};\n\nexport default LoopSHMetro;\n\nexport const _linePath = (\n    loop_stns: LoopStns,\n    xs: { [stn_id: string]: number },\n    ys: { [stn_id: string]: number },\n    bank: -1 | 0 | 1,\n    // use these edges to mock when there is no station on the edge\n    edges: [number, number, number, number],\n    direction: ShortDirection\n) => {\n    const [X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM] = edges;\n\n    // calculate the corner point when two sides needs to be joined\n    const corner = (prev_x: number, prev_y: number, x: number, y: number, side: keyof LoopStns): [number, number] => {\n        return {\n            right: [x + (y - Y_TOP) * bank, prev_y] as [number, number],\n            bottom: [prev_x - (Y_BOTTOM - prev_y) * bank, y] as [number, number],\n            left: [x - (Y_BOTTOM - y) * bank, prev_y] as [number, number],\n            top: [prev_x + (prev_y - Y_TOP) * bank, y] as [number, number],\n        }[side];\n    };\n\n    const stn_pos = [] as [number, number][];\n    loop_stns.top.forEach(stn_id => {\n        stn_pos.push([xs[stn_id], ys[stn_id]]);\n    });\n    (['right', 'bottom', 'left'] as Exclude<keyof LoopStns, 'top'>[]).forEach(side => {\n        if (loop_stns[side].length > 0) {\n            stn_pos.push(\n                corner(stn_pos.at(-1)![0], stn_pos.at(-1)![1], xs[loop_stns[side][0]], ys[loop_stns[side][0]], side)\n            );\n            loop_stns[side].forEach(stn_id => {\n                stn_pos.push([xs[stn_id], ys[stn_id]]);\n            });\n        } else {\n            // simulate a fake station on the side\n            // this station lays on the previous side corner\n            const extra = {\n                right: [X_RIGHT, stn_pos.at(-1)![1]] as [number, number],\n                bottom: [\n                    stn_pos.at(-1)![0] + (Y_BOTTOM - stn_pos.at(-1)![1]) * -bank,\n                    stn_pos.at(-1)![1] + (Y_BOTTOM - stn_pos.at(-1)![1]),\n                ] as [number, number],\n                left: [\n                    X_LEFT + (bank === 0 ? 0 : (Y_BOTTOM - Y_TOP) * (direction === 'l' ? -1 : 1)),\n                    stn_pos.at(-1)![1],\n                ] as [number, number],\n            };\n            stn_pos.push(extra[side]);\n        }\n    });\n    stn_pos.push(corner(stn_pos.at(-1)![0], stn_pos.at(-1)![1], xs[loop_stns.top[0]], ys[loop_stns.top[0]], 'top'));\n\n    const path = stn_pos\n        .slice(1)\n        .map(([x, y]) => `L${x},${y} `)\n        .join(' ');\n    return `M${stn_pos[0][0]},${stn_pos[0][1]} ${path} Z`;\n};\n\nconst LoopStationGroup = (props: {\n    canvas: CanvasType.RailMap | CanvasType.Indoor;\n    loop_stns: LoopStns;\n    xs: {\n        [k: string]: number;\n    };\n    ys: {\n        [k: string]: number;\n    };\n}) => {\n    const { canvas, loop_stns, xs, ys } = props;\n    const { current_stn_idx: current_stn_id } = useRootSelector(store => store.param);\n\n    const railmap_bank: Record<keyof LoopStns, -1 | 0 | 1> = {\n        top: 0,\n        bottom: 0,\n        left: -1,\n        right: 1,\n    };\n    const railmap_direction: Record<keyof LoopStns, 'l' | 'r' | undefined> = {\n        left: 'r',\n        right: 'l',\n        top: undefined,\n        bottom: undefined,\n    };\n    const indoor_name_direction = (side: keyof LoopStns, i: number) =>\n        ({\n            top: i % 2 === 0 ? 'upward' : 'downward',\n            bottom: i % 2 === 0 ? 'upward' : 'downward',\n            left: 'left',\n            right: 'right',\n        }[side] as NameDirection);\n    return (\n        <g id=\"loop_stations\">\n            {canvas === CanvasType.RailMap &&\n                Object.entries(loop_stns).map(([side, stn_ids]) =>\n                    stn_ids.map(stn_id => (\n                        <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                            <StationSHMetro\n                                stnId={stn_id}\n                                stnState={current_stn_id === stn_id ? 0 : 1}\n                                bank={railmap_bank[side as keyof LoopStns]}\n                                direction={railmap_direction[side as keyof LoopStns]}\n                            />\n                        </g>\n                    ))\n                )}\n            {canvas === CanvasType.Indoor &&\n                Object.entries(loop_stns).map(([side, stn_ids]) =>\n                    stn_ids.map((stn_id, i) => (\n                        <g key={stn_id} transform={`translate(${xs[stn_id]},${ys[stn_id]})`}>\n                            <StationSHMetroIndoor\n                                stnId={stn_id}\n                                nameDirection={indoor_name_direction(side as keyof LoopStns, i)}\n                                services={[Services.local]}\n                            />\n                        </g>\n                    ))\n                )}\n        </g>\n    );\n};\n","import React from 'react';\nimport { InterchangeInfo, Name, Facilities, ColourHex } from '../../../../constants/constants';\nimport { useRootSelector } from '../../../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    color?: ColourHex; // Control the station color if coline is in effect.\n    bank?: -1 | 0 | 1; // Loopline requires station element to be horizontal. Default to 0 (no bank to other side).\n    direction?: 'l' | 'r'; // Loopline requires station element to change direction. Default to current param.\n}\n\nconst StationSHMetro = (props: Props) => {\n    const { stnId, stnState, color, bank: bank_, direction: direction_override } = props;\n    const { direction: direction_param, info_panel_type, stn_list, loop } = useRootSelector(store => store.param);\n    const stnInfo = stn_list[stnId];\n    const direction = direction_override ?? direction_param;\n\n    // shift station name if the line bifurcate here\n    // no shift for loop as there is no vertical line covering the station\n    const branchNameDX = loop\n        ? 0\n        : ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n          (direction === 'r' ? -1 : 1);\n\n    let stationIconStyle = '';\n    let stationIconColor: { [pos: string]: string } = {};\n    if (info_panel_type === 'sh2020') {\n        if (stnInfo.services.length === 3) stationIconStyle = 'stn_sh_2020_direct';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'stn_sh_2020_express';\n        else stationIconStyle = 'stn_sh_2020';\n        stationIconColor.fill = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    } else {\n        // param.info_panel_type === 'sh' or others (from other styles)\n        if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n        else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n            stationIconStyle = 'int2_sh';\n        else stationIconStyle = 'stn_sh';\n        stationIconColor.stroke = stnState === -1 ? 'gray' : color ? color : 'var(--rmg-theme-colour)';\n    }\n\n    const bank = bank_ ?? 0;\n    const dx = (direction === 'l' ? 6 : -6) + branchNameDX + bank * 30;\n    const dy = (info_panel_type === 'sh2020' ? -20 : -6) + Math.abs(bank) * (info_panel_type === 'sh2020' ? 25 : 11);\n    const dr = bank ? 0 : direction === 'l' ? -45 : 45;\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                {...stationIconColor} // different styles use either `fill` or `stroke`\n                // sh and sh2020 have different headings of int_sh, so -1 | 1 is multiplied\n                transform={\n                    `translate(${bank * (info_panel_type === 'sh2020' ? 5 : 0)},0)` +\n                    `rotate(${bank * 90 * (info_panel_type === 'sh2020' ? 1 : -1)})`\n                }\n            />\n            <g transform={`translate(${dx},${dy})rotate(${dr})`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={stnState}\n                    direction={direction}\n                    facility={stnInfo.facility}\n                    bank={bank}\n                    oneLine={stnInfo.one_line}\n                    intPadding={stnInfo.int_padding}\n                />\n            </g>\n            {stnState === 0 ? <CurrentStationText /> : undefined}\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    facility: Facilities;\n    bank: -1 | 0 | 1;\n    oneLine: boolean;\n    intPadding: number;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, stnState, direction, facility, bank, oneLine, intPadding } = props;\n    const { svg_height } = useRootSelector(store => store.param);\n\n    // legacy ref to get the exact station name width\n    const stnNameEl = React.useRef<SVGGElement | null>(null);\n\n    // simplify the calculation times\n    const directionPolarity = direction === 'l' ? 1 : -1;\n\n    // main elements icon's dx will change if there is a facility icon or not\n    const mainDx = facility !== Facilities.none ? 30 : 0;\n\n    // interchange will have a line under the name, and should be stretched when placed horizontal in loop\n    const lineDx = bank ? -12 : 0;\n\n    const intEl = React.useRef<SVGGElement | null>(null);\n    const [intWidth, setIntWidth] = React.useState(0);\n    React.useEffect(() => setIntWidth(intEl.current?.getBBox().width ?? 0), [...JSON.stringify(infos)]);\n    const intDx = intPadding - intWidth;\n\n    return (\n        <>\n            {infos.flat().length > 0 && (\n                <>\n                    <line\n                        x1={(lineDx + mainDx) * directionPolarity}\n                        x2={intDx * directionPolarity}\n                        stroke={stnState === -1 ? 'gray' : 'black'}\n                        strokeWidth={0.5}\n                    />\n                    <IntBoxGroup\n                        ref={intEl}\n                        intInfos={infos}\n                        direction={direction}\n                        transform={`translate(${intDx * directionPolarity},-10.75)`}\n                    />\n                </>\n            )}\n\n            {facility !== Facilities.none && <use xlinkHref={'#' + facility} x={10 * directionPolarity} y={-30} />}\n\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${mainDx * directionPolarity},-14)`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={name}\n                    oneLine={oneLine}\n                    directionPolarity={directionPolarity}\n                    fill={stnState === -1 ? 'gray' : stnState === 0 ? 'red' : 'black'}\n                />\n\n                {/* deal out-of-station here as it is a y axis element. leave out-of-system in IntBoxGroup */}\n                {infos[1]?.length > 0 && (\n                    <g transform={`translate(${(intDx + intWidth / 2) * directionPolarity},-30)`}>\n                        <OSIText osiInfos={infos[1]} />\n                    </g>\n                )}\n\n                {/* deal out-of-system here as it's dx is fixed and has nothing to do with IntBoxGroup */}\n                {[...(infos[2] || [])].length > 0 && (\n                    <g transform={`translate(${(intPadding + 5) * directionPolarity},0)`}>\n                        <OSysIText osysiInfos={infos[2]} direction={props.direction} />\n                    </g>\n                )}\n            </g>\n        </>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (\n        props: { stnName: Name; oneLine: boolean; directionPolarity: 1 | -1 } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { stnName, oneLine, directionPolarity, ...others } = props;\n\n        const zhEl = React.useRef<SVGGElement | null>(null);\n        const [enDx, setEnDx] = React.useState(0);\n        React.useEffect(() => {\n            if (oneLine) setEnDx(zhEl.current!.getBBox().width + 5);\n            else setEnDx(0);\n        }, [...stnName, oneLine]);\n\n        const [ZH_HEIGHT, EN_HEIGHT] = [20, 8];\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            <g ref={zhEl}>\n                                {stnName[0].split('\\\\').map((txt, i, arr) => (\n                                    <text\n                                        key={i}\n                                        className=\"rmg-name__zh\"\n                                        dy={\n                                            (arr.length - 1 - i) * -ZH_HEIGHT +\n                                            (oneLine ? EN_HEIGHT : (stnName[1].split('\\\\').length - 1) * -EN_HEIGHT)\n                                        }\n                                    >\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                            <g fontSize={8} transform={`translate(${enDx * directionPolarity},0)`}>\n                                {stnName[1].split('\\\\').map((txt, i, arr) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={(arr.length - 2 - i) * -EN_HEIGHT + 2}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    [...stnName, oneLine, enDx, directionPolarity]\n                )}\n            </g>\n        );\n    }\n);\n\nconst CurrentStationText = () => {\n    const { stn_list } = useRootSelector(store => store.param);\n    const servicesPresent = new Set(\n        Object.values(stn_list)\n            .map(stn => stn.services)\n            .flat()\n    );\n    const dy = [-1, 35, 50, 75][servicesPresent.size];\n\n    return (\n        <g transform={`translate(0, ${dy})`}>\n            <text className=\"rmg-name__zh\" fill=\"red\" textAnchor=\"middle\">\n                本站\n            </text>\n        </g>\n    );\n};\n\nconst IntBoxGroup = React.forwardRef(\n    (\n        props: { intInfos: InterchangeInfo[][]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { intInfos, direction, ...others } = props;\n\n        // also known as non out-of-system transfers\n        const boxInfos = [\n            ...intInfos[0],\n            ...(intInfos[1] || []),\n            // some dirty tricks here as shmetro shows maglev icon even it is a out-of-system transfer\n            // and display a maglev icon is much easier in boxInfos than in OSysIText\n            ...(intInfos[2]?.filter(info => Boolean(info[4].match(/^磁(悬)*浮/))) || []),\n        ];\n\n        let dx = 0; // update in every boxInfos\n\n        return (\n            <g ref={ref} fontSize={14} textAnchor=\"middle\" {...others}>\n                {boxInfos.map((info, i) => {\n                    const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                    const isMaglev = Boolean(info[4].match(/^磁(悬)*浮/));\n\n                    if (props.direction === 'r') {\n                        dx -= (isLineNumber || isMaglev ? 20 : info[4].length * 14 + 12) + (i === 0 ? 0 : 5);\n                    }\n\n                    let el = <g />;\n                    if (isMaglev) {\n                        el = (\n                            <g transform={`translate(${dx},-16)scale(0.1428571429)`} key={i}>\n                                <IntBoxMaglev info={info} />\n                            </g>\n                        );\n                    } else if (isLineNumber) {\n                        el = (\n                            <g transform={`translate(${dx},0)`} key={i}>\n                                <IntBoxNumber info={info} />\n                            </g>\n                        );\n                    } else {\n                        el = (\n                            <g transform={`translate(${dx},0)`} key={i}>\n                                <IntBoxLetter info={info} />\n                            </g>\n                        );\n                    }\n\n                    if (props.direction === 'l') {\n                        dx += isLineNumber || isMaglev ? 20 + 5 : info[4].length * 14 + 12 + 5;\n                    }\n                    return el;\n                })}\n            </g>\n        );\n    }\n);\n\nconst IntBoxMaglev = React.memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_maglev\" fill={props.info[2]} stroke={props.info[2]} />\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxNumber = React.memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = React.memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station interchanges\n    const lineNames = props.osiInfos.map(info => info[4]).join('，');\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; direction: 'l' | 'r' }) => {\n    // get the all names from out of system transfers\n    const lineNames = props.osysiInfos.map(info => info[4]).join('，');\n    const lineNamesEn = props.osysiInfos.map(info => info[5]).join(', ');\n\n    return React.useMemo(\n        () => (\n            <g textAnchor={props.direction === 'l' ? 'start' : 'end'} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={3}>\n                    转乘{lineNames}\n                </text>\n                <text className=\"rmg-name__en\" dy={10} fontSize=\"75%\">\n                    To {lineNamesEn}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.direction]\n    );\n};\n","import { ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n}\n\nexport const drawLine = (branch: string[], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n    let lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n    let linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n    if (lineMainStns.length === 1) {\n        linePassStns = branch;\n    }\n\n    if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n        // if two set disjoint\n        if (linePassStns[0] === branch[0]) {\n            // -1 -1 1 1\n            linePassStns.push(lineMainStns[0]);\n        } else if (\n            lineMainStns[0] === branch[0] &&\n            lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n            linePassStns.length\n        ) {\n            linePassStns = branch;\n            lineMainStns = [];\n        } else {\n            // 1 1 -1 -1\n            linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n        }\n    }\n\n    return {\n        main: lineMainStns,\n        pass: linePassStns,\n    };\n};\n","import { ShortDirection, StationDict } from '../../../constants/constants';\n\n/**\n * Split the loopline into four sides according to left_and_right_factor and bottom_factor.\n * It assumes parameters will follow these rules:\n *     1. loopline.length > bottom_factor + left_and_right_factor * 2\n *     2. bottom_factor >= 0\n *     3. left_and_right_factor >= 0\n *     4. left_and_right_factor + bottom_factor > 0\n *\n * @param loopline The loop line aka branches[0].\n * @param current_stn_id Current station id.\n * @param bottom_factor How many stations the bottom side will have.\n * @param left_and_right_factor How many stations the left and right side will have.\n * @returns Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n * it will also be consecutive. Note that the length of right, bottom, and left can be 0.\n */\nexport const split_loop_stns = (\n    loopline: string[],\n    current_stn_id: string,\n    bottom_factor: number,\n    left_and_right_factor: number\n) => {\n    const top_factor = loopline.length - left_and_right_factor * 2 - bottom_factor;\n    const current_stn_idx = loopline.findIndex(val => val === current_stn_id);\n    const non_undefined_loopline = [...loopline, ...loopline, ...loopline];\n    const split_a = loopline.length + current_stn_idx - Math.floor(top_factor / 2) + (top_factor % 2 === 0 ? 1 : 0);\n    const split_b = loopline.length + current_stn_idx + Math.floor(top_factor / 2);\n    return {\n        top: non_undefined_loopline.slice(split_a, split_b + 1),\n        left: non_undefined_loopline.slice(split_a - left_and_right_factor, split_a),\n        right: non_undefined_loopline.slice(split_b + 1, split_b + 1 + left_and_right_factor),\n        bottom: non_undefined_loopline.slice(\n            split_b + 1 + left_and_right_factor,\n            split_b + 1 + left_and_right_factor + bottom_factor\n        ),\n    };\n};\n\n/**\n * Split the loopline with one branch into four sides according to left_and_right_factor and bottom_factor.\n * Note that the top side must start from the branch_stn_id.\n *\n * It assumes parameters will follow these rules:\n *     1. loopline.length > bottom_factor + left_and_right_factor * 2\n *     2. bottom_factor >= 0\n *     3. left_and_right_factor >= 0\n *     4. left_and_right_factor + bottom_factor > 0\n *\n * @param loopline The loop line aka branches[0].\n * @param branch_stn_id Branch station id.\n * @param bottom_factor How many stations the bottom side will have.\n * @param left_and_right_factor How many stations the left and right side will have.\n * @returns Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n * it will also be consecutive. Note that the length of right, bottom, and left can be 0.\n */\nexport const split_loop_stns_with_branch = (\n    loopline: string[],\n    branch_stn_id: string,\n    bottom_factor: number,\n    left_and_right_factor: number\n) => {\n    const top_factor = loopline.length - left_and_right_factor * 2 - bottom_factor;\n    const non_undefined_loopline = [...loopline, ...loopline, ...loopline];\n    const split_a = loopline.length + loopline.findIndex(val => val === branch_stn_id);\n    const another_branch_stn_id = non_undefined_loopline[split_a + top_factor - 1];\n    const split_b =\n        loopline.length +\n        loopline.findIndex(val => val === another_branch_stn_id) +\n        (split_a + top_factor > loopline.length * 2 ? loopline.length : 0);\n    return {\n        top: non_undefined_loopline.slice(split_a, split_b + 1),\n        left: non_undefined_loopline.slice(split_a - left_and_right_factor, split_a),\n        right: non_undefined_loopline.slice(split_b + 1, split_b + 1 + left_and_right_factor),\n        bottom: non_undefined_loopline.slice(\n            split_b + 1 + left_and_right_factor,\n            split_b + 1 + left_and_right_factor + bottom_factor\n        ),\n    };\n};\n\n/**\n * Split the loopline with two branches into four sides according to left_and_right_factor and arc.\n * Note that the top side must start from one of the branch_stn_ids and end at another.\n * Also the top side will be the major or the minor arc between branch_stn_ids.\n *\n * It assumes parameters will follow these rules:\n *     1. loopline.length > the major or the minor arc length between branch_stn_ids +\n *                          left_and_right_factor * 2\n *     2. left_and_right_factor >= 0\n *\n * @param loopline The loop line aka branches[0].\n * @param branch_stn_ids Branches station id.\n * @param left_and_right_factor How many stations the left and right side will have.\n * @param arc Which arc will be the top side, the major or the minor.\n * @returns Each array returned should be consecutive, and when combined in top -> right -> bottom -> left order,\n * it will also be consecutive. Note that the length of right, bottom, and left can be 0.\n */\nexport const split_loop_stns_with_branches = (\n    loopline: string[],\n    branch_stn_ids: [string, string],\n    left_and_right_factor: number,\n    arc: 'major' | 'minor'\n) => {\n    let split_a = loopline.findIndex(val => val === branch_stn_ids[0]);\n    let split_b = loopline.findIndex(val => val === branch_stn_ids[1]);\n    // swap a and b if a is bigger than b\n    [split_a, split_b, branch_stn_ids[0], branch_stn_ids[1]] =\n        split_a > split_b\n            ? [split_b, split_a, branch_stn_ids[1], branch_stn_ids[0]]\n            : [split_a, split_b, branch_stn_ids[0], branch_stn_ids[1]];\n    const top_a = loopline.slice(split_a, split_b + 1);\n    const top_b = loopline.filter(stn => !top_a.filter(stn => !branch_stn_ids.includes(stn)).includes(stn));\n    // which arc we use on the top will result to different bottom factor\n    const bottom_factor =\n        loopline.length -\n        (arc === 'major' ? Math.max : Math.min)(top_a.length, top_b.length) -\n        left_and_right_factor * 2;\n    const branch_stn_id =\n        arc === 'major'\n            ? top_a.length > top_b.length\n                ? branch_stn_ids[0]\n                : branch_stn_ids[1]\n            : top_a.length > top_b.length\n            ? branch_stn_ids[1]\n            : branch_stn_ids[0];\n    return split_loop_stns_with_branch(loopline, branch_stn_id, bottom_factor, left_and_right_factor);\n};\n\nexport type LoopStns = ReturnType<typeof split_loop_stns>;\n\n/**\n * Calculate the xshares and yshares of the loop stations.\n *\n * @param loopline The loop line aka branches[0].\n * @param loop_stns Object returned from split_loop_stns.\n * @returns Values sit between 0 and 1.\n */\nexport const get_xshares_yshares_of_loop = (loopline: string[], loop_stns: LoopStns) => {\n    const x_shares = Object.fromEntries(loopline.map(stn_id => [stn_id, -1]));\n    const y_shares = Object.fromEntries(loopline.map(stn_id => [stn_id, -1]));\n\n    const [Y_TOP, Y_BOTTOM, X_LEFT, X_RIGHT] = [0, 1, 0, 1];\n\n    // loop's inner padding for xs\n    const e = 0; // 0 <= e <= 1\n\n    loop_stns.top.forEach((stn_id, i) => {\n        x_shares[stn_id] = e / 2 + ((1 - e) / (loop_stns.top.length + 1)) * (i + 1);\n        y_shares[stn_id] = Y_TOP;\n    });\n    loop_stns.right.forEach((stn_id, i) => {\n        x_shares[stn_id] = X_RIGHT;\n        y_shares[stn_id] = e / 2 + ((1 - e) / (loop_stns.right.length + 1)) * (i + 1);\n    });\n    loop_stns.bottom.forEach((stn_id, i) => {\n        x_shares[stn_id] = 1 - e / 2 - ((1 - e) / (loop_stns.bottom.length + 1)) * (i + 1);\n        y_shares[stn_id] = Y_BOTTOM;\n    });\n    loop_stns.left.forEach((stn_id, i) => {\n        x_shares[stn_id] = X_LEFT;\n        y_shares[stn_id] = 1 - e / 2 - ((1 - e) / (loop_stns.left.length + 1)) * (i + 1);\n    });\n\n    return {\n        x_shares: x_shares,\n        y_shares: y_shares,\n    };\n};\n\n/**\n * Get pivot stations from the loop line.\n */\nexport const get_pivot_stations = (\n    branches: string[][],\n    direction: ShortDirection,\n    stn_list: StationDict,\n    current_stn_id: string\n) => {\n    const loop_line = branches[0].filter(stn_id => !['linestart', 'lineend'].includes(stn_id));\n    const _ = [...loop_line, ...loop_line, ...loop_line];\n    const non_undefined_loop_line = direction === 'r' ? _ : _.reverse();\n    const current_stn_idx = non_undefined_loop_line.findIndex(stn_id => current_stn_id === stn_id) + loop_line.length;\n    return non_undefined_loop_line\n        .slice(current_stn_idx + 1)\n        .filter(stn_id => stn_list[stn_id].loop_pivot)\n        .slice(undefined, 2);\n};\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["StationSHMetro","props","stnId","nameDirection","services","color","stnInfo","useRootSelector","store","param","stn_list","transfer","info","stationIconStyle","length","dr","StationNameGElement","name","infos","xlinkHref","stroke","transform","className","writingMode","fontSize","dy","upward","downward","left","right","osi_dx","osi_dy","osysi_dx","osysi_dy","x1","x2","y1","y2","IntBoxGroup","intInfos","arrowDirection","StationName","stnName","fill","OSIText","osiInfos","OSysIText","osysiInfos","React","ref","others","split","nameENLn","dx","anchor","textAnchor","map","txt","i","array","intNameId","intInfo","reduce","lineNames","filter","match","replace","join","concat","lineNamesEn","trim","arrowLength","transfer_dy","arrow_dx","arrow_dy","arrow_dr","transfer_dx","transfer_anchor","id","strokeWidth","d","offset","stopColor","toString","LoopBranches","loop_branches","edges","xs","ys","canvas","X_LEFT","X_RIGHT","Y_TOP","branches","helper","current_stn_id","current_stn_idx","direction","coline","e","CanvasType","branches_paths","Number","at","loopline","stn_id","includes","branches_coline_color","Object","values","co","from","to","every","colors","loop_branch","c","self","findIndex","t","refX","refY","markerEnd","undefined","stnState","bank","branch","indexOf","Services","LoopColine","loop_stns","info_panel_type","coline_main_color","slice","isColineBranch","flat","COLINE_GAP","keys","top","height","width","x","y","LINE_WIDTH","o","bank_angle","svg_width","svgWidth","svg_height","padding","branchSpacingPct","loop_info","left_and_right_factor","bottom_factor","branch_stn_ids","v","arc","from_idx","to_idx","Math","abs","split_loop_stns_with_branches","split_loop_stns_with_branch","split_loop_stns","get_xshares_yshares_of_loop","x_shares_loop","x_shares","y_shares_loop","y_shares","critical_path_length","acc","cur","x_interval","line_xs_branches","xs_branches","fromEntries","stn","get_loop_branches","bottom","verticalPadding","line_ys","line_xs","max","min","xs_loop","l","r","forEach","path","_linePath","strokeLinejoin","LoopStationGroup","Y_BOTTOM","corner","prev_x","prev_y","side","stn_pos","push","extra","railmap_bank","railmap_direction","indoor_name_direction","entries","bank_","direction_override","direction_param","loop","branchNameDX","stationIconColor","facility","oneLine","one_line","intPadding","int_padding","CurrentStationText","stnNameEl","directionPolarity","mainDx","Facilities","lineDx","intEl","intWidth","setIntWidth","current","getBBox","JSON","stringify","intDx","zhEl","enDx","setEnDx","arr","Set","size","boxInfos","Boolean","isLineNumber","isMaglev","el","IntBoxMaglev","IntBoxNumber","IntBoxLetter","prevProps","nextProps","dominantBaseline","textCount","adjacencyList","stnList","leftW","rightW","children","a","criticalPathMethod","adjMat","len","nodes","allLengths","criticalPaths","child","cp","unshift","maxLength","getXShareMTR","criticalPath","branchOfStn","partSource","partSink","leftOpenJaw","lens","getStnState","currentId","routes","console","log","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","stnIds","lineXs","realXs","realYs","prevId","prevY","prevX","stnDX","stnExtraH","stnSpareH","warn","stations","drawLine","stnStates","lineMainStns","linePassStns","main","pass","top_factor","val","non_undefined_loopline","split_a","floor","split_b","branch_stn_id","another_branch_stn_id","top_a","top_b","get_pivot_stations","loop_line","_","non_undefined_loop_line","reverse","loop_pivot","_createForOfIteratorHelper","allowArrayLike","it","Symbol","iterator","Array","isArray","F","s","n","done","value","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2"],"sourceRoot":""}