{"version":3,"file":"static/js/1711.4866e440.chunk.js","mappings":"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","sources":["svgs/mtr/strip-mtr.tsx","svgs/mtr/destination-mtr.tsx","svgs/mtr/station/interchange-tick.tsx","svgs/mtr/station/station-icon.tsx","svgs/mtr/station/interchange-station.tsx","svgs/mtr/station/osi-station.tsx","svgs/mtr/utils.ts","svgs/mtr/station/station-name/station-name.tsx","svgs/mtr/station/station-name/station-name-wrapper.tsx","svgs/mtr/station/station.tsx","svgs/railmap/main/main-mtr.tsx","svgs/railmap/railmap-mtr.tsx","svgs/mtr/index.tsx"],"sourcesContent":["import React, { memo } from 'react';\n\nexport default memo(function StripMTR(props: { stripPc: number }) {\n    return (\n        <rect\n            fill=\"var(--rmg-theme-colour)\"\n            height={20}\n            style={{\n                width: 'var(--rmg-svg-width)',\n                ['--strip-percentage' as any]: props.stripPc,\n                transform: `translateY(calc(var(--strip-percentage, 95) * var(--rmg-svg-height) / 100 - 10px))`,\n            }}\n        />\n    );\n});\n","import React, { memo } from 'react';\nimport StripMTR from './strip-mtr';\nimport { CanvasType, Name, ShortDirection } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport SvgWrapper from '../common/svg-wrapper';\n\nconst CANVAS_TYPE = CanvasType.Destination;\n\nexport default function DestinationMTR() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const { svgWidth: svgWidths, svg_height: svgHeight, theme } = useRootSelector(state => state.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsMTR />\n            <StripMTR stripPc={90} />\n            <InfoMTR />\n        </SvgWrapper>\n    );\n}\n\nconst DefsMTR = memo(() => (\n    <defs>\n        <path id=\"arrow\" d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\" fill=\"var(--rmg-black,#000)\" />\n    </defs>\n));\n\nconst InfoMTR = () => {\n    const routes = useRootSelector(store => store.helper.routes);\n\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const customisedMTRDestination = useRootSelector(store => store.param.customiseMTRDest);\n    const platformNumber = useRootSelector(store => store.param.platform_num);\n    const lineName = useRootSelector(store => store.param.line_name);\n\n    const currentStationIndex = useRootSelector(store => store.param.current_stn_idx);\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    let destNames: Name;\n    if (customisedMTRDestination.terminal !== false) {\n        destNames = customisedMTRDestination.terminal;\n    } else {\n        const validDests = [\n            ...new Set(\n                routes\n                    .filter(route => route.includes(currentStationIndex))\n                    .map(\n                        route =>\n                            route\n                                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                                .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                    )\n                    .filter(id => id !== currentStationIndex)\n            ),\n        ];\n        destNames = [\n            validDests.map(stnId => stationList[stnId].name[0]).join('/'),\n            validDests\n                .map(stnId => stationList[stnId].name[1])\n                .join('/')\n                .replace('\\\\', ' '),\n        ];\n    }\n\n    const destNameEl = React.useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(destNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [destNames.toString(), customisedMTRDestination.isLegacy]\n    );\n\n    const flagLength = 160 + 150 + bBox.width + 45 + 50;\n    const arrowX = (svgWidths[CanvasType.Destination] - (direction === ShortDirection.left ? 1 : -1) * flagLength) / 2;\n    const platformNumX = arrowX + (direction === ShortDirection.left ? 1 : -1) * (160 + 50 + 75);\n    const destNameX = platformNumX + (direction === ShortDirection.left ? 1 : -1) * (75 + 45);\n\n    return (\n        <g id=\"dest_name\" style={{ transform: 'translateY(calc(var(--rmg-svg-height) / 2 - 20px))' }}>\n            <use\n                xlinkHref=\"#arrow\"\n                transform={`translate(${arrowX},0)rotate(${direction === ShortDirection.left ? 0 : 180})`}\n            />\n            <PlatformNum num={platformNumber} transform={`translate(${platformNumX},0)`} />\n            <g\n                ref={destNameEl}\n                textAnchor={direction === ShortDirection.left ? 'start' : 'end'}\n                transform={`translate(${destNameX},-25)`}\n                fill=\"var(--rmg-black)\"\n            >\n                <text className=\"rmg-name__zh\" fontSize={90}>\n                    {(customisedMTRDestination.isLegacy ? lineName[0] : '') + '往' + destNames[0]}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={45} dy={80}>\n                    {(customisedMTRDestination.isLegacy ? lineName[1] + ' ' : '') + 'to ' + destNames[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst PlatformNum = (props: { num: string | false } & React.SVGProps<SVGGElement>) => {\n    const { num, ...others } = props;\n\n    return (\n        <g id=\"platform\" {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <circle cx={0} cy={0} r={75} fill=\"var(--rmg-theme-colour)\" />\n                        <text className=\"rmg-name__zh\" dy={0} textAnchor=\"middle\" fontSize={135} fill=\"#fff\">\n                            {num}\n                        </text>\n                    </>\n                ),\n                [num]\n            )}\n        </g>\n    );\n};\n","import React, { memo } from 'react';\nimport { Direction, InterchangeInfo, Position } from '../../../constants/constants';\n\nconst getRotation = (position: Position): number => {\n    switch (position) {\n        case Position.UP:\n            return 180;\n        case Position.DOWN:\n            return 0;\n        case Position.LEFT:\n            return 90;\n        case Position.RIGHT:\n            return -90;\n    }\n};\n\ninterface InterchangeTickProps {\n    interchangeInfo: InterchangeInfo;\n    isPassed?: boolean;\n    position: Position;\n    repel?: Direction; // osi22\n    repelOffset?: number;\n}\n\nfunction InterchangeTick(props: InterchangeTickProps) {\n    const { interchangeInfo, isPassed, position, repel, repelOffset } = props;\n\n    const zhNameLines = interchangeInfo[4].split('\\\\').length;\n    const enNameLines = interchangeInfo[5].split('\\\\').length;\n\n    const textAnchor =\n        position === Position.LEFT || repel === Direction.left\n            ? 'end'\n            : position === Position.RIGHT || repel === Direction.right\n            ? 'start'\n            : 'middle';\n\n    const transforms = {\n        path: {\n            rotate: getRotation(position),\n        },\n        g: {\n            x:\n                (position === Position.LEFT ? -24 : position === Position.RIGHT ? 24 : 0) +\n                (repel === Direction.left ? -1 : repel === Direction.right ? 1 : 0) * (repelOffset ?? 3),\n            y:\n                position === Position.UP\n                    ? -37 - 10 * (zhNameLines - 1) - 7 * (enNameLines - 1)\n                    : position === Position.DOWN\n                    ? 31\n                    : 6 - (20 + 10 * (zhNameLines - 1) + 7 * (enNameLines - 1) - 1) / 2,\n        },\n    };\n\n    return (\n        <>\n            <path\n                d=\"M0,0v17\"\n                strokeLinecap=\"round\"\n                stroke={isPassed ? 'var(--rmg-grey)' : interchangeInfo[2]}\n                strokeWidth={8}\n                transform={`rotate(${transforms.path.rotate})`}\n            />\n            <g\n                textAnchor={textAnchor}\n                transform={`translate(${transforms.g.x},${transforms.g.y})`}\n                fill={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n            >\n                {interchangeInfo[4].split('\\\\').map((txt, i) => (\n                    <text key={i} dy={10 * i} className=\"rmg-name__zh\" fontSize={10}>\n                        {txt}\n                    </text>\n                ))}\n                {interchangeInfo[5].split('\\\\').map((txt, j) => (\n                    <text key={zhNameLines + j} dy={zhNameLines * 10 - 1 + 7 * j} className=\"rmg-name__en\" fontSize={7}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        </>\n    );\n}\n\nexport default memo(\n    InterchangeTick,\n    (prevProps, nextProps) =>\n        prevProps.interchangeInfo.toString() === nextProps.interchangeInfo.toString() &&\n        prevProps.isPassed === nextProps.isPassed &&\n        prevProps.position === nextProps.position &&\n        prevProps.repel === nextProps.repel\n);\n","import React from 'react';\n\ninterface StationIconProps {\n    length: number;\n    isPassed?: boolean;\n    isReversed?: boolean;\n}\n\nexport default function StationIcon(props: StationIconProps) {\n    const { length, isPassed, isReversed } = props;\n\n    return (\n        <path\n            d={`M-8,0 v${length} a8,8 0 0,0 16,0 v-${length} a8,8 0 0,0 -16,0Z`}\n            className=\"rmg-stn__mtr\"\n            stroke={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n            transform={`scale(1,${isReversed ? -1 : 1})`}\n        />\n    );\n}\n","import React from 'react';\nimport { Direction, InterchangeInfo, Position } from '../../../constants/constants';\nimport InterchangeTick from './interchange-tick';\nimport StationIcon from './station-icon';\n\ninterface InterchangeStationProps {\n    interchangeInfoList: InterchangeInfo[];\n    direction?: Direction;\n    isPassed?: boolean;\n    isReversed?: boolean;\n    repel?: Direction;\n}\n\nexport default function InterchangeStation(props: InterchangeStationProps) {\n    const { interchangeInfoList, direction, isPassed, isReversed, repel } = props;\n\n    const iconLength = interchangeInfoList.length <= 1 ? 0 : 18 * interchangeInfoList.length;\n\n    return (\n        <g>\n            {interchangeInfoList.length === 1 && (\n                <InterchangeTick\n                    interchangeInfo={interchangeInfoList[0]}\n                    isPassed={isPassed}\n                    position={isReversed ? Position.UP : Position.DOWN}\n                    repel={repel}\n                />\n            )}\n\n            {interchangeInfoList.length > 1 &&\n                interchangeInfoList.map((info, i) => (\n                    <g key={i} transform={`translate(0,${isReversed ? -18 * (i + 1) : 18 * (i + 1)})`}>\n                        <InterchangeTick\n                            interchangeInfo={info}\n                            isPassed={isPassed}\n                            position={direction === Direction.right ? Position.RIGHT : Position.LEFT}\n                        />\n                    </g>\n                ))}\n\n            <StationIcon length={iconLength} isPassed={isPassed} isReversed={isReversed} />\n        </g>\n    );\n}\n","import React from 'react';\nimport { Direction, InterchangeInfo, Name, Position } from '../../../constants/constants';\nimport InterchangeTick from './interchange-tick';\nimport StationIcon from './station-icon';\n\ninterface OsiStationProps {\n    interchangeInfoList: InterchangeInfo[];\n    direction: Direction;\n    isPassed?: boolean;\n    isReversed?: boolean;\n    isTerminal?: boolean;\n    stationName?: Name;\n}\n\nexport default function OsiStation(props: OsiStationProps) {\n    const { interchangeInfoList, direction, isPassed, isReversed, isTerminal, stationName } = props;\n\n    const enNameLines = stationName?.[1]?.split('\\\\')?.length ?? 1;\n\n    const iconLength = 18 * (interchangeInfoList.length - 1);\n    const transforms = {\n        name: {\n            x: isTerminal\n                ? 0\n                : interchangeInfoList.length === 1\n                ? direction === Direction.left\n                    ? -13\n                    : 13\n                : direction === Direction.left\n                ? 13\n                : -13,\n            y: isTerminal\n                ? isReversed\n                    ? 19\n                    : -28\n                : -4 + (isReversed ? -9 : 9) * (interchangeInfoList.length - 1) - 5 * (enNameLines - 1),\n        },\n    };\n\n    return (\n        <g>\n            {interchangeInfoList.map((info, i, arr) => (\n                <g key={i} transform={`translate(0,${isReversed ? -18 * i : 18 * i})`}>\n                    <InterchangeTick\n                        interchangeInfo={info}\n                        isPassed={isPassed}\n                        position={\n                            arr.length === 1\n                                ? isReversed\n                                    ? Position.UP\n                                    : Position.DOWN\n                                : direction === Direction.right\n                                ? Position.RIGHT\n                                : Position.LEFT\n                        }\n                        repel={isTerminal ? direction : undefined}\n                        repelOffset={isTerminal && arr.length === 1 ? -4 : 0}\n                    />\n                </g>\n            ))}\n\n            <StationIcon length={iconLength} isPassed={isPassed} isReversed={isReversed} />\n\n            <g\n                textAnchor={transforms.name.x === 0 ? 'middle' : transforms.name.x > 0 ? 'start' : 'end'}\n                fill={isPassed ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                transform={`translate(${transforms.name.x},${transforms.name.y})`}\n            >\n                <text className=\"rmg-name__zh\" fontSize={14}>\n                    {stationName?.[0]}\n                </text>\n                {stationName?.[1]?.split('\\\\')?.map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en\" fontSize={9} dy={12 + 10 * i}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        </g>\n    );\n}\n","import { waitForMs } from '../../utils';\n\nexport const waitForFontReady = async () => {\n    let retryAttempt = 3;\n\n    while (retryAttempt--) {\n        // #274 ready font fact set may not contain GenYoMin when first resolved\n        const fontFaceSet = await document.fonts.ready;\n        const it = fontFaceSet.values();\n        while (true) {\n            const next = it.next();\n            if (next.done) {\n                break;\n            }\n\n            if (next.value.family === 'GenYoMin TW') {\n                return;\n            }\n        }\n\n        console.log('GenYoMin is NOT ready. Retry attempts remaining: ' + retryAttempt + ' ...');\n        await waitForMs(500);\n    }\n\n    throw new Error('Failed to load GenYoMin after 3 attempts');\n};\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Direction, Name } from '../../../../constants/constants';\nimport { waitForFontReady } from '../../utils';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    align?: Direction;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate, align } = props;\n\n        const nameEl = useRef<SVGGElement>(null);\n\n        const updateNameBBox = () => {\n            onUpdate?.(nameEl.current!.getBBox());\n        };\n\n        useEffect(() => {\n            updateNameBBox();\n            waitForFontReady().then().catch(console.log).finally(updateNameBBox);\n        }, [stnName.toString(), align]);\n\n        const getTextAnchor = (direction?: Direction) => {\n            switch (direction) {\n                case Direction.left:\n                    return 'start';\n                case Direction.right:\n                    return 'end';\n                default:\n                    return 'middle';\n            }\n        };\n\n        const getDy = (index: number) => 17 + 11 * index;\n\n        return (\n            <g ref={nameEl} textAnchor={getTextAnchor(align)}>\n                <text className=\"rmg-name__zh rmg-name__mtr--station\">{stnName[0]}</text>\n\n                {stnName[1].split('\\\\').map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en rmg-name__mtr--station\" dy={getDy(i)}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.stnName.toString() === nextProps.stnName.toString() && prevProps.align === nextProps.align\n);\n","import React, { SVGProps, useState } from 'react';\nimport { Direction, Facilities, Name, StationState } from '../../../../constants/constants';\nimport StationName from './station-name';\n\n/**\n * Top (in pixels) of station's Chinese name.\n */\nconst NAME_ZH_TOP = -10.8125;\n/**\n * Height (in pixels) of station's Chinese name.\n */\n// const NAME_ZH_HEIGHT = 21.625;\n/**\n * Top (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_TOP = -8;\n/**\n * Height (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_HEIGHT = 13.21875;\n/**\n * Difference of `y`s of station's Chinese name and English name (1 line). (This number should used as the `dy` of the English `text` element after Chinese `text` elements. )\n */\nconst NAME_ZH_EN_GAP = 17;\n/**\n * Height (in pixels) from the top of station's Chinese name to the bottom of English name (1 line).\n */\nexport const NAME_FULL_HEIGHT = -NAME_ZH_TOP + NAME_ZH_EN_GAP + NAME_EN_HEIGHT + NAME_EN_TOP;\n/**\n * Height (in pixels) of the gap between the centre of the line and the top of station's Chinese name.\n */\nconst STN_NAME_LINE_GAP = 14;\n\ninterface StationNameWrapperProps extends SVGProps<SVGGElement> {\n    stationName: Name;\n    stationState: StationState;\n    facility: Facilities;\n    lower?: boolean;\n    align?: Direction;\n}\n\nexport default function StationNameWrapper(props: StationNameWrapperProps) {\n    const { stationName, stationState, lower, align, facility, ...others } = props;\n\n    /**\n     * align = undefined: { x: -40, width: 80 }\n     * align = left: { x: 0, width: 80 }\n     * align = right: { x: -80, width: 80 }\n     */\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    const getFill = (state: StationState) => {\n        switch (state) {\n            case StationState.PASSED:\n                return 'var(--rmg-grey)';\n            case StationState.CURRENT:\n                return '#fff';\n            case StationState.FUTURE:\n                return 'var(--rmg-black)';\n        }\n    };\n\n    const nameEnRows = stationName[1].split('\\\\').length;\n    const transforms = {\n        g: {\n            x: align ? (align === Direction.right ? -3 : 3) : 0,\n            y:\n                (lower\n                    ? STN_NAME_LINE_GAP - NAME_ZH_TOP\n                    : -STN_NAME_LINE_GAP - NAME_ZH_TOP - NAME_FULL_HEIGHT - 11 * (nameEnRows - 1)) +\n                (align ? (lower ? 10 : -10) : 0),\n        },\n        rect: {\n            x:\n                bBox.x -\n                3 +\n                (facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? -3 - NAME_FULL_HEIGHT\n                        : 0\n                    : (NAME_FULL_HEIGHT + 5) / 2 - 3 - NAME_FULL_HEIGHT),\n            y: NAME_ZH_TOP - 1,\n            width: bBox.width + 6 + (facility === Facilities.none ? 0 : NAME_FULL_HEIGHT + 3),\n            height: NAME_FULL_HEIGHT + 2 + 11 * (nameEnRows - 1),\n        },\n        use: {\n            x: align\n                ? align === Direction.right\n                    ? -(NAME_FULL_HEIGHT + 2) / 2 - bBox.width - 3\n                    : (NAME_FULL_HEIGHT + 2) / 2 - 2\n                : -(bBox.width + 3) / 2,\n            y: NAME_ZH_TOP - 1 + 5.5 * (nameEnRows - 1),\n        },\n        StationName: {\n            x:\n                facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? 0\n                        : NAME_FULL_HEIGHT + 3\n                    : (NAME_FULL_HEIGHT + 5) / 2,\n            y: 0,\n        },\n    };\n\n    return (\n        <g {...others}>\n            <g fill={getFill(stationState)} transform={`translate(${transforms.g.x},${transforms.g.y})`}>\n                {stationState === StationState.CURRENT && (\n                    <rect\n                        x={transforms.rect.x}\n                        y={transforms.rect.y}\n                        width={transforms.rect.width}\n                        height={transforms.rect.height}\n                        fill=\"var(--rmg-black)\"\n                    />\n                )}\n\n                {facility !== Facilities.none && (\n                    <use\n                        xlinkHref={`#${facility}`}\n                        fill={stationState === StationState.PASSED ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                        x={transforms.use.x}\n                        y={transforms.use.y}\n                    />\n                )}\n\n                <g transform={`translate(${transforms.StationName.x},${transforms.StationName.y})`}>\n                    <StationName stnName={stationName} onUpdate={setBBox} align={align} />\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React from 'react';\nimport { Direction, ShortDirection, StationState } from '../../../constants/constants';\nimport InterchangeStation from './interchange-station';\nimport { useRootSelector } from '../../../redux';\nimport OsiStation from './osi-station';\nimport StationNameWrapper from './station-name/station-name-wrapper';\n\ninterface StationProps {\n    stationId: string;\n    stationState: StationState;\n    isReversed: boolean; // reverse = up\n}\n\nexport default function Station(props: StationProps) {\n    const { stationId, stationState, isReversed } = props;\n\n    const {\n        name,\n        parents,\n        children,\n        transfer: { info, tick_direc, osi_names, paid_area },\n        facility,\n    } = useRootSelector(state => state.param.stn_list[stationId]);\n\n    const end: Direction | undefined = info[0]?.length\n        ? parents.includes('linestart')\n            ? Direction.left\n            : children.includes('lineend')\n            ? Direction.right\n            : undefined\n        : undefined;\n    const isRepelled = Boolean(info[1]?.length && !end);\n\n    const transforms = {\n        link: {\n            scaleX: end === Direction.left ? -1 : 1,\n            scaleY: isReversed ? -1 : 1,\n        },\n        osi: {\n            x: end ? (end === Direction.left ? -41 : 41) : 0,\n            y: end ? 0 : !isReversed ? 26 : -26,\n        },\n    };\n\n    return (\n        <g data-testid=\"station-icon-wrapper\">\n            {info[1]?.length && (\n                <path\n                    d={end && info[0]?.length ? 'M0,0H41' : 'M0,0V26'}\n                    strokeWidth={2.69}\n                    strokeDasharray={paid_area ? 0 : 2.5}\n                    stroke={stationState === StationState.PASSED ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                    transform={`scale(${transforms.link.scaleX},${transforms.link.scaleY})`}\n                />\n            )}\n\n            <InterchangeStation\n                interchangeInfoList={info[0]}\n                direction={tick_direc === ShortDirection.right ? Direction.right : Direction.left}\n                isPassed={stationState === StationState.PASSED}\n                isReversed={!end && info[1]?.length ? !isReversed : isReversed}\n                repel={\n                    isRepelled ? (tick_direc === ShortDirection.right ? Direction.right : Direction.left) : undefined\n                }\n            />\n\n            {info[1]?.length && (\n                <g transform={`translate(${transforms.osi.x},${transforms.osi.y})`}>\n                    <OsiStation\n                        interchangeInfoList={info[1]}\n                        direction={end ? end : tick_direc === ShortDirection.right ? Direction.right : Direction.left}\n                        stationName={osi_names[0]}\n                        isPassed={stationState === StationState.PASSED}\n                        isReversed={end ? !isReversed : isReversed}\n                        isTerminal={Boolean(end)}\n                    />\n                </g>\n            )}\n\n            <StationNameWrapper\n                stationName={name}\n                stationState={stationState}\n                facility={facility}\n                lower={isReversed}\n                align={\n                    info[0]?.length && isRepelled\n                        ? tick_direc === ShortDirection.left\n                            ? Direction.left\n                            : Direction.right\n                        : undefined\n                }\n            />\n        </g>\n    );\n}\n","import React, { useMemo } from 'react';\nimport { adjacencyList, criticalPathMethod, getStnState, getXShareMTR } from '../methods/share';\nimport { leftWideFactor, rightWideFactor, StationsMTR } from '../methods/mtr';\nimport { CanvasType, RMGParam } from '../../../constants/constants';\nimport { useRootSelector } from '../../../redux';\nimport Station from '../../mtr/station/station';\nimport { getStationYShare } from '../../mtr/line-diagram-utils';\n\nconst getNamePos = (stnId: string, branches: string[][], { isStagger, isFlip }: RMGParam['namePosMTR']) => {\n    if (!isStagger) return isFlip;\n    let res: number;\n    if (branches[0].includes(stnId)) {\n        res = branches[0].indexOf(stnId) % 2;\n    } else {\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        res = (branches[0].indexOf(branchOfStn[0]) + branchOfStn.indexOf(stnId) + 1) % 2;\n    }\n    return res === 0 ? isFlip : !isFlip;\n};\n\nconst MainMTR = () => {\n    const { branches, routes, depsStr: deps } = useRootSelector(store => store.helper);\n\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgH,\n        y_pc: yPercentage,\n        padding: paddingPercentage,\n        branchSpacingPct,\n        direction,\n        namePosMTR: namePosition,\n        current_stn_idx: currentStationIndex,\n        stn_list: stationList,\n    } = useRootSelector(store => store.param);\n\n    const adjMat = adjacencyList(stationList, leftWideFactor, rightWideFactor);\n\n    const criticalPath = useMemo(\n        () => criticalPathMethod('linestart', 'lineend', adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n    const realCP = useMemo(\n        () => criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(stationList).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100,\n        svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const ys = useMemo(\n        () =>\n            Object.keys(stationList).reduce<Record<string, number>>(\n                (acc, cur) => ({\n                    ...acc,\n                    [cur]: (getStationYShare(cur, branches, stationList) * branchSpacingPct * svgH) / 200,\n                }),\n                {}\n            ),\n        [deps, branchSpacingPct, svgH]\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(currentStationIndex, routes, direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const namePoss = Object.keys(stationList).reduce<{ [stnId: string]: boolean }>(\n        (acc, id) => ({ ...acc, [id]: getNamePos(id, branches, namePosition) }),\n        {}\n    );\n\n    const linePaths = StationsMTR.drawLine(\n        branches,\n        stnStates,\n        stationList,\n        lineXs,\n        xs,\n        ys,\n        (branchSpacingPct * svgH) / 200,\n        criticalPath\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: yPercentage,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Lines paths={linePaths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} namePoss={namePoss} />\n        </g>\n    );\n};\n\nexport default MainMTR;\n\nconst Lines = React.memo(\n    (props: { paths: { main: string[]; pass: string[]; sidingMain: string[]; sidingPass: string[] } }) => {\n        return (\n            <g fill=\"none\" strokeWidth={9.68}>\n                <g stroke=\"var(--rmg-grey)\">\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                    {props.paths.sidingPass.map((path, i) => (\n                        <path key={i} d={path} strokeDasharray={path.match(/a/g)?.length === 4 ? '10 4' : undefined} />\n                    ))}\n                </g>\n\n                <g stroke=\"var(--rmg-theme-colour)\">\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                    {props.paths.sidingMain.map((path, i) => (\n                        <path key={i} d={path} strokeDasharray={path.match(/a/g)?.length === 4 ? '10 4' : undefined} />\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n    namePoss: { [stnId: string]: boolean };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates, namePoss } = props;\n\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(stationList)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${xs[stnId]}px,${ys[stnId]}px)`,\n                        }}\n                    >\n                        <Station stationId={stnId} stationState={stnStates[stnId]} isReversed={namePoss[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import React from 'react';\nimport StripMTR from '../mtr/strip-mtr';\nimport MainMTR from './main/main-mtr';\nimport { CanvasType } from '../../constants/constants';\nimport SvgWrapper from '../common/svg-wrapper';\nimport { useRootSelector } from '../../redux';\n\nconst CANVAS_TYPE = CanvasType.RailMap;\n\nexport default function RailMapMTR() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const { svgWidth: svgWidths, svg_height: svgHeight, theme } = useRootSelector(state => state.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsMTR />\n\n            <StripMTR stripPc={90} />\n            <MainMTR />\n        </SvgWrapper>\n    );\n}\n\nconst DefsMTR = React.memo(() => {\n    return (\n        <defs>\n            <g id=\"airport\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} height={58.67798} width={58.67798} />\n                <path\n                    id=\"airport\"\n                    d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                    transform=\"translate(-28.9697,0.14347)\"\n                    fill=\"white\"\n                />\n            </g>\n            <g id=\"disney\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <path\n                    fill=\"white\"\n                    d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                    transform=\"translate(-28.9697 0.13398)\"\n                />\n            </g>\n            <clipPath id=\"hsr-clip-path\" transform=\"translate(-0.00057 0.01643)\">\n                <path\n                    fill=\"none\"\n                    d=\"M5.1606.89861a3.67176,3.67176,0,0,0-3.676,3.667v48.966a3.67842,3.67842,0,0,0,3.676,3.692h48.443a3.67892,3.67892,0,0,0,3.678-3.692V4.5656a3.67227,3.67227,0,0,0-3.678-3.667Z\"\n                />\n            </clipPath>\n            <g id=\"hsr\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <g clipPath=\"url(#hsr-clip-path)\" transform=\"translate(-29.33899,0)\">\n                    <rect\n                        x={-3.25242}\n                        y={24.74141}\n                        width={61.75879}\n                        height={0.98008}\n                        transform=\"translate(-8.93747 17.31321) rotate(-30.16134)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M5.77169,48.97289c-2.17407-3.89294,2.56994-10.525,4.85-13.724l.173-.248a83.00826,83.00826,0,0,1,7.39294-9.285,97.384,97.384,0,0,1,11.082-9.958c7.051-6.045,15.832-5.876,16.447-5.894l11.785-.957.276,17.42-11.5271,10.586c-.36.39405-5.553,5.863-18.10193,11.035-6.752,2.783-11.877,4.146-15.66,4.146-3.301,0-5.561-1.049-6.71692-3.121\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"57.453 29.614 32.426 58.31 35.582 58.509 57.584 30.433 57.453 29.614\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M49.04708,11.61364a.94277.94277,0,0,0-.17407-.227c-.752-.93695-2.988-1.259-5.933-.793a25.98382,25.98382,0,0,0-9.99695,3.032A98.52916,98.52916,0,0,0,20.723,23.69768c-3.1759,3.487-4.645,6.388-3.62292,7.584,1.84,2.166,13.7539.716,22.00793-6.066,9.035-7.42,10.718-11.577,9.93909-13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M34.65255,13.81182c5.65991-2.842,11.28088-2.856,12.1499-1.213.88306,1.652-2.99792,5.303-8.656,8.128-5.648,2.837-10.9469,3.805-11.81994,2.15-.873-1.641,2.668-6.237,8.326-9.065\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M58.10958,25.03454c-16.832,20.708-40.7301,26.038-40.7301,26.038,11-6.73,12.769-8.111,18.968-18.01,8.364-13.351,21.77808-21.549,21.912-21.63,0,0-.068,13.5-.1499,13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M27.1877,26.69561l9.705-2.814a6.22768,6.22768,0,0,1-1.994,2.759,25.57277,25.57277,0,0,1-6.697,3.405,11.78221,11.78221,0,0,1-5.5.783Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M19.59005,25.97692a18.37656,18.37656,0,0,1,3.891-3.976,6.66452,6.66452,0,0,0-.30908,2.213l-4.391,4.829a6.18212,6.18212,0,0,1,.80908-3.066\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"23.156 58.311 57.463 26.746 57.396 25.857 21.582 58.607 23.156 58.311\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M60.15645,12.35973a68.6782,68.6782,0,0,0-12.602,9.542c-8.15,7.745-12.109,15.259-9.855,16.091,2.24793.816,10.678-4.782,18.83594-12.543,1.828-1.74,3.48-3.424,4.926-5.024Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M63.07638,11.82653a40.86955,40.86955,0,0,0-10,7.096c-5.90406,5.437-9.48609,11.105-7.848,11.742,1.657.631,8.28894-3.955,14.188-9.401a61.76591,61.76591,0,0,0,4.61694-4.705Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M12.67989,42.93969a9.87,9.87,0,0,0-5.754-1.895c-.113.22-.223.439-.33008.662a9.45046,9.45046,0,0,1,5.69507,1.749,6.27885,6.27885,0,0,1,2.61,6.305,10.16524,10.16524,0,0,1-.598,2.228c.238-.023.481-.053.725-.087.78308-2.249,1.394-6.184-2.3479-8.962\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                </g>\n            </g>\n\n            <path id=\"inttick\" d=\"M0,0v17\" strokeLinecap=\"round\" />\n        </defs>\n    );\n});\n","import { CanvasType } from '../../constants/constants';\nimport { ReactNode } from 'react';\nimport DestinationMTR from './destination-mtr';\nimport RailMapMTR from '../railmap/railmap-mtr';\n\nconst mtrSvgs: Partial<Record<CanvasType, ReactNode>> = {\n    destination: <DestinationMTR />,\n    railmap: <RailMapMTR />,\n};\n\nexport default mtrSvgs;\n"],"names":["memo","props","fill","height","style","width","stripPc","CANVAS_TYPE","CanvasType","DestinationMTR","canvasScale","useRootSelector","state","app","param","svgWidths","svgWidth","svgHeight","svg_height","theme","type","DefsMTR","InfoMTR","id","d","destNames","routes","store","helper","direction","customisedMTRDestination","customiseMTRDest","platformNumber","platform_num","lineName","line_name","currentStationIndex","current_stn_idx","stationList","stn_list","terminal","validDests","Set","filter","route","includes","map","stnId","slice","ShortDirection","name","join","replace","destNameEl","React","bBox","setBBox","current","getBBox","toString","isLegacy","flagLength","arrowX","platformNumX","destNameX","transform","xlinkHref","PlatformNum","num","ref","textAnchor","className","fontSize","dy","others","cx","cy","r","getRotation","position","Position","InterchangeTick","interchangeInfo","isPassed","repel","repelOffset","zhNameLines","split","length","enNameLines","Direction","transforms","path","rotate","g","x","y","strokeLinecap","stroke","strokeWidth","txt","i","j","prevProps","nextProps","StationIcon","isReversed","InterchangeStation","interchangeInfoList","iconLength","info","OsiStation","isTerminal","stationName","arr","undefined","waitForFontReady","retryAttempt","document","fonts","ready","fontFaceSet","it","values","next","done","value","family","console","log","waitForMs","Error","stnName","onUpdate","align","nameEl","useRef","updateNameBBox","useEffect","then","catch","finally","getTextAnchor","index","StationNameWrapper","stationState","lower","facility","useState","nameEnRows","STN_NAME_LINE_GAP","rect","Facilities","NAME_ZH_TOP","NAME_FULL_HEIGHT","use","StationName","StationState","getFill","Station","stationId","parents","children","transfer","tick_direc","osi_names","paid_area","end","isRepelled","Boolean","link","scaleX","scaleY","osi","strokeDasharray","branches","deps","depsStr","svgH","yPercentage","y_pc","paddingPercentage","padding","branchSpacingPct","namePosition","namePosMTR","adjMat","adjacencyList","leftWideFactor","rightWideFactor","criticalPath","useMemo","criticalPathMethod","JSON","stringify","realCP","nodes","xShares","Object","keys","reduce","acc","cur","getXShareMTR","lineXs","xs","len","ys","getStationYShare","stnStates","getStnState","namePoss","res","isStagger","isFlip","indexOf","branchOfStn","branch","getNamePos","linePaths","StationsMTR","Lines","paths","StationGroup","pass","sidingPass","match","main","sidingMain","RailMapMTR","clipPath","points","destination","railmap"],"sourceRoot":""}