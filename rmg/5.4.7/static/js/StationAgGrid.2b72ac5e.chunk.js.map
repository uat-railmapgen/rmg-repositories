{"version":3,"file":"static/js/StationAgGrid.2b72ac5e.chunk.js","mappings":"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","sources":["components/ag-grid/gzmtr-station-code.tsx","components/ag-grid/station-ag-grid.tsx"],"sourcesContent":["import React from 'react';\nimport { ColourHex } from '../../constants/constants';\nimport { Flex } from '@chakra-ui/react';\n\ninterface GzmtrStationCodeProps {\n    lineNumber: string;\n    stationNumber: string;\n    lineColour: ColourHex;\n}\n\nexport default function GzmtrStationCode(props: GzmtrStationCodeProps) {\n    const { lineNumber, stationNumber, lineColour } = props;\n\n    const styles = {\n        h: '24px',\n        position: 'relative',\n        color: 'black',\n\n        '&::before': {\n            content: \"''\",\n            w: 'calc(100% + 2px)',\n            h: '26px',\n            position: 'absolute',\n            top: '-1px',\n            left: '-1px',\n            bg: 'white',\n            borderRadius: '13px',\n        },\n\n        span: {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            padding: '3px',\n            minWidth: '24px',\n            border: '2px solid',\n            borderColor: lineColour,\n            zIndex: 1,\n\n            '&:first-of-type': {\n                borderRadius: '12px 0 0 12px',\n            },\n\n            '&:last-of-type': {\n                borderRadius: '0 12px 12px 0',\n                marginLeft: '-2px',\n            },\n        },\n    };\n\n    return (\n        <Flex sx={styles}>\n            <span>{lineNumber}</span>\n            <span>{stationNumber}</span>\n        </Flex>\n    );\n}\n","import { RmgAgGrid, RmgLineBadge, RmgMultiLineString } from '@railmapgen/rmg-components';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { ColDef, SelectionChangedEvent } from 'ag-grid-community';\nimport { Name, RmgStyle, SidePanelMode, StationInfo, StationTransfer } from '../../constants/constants';\nimport { useTranslation } from 'react-i18next';\nimport { HStack } from '@chakra-ui/react';\nimport { setIsShareTrackEnabled, setSelectedStation, setSidePanelMode } from '../../redux/app/app-slice';\nimport { getRowSpanForColine } from '../../redux/param/coline-action';\nimport GzmtrStationCode from './gzmtr-station-code';\n\ninterface StationAgGridProps {\n    branchIndex: number;\n}\n\ntype RowDataType = StationInfo & { id: string; rowSpan: [number, string | undefined] };\n\nexport default function StationAgGrid(props: StationAgGridProps) {\n    const { branchIndex } = props;\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const sidePanelMode = useRootSelector(state => state.app.sidePanelMode);\n    const { style, theme, stn_list: stationList, line_num: lineNumber, coline } = useRootSelector(state => state.param);\n    const branches = useRootSelector(state => state.helper.branches);\n    const stationIds = branches[branchIndex].filter(id => !['linestart', 'lineend'].includes(id));\n\n    const columnDefs = useMemo<ColDef<RowDataType>[]>(\n        () => [\n            {\n                headerName: t('StationAgGrid.num'),\n                field: 'num',\n                cellRenderer: ({ value }: { value: string }) => (\n                    <GzmtrStationCode lineNumber={lineNumber} stationNumber={value} lineColour={theme[2]} />\n                ),\n                pinned: 'left',\n                minWidth: 110,\n                hide: ![RmgStyle.GZMTR].includes(style),\n            },\n            {\n                headerName: t('Chinese name'),\n                field: 'name',\n                valueFormatter: ({ value, data }) =>\n                    value[0] +\n                    (style === RmgStyle.GZMTR && data?.secondaryName && data?.secondaryName[0]\n                        ? ` (${data.secondaryName[0]})`\n                        : ''),\n            },\n            {\n                headerName: t('English name'),\n                field: 'name',\n                cellRenderer: ({ value, data }: { value: Name; data: RowDataType }) => (\n                    <RmgMultiLineString\n                        text={\n                            value[1] +\n                            (style === RmgStyle.GZMTR && data.secondaryName && data.secondaryName[1]\n                                ? ` (${data.secondaryName[1]})`\n                                : '')\n                        }\n                    />\n                ),\n                minWidth: 300,\n            },\n            {\n                headerName: t('StationAgGrid.interchange'),\n                field: 'transfer',\n                cellRenderer: ({ value }: { value: StationTransfer }) => (\n                    <HStack>\n                        {value.info.flat().map((it, i) => (\n                            <RmgLineBadge key={i} name={[it[4], it[5]]} bg={it[2]} fg={it[3]} showShortName />\n                        ))}\n                    </HStack>\n                ),\n            },\n            {\n                headerName: t('StationAgGrid.coline'),\n                field: 'rowSpan',\n                rowSpan: ({ data }) => data?.rowSpan[0] ?? 0,\n                cellClassRules: {\n                    'rmg-ag-grid--spanned-cell': ({ value }) => value[0] > 0,\n                },\n                cellRenderer: ({ value }: { value: RowDataType['rowSpan'] }) => (\n                    <HStack>\n                        {coline[value[1] as string]?.colors?.map((it, i) => (\n                            <RmgLineBadge key={i} name={[it[4], it[5]]} bg={it[2]} fg={it[3]} showShortName />\n                        ))}\n                    </HStack>\n                ),\n                hide: ![RmgStyle.SHMetro].includes(style),\n            },\n        ],\n        [style]\n    );\n\n    const gridRef = useRef<AgGridReact>(null);\n    const isGridReadyRef = useRef(false);\n\n    useEffect(() => {\n        // deselect row when side panel is closed\n        // only take effect when one row is selected\n        if (isGridReadyRef.current && gridRef.current) {\n            const selectedRows = gridRef.current.api.getSelectedRows();\n            if (selectedRows.length === 1 && sidePanelMode !== SidePanelMode.STATION) {\n                gridRef.current.api.deselectAll();\n            }\n        }\n    }, [isGridReadyRef.current, sidePanelMode]);\n\n    const rowData: RowDataType[] = stationIds.map(id => ({\n        ...stationList[id],\n        id,\n        rowSpan: dispatch(getRowSpanForColine(id, branchIndex)),\n    }));\n\n    const defaultColDef = {\n        resizable: true,\n    };\n\n    const handleSelectionChanged = ({ api }: SelectionChangedEvent<RowDataType>) => {\n        const selectedRowIds = api.getSelectedRows()?.map(row => row.id);\n        console.log('StationAgGrid.handleSelectionChanged():: Row selection changed', selectedRowIds);\n\n        if (selectedRowIds?.length) {\n            dispatch(setSidePanelMode(SidePanelMode.STATION));\n            dispatch(setSelectedStation(selectedRowIds[0]));\n            dispatch(setIsShareTrackEnabled(undefined));\n        }\n    };\n\n    return (\n        <RmgAgGrid>\n            <AgGridReact\n                ref={gridRef}\n                rowData={rowData}\n                defaultColDef={defaultColDef}\n                columnDefs={columnDefs}\n                getRowId={({ data }) => data.id}\n                headerHeight={36}\n                rowHeight={36}\n                suppressCellFocus={true}\n                suppressMovableColumns={true}\n                suppressRowTransform={true}\n                rowSelection={'single'}\n                onSelectionChanged={handleSelectionChanged}\n                onGridReady={() => (isGridReadyRef.current = true)}\n                debug={process.env.NODE_ENV !== 'production'}\n            />\n        </RmgAgGrid>\n    );\n}\n"],"names":["GzmtrStationCode","props","lineNumber","stationNumber","styles","h","position","color","content","w","top","left","bg","borderRadius","span","display","justifyContent","alignItems","padding","minWidth","border","borderColor","lineColour","zIndex","marginLeft","sx","StationAgGrid","branchIndex","t","useTranslation","dispatch","useRootDispatch","sidePanelMode","useRootSelector","state","app","param","style","theme","stationList","stn_list","line_num","coline","stationIds","helper","branches","filter","id","includes","columnDefs","useMemo","headerName","field","cellRenderer","value","pinned","hide","RmgStyle","valueFormatter","data","secondaryName","text","info","flat","map","it","i","name","fg","showShortName","rowSpan","cellClassRules","colors","gridRef","useRef","isGridReadyRef","useEffect","current","api","getSelectedRows","length","SidePanelMode","deselectAll","rowData","getRowSpanForColine","AgGridReact","ref","defaultColDef","resizable","getRowId","headerHeight","rowHeight","suppressCellFocus","suppressMovableColumns","suppressRowTransform","rowSelection","onSelectionChanged","selectedRowIds","row","console","log","setSidePanelMode","setSelectedStation","setIsShareTrackEnabled","undefined","onGridReady","debug","process"],"sourceRoot":""}