{"version":3,"file":"static/js/AppRoot.945d53c4.chunk.js","mappings":"oFAAA,IAAIA,EAAM,CACT,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,IAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,IACA,KAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,kDAAmD,CAClD,MACA,MAED,kDAAmD,CAClD,MACA,MAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,CACP,IAGD,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBU,EAAED,EAAI,GAClC,GACD,CACAX,EAAoBa,KAAO,WAAa,OAAOC,OAAOD,KAAKd,EAAM,EACjEC,EAAoBW,GAAK,MACzBI,EAAOC,QAAUhB,C,wBC9KjB,IAAID,EAAM,CACT,cAAe,CACd,MACA,MAED,YAAa,CACZ,MACA,MAED,eAAgB,CACf,MACA,MAED,iBAAkB,CACjB,MACA,MAED,eAAgB,CACf,MACA,KAED,cAAe,CACd,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,aAAc,CACb,MACA,MAED,iBAAkB,CACjB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,eAAgB,CACf,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,aAAc,CACb,MACA,KAED,cAAe,CACd,MACA,MAED,aAAc,CACb,MACA,MAED,gBAAiB,CAChB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,eAAgB,CACf,MACA,IAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,KAED,iBAAkB,CACjB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,aAAc,CACb,MACA,MAED,cAAe,CACd,KACA,MAED,aAAc,CACb,MACA,KAED,iBAAkB,CACjB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,aAAc,CACb,KACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,mBAAoB,CACnB,MACA,KAED,eAAgB,CACf,MACA,MAED,YAAa,CACZ,MACA,MAED,cAAe,CACd,MACA,MAED,cAAe,CACd,MACA,MAED,aAAc,CACb,MACA,MAED,cAAe,CACd,MACA,MAED,aAAc,CACb,MACA,MAED,gBAAiB,CAChB,MACA,MAED,cAAe,CACd,MACA,MAED,eAAgB,CACf,KACA,MAED,cAAe,CACd,MACA,KAED,iBAAkB,CACjB,MACA,MAED,cAAe,CACd,MACA,MAED,aAAc,CACb,MACA,MAED,YAAa,CACZ,KACA,KAED,aAAc,CACb,MACA,MAED,cAAe,CACd,MACA,MAED,aAAc,CACb,MACA,MAED,eAAgB,CACf,MACA,MAED,iBAAkB,CACjB,MACA,MAED,WAAY,CACX,MACA,MAED,cAAe,CACd,KACA,MAED,oBAAqB,CACpB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,gBAAiB,CAChB,MACA,GAED,gBAAiB,CAChB,MACA,MAED,aAAc,CACb,MACA,MAED,gBAAiB,CAChB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,gBAAiB,CAChB,MACA,KAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,cAAe,CACd,MACA,MAED,gBAAiB,CAChB,MACA,MAED,cAAe,CACd,MACA,MAED,cAAe,CACd,MACA,MAED,eAAgB,CACf,MACA,MAED,aAAc,CACb,MACA,MAED,eAAgB,CACf,MACA,MAED,mBAAoB,CACnB,KACA,MAED,cAAe,CACd,MACA,MAED,cAAe,CACd,KACA,MAED,aAAc,CACb,MACA,MAED,YAAa,CACZ,KACA,MAED,cAAe,CACd,MACA,MAED,YAAa,CACZ,MACA,MAED,gBAAiB,CAChB,IACA,MAED,iBAAkB,CACjB,MACA,OAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,CACP,IAGD,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,EAC5B,GACD,CACAX,EAAoBa,KAAO,WAAa,OAAOC,OAAOD,KAAKd,EAAM,EACjEC,EAAoBW,GAAK,MACzBI,EAAOC,QAAUhB,C,wBClXjB,IAAID,EAAM,CACT,sBAAuB,CACtB,MACA,MAED,uBAAwB,CACvB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,sBAAuB,CACtB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,KACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,GACA,MAED,sBAAuB,CACtB,MACA,MAED,wBAAyB,CACxB,OAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,KACA,MAED,oBAAqB,CACpB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,KAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,KACA,MAED,uBAAwB,CACvB,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,IACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,KAED,8BAA+B,CAC9B,MACA,MAED,6BAA8B,CAC7B,MACA,MAED,iCAAkC,CACjC,MACA,MAED,kCAAmC,CAClC,MACA,MAED,6BAA8B,CAC7B,MACA,MAED,mBAAoB,CACnB,KACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,KACA,MAED,iBAAkB,CACjB,KACA,MAED,kBAAmB,CAClB,MACA,KAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,iBAAkB,CACjB,MACA,KAED,iBAAkB,CACjB,MACA,KAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,KACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,qBAAsB,CACrB,MACA,KAED,qBAAsB,CACrB,MACA,MAED,qBAAsB,CACrB,MACA,KAED,2BAA4B,CAC3B,KACA,MAED,4BAA6B,CAC5B,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,4BAA6B,CAC5B,MACA,KAED,4BAA6B,CAC5B,MACA,MAED,2BAA4B,CAC3B,MACA,KAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,KAED,2BAA4B,CAC3B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,IAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,sBAAuB,CACtB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","sources":["../node_modules/@railmapgen/rmg-palette-resources/flags|lazy|/^/.//.*$/|groupOptions: {}|namespace object","../node_modules/@railmapgen/rmg-palette-resources/palettes|lazy|/^/.//.*/.js$/|chunkName: palettes|groupOptions: {}|namespace object","../node_modules/@railmapgen/rmg-templates-resources/templates|lazy|/^/.//.*/.json$/|chunkName: templates|groupOptions: {}|namespace object","svgs/svg-router.tsx","svgs/use-canvas-map.tsx","components/side-panel/station-side-panel/info-section.tsx","components/modal/colour-modal/flag-svg-emoji.tsx","components/modal/colour-modal/city-picker.tsx","components/modal/colour-modal/colour-picker.tsx","components/modal/colour-modal/colour-modal.tsx","theme/colour-util.ts","components/side-panel/theme-button.tsx","components/side-panel/station-side-panel/interchange-card.tsx","components/side-panel/station-side-panel/interchange-section.tsx","components/side-panel/station-side-panel/more-section.tsx","components/side-panel/station-side-panel/branch-section.tsx","components/side-panel/station-side-panel/station-side-panel.tsx","components/side-panel/style-side-panel/layout-section.tsx","components/side-panel/style-side-panel/design-section.tsx","components/side-panel/style-side-panel/loop-section.tsx","components/side-panel/style-side-panel/gzmtr-note-card.tsx","components/side-panel/style-side-panel/gzmtr-note-section.tsx","components/side-panel/style-side-panel/style-side-panel.tsx","methods.ts","components/modal/remove-confirm-modal.tsx","redux/param/remove-station-action.ts","components/side-panel/station-side-panel/station-side-panel-footer.tsx","components/side-panel/branch-side-panel/coline-card.tsx","components/side-panel/branch-side-panel/coline-section.tsx","components/modal/auto-num-modal.tsx","redux/param/connect-disconnect-branch.ts","components/side-panel/branch-side-panel/connect-disconnect-card.tsx","components/side-panel/branch-side-panel/action-section.tsx","components/side-panel/branch-side-panel/branch-side-panel.tsx","components/side-panel/side-panel.tsx","util/utils.ts","util/export-utils.ts","components/modal/download-modal.tsx","components/page-header/download-actions.tsx","components/modal/upload-confirm-modal.tsx","components/modal/template-modal.tsx","components/page-header/open-actions.tsx","redux/param/open-new-action.ts","components/page-header/header-actions.tsx","components/page-header/page-header.tsx","components/modal/help-modal.tsx","components/root/window-header.tsx","redux/param/add-station-action.ts","components/modal/add-station-modal.tsx","components/modal/new-branch-modal.tsx","components/ag-grid/grid-tabs.tsx","components/modal/loading-modal.tsx","components/root/global-alerts.tsx","components/app-root.tsx","redux/param/coline-action.ts","svgs|lazy|/^/.//.*//index$/|groupOptions: {}|namespace object"],"sourcesContent":["var map = {\n\t\"./1F1E6-1F1F9.svg\": [\n\t\t89121,\n\t\t9121\n\t],\n\t\"./1F1E6-1F1FF.svg\": [\n\t\t89427,\n\t\t9427\n\t],\n\t\"./1F1E7-1F1F7.svg\": [\n\t\t97304,\n\t\t7304\n\t],\n\t\"./1F1E8-1F1E6.svg\": [\n\t\t80056,\n\t\t56\n\t],\n\t\"./1F1E8-1F1F1.svg\": [\n\t\t43450,\n\t\t3450\n\t],\n\t\"./1F1E8-1F1F3.svg\": [\n\t\t52537,\n\t\t2537\n\t],\n\t\"./1F1E9-1F1EA.svg\": [\n\t\t36311,\n\t\t6311\n\t],\n\t\"./1F1E9-1F1F0.svg\": [\n\t\t21890,\n\t\t1890\n\t],\n\t\"./1F1EA-1F1EC.svg\": [\n\t\t57365,\n\t\t7365\n\t],\n\t\"./1F1EA-1F1F8.svg\": [\n\t\t98721,\n\t\t8721\n\t],\n\t\"./1F1EB-1F1F7.svg\": [\n\t\t48514,\n\t\t8514\n\t],\n\t\"./1F1EC-1F1F7.svg\": [\n\t\t99515,\n\t\t9515\n\t],\n\t\"./1F1ED-1F1F0.svg\": [\n\t\t62248,\n\t\t2248\n\t],\n\t\"./1F1ED-1F1FA.svg\": [\n\t\t268,\n\t\t268\n\t],\n\t\"./1F1EE-1F1F3.svg\": [\n\t\t66236,\n\t\t6236\n\t],\n\t\"./1F1EE-1F1F7.svg\": [\n\t\t22617,\n\t\t2617\n\t],\n\t\"./1F1EE-1F1F9.svg\": [\n\t\t53541,\n\t\t3541\n\t],\n\t\"./1F1EF-1F1F5.svg\": [\n\t\t42741,\n\t\t2741\n\t],\n\t\"./1F1F0-1F1F7.svg\": [\n\t\t22255,\n\t\t2255\n\t],\n\t\"./1F1F2-1F1F4.svg\": [\n\t\t86435,\n\t\t6435\n\t],\n\t\"./1F1F2-1F1FD.svg\": [\n\t\t43086,\n\t\t3086\n\t],\n\t\"./1F1F2-1F1FE.svg\": [\n\t\t76082,\n\t\t6082\n\t],\n\t\"./1F1F3-1F1F4.svg\": [\n\t\t16095,\n\t\t6095\n\t],\n\t\"./1F1F5-1F1EA.svg\": [\n\t\t52955,\n\t\t2955\n\t],\n\t\"./1F1F5-1F1F1.svg\": [\n\t\t54700,\n\t\t4700\n\t],\n\t\"./1F1F5-1F1F9.svg\": [\n\t\t77791,\n\t\t7791\n\t],\n\t\"./1F1F7-1F1F4.svg\": [\n\t\t7224,\n\t\t7224\n\t],\n\t\"./1F1F7-1F1FA.svg\": [\n\t\t6031,\n\t\t6031\n\t],\n\t\"./1F1F8-1F1E6.svg\": [\n\t\t68600,\n\t\t8600\n\t],\n\t\"./1F1F8-1F1EA.svg\": [\n\t\t71550,\n\t\t1550\n\t],\n\t\"./1F1F8-1F1EC.svg\": [\n\t\t91229,\n\t\t1229\n\t],\n\t\"./1F1F9-1F1ED.svg\": [\n\t\t16203,\n\t\t6203\n\t],\n\t\"./1F1F9-1F1F7.svg\": [\n\t\t92237,\n\t\t2237\n\t],\n\t\"./1F1F9-1F1FC.svg\": [\n\t\t64252,\n\t\t4252\n\t],\n\t\"./1F1FA-1F1F3.svg\": [\n\t\t23353,\n\t\t3353\n\t],\n\t\"./1F1FA-1F1F8.svg\": [\n\t\t65439,\n\t\t5439\n\t],\n\t\"./1F1FB-1F1F3.svg\": [\n\t\t90419,\n\t\t3886\n\t],\n\t\"./1F3F4-E0067-E0062-E0065-E006E-E0067-E007F.svg\": [\n\t\t16129,\n\t\t6129\n\t],\n\t\"./1F3F4-E0067-E0062-E0073-E0063-E0074-E007F.svg\": [\n\t\t60138,\n\t\t138\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 1 | 16);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 74018;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./athens.js\": [\n\t\t46128,\n\t\t6869\n\t],\n\t\"./baku.js\": [\n\t\t92481,\n\t\t6810\n\t],\n\t\"./bangkok.js\": [\n\t\t36870,\n\t\t5792\n\t],\n\t\"./barcelona.js\": [\n\t\t36340,\n\t\t2358\n\t],\n\t\"./beijing.js\": [\n\t\t32145,\n\t\t436\n\t],\n\t\"./berlin.js\": [\n\t\t37976,\n\t\t5520\n\t],\n\t\"./boston.js\": [\n\t\t68835,\n\t\t1321\n\t],\n\t\"./bucharest.js\": [\n\t\t35249,\n\t\t5189\n\t],\n\t\"./budapest.js\": [\n\t\t68895,\n\t\t6739\n\t],\n\t\"./cairo.js\": [\n\t\t36509,\n\t\t7599\n\t],\n\t\"./changchun.js\": [\n\t\t97459,\n\t\t7081\n\t],\n\t\"./changsha.js\": [\n\t\t40574,\n\t\t4874\n\t],\n\t\"./chengdu.js\": [\n\t\t16312,\n\t\t9186\n\t],\n\t\"./chongqing.js\": [\n\t\t40300,\n\t\t8719\n\t],\n\t\"./copenhagen.js\": [\n\t\t47070,\n\t\t7206\n\t],\n\t\"./daegu.js\": [\n\t\t96995,\n\t\t134\n\t],\n\t\"./dalian.js\": [\n\t\t65169,\n\t\t9770\n\t],\n\t\"./delhi.js\": [\n\t\t53707,\n\t\t8189\n\t],\n\t\"./dongguan.js\": [\n\t\t63280,\n\t\t9898\n\t],\n\t\"./dortmund.js\": [\n\t\t86079,\n\t\t4447\n\t],\n\t\"./edinburgh.js\": [\n\t\t70285,\n\t\t1847\n\t],\n\t\"./eskisehir.js\": [\n\t\t51686,\n\t\t6951\n\t],\n\t\"./foshan.js\": [\n\t\t73204,\n\t\t1392\n\t],\n\t\"./frankfurt.js\": [\n\t\t12040,\n\t\t5449\n\t],\n\t\"./glasgow.js\": [\n\t\t34476,\n\t\t17\n\t],\n\t\"./gothenburg.js\": [\n\t\t66801,\n\t\t8237\n\t],\n\t\"./guadalajara.js\": [\n\t\t39399,\n\t\t886\n\t],\n\t\"./guangzhou.js\": [\n\t\t65841,\n\t\t4788\n\t],\n\t\"./hangzhou.js\": [\n\t\t33427,\n\t\t3106\n\t],\n\t\"./hanoi.js\": [\n\t\t30507,\n\t\t4073\n\t],\n\t\"./harbin.js\": [\n\t\t4826,\n\t\t5303\n\t],\n\t\"./hefei.js\": [\n\t\t82317,\n\t\t310\n\t],\n\t\"./hochiminh.js\": [\n\t\t46770,\n\t\t5081\n\t],\n\t\"./hongkong.js\": [\n\t\t54243,\n\t\t1951\n\t],\n\t\"./istanbul.js\": [\n\t\t73107,\n\t\t8183\n\t],\n\t\"./jinan.js\": [\n\t\t5719,\n\t\t8140\n\t],\n\t\"./kansai.js\": [\n\t\t70382,\n\t\t3417\n\t],\n\t\"./kaohsiung.js\": [\n\t\t33037,\n\t\t3875\n\t],\n\t\"./klangvalley.js\": [\n\t\t20137,\n\t\t425\n\t],\n\t\"./kunming.js\": [\n\t\t28852,\n\t\t7826\n\t],\n\t\"./lima.js\": [\n\t\t39118,\n\t\t2028\n\t],\n\t\"./lisbon.js\": [\n\t\t88814,\n\t\t9890\n\t],\n\t\"./london.js\": [\n\t\t38087,\n\t\t5944\n\t],\n\t\"./macao.js\": [\n\t\t18015,\n\t\t4737\n\t],\n\t\"./madrid.js\": [\n\t\t68020,\n\t\t3579\n\t],\n\t\"./milan.js\": [\n\t\t94410,\n\t\t8975\n\t],\n\t\"./montreal.js\": [\n\t\t53678,\n\t\t1614\n\t],\n\t\"./munich.js\": [\n\t\t87368,\n\t\t5066\n\t],\n\t\"./nanjing.js\": [\n\t\t1664,\n\t\t2168\n\t],\n\t\"./naples.js\": [\n\t\t73738,\n\t\t743\n\t],\n\t\"./newtaipei.js\": [\n\t\t99114,\n\t\t8291\n\t],\n\t\"./ningbo.js\": [\n\t\t28820,\n\t\t8413\n\t],\n\t\"./osaka.js\": [\n\t\t11064,\n\t\t6195\n\t],\n\t\"./oslo.js\": [\n\t\t8057,\n\t\t441\n\t],\n\t\"./other.js\": [\n\t\t77642,\n\t\t6546\n\t],\n\t\"./ottawa.js\": [\n\t\t40254,\n\t\t5288\n\t],\n\t\"./paris.js\": [\n\t\t22720,\n\t\t3658\n\t],\n\t\"./qingdao.js\": [\n\t\t57994,\n\t\t2194\n\t],\n\t\"./rheinruhr.js\": [\n\t\t86870,\n\t\t1342\n\t],\n\t\"./rio.js\": [\n\t\t94618,\n\t\t7153\n\t],\n\t\"./riyadh.js\": [\n\t\t81000,\n\t\t5885\n\t],\n\t\"./sanfrancisco.js\": [\n\t\t64747,\n\t\t6977\n\t],\n\t\"./sanktpeterburg.js\": [\n\t\t21832,\n\t\t7719\n\t],\n\t\"./santiago.js\": [\n\t\t12568,\n\t\t9\n\t],\n\t\"./saopaulo.js\": [\n\t\t56956,\n\t\t9450\n\t],\n\t\"./seoul.js\": [\n\t\t23266,\n\t\t1608\n\t],\n\t\"./shanghai.js\": [\n\t\t89656,\n\t\t2871\n\t],\n\t\"./shaoxing.js\": [\n\t\t84891,\n\t\t2832\n\t],\n\t\"./shenyang.js\": [\n\t\t22266,\n\t\t1902\n\t],\n\t\"./shenzhen.js\": [\n\t\t44691,\n\t\t530\n\t],\n\t\"./singapore.js\": [\n\t\t32459,\n\t\t7101\n\t],\n\t\"./stockholm.js\": [\n\t\t14606,\n\t\t4111\n\t],\n\t\"./suzhou.js\": [\n\t\t99819,\n\t\t5418\n\t],\n\t\"./taichung.js\": [\n\t\t65230,\n\t\t2338\n\t],\n\t\"./taipei.js\": [\n\t\t89489,\n\t\t4760\n\t],\n\t\"./tehran.js\": [\n\t\t52573,\n\t\t8759\n\t],\n\t\"./tianjin.js\": [\n\t\t47942,\n\t\t1568\n\t],\n\t\"./tokyo.js\": [\n\t\t23762,\n\t\t5562\n\t],\n\t\"./toronto.js\": [\n\t\t18148,\n\t\t5436\n\t],\n\t\"./tyneandwear.js\": [\n\t\t9314,\n\t\t4688\n\t],\n\t\"./vienna.js\": [\n\t\t55252,\n\t\t5028\n\t],\n\t\"./warsaw.js\": [\n\t\t9727,\n\t\t9989\n\t],\n\t\"./wuhan.js\": [\n\t\t93742,\n\t\t1134\n\t],\n\t\"./wuxi.js\": [\n\t\t4099,\n\t\t9327\n\t],\n\t\"./xiamen.js\": [\n\t\t54610,\n\t\t8951\n\t],\n\t\"./xian.js\": [\n\t\t72591,\n\t\t5776\n\t],\n\t\"./yokohama.js\": [\n\t\t695,\n\t\t8914\n\t],\n\t\"./zhengzhou.js\": [\n\t\t27357,\n\t\t1425\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 37827;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./basic/coline.json\": [\n\t\t32401,\n\t\t8014\n\t],\n\t\"./basic/default.json\": [\n\t\t8453,\n\t\t8241\n\t],\n\t\"./basic/loop.json\": [\n\t\t8909,\n\t\t9410\n\t],\n\t\"./bjsubway/bj1.json\": [\n\t\t48741,\n\t\t6729\n\t],\n\t\"./bjsubway/bj10.json\": [\n\t\t48461,\n\t\t6230\n\t],\n\t\"./bjsubway/bj11.json\": [\n\t\t3279,\n\t\t7646\n\t],\n\t\"./bjsubway/bj13.json\": [\n\t\t67443,\n\t\t1188\n\t],\n\t\"./bjsubway/bj14.json\": [\n\t\t92906,\n\t\t9523\n\t],\n\t\"./bjsubway/bj16.json\": [\n\t\t47062,\n\t\t6698\n\t],\n\t\"./bjsubway/bj17.json\": [\n\t\t58241,\n\t\t8760\n\t],\n\t\"./bjsubway/bj19.json\": [\n\t\t87819,\n\t\t2773\n\t],\n\t\"./bjsubway/bj2.json\": [\n\t\t75176,\n\t\t6552\n\t],\n\t\"./bjsubway/bj4.json\": [\n\t\t56450,\n\t\t7680\n\t],\n\t\"./bjsubway/bj5.json\": [\n\t\t81834,\n\t\t5653\n\t],\n\t\"./bjsubway/bj6.json\": [\n\t\t12022,\n\t\t9259\n\t],\n\t\"./bjsubway/bj7.json\": [\n\t\t26061,\n\t\t5482\n\t],\n\t\"./bjsubway/bj8.json\": [\n\t\t69846,\n\t\t9797\n\t],\n\t\"./bjsubway/bj9.json\": [\n\t\t39422,\n\t\t4269\n\t],\n\t\"./bjsubway/dae.json\": [\n\t\t34852,\n\t\t3981\n\t],\n\t\"./bjsubway/s1l.json\": [\n\t\t42830,\n\t\t2381\n\t],\n\t\"./bjsubway/t1l.json\": [\n\t\t41057,\n\t\t7200\n\t],\n\t\"./bjsubway/xjl.json\": [\n\t\t14,\n\t\t1095\n\t],\n\t\"./bjsubway/yzl.json\": [\n\t\t56315,\n\t\t2244\n\t],\n\t\"./company-config.json\": [\n\t\t76605\n\t],\n\t\"./fmetro/fs2.json\": [\n\t\t61139,\n\t\t7149\n\t],\n\t\"./fmetro/tgm1.json\": [\n\t\t81558,\n\t\t7160\n\t],\n\t\"./fmetro/tnh1.json\": [\n\t\t17249,\n\t\t6452\n\t],\n\t\"./gzmtr/apm.json\": [\n\t\t45098,\n\t\t6354\n\t],\n\t\"./gzmtr/gf.json\": [\n\t\t30571,\n\t\t2200\n\t],\n\t\"./gzmtr/gz1.json\": [\n\t\t28161,\n\t\t3082\n\t],\n\t\"./gzmtr/gz13.json\": [\n\t\t14745,\n\t\t9950\n\t],\n\t\"./gzmtr/gz14.json\": [\n\t\t9447,\n\t\t7877\n\t],\n\t\"./gzmtr/gz18.json\": [\n\t\t79361,\n\t\t6583\n\t],\n\t\"./gzmtr/gz2.json\": [\n\t\t87119,\n\t\t7724\n\t],\n\t\"./gzmtr/gz21.json\": [\n\t\t24695,\n\t\t4015\n\t],\n\t\"./gzmtr/gz22.json\": [\n\t\t92671,\n\t\t9826\n\t],\n\t\"./gzmtr/gz3.json\": [\n\t\t20622,\n\t\t3084\n\t],\n\t\"./gzmtr/gz4.json\": [\n\t\t25440,\n\t\t3109\n\t],\n\t\"./gzmtr/gz5.json\": [\n\t\t93880,\n\t\t2846\n\t],\n\t\"./gzmtr/gz6.json\": [\n\t\t27426,\n\t\t9925\n\t],\n\t\"./gzmtr/gz7.json\": [\n\t\t73290,\n\t\t8924\n\t],\n\t\"./gzmtr/gz8.json\": [\n\t\t69045,\n\t\t7332\n\t],\n\t\"./gzmtr/gz9.json\": [\n\t\t78481,\n\t\t2100\n\t],\n\t\"./gzmtr/thp1.json\": [\n\t\t65227,\n\t\t9416\n\t],\n\t\"./gzmtr/thz1.json\": [\n\t\t82887,\n\t\t199\n\t],\n\t\"./hrbmetro/hrb1.json\": [\n\t\t13002,\n\t\t4557\n\t],\n\t\"./hrbmetro/hrb2.json\": [\n\t\t6635,\n\t\t8512\n\t],\n\t\"./hrbmetro/hrb3.json\": [\n\t\t20555,\n\t\t2658\n\t],\n\t\"./kmrailtransit/km1.json\": [\n\t\t43285,\n\t\t9655\n\t],\n\t\"./kmrailtransit/km2.json\": [\n\t\t84760,\n\t\t4250\n\t],\n\t\"./kmrailtransit/km3.json\": [\n\t\t327,\n\t\t6555\n\t],\n\t\"./kmrailtransit/km4.json\": [\n\t\t41302,\n\t\t9675\n\t],\n\t\"./kmrailtransit/km5.json\": [\n\t\t21672,\n\t\t2663\n\t],\n\t\"./kmrailtransit/km6.json\": [\n\t\t35903,\n\t\t113\n\t],\n\t\"./kvtransit/klMonorail.json\": [\n\t\t57749,\n\t\t6080\n\t],\n\t\"./kvtransit/lrtAmpang.json\": [\n\t\t81534,\n\t\t8766\n\t],\n\t\"./kvtransit/lrtKelanaJaya.json\": [\n\t\t94219,\n\t\t8724\n\t],\n\t\"./kvtransit/lrtSriPataling.json\": [\n\t\t38174,\n\t\t6862\n\t],\n\t\"./kvtransit/mrtKajang.json\": [\n\t\t49512,\n\t\t4694\n\t],\n\t\"./mlm/taipa.json\": [\n\t\t4435,\n\t\t5945\n\t],\n\t\"./mtr/ael.json\": [\n\t\t16215,\n\t\t5074\n\t],\n\t\"./mtr/drl.json\": [\n\t\t86083,\n\t\t5958\n\t],\n\t\"./mtr/eal.json\": [\n\t\t19800,\n\t\t4754\n\t],\n\t\"./mtr/isl.json\": [\n\t\t7314,\n\t\t6533\n\t],\n\t\"./mtr/ktl.json\": [\n\t\t1400,\n\t\t2490\n\t],\n\t\"./mtr/sile.json\": [\n\t\t37438,\n\t\t169\n\t],\n\t\"./mtr/tcl.json\": [\n\t\t74512,\n\t\t5910\n\t],\n\t\"./mtr/tkl.json\": [\n\t\t91257,\n\t\t4991\n\t],\n\t\"./mtr/tml.json\": [\n\t\t45339,\n\t\t403\n\t],\n\t\"./mtr/twl.json\": [\n\t\t15030,\n\t\t564\n\t],\n\t\"./nbrailtransit/nb1.json\": [\n\t\t49444,\n\t\t1180\n\t],\n\t\"./nbrailtransit/nb2.json\": [\n\t\t80011,\n\t\t7792\n\t],\n\t\"./nbrailtransit/nb3.json\": [\n\t\t1295,\n\t\t1899\n\t],\n\t\"./nbrailtransit/nb4.json\": [\n\t\t57155,\n\t\t3497\n\t],\n\t\"./nbrailtransit/nb5.json\": [\n\t\t71198,\n\t\t6899\n\t],\n\t\"./njmetro/nj1.json\": [\n\t\t72868,\n\t\t4092\n\t],\n\t\"./njmetro/nj10.json\": [\n\t\t28421,\n\t\t1471\n\t],\n\t\"./njmetro/nj2.json\": [\n\t\t74583,\n\t\t4138\n\t],\n\t\"./njmetro/nj3.json\": [\n\t\t33347,\n\t\t6293\n\t],\n\t\"./njmetro/nj4.json\": [\n\t\t57811,\n\t\t4402\n\t],\n\t\"./qdmetro/qd11.json\": [\n\t\t80186,\n\t\t5680\n\t],\n\t\"./qdmetro/qd13.json\": [\n\t\t99736,\n\t\t5325\n\t],\n\t\"./qdmetro/qd2.json\": [\n\t\t35582,\n\t\t852\n\t],\n\t\"./qdmetro/qd3.json\": [\n\t\t23457,\n\t\t6288\n\t],\n\t\"./qdmetro/qd8.json\": [\n\t\t67703,\n\t\t758\n\t],\n\t\"./saopaulometro/sp1.json\": [\n\t\t2702,\n\t\t9619\n\t],\n\t\"./saopaulometro/sp10.json\": [\n\t\t81443,\n\t\t7855\n\t],\n\t\"./saopaulometro/sp11.json\": [\n\t\t48362,\n\t\t2750\n\t],\n\t\"./saopaulometro/sp12.json\": [\n\t\t57393,\n\t\t4387\n\t],\n\t\"./saopaulometro/sp13.json\": [\n\t\t12794,\n\t\t153\n\t],\n\t\"./saopaulometro/sp15.json\": [\n\t\t56267,\n\t\t4996\n\t],\n\t\"./saopaulometro/sp2.json\": [\n\t\t67182,\n\t\t911\n\t],\n\t\"./saopaulometro/sp3.json\": [\n\t\t91102,\n\t\t6569\n\t],\n\t\"./saopaulometro/sp4.json\": [\n\t\t42489,\n\t\t6890\n\t],\n\t\"./saopaulometro/sp5.json\": [\n\t\t62103,\n\t\t3692\n\t],\n\t\"./saopaulometro/sp7.json\": [\n\t\t99021,\n\t\t856\n\t],\n\t\"./saopaulometro/sp8.json\": [\n\t\t21280,\n\t\t2791\n\t],\n\t\"./saopaulometro/sp9.json\": [\n\t\t74337,\n\t\t5941\n\t],\n\t\"./shmetro/sh1.json\": [\n\t\t55562,\n\t\t4254\n\t],\n\t\"./shmetro/sh10.json\": [\n\t\t26438,\n\t\t4605\n\t],\n\t\"./shmetro/sh11.json\": [\n\t\t96485,\n\t\t74\n\t],\n\t\"./shmetro/sh12.json\": [\n\t\t67048,\n\t\t2632\n\t],\n\t\"./shmetro/sh13.json\": [\n\t\t49155,\n\t\t3456\n\t],\n\t\"./shmetro/sh14.json\": [\n\t\t42243,\n\t\t5294\n\t],\n\t\"./shmetro/sh15.json\": [\n\t\t86484,\n\t\t7211\n\t],\n\t\"./shmetro/sh16.json\": [\n\t\t71465,\n\t\t6745\n\t],\n\t\"./shmetro/sh17.json\": [\n\t\t7079,\n\t\t7769\n\t],\n\t\"./shmetro/sh18.json\": [\n\t\t94120,\n\t\t3263\n\t],\n\t\"./shmetro/sh2.json\": [\n\t\t4580,\n\t\t1475\n\t],\n\t\"./shmetro/sh3&4.json\": [\n\t\t57225,\n\t\t8781\n\t],\n\t\"./shmetro/sh3.json\": [\n\t\t17439,\n\t\t7321\n\t],\n\t\"./shmetro/sh4.json\": [\n\t\t21088,\n\t\t5993\n\t],\n\t\"./shmetro/sh5.json\": [\n\t\t47346,\n\t\t7910\n\t],\n\t\"./shmetro/sh6.json\": [\n\t\t48358,\n\t\t6632\n\t],\n\t\"./shmetro/sh7.json\": [\n\t\t13095,\n\t\t6153\n\t],\n\t\"./shmetro/sh8.json\": [\n\t\t64409,\n\t\t5925\n\t],\n\t\"./shmetro/sh9.json\": [\n\t\t57345,\n\t\t6568\n\t],\n\t\"./szmetro/sz1.json\": [\n\t\t47109,\n\t\t9477\n\t],\n\t\"./szmetro/sz2.json\": [\n\t\t96531,\n\t\t8476\n\t],\n\t\"./szmetro/sz3.json\": [\n\t\t51862,\n\t\t2023\n\t],\n\t\"./szmetro/sz4.json\": [\n\t\t47789,\n\t\t8330\n\t],\n\t\"./szmetro/sz8.json\": [\n\t\t95508,\n\t\t7522\n\t],\n\t\"./template-configs.json\": [\n\t\t72722\n\t],\n\t\"./torontosubway/ttc1.json\": [\n\t\t12966,\n\t\t5515\n\t],\n\t\"./torontosubway/ttc2.json\": [\n\t\t33298,\n\t\t5797\n\t],\n\t\"./torontosubway/ttc3.json\": [\n\t\t78973,\n\t\t1325\n\t],\n\t\"./torontosubway/ttc4.json\": [\n\t\t76730,\n\t\t388\n\t],\n\t\"./zzmetro/zz1.json\": [\n\t\t44557,\n\t\t7985\n\t],\n\t\"./zzmetro/zz14.json\": [\n\t\t52049,\n\t\t1074\n\t],\n\t\"./zzmetro/zz2.json\": [\n\t\t36226,\n\t\t8418\n\t],\n\t\"./zzmetro/zz3.json\": [\n\t\t45090,\n\t\t3437\n\t],\n\t\"./zzmetro/zz4.json\": [\n\t\t92332,\n\t\t1281\n\t],\n\t\"./zzmetro/zz5.json\": [\n\t\t53790,\n\t\t6010\n\t],\n\t\"./zzmetro/zz6.json\": [\n\t\t55444,\n\t\t3574\n\t],\n\t\"./zzmetro/zz9.json\": [\n\t\t81393,\n\t\t5458\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 91427;\nmodule.exports = webpackAsyncContext;","import React, { useEffect } from 'react';\nimport { CanvasType, Events, RmgStyle } from '../constants/constants';\nimport { useRootSelector } from '../redux';\nimport { useDispatch } from 'react-redux';\nimport { setStyle } from '../redux/param/action';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Flex } from '@chakra-ui/react';\nimport FallbackLoader from '../components/fallback-loader';\nimport useCanvasMap from './use-canvas-map';\nimport { RmgErrorBoundary } from '@railmapgen/rmg-components';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\nconst style = {\n    flexDirection: 'row',\n    overflowX: 'auto',\n    '&::before, &::after': {\n        content: '\"\"',\n        margin: 'auto',\n    },\n    '& > svg': {\n        flex: '0 0 auto',\n        border: '1px solid black',\n    },\n};\n\nexport default function SvgRouter() {\n    const location = useLocation();\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const { canvasToShow, canvasScale } = useRootSelector(state => state.app);\n    const { svg_height: svgHeight, style: rmgStyle } = useRootSelector(state => state.param);\n\n    const canvasMap = useCanvasMap(rmgStyle);\n\n    useEffect(() => {\n        const pathname = location.pathname;\n        console.log(`SvgRouter:: requestedPath=${pathname}`);\n        if (pathname !== '/' + rmgStyle) {\n            const nextStyle = pathname.split('/').slice(-1)[0] as RmgStyle;\n            if (Object.values(RmgStyle).includes(nextStyle)) {\n                // set style in param\n                console.log(`SvgRouter:: updating param style to ${nextStyle}`);\n                dispatch(setStyle(nextStyle));\n            } else {\n                // push route to match param's style\n                console.log(`SvgRouter:: updating path to /${rmgStyle}`);\n                navigate(rmgStyle);\n            }\n        }\n    }, []);\n\n    useEffect(() => {\n        (document.getElementById('css_share') as HTMLLinkElement).href =\n            process.env.PUBLIC_URL + `/styles/share_${rmgStyle}.css`;\n        rmgRuntime.event(Events.STYLE_CHANGE, { style: rmgStyle });\n    }, [rmgStyle]);\n\n    const filteredCanvas = (Object.keys(canvasMap) as CanvasType[]).filter(canvas => canvasToShow.includes(canvas));\n\n    return (\n        <Flex sx={style}>\n            {Object.keys(canvasMap).length === 0 ? (\n                <FallbackLoader />\n            ) : (\n                filteredCanvas.map(canvas => (\n                    <RmgErrorBoundary key={canvas + rmgStyle} sx={{ minWidth: 750, height: svgHeight * canvasScale }}>\n                        {canvasMap[canvas]}\n                    </RmgErrorBoundary>\n                ))\n            )}\n        </Flex>\n    );\n}\n","import { ReactNode, useEffect, useState } from 'react';\nimport { CanvasType, RmgStyle } from '../constants/constants';\n\nexport default function useCanvasMap(style: RmgStyle) {\n    const [canvasMap, setCanvasMap] = useState<Partial<Record<CanvasType, ReactNode>>>({});\n\n    useEffect(() => {\n        import(`./${style}/index`)\n            .then(module => {\n                setCanvasMap(module.default);\n            })\n            .catch(e => {\n                console.error(`Failed to load canvas for style ${style}`, e);\n                setCanvasMap({});\n            });\n\n        // reset canvas map while loading module for next style\n        return () => {\n            setCanvasMap({});\n        };\n    }, [style]);\n\n    return canvasMap;\n}\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { updateStationName, updateStationNum, updateStationSecondaryName } from '../../../redux/param/action';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { RmgStyle } from '../../../constants/constants';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\nexport default function InfoSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedStation = useRootSelector(state => state.app.selectedStation);\n    console.log('InfoSection:: Rendering for', selectedStation);\n    const style = useRootSelector(state => state.param.style);\n    const { num, name, secondaryName } = useRootSelector(state => state.param.stn_list[selectedStation]);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('StationSidePanel.info.num'),\n            value: num,\n            placeholder: '01',\n            onChange: (value: string) => dispatch(updateStationNum(selectedStation, value)),\n            hidden: ![RmgStyle.GZMTR].includes(style),\n        },\n        {\n            type: 'input',\n            label: t('Chinese name'),\n            value: name[0],\n            onChange: (value: string) => dispatch(updateStationName(selectedStation, [value, name[1]])),\n        },\n        {\n            type: 'input',\n            label: t('English name'),\n            value: name[1],\n            onChange: (value: string) => dispatch(updateStationName(selectedStation, [name[0], value])),\n        },\n        {\n            type: 'input',\n            label: t('StationSidePanel.info.zhSecondary'),\n            value: secondaryName ? secondaryName[0] : '',\n            placeholder: '1号航站楼',\n            onChange: (value: string) =>\n                dispatch(updateStationSecondaryName(selectedStation, [value, secondaryName ? secondaryName[1] : ''])),\n            hidden: ![RmgStyle.GZMTR].includes(style),\n        },\n        {\n            type: 'input',\n            label: t('StationSidePanel.info.enSecondary'),\n            value: secondaryName ? secondaryName[1] : '',\n            placeholder: 'Terminal 1',\n            onChange: (value: string) =>\n                dispatch(updateStationSecondaryName(selectedStation, [secondaryName ? secondaryName[0] : '', value])),\n            hidden: ![RmgStyle.GZMTR].includes(style),\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('StationSidePanel.info.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n        </Box>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Image } from '@chakra-ui/react';\n\ninterface FlagSvgEmojiProps {\n    countryCode: string;\n    svgFilename?: string;\n}\n\nexport default function FlagSvgEmoji(props: FlagSvgEmojiProps) {\n    const { countryCode, svgFilename } = props;\n\n    const [src, setSrc] = useState<string | undefined>(undefined);\n\n    useEffect(() => {\n        if (svgFilename) {\n            import('@railmapgen/rmg-palette-resources/flags/' + svgFilename)\n                .then(module => module.default)\n                .then(setSrc)\n                .catch(err => console.error(`Failed to find SVG file ${svgFilename} as ${err?.message}`));\n        }\n    }, [svgFilename]);\n\n    return src ? <Image src={src} alt={`Flag of ${countryCode}`} h={17} mr={1} /> : <></>;\n}\n","import React from 'react';\nimport { RmgAutoComplete } from '@railmapgen/rmg-components';\nimport { CityCode, CityEntry, cityList, countryList } from '@railmapgen/rmg-palette-resources';\nimport { useTranslation } from 'react-i18next';\nimport FlagSvgEmoji from './flag-svg-emoji';\nimport { LanguageCode } from '@railmapgen/rmg-translate';\n\ninterface CityPickerProps {\n    defaultValueId?: CityCode;\n    onChange?: (val: CityCode) => void;\n}\n\nexport default function CityPicker(props: CityPickerProps) {\n    const { defaultValueId, onChange } = props;\n\n    const { i18n } = useTranslation();\n\n    const currentItem = defaultValueId ? cityList.find(item => item.id === defaultValueId) : undefined;\n\n    const displayValue = (item: CityEntry): string => {\n        return i18n.languages.map(lng => item.name[lng as LanguageCode]).find(name => name !== undefined)!!;\n    };\n\n    const displayHandler = (item: CityEntry) => {\n        const isCensorTWFlag =\n            item.country === 'TW' &&\n            [LanguageCode.ChineseSimp, LanguageCode.ChineseCN].includes(i18n.languages[0] as LanguageCode);\n        const isWindowsClient = ['Win32', 'Win64'].includes(navigator.platform);\n        // const isWindowsClient = true; // uncomment this line for Windows testing\n\n        const name = i18n.languages.map(lng => item.name[lng as LanguageCode]).find(name => name !== undefined);\n        const flagSvg = countryList.find(country => country.id === item.country)?.flagSvg;\n        const flagEmoji = countryList.find(country => country.id === item.country)?.flagEmoji;\n\n        return (\n            <>\n                {isCensorTWFlag ? (\n                    <span>🏴&nbsp;</span>\n                ) : isWindowsClient ? (\n                    <FlagSvgEmoji countryCode={item.country} svgFilename={flagSvg} />\n                ) : (\n                    <span>{flagEmoji}&nbsp;</span>\n                )}\n                {name}\n            </>\n        );\n    };\n\n    const predicate = (item: CityEntry, input: string): boolean => {\n        return Object.values(item.name).some(name => name.includes(input));\n    };\n\n    const data = cityList.slice().sort((a, b) => {\n        if (a.id === CityCode.Other) {\n            return 1;\n        } else if (b.id === CityCode.Other) {\n            return -1;\n        } else {\n            return displayValue(a).localeCompare(displayValue(b), i18n.languages[0]);\n        }\n    });\n\n    return (\n        <RmgAutoComplete\n            data={data}\n            displayValue={displayValue}\n            displayHandler={displayHandler}\n            predicate={predicate}\n            defaultValue={currentItem}\n            onChange={item => onChange?.(item.id)}\n        />\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { ColourHex, MonoColour } from '../../../constants/constants';\nimport { RmgAutoComplete, RmgLineBadge } from '@railmapgen/rmg-components';\nimport { CityCode, PaletteEntry } from '@railmapgen/rmg-palette-resources';\nimport { useTranslation } from 'react-i18next';\nimport { LanguageCode } from '@railmapgen/rmg-translate';\n\nconst usePalette = (cityCode?: CityCode) => {\n    const [paletteList, setPaletteList] = useState<PaletteEntry[]>([]);\n\n    useEffect(() => {\n        import(/* webpackChunkName: \"palettes\" */ `@railmapgen/rmg-palette-resources/palettes/${cityCode}.js`)\n            .then(module => setPaletteList(module.default))\n            .catch(() => setPaletteList([]));\n    }, [cityCode]);\n\n    return paletteList;\n};\n\ninterface ColourPickerProps {\n    city?: CityCode;\n    defaultValueId?: string;\n    onChange?: (lineCode: string, bg: ColourHex, fg: MonoColour) => void;\n}\n\nexport default function ColourPicker(props: ColourPickerProps) {\n    const { city, defaultValueId, onChange } = props;\n\n    const { i18n } = useTranslation();\n\n    const paletteList = usePalette(city);\n\n    const currentItem = defaultValueId ? paletteList.find(palette => palette.id === defaultValueId) : undefined;\n\n    const displayValue = (item: PaletteEntry): string => {\n        return i18n.languages.map(lng => item.name[lng as LanguageCode]).find(name => name !== undefined)!!;\n    };\n\n    const displayHandler = (item: PaletteEntry) => {\n        const displayName = displayValue(item);\n\n        return <RmgLineBadge name={displayName} fg={item.fg || MonoColour.white} bg={item.colour} />;\n    };\n\n    const predicate = (item: PaletteEntry, input: string): boolean => {\n        return Object.values(item.name).some(name => name.includes(input));\n    };\n\n    return (\n        <RmgAutoComplete\n            data={paletteList}\n            displayValue={displayValue}\n            displayHandler={displayHandler}\n            predicate={predicate}\n            defaultValue={currentItem}\n            onChange={item => onChange?.(item.id, item.colour, item.fg || MonoColour.white)}\n        />\n    );\n}\n","import {\n    Button,\n    Icon,\n    Link,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    Tab,\n    TabList,\n    TabPanel,\n    TabPanels,\n    Tabs,\n    Text,\n    useColorModeValue,\n    VStack,\n} from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { ColourHex, Events, MonoColour, Theme } from '../../../constants/constants';\nimport CityPicker from './city-picker';\nimport ColourPicker from './colour-picker';\nimport { CityCode } from '@railmapgen/rmg-palette-resources';\nimport { useTranslation } from 'react-i18next';\nimport { RmgFields, RmgFieldsField, RmgLineBadge } from '@railmapgen/rmg-components';\nimport { MdOpenInNew } from 'react-icons/md';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface ColourModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    defaultTheme?: Theme;\n    onUpdate?: (theme: Theme) => void;\n}\n\nexport default function ColourModal(props: ColourModalProps) {\n    const { isOpen, onClose, defaultTheme, onUpdate } = props;\n\n    const { t } = useTranslation();\n    const linkColour = useColorModeValue('primary.500', 'primary.300');\n\n    const [cityCode, setCityCode] = useState(defaultTheme?.[0]);\n    const [lineCode, setLineCode] = useState(defaultTheme?.[1]);\n    const [bgColour, setBgColour] = useState(defaultTheme?.[2] || '#AAAAAA');\n    const [fgColour, setFgColour] = useState(defaultTheme?.[3] || MonoColour.white);\n\n    useEffect(() => {\n        if (defaultTheme) {\n            setCityCode(defaultTheme[0]);\n            setLineCode(defaultTheme[1]);\n            setBgColour(defaultTheme[2]);\n            setFgColour(defaultTheme[3]);\n        }\n    }, [isOpen, defaultTheme?.toString()]);\n\n    const paletteFields: RmgFieldsField[] = [\n        {\n            type: 'custom',\n            label: t('ColourModal.city'),\n            component: (\n                <CityPicker\n                    defaultValueId={cityCode}\n                    onChange={value => {\n                        setCityCode(value);\n                        setLineCode(undefined);\n                        setBgColour('#AAAAAA');\n                        setFgColour(MonoColour.white);\n                    }}\n                />\n            ),\n        },\n        {\n            type: 'custom',\n            label: t('ColourModal.line'),\n            component: (\n                <ColourPicker\n                    city={cityCode}\n                    defaultValueId={lineCode}\n                    onChange={(line, bg, fg) => {\n                        setLineCode(line);\n                        setBgColour(bg);\n                        setFgColour(fg);\n                    }}\n                />\n            ),\n        },\n    ];\n\n    const customFields: RmgFieldsField[] = [\n        {\n            type: 'input',\n            label: t('ColourModal.bg'),\n            variant: 'color',\n            value: bgColour,\n            placeholder: '#F3D03E',\n            onChange: value => {\n                setCityCode(CityCode.Other);\n                setLineCode('other');\n                setBgColour(value as ColourHex);\n            },\n        },\n        {\n            type: 'select',\n            label: t('ColourModal.fg'),\n            value: fgColour,\n            options: {\n                [MonoColour.white]: t('ColourModal.white'),\n                [MonoColour.black]: t('ColourModal.black'),\n            },\n            onChange: value => {\n                setCityCode(CityCode.Other);\n                setLineCode('other');\n                setFgColour(value as MonoColour);\n            },\n        },\n    ];\n\n    const handleOpenPalette = () => {\n        if (rmgRuntime.isStandaloneWindow()) {\n            window.open('/rmg-palette', '_blank');\n        } else {\n            rmgRuntime.openApp('rmg-palette');\n        }\n    };\n\n    const isSubmitEnabled = cityCode && lineCode && bgColour && fgColour;\n\n    const handleSubmit = () => {\n        if (isSubmitEnabled) {\n            onUpdate?.([cityCode, lineCode, bgColour, fgColour]);\n            onClose();\n            rmgRuntime.event(Events.SELECT_COLOUR, { cityCode, lineCode });\n        }\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('ColourModal.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <VStack>\n                        <RmgLineBadge name={t('ColourModal.example')} fg={fgColour} bg={bgColour} />\n\n                        <Tabs\n                            isFitted\n                            colorScheme=\"primary\"\n                            w=\"100%\"\n                            defaultIndex={cityCode === CityCode.Other ? 1 : 0}\n                        >\n                            <TabList>\n                                <Tab>{t('ColourModal.palette')}</Tab>\n                                <Tab>{t('ColourModal.custom')}</Tab>\n                            </TabList>\n\n                            <TabPanels>\n                                <TabPanel>\n                                    <RmgFields fields={paletteFields} />\n                                </TabPanel>\n                                <TabPanel>\n                                    <RmgFields fields={customFields} />\n                                </TabPanel>\n                            </TabPanels>\n                        </Tabs>\n                    </VStack>\n                </ModalBody>\n\n                <ModalFooter>\n                    <Text fontSize=\"sm\" marginRight={2}>\n                        {t('ColourModal.seeAll')}\n                        <Link color={linkColour} onClick={handleOpenPalette}>\n                            {t('Palette')} <Icon as={MdOpenInNew} />\n                        </Link>\n                    </Text>\n\n                    <Button colorScheme=\"primary\" onClick={handleSubmit} disabled={!isSubmitEnabled}>\n                        {t('Confirm')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import { ColourHex } from '../constants/constants';\nimport { rmgChakraTheme } from '@railmapgen/rmg-components';\n\nexport default class ColourUtil {\n    private static hexToRgb(hex: ColourHex): [number, number, number] {\n        return [parseInt(hex.slice(1, 3), 16), parseInt(hex.slice(3, 5), 16), parseInt(hex.slice(5, 7), 16)];\n    }\n\n    public static fade(hex: ColourHex, alpha: number): `rgba(${string})` {\n        return `rgba(${[...this.hexToRgb(hex), alpha].join(',')})`;\n    }\n\n    public static euclideanDistance(hex1: ColourHex, hex2: ColourHex): number {\n        return this.hexToRgb(hex1).reduce((acc, cur, idx) => {\n            return acc + Math.pow(cur - this.hexToRgb(hex2)[idx], 2);\n        }, 0);\n    }\n}\n\nexport const findNearestColour = (hex: ColourHex): string => {\n    const colourDb: Record<string, Record<string, ColourHex> | ColourHex> = rmgChakraTheme.colors;\n\n    const [nearestColour] = Object.entries(colourDb).reduce(\n        (acc, cur) => {\n            if (cur[0].includes('Alpha') || cur[0] === 'current') {\n                return acc;\n            } else if (typeof cur[1] === 'string') {\n                const dist = ColourUtil.euclideanDistance(hex, cur[1]);\n                return dist < acc[1] ? [cur[0], dist] : acc;\n            } else {\n                const dist = ColourUtil.euclideanDistance(hex, cur[1]['600']);\n                return dist < acc[1] ? [cur[0], dist] : acc;\n            }\n        },\n        ['brand', Infinity]\n    );\n    return nearestColour;\n};\n","import React from 'react';\nimport ColourUtil from '../../theme/colour-util';\nimport { MdCircle } from 'react-icons/md';\nimport { IconButton } from '@chakra-ui/react';\nimport { Theme } from '../../constants/constants';\nimport { useTranslation } from 'react-i18next';\n\ninterface ThemeButtonProps {\n    theme: Theme;\n    onClick?: () => void;\n}\n\nexport default function ThemeButton(props: ThemeButtonProps) {\n    const { theme, onClick } = props;\n\n    const { t } = useTranslation();\n\n    return (\n        <IconButton\n            size=\"xs\"\n            aria-label={t('Colour')}\n            mt=\"0.45px\"\n            color={theme[3]}\n            bg={theme[2]}\n            _hover={{ bg: ColourUtil.fade(theme[2], 0.7) }}\n            icon={<MdCircle />}\n            onClick={onClick}\n        />\n    );\n}\n","import React, { useState } from 'react';\nimport { Box, HStack, IconButton, Text } from '@chakra-ui/react';\nimport { InterchangeInfo, MonoColour, Theme } from '../../../constants/constants';\nimport { MdAdd, MdContentCopy, MdDelete } from 'react-icons/md';\nimport ColourModal from '../../modal/colour-modal/colour-modal';\nimport { useTranslation } from 'react-i18next';\nimport { useRootSelector } from '../../../redux';\nimport ThemeButton from '../theme-button';\nimport { RmgCard, RmgFields, RmgFieldsField, RmgLabel } from '@railmapgen/rmg-components';\n\ninterface InterchangeCardProps {\n    interchangeList: InterchangeInfo[];\n    onAdd?: (info: InterchangeInfo) => void;\n    onDelete?: (index: number) => void;\n    onUpdate?: (index: number, info: InterchangeInfo) => void;\n}\n\nexport default function InterchangeCard(props: InterchangeCardProps) {\n    const { interchangeList, onAdd, onDelete, onUpdate } = props;\n\n    const { t } = useTranslation();\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedIndex, setSelectedIndex] = useState(0);\n\n    const { theme, stn_list: stationList } = useRootSelector(state => state.param);\n\n    const usedNameList = Object.values(stationList).reduce<[string[], string[]]>(\n        (acc, cur) => {\n            const [zhAcc, enAcc] = acc;\n            return [\n                [...new Set(zhAcc.concat(cur.transfer.info.flat().map(it => it[4])))],\n                [...new Set(enAcc.concat(cur.transfer.info.flat().map(it => it[5])))],\n            ];\n        },\n        [[], []]\n    );\n\n    const interchangeFields: RmgFieldsField[][] = interchangeList.map((it, i) => [\n        {\n            type: 'input',\n            label: t('Chinese name'),\n            value: it[4],\n            minW: '80px',\n            onChange: val => onUpdate?.(i, [it[0], it[1], it[2], it[3], val, it[5]]),\n            optionList: usedNameList[0],\n        },\n        {\n            type: 'input',\n            label: t('English name'),\n            value: it[5],\n            minW: '80px',\n            onChange: val => onUpdate?.(i, [it[0], it[1], it[2], it[3], it[4], val]),\n            optionList: usedNameList[1],\n        },\n    ]);\n\n    return (\n        <RmgCard direction=\"column\">\n            {interchangeList.length === 0 && (\n                <HStack spacing={0.5} data-testid={`interchange-card-stack`}>\n                    <Text as=\"i\" flex={1} align=\"center\" fontSize=\"md\" colorScheme=\"gray\">\n                        {t('StationSidePanel.interchange.noInterchanges')}\n                    </Text>\n\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        aria-label={t('StationSidePanel.interchange.add')}\n                        onClick={() => onAdd?.([theme[0], '', '#aaaaaa', MonoColour.white, '', ''])}\n                        icon={<MdAdd />}\n                    />\n                </HStack>\n            )}\n\n            {interchangeList.map((it, i) => (\n                <HStack key={i} spacing={0.5} data-testid={`interchange-card-stack-${i}`}>\n                    <RmgLabel label={t('Colour')} minW=\"40px\" noLabel={i !== 0}>\n                        <ThemeButton\n                            theme={[it[0], it[1], it[2], it[3]]}\n                            onClick={() => {\n                                setIsModalOpen(true);\n                                setSelectedIndex(i);\n                            }}\n                        />\n                    </RmgLabel>\n\n                    <RmgFields fields={interchangeFields[i]} noLabel={i !== 0} />\n\n                    {onAdd && i === interchangeFields.length - 1 ? (\n                        <IconButton\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            aria-label={t('StationSidePanel.interchange.copy')}\n                            onClick={() => onAdd?.(interchangeList.slice(-1)[0])} // duplicate last leg\n                            icon={<MdContentCopy />}\n                        />\n                    ) : (\n                        <Box minW={8} />\n                    )}\n\n                    {onDelete && (\n                        <IconButton\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            aria-label={t('StationSidePanel.interchange.remove')}\n                            onClick={() => onDelete?.(i)}\n                            icon={<MdDelete />}\n                        />\n                    )}\n                </HStack>\n            ))}\n\n            <ColourModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                defaultTheme={interchangeList[selectedIndex]?.slice(0, 4) as Theme}\n                onUpdate={theme =>\n                    onUpdate?.(selectedIndex, [\n                        ...theme,\n                        interchangeList[selectedIndex][4],\n                        interchangeList[selectedIndex][5],\n                    ])\n                }\n            />\n        </RmgCard>\n    );\n}\n","import React, { Fragment } from 'react';\nimport { Button, Flex, Heading, VStack } from '@chakra-ui/react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport InterchangeCard from './interchange-card';\nimport {\n    addInterchange,\n    removeInterchange,\n    updateInterchange,\n    updateStationOsiName,\n    updateStationPaidArea,\n    updateStationTickDirection,\n} from '../../../redux/param/action';\nimport { InterchangeInfo, MonoColour, RmgStyle, ShortDirection } from '../../../constants/constants';\nimport { MdAdd } from 'react-icons/md';\nimport { RmgButtonGroup, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\nexport default function InterchangeSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedStation = useRootSelector(state => state.app.selectedStation);\n    const { theme, style } = useRootSelector(state => state.param);\n    const { transfer } = useRootSelector(state => state.param.stn_list[selectedStation]);\n\n    const getOSINameFields = (setIndex: number): RmgFieldsField[] => [\n        {\n            type: 'input',\n            label: t('Station Chinese name'),\n            value: transfer.osi_names[setIndex]?.[0],\n            hidden: ![RmgStyle.MTR].includes(style),\n            onChange: value =>\n                dispatch(updateStationOsiName(selectedStation, setIndex, [value, transfer.osi_names[setIndex]?.[1]])),\n        },\n        {\n            type: 'input',\n            label: t('Station English name'),\n            value: transfer.osi_names[setIndex]?.[1],\n            hidden: ![RmgStyle.MTR].includes(style),\n            onChange: value =>\n                dispatch(updateStationOsiName(selectedStation, setIndex, [transfer.osi_names[setIndex]?.[0], value])),\n        },\n        {\n            type: 'switch',\n            label: t('Paid area'),\n            isChecked: transfer.paid_area,\n            onChange: checked => dispatch(updateStationPaidArea(selectedStation, checked)),\n            hidden: ![RmgStyle.MTR].includes(style) || setIndex !== 0,\n            oneLine: true,\n        },\n    ];\n\n    const handleAdd = (i: number) => (info: InterchangeInfo) => {\n        dispatch(addInterchange(selectedStation, i, info));\n    };\n\n    const handleDelete = (i: number) => (j: number) => {\n        dispatch(removeInterchange(selectedStation, i, j));\n    };\n\n    const handleUpdate = (i: number) => (j: number, info: InterchangeInfo) => {\n        dispatch(updateInterchange(selectedStation, i, j, info));\n    };\n\n    const handleAddInterchangeGroup = () => {\n        dispatch(\n            addInterchange(selectedStation, transfer.info.length, [theme[0], '', '#AAAAAA', MonoColour.white, '', ''])\n        );\n    };\n\n    return (\n        <VStack align=\"flex-start\" p={1}>\n            <Flex w=\"100%\">\n                <Heading as=\"h5\" size=\"sm\" mr=\"auto\">\n                    {t('StationSidePanel.interchange.title')}\n                </Heading>\n\n                {style === RmgStyle.MTR && (\n                    <RmgButtonGroup\n                        selections={[\n                            { label: t('Text on the left'), value: ShortDirection.left },\n                            { label: t('Text on the right'), value: ShortDirection.right },\n                        ]}\n                        defaultValue={transfer.tick_direc}\n                        onChange={value => dispatch(updateStationTickDirection(selectedStation, value))}\n                    />\n                )}\n            </Flex>\n\n            {transfer.info.map((infoList, i) => (\n                <Fragment key={i}>\n                    <Heading as=\"h6\" size=\"xs\">\n                        {i === 0\n                            ? t('StationSidePanel.interchange.within')\n                            : i === 1\n                            ? t('StationSidePanel.interchange.outStation')\n                            : t('StationSidePanel.interchange.outSystem')}\n                    </Heading>\n\n                    {i !== 0 && <RmgFields fields={getOSINameFields(i - 1)} />}\n\n                    <InterchangeCard\n                        interchangeList={infoList}\n                        onAdd={handleAdd(i)}\n                        onDelete={handleDelete(i)}\n                        onUpdate={handleUpdate(i)}\n                    />\n                </Fragment>\n            ))}\n\n            {transfer.info.length < 3 && (\n                <Button\n                    size=\"xs\"\n                    variant=\"ghost\"\n                    alignSelf=\"flex-end\"\n                    leftIcon={<MdAdd />}\n                    onClick={handleAddInterchangeGroup}\n                >\n                    {t('StationSidePanel.interchange.addGroup')}\n                </Button>\n            )}\n        </VStack>\n    );\n}\n","import { Box, Heading } from '@chakra-ui/react';\nimport React from 'react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { Facilities, RmgStyle, Services } from '../../../constants/constants';\nimport {\n    updateStationFacility,\n    updateStationLoopPivot,\n    updateStationServices,\n    updateStationOneLine,\n    updateStationIntPadding,\n    updateStationIntPaddingToAll,\n} from '../../../redux/param/action';\nimport { RmgButtonGroup, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\nexport default function MoreSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedStation = useRootSelector(state => state.app.selectedStation);\n    const { style, loop } = useRootSelector(state => state.param);\n    const { services, facility, loop_pivot, one_line, int_padding } = useRootSelector(\n        state => state.param.stn_list[selectedStation]\n    );\n\n    const serviceSelections = Object.values(Services).map(service => {\n        return {\n            label: t('StationSidePanel.more.' + service),\n            value: service,\n            disabled: service === Services.local && style !== RmgStyle.SHMetro,\n        };\n    });\n\n    const mtrFacilityOptions = {\n        [Facilities.none]: t('StationSidePanel.more.none'),\n        [Facilities.airport]: t('StationSidePanel.more.airport'),\n        [Facilities.hsr]: t('StationSidePanel.more.hsr'),\n        [Facilities.disney]: t('StationSidePanel.more.disney'),\n    };\n\n    const shmetroFacilityOptions = {\n        [Facilities.none]: t('StationSidePanel.more.none'),\n        [Facilities.airport]: t('StationSidePanel.more.airport'),\n        [Facilities.railway]: t('StationSidePanel.more.railway'),\n        [Facilities.disney]: t('StationSidePanel.more.disney'),\n    };\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'custom',\n            label: t('StationSidePanel.more.service'),\n            component: (\n                <RmgButtonGroup\n                    selections={serviceSelections}\n                    defaultValue={services}\n                    onChange={services => dispatch(updateStationServices(selectedStation, services))}\n                    multiSelect\n                />\n            ),\n            hidden: ![RmgStyle.GZMTR, RmgStyle.SHMetro].includes(style),\n        },\n        {\n            type: 'select',\n            label: t('StationSidePanel.more.facility'),\n            value: facility,\n            options: style === RmgStyle.MTR ? mtrFacilityOptions : shmetroFacilityOptions,\n            onChange: value => dispatch(updateStationFacility(selectedStation, value as Facilities)),\n            hidden: ![RmgStyle.MTR, RmgStyle.SHMetro].includes(style),\n        },\n        {\n            type: 'switch',\n            label: t('StationSidePanel.more.pivot'),\n            isChecked: loop_pivot,\n            onChange: checked => dispatch(updateStationLoopPivot(selectedStation, checked)),\n            hidden: ![RmgStyle.SHMetro].includes(style) || !loop,\n            minW: 'full',\n            oneLine: true,\n        },\n        {\n            type: 'switch',\n            label: t('StationSidePanel.more.oneLine'),\n            isChecked: one_line,\n            onChange: checked => dispatch(updateStationOneLine(selectedStation, checked)),\n            hidden: ![RmgStyle.SHMetro].includes(style),\n            minW: 'full',\n            oneLine: true,\n        },\n        {\n            type: 'input',\n            label: t('StationSidePanel.more.intPadding'),\n            value: int_padding.toString(),\n            validator: val => Number.isInteger(val),\n            onChange: val => dispatch(updateStationIntPadding(selectedStation, Number(val))),\n            hidden: ![RmgStyle.SHMetro].includes(style),\n        },\n        {\n            type: 'custom',\n            label: t('StationSidePanel.more.intPaddingApplyGlobal'),\n            component: (\n                <RmgButtonGroup\n                    selections={[{ label: t('StationSidePanel.more.apply'), value: '', disabled: false }]}\n                    defaultValue=\"\"\n                    onChange={_ => dispatch(updateStationIntPaddingToAll(selectedStation))}\n                />\n            ),\n            oneLine: true,\n            hidden: ![RmgStyle.SHMetro].includes(style),\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('StationSidePanel.more.title')}\n            </Heading>\n\n            <RmgFields fields={fields} />\n        </Box>\n    );\n}\n","import { Box, Heading, Text } from '@chakra-ui/react';\nimport React from 'react';\nimport { BranchStyle, Direction } from '../../../constants/constants';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport {\n    flipStationBranchPosition,\n    updateStationBranchFirstStation,\n    updateStationBranchType,\n} from '../../../redux/param/action';\nimport { RmgCard, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\nexport default function BranchSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedStation = useRootSelector(state => state.app.selectedStation);\n    const stationList = useRootSelector(state => state.param.stn_list);\n    const { parents, children, branch } = stationList[selectedStation];\n\n    const branchOptions = {\n        [BranchStyle.through]: t('StationSidePanel.branch.through'),\n        [BranchStyle.nonThrough]: t('StationSidePanel.branch.nonThrough'),\n    };\n\n    const getFirstStationOptions = (direction: Direction) => {\n        return (direction === Direction.left ? parents : children).reduce<Record<string, string>>(\n            (acc, cur) => ({ ...acc, [cur]: stationList[cur].name.join(' ') }),\n            {}\n        );\n    };\n\n    const positionOptions = {\n        upper: t('StationSidePanel.branch.upper'),\n        lower: t('StationSidePanel.branch.lower'),\n    };\n\n    const getFields = (direction: Direction): RmgFieldsField[] => {\n        if (branch[direction].length) {\n            return [\n                {\n                    type: 'select',\n                    label: t('StationSidePanel.branch.type'),\n                    options: branchOptions,\n                    value: branch[direction][0],\n                    onChange: value =>\n                        dispatch(updateStationBranchType(selectedStation, direction, value as BranchStyle)),\n                },\n                {\n                    type: 'select',\n                    label: t('StationSidePanel.branch.firstStation'),\n                    options: getFirstStationOptions(direction),\n                    value: branch[direction][1],\n                    onChange: value =>\n                        dispatch(updateStationBranchFirstStation(selectedStation, direction, value as string)),\n                },\n                {\n                    type: 'select',\n                    label: t('StationSidePanel.branch.position'),\n                    options: positionOptions,\n                    value:\n                        (direction === Direction.left ? parents : children).indexOf(branch[direction][1]!) === 0\n                            ? 'upper'\n                            : 'lower',\n                    onChange: () => dispatch(flipStationBranchPosition(selectedStation, direction)),\n                },\n            ];\n        } else {\n            return [];\n        }\n    };\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('Branches')}\n            </Heading>\n\n            <Heading as=\"h6\" size=\"xs\">\n                {t('Branch on the left')}\n            </Heading>\n\n            <RmgCard direction=\"column\">\n                {parents.length === 2 ? (\n                    <RmgFields fields={getFields(Direction.left)} />\n                ) : (\n                    <Text as=\"i\" flex={1} align=\"center\" fontSize=\"md\" colorScheme=\"gray\">\n                        {t('No branches found')}\n                    </Text>\n                )}\n            </RmgCard>\n\n            <Heading as=\"h6\" size=\"xs\">\n                {t('Branch on the right')}\n            </Heading>\n\n            <RmgCard direction=\"column\">\n                {children.length === 2 ? (\n                    <RmgFields fields={getFields(Direction.right)} />\n                ) : (\n                    <Text as=\"i\" flex={1} align=\"center\" fontSize=\"md\" colorScheme=\"gray\">\n                        {t('No branches found')}\n                    </Text>\n                )}\n            </RmgCard>\n        </Box>\n    );\n}\n","import { Divider } from '@chakra-ui/react';\nimport React from 'react';\nimport InfoSection from './info-section';\nimport InterchangeSection from './interchange-section';\nimport MoreSection from './more-section';\nimport BranchSection from './branch-section';\nimport { RmgSidePanelBody } from '@railmapgen/rmg-components';\n\nexport default function StationSidePanel() {\n    return (\n        <RmgSidePanelBody>\n            <InfoSection />\n\n            <Divider />\n\n            <InterchangeSection />\n\n            <Divider />\n\n            <BranchSection />\n\n            <Divider />\n\n            <MoreSection />\n        </RmgSidePanelBody>\n    );\n}\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { useRootSelector } from '../../../redux';\nimport { canvasConfig, RmgStyle } from '../../../constants/constants';\nimport {\n    setBranchSpacingPct,\n    setDirectionIndicatorX,\n    setDirectionIndicatorY,\n    setPaddingPercentage,\n    setSvgHeight,\n    setSvgWidth,\n    setYPercentage,\n} from '../../../redux/param/action';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\n\nexport default function LayoutSection() {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const {\n        style: rmgStyle,\n        svgWidth,\n        svg_height,\n        y_pc,\n        branchSpacingPct,\n        padding,\n        direction_gz_x,\n        direction_gz_y,\n        loop,\n    } = useRootSelector(state => state.param);\n\n    const fields: RmgFieldsField[] = [\n        ...canvasConfig[rmgStyle].map<RmgFieldsField>(canvas => ({\n            type: 'input',\n            label: t(`StyleSidePanel.layout.${canvas}Width`),\n            value: svgWidth[canvas].toString(),\n            onChange: val => dispatch(setSvgWidth(Number(val), canvas)),\n        })),\n        {\n            type: 'input',\n            label: t('StyleSidePanel.layout.canvasHeight'),\n            value: svg_height.toString(),\n            onChange: val => dispatch(setSvgHeight(Number(val))),\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.layout.verticalPosition'),\n            value: y_pc,\n            min: 0,\n            max: 100,\n            onChange: val => dispatch(setYPercentage(val)),\n            hidden: ![RmgStyle.MTR, RmgStyle.GZMTR].includes(rmgStyle),\n        },\n        {\n            type: 'slider',\n            label: !loop ? t('Branch spacing') : t('StyleSidePanel.layout.branchSpacingLoop'),\n            value: branchSpacingPct,\n            min: 0,\n            max: loop ? 50 : 100,\n            onChange: val => dispatch(setBranchSpacingPct(val)),\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.layout.padding'),\n            value: padding,\n            min: 0,\n            max: 50,\n            onChange: val => dispatch(setPaddingPercentage(val)),\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.layout.directionGzX'),\n            value: direction_gz_x,\n            min: 0,\n            max: 100,\n            onChange: val => dispatch(setDirectionIndicatorX(val)),\n            hidden: ![RmgStyle.GZMTR].includes(rmgStyle),\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.layout.directionGzY'),\n            value: direction_gz_y,\n            min: 0,\n            max: 100,\n            onChange: val => dispatch(setDirectionIndicatorY(val)),\n            hidden: ![RmgStyle.GZMTR].includes(rmgStyle),\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('StyleSidePanel.layout.title')}\n            </Heading>\n\n            <RmgFields fields={fields} minW={130} />\n        </Box>\n    );\n}\n","import React, { useState } from 'react';\nimport { Box, Button, Heading, HStack } from '@chakra-ui/react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport ThemeButton from '../theme-button';\nimport ColourModal from '../../modal/colour-modal/colour-modal';\nimport {\n    customiseDestinationName,\n    flipStationNames,\n    setDirection,\n    setLineName,\n    setLineNum,\n    setPanelType,\n    setPlatform,\n    setPsdNum,\n    setTheme,\n    staggerStationNames,\n    toggleLineNameBeforeDestination,\n} from '../../../redux/param/action';\nimport { PanelTypeGZMTR, PanelTypeShmetro, RmgStyle, ShortDirection } from '../../../constants/constants';\nimport { MdSwapVert } from 'react-icons/md';\nimport { RmgButtonGroup, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\nexport default function DesignSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const {\n        style,\n        theme,\n        line_name: lineName,\n        line_num: lineNum,\n        direction,\n        platform_num: platformNum,\n        psd_num: psdNum,\n        namePosMTR,\n        customiseMTRDest,\n        info_panel_type,\n    } = useRootSelector(state => state.param);\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const directionSelections = [\n        {\n            label: t('StyleSidePanel.design.left'),\n            value: ShortDirection.left,\n        },\n        {\n            label: t('StyleSidePanel.design.right'),\n            value: ShortDirection.right,\n        },\n    ];\n\n    const panelTypeGZMTROptions = Object.values(PanelTypeGZMTR).reduce<Record<string, string>>(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: t('StyleSidePanel.design.' + cur),\n        }),\n        {}\n    );\n\n    const panelTypeSHMetroOptions = Object.values(PanelTypeShmetro).reduce<Record<string, string>>(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: t('StyleSidePanel.design.' + cur),\n        }),\n        {}\n    );\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'custom',\n            label: t('Colour'),\n            component: <ThemeButton theme={theme} onClick={() => setIsModalOpen(true)} />,\n            minW: '40px',\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.zhLineName'),\n            value: lineName[0],\n            onChange: value => dispatch(setLineName([value, lineName[1]])),\n            minW: 130,\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.enLineName'),\n            value: lineName[1],\n            onChange: value => dispatch(setLineName([lineName[0], value])),\n            minW: 130,\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.lineNum'),\n            value: lineNum,\n            onChange: value => dispatch(setLineNum(value)),\n            hidden: ![RmgStyle.GZMTR].includes(style),\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.platformNum'),\n            value: platformNum || '',\n            onChange: value => dispatch(setPlatform(value)),\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.psdNum'),\n            value: psdNum,\n            onChange: value => dispatch(setPsdNum(value)),\n            hidden: ![RmgStyle.GZMTR].includes(style),\n        },\n        {\n            type: 'select',\n            label: t('StyleSidePanel.design.panelType'),\n            value: info_panel_type,\n            options: style === RmgStyle.GZMTR ? panelTypeGZMTROptions : panelTypeSHMetroOptions,\n            onChange: value => dispatch(setPanelType(value as PanelTypeGZMTR | PanelTypeShmetro)),\n            hidden: ![RmgStyle.GZMTR, RmgStyle.SHMetro].includes(style),\n        },\n        {\n            type: 'custom',\n            label: t('StyleSidePanel.design.direction'),\n            component: (\n                <RmgButtonGroup\n                    selections={directionSelections}\n                    defaultValue={direction}\n                    onChange={nextDirection => dispatch(setDirection(nextDirection))}\n                />\n            ),\n            minW: 'full',\n            oneLine: true,\n        },\n    ];\n\n    const staggerNameSelections = [\n        {\n            label: t('StyleSidePanel.design.alternatively'),\n            value: true,\n        },\n        {\n            label: t('StyleSidePanel.design.onOneSide'),\n            value: false,\n        },\n    ];\n\n    const mtrSpecifiedFields: RmgFieldsField[] = [\n        {\n            type: 'custom',\n            label: t('StyleSidePanel.design.nameDisplay'),\n            component: (\n                <HStack>\n                    <RmgButtonGroup\n                        selections={staggerNameSelections}\n                        defaultValue={namePosMTR.isStagger}\n                        onChange={value => dispatch(staggerStationNames(value))}\n                    />\n                    <Button\n                        size=\"xs\"\n                        variant=\"ghost\"\n                        leftIcon={<MdSwapVert />}\n                        onClick={() => dispatch(flipStationNames())}\n                    >\n                        {t('StyleSidePanel.design.flip')}\n                    </Button>\n                </HStack>\n            ),\n            minW: 'full',\n            oneLine: true,\n            hidden: ![RmgStyle.MTR].includes(style),\n        },\n        {\n            type: 'switch',\n            label: t('StyleSidePanel.design.legacyDestination'),\n            isChecked: customiseMTRDest.isLegacy,\n            onChange: checked => dispatch(toggleLineNameBeforeDestination(checked)),\n            hidden: ![RmgStyle.MTR].includes(style),\n            minW: 'full',\n            oneLine: true,\n        },\n        {\n            type: 'switch',\n            label: t('StyleSidePanel.design.overrideTerminal'),\n            isChecked: customiseMTRDest.terminal !== false,\n            onChange: checked => dispatch(customiseDestinationName(checked ? ['', ''] : false)),\n            hidden: ![RmgStyle.MTR].includes(style),\n            minW: 'full',\n            oneLine: true,\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.terminalZhName'),\n            value: customiseMTRDest.terminal ? customiseMTRDest.terminal[0] : '',\n            placeholder: '機場及博覽館',\n            onChange: value =>\n                dispatch(\n                    customiseDestinationName([value, customiseMTRDest.terminal ? customiseMTRDest.terminal[1] : ''])\n                ),\n            hidden: ![RmgStyle.MTR].includes(style) || customiseMTRDest.terminal === false,\n        },\n        {\n            type: 'input',\n            label: t('StyleSidePanel.design.terminalEnName'),\n            value: customiseMTRDest.terminal ? customiseMTRDest.terminal[1] : '',\n            placeholder: 'Airport and AsiaWorld-Expo',\n            onChange: value =>\n                dispatch(\n                    customiseDestinationName([customiseMTRDest.terminal ? customiseMTRDest.terminal[0] : '', value])\n                ),\n            hidden: ![RmgStyle.MTR].includes(style) || customiseMTRDest.terminal === false,\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('StyleSidePanel.design.title')}\n            </Heading>\n\n            <RmgFields fields={[...fields, ...mtrSpecifiedFields]} minW={130} />\n\n            <ColourModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                defaultTheme={theme}\n                onUpdate={nextTheme => dispatch(setTheme(nextTheme))}\n            />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { setLoop, setLoopBank, setLoopBottomFactor, setLoopLeftAndRightFactor } from '../../../redux/param/action';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\nexport default function LoopSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const { branches } = useRootSelector(state => state.helper);\n    const { loop, loop_info } = useRootSelector(state => state.param);\n    const { bank, left_and_right_factor, bottom_factor } = loop_info;\n\n    // loop line with 2 branches has no bottom_factor and a specialized left_and_right_factor_max\n    const arc: 'major' | 'minor' = 'minor';\n    const branch_stn_ids = branches\n        .flat()\n        .filter(\n            (\n                o => v =>\n                    (o[v] = (o[v] || 0) + 1) === 2\n            )({} as { [stn_id: string]: number })\n        ) // count each occurrence\n        .filter(stn_id => !['linestart', 'lineend'].includes(stn_id)); // find branch stations\n    const _ = Math.abs(branches[0].indexOf(branch_stn_ids[0]) - branches[0].indexOf(branch_stn_ids[1]));\n    const left_and_right_factor_max =\n        branches.length >= 2\n            ? // top length is fixed, change left_and_right_factor only\n              (arc === 'minor' ? Math.min : Math.max)(branches[0].length - 2 - _, _)\n            : Math.floor((branches[0].length - 2 - bottom_factor * 2) / 2);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'switch',\n            label: t('StyleSidePanel.loop.isLoop'),\n            isChecked: loop,\n            onChange: checked => dispatch(setLoop(checked)),\n            minW: 'full',\n            oneLine: true,\n        },\n        {\n            type: 'switch',\n            label: t('StyleSidePanel.loop.isBank'),\n            isChecked: bank,\n            onChange: checked => dispatch(setLoopBank(checked)),\n            minW: 'full',\n            oneLine: true,\n            hidden: !loop,\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.loop.leftRightFactor'),\n            value: left_and_right_factor,\n            min: 0,\n            max: left_and_right_factor_max,\n            onChange: val => dispatch(setLoopLeftAndRightFactor(Math.floor(val))),\n            hidden: !loop,\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.loop.bottomFactor'),\n            value: bottom_factor,\n            min: 0,\n            max: Math.floor((branches[0].length - 2 - left_and_right_factor * 2) / 2),\n            onChange: val => dispatch(setLoopBottomFactor(Math.floor(val))),\n            hidden: !loop || (loop && branches.length > 2),\n        },\n    ];\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('StyleSidePanel.loop.title')}\n            </Heading>\n\n            <RmgFields fields={fields} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { HStack, IconButton } from '@chakra-ui/react';\nimport { Note } from '../../../constants/constants';\nimport { MdDelete } from 'react-icons/md';\nimport { RmgCard, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\n\ninterface GZMTRNoteCardProps {\n    note: Note;\n    onUpdate?: (value: Note) => void;\n    onDelete?: () => void;\n}\n\nexport default function GZMTRNoteCard(props: GZMTRNoteCardProps) {\n    const { note, onUpdate, onDelete } = props;\n    const { t } = useTranslation();\n\n    const fields1: RmgFieldsField[] = [\n        {\n            type: 'textarea',\n            label: t('StyleSidePanel.note.zhNote'),\n            value: note[0],\n            onChange: value => onUpdate?.([value, note[1], note[2], note[3], note[4]]),\n        },\n        {\n            type: 'textarea',\n            label: t('StyleSidePanel.note.enNote'),\n            value: note[1],\n            onChange: value => onUpdate?.([note[0], value, note[2], note[3], note[4]]),\n        },\n        {\n            type: 'switch',\n            label: t('StyleSidePanel.note.border'),\n            isChecked: note[4],\n            onChange: value => onUpdate?.([note[0], note[1], note[2], note[3], value]),\n            oneLine: true,\n        },\n    ];\n\n    const fields2: RmgFieldsField[] = [\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.note.positionX'),\n            value: note[2],\n            min: 0,\n            max: 100,\n            onChange: value => onUpdate?.([note[0], note[1], value, note[3], note[4]]),\n        },\n        {\n            type: 'slider',\n            label: t('StyleSidePanel.note.positionY'),\n            value: note[3],\n            min: 0,\n            max: 100,\n            onChange: value => onUpdate?.([note[0], note[1], note[2], value, note[4]]),\n        },\n    ];\n\n    return (\n        <RmgCard direction=\"column\">\n            <RmgFields fields={fields1} minW=\"full\" />\n            <HStack spacing={0.5} sx={{ '&>div': { flex: 1 } }}>\n                <RmgFields fields={fields2} />\n\n                <IconButton\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    aria-label={t('StyleSidePanel.note.remove')}\n                    onClick={() => onDelete?.()}\n                    icon={<MdDelete />}\n                />\n            </HStack>\n        </RmgCard>\n    );\n}\n","import React from 'react';\nimport { Box, Button, Heading, VStack } from '@chakra-ui/react';\nimport GZMTRNoteCard from './gzmtr-note-card';\nimport { addNote, removeNote, updateNote } from '../../../redux/param/action';\nimport { MdAdd } from 'react-icons/md';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { useTranslation } from 'react-i18next';\n\nexport default function GZMTRNoteSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const notesGZMTR = useRootSelector(state => state.param.notesGZMTR);\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('StyleSidePanel.note.title')}\n            </Heading>\n\n            <VStack spacing={0.5}>\n                {notesGZMTR.map((note, i) => (\n                    <GZMTRNoteCard\n                        key={i}\n                        note={note}\n                        onUpdate={value => dispatch(updateNote(i, value))}\n                        onDelete={() => dispatch(removeNote(i))}\n                    />\n                ))}\n\n                <Button\n                    size=\"xs\"\n                    variant=\"ghost\"\n                    leftIcon={<MdAdd />}\n                    alignSelf=\"flex-end\"\n                    onClick={() => dispatch(addNote())}\n                >\n                    {t('StyleSidePanel.note.add')}\n                </Button>\n            </VStack>\n        </Box>\n    );\n}\n","import { Divider } from '@chakra-ui/react';\nimport React from 'react';\nimport { useRootSelector } from '../../../redux';\nimport { RmgStyle } from '../../../constants/constants';\nimport LayoutSection from './layout-section';\nimport DesignSection from './design-section';\nimport LoopSection from './loop-section';\nimport { RmgSidePanelBody } from '@railmapgen/rmg-components';\nimport GZMTRNoteSection from './gzmtr-note-section';\n\nexport default function StyleSidePanel() {\n    const { style } = useRootSelector(state => state.param);\n\n    return (\n        <RmgSidePanelBody>\n            <LayoutSection />\n\n            <Divider />\n\n            <DesignSection />\n\n            {style === RmgStyle.GZMTR && (\n                <>\n                    <Divider />\n\n                    <GZMTRNoteSection />\n                </>\n            )}\n\n            {style === RmgStyle.SHMetro && (\n                <>\n                    <Divider />\n\n                    <LoopSection />\n                </>\n            )}\n        </RmgSidePanelBody>\n    );\n}\n","import { StationDict } from './constants/constants';\n\n/**\n * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).\n */\nexport const getYShareMTR = (stnId: string, stnList: StationDict): -1 | 0 | 1 => {\n    if (\n        ['linestart', 'lineend'].includes(stnId) ||\n        stnList[stnId].parents.length > 1 ||\n        stnList[stnId].children.length > 1\n    ) {\n        return 0;\n    }\n    var stnPred = stnList[stnId].parents[0];\n    if (stnPred) {\n        // parent exist\n        if (stnList[stnPred].children.length === 1) {\n            // no sibling, then y same as parent\n            return getYShareMTR(stnPred, stnList);\n        } else {\n            // sibling exists, then y depends on its idx of being children\n            return stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n        }\n    } else {\n        // no parent, must be linestart\n        return 0;\n    }\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n    Alert,\n    AlertIcon,\n    Box,\n    Button,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { checkStationCouldBeRemoved, removeStation } from '../../redux/param/remove-station-action';\nimport { setSelectedStation, setSidePanelMode } from '../../redux/app/app-slice';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { Events, SidePanelMode } from '../../constants/constants';\nimport { removeInvalidColineOnRemoveStation } from '../../redux/param/coline-action';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface RemoveConfirmModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function RemoveConfirmModal(props: RemoveConfirmModalProps) {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n\n    const dispatch = useRootDispatch();\n    const selectedStation = useRootSelector(state => state.app.selectedStation);\n\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        if (!isOpen) {\n            setError(false);\n        }\n    }, [isOpen]);\n\n    const handleConfirm = () => {\n        const result = dispatch(checkStationCouldBeRemoved(selectedStation));\n        if (result) {\n            onClose();\n\n            // close side panel\n            dispatch(setSidePanelMode(SidePanelMode.CLOSE));\n\n            // reset selected station\n            dispatch(setSelectedStation('linestart'));\n\n            dispatch(removeInvalidColineOnRemoveStation(selectedStation));\n            dispatch(removeStation(selectedStation));\n        } else {\n            setError(true);\n        }\n\n        rmgRuntime.event(Events.REMOVE_STATION, { success: result });\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                {error && (\n                    <Alert status=\"error\" variant=\"solid\" size=\"xs\">\n                        <AlertIcon />\n                        {t('Unable to remove this station.')}\n                    </Alert>\n                )}\n                <Box position=\"relative\">\n                    <ModalHeader>{t('Remove station')}</ModalHeader>\n                    <ModalCloseButton />\n                </Box>\n\n                <ModalBody>{t('Are you sure to remove station? You cannot undo this action.')}</ModalBody>\n\n                <ModalFooter>\n                    <Button onClick={onClose}>{t('Cancel')}</Button>\n                    <Button colorScheme=\"primary\" onClick={handleConfirm} ml={3}>\n                        {t('Confirm')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import { RootDispatch, RootState } from '../index';\nimport { getYShareMTR } from '../../methods';\nimport { StationDict } from '../../constants/constants';\nimport { setStationsBulk } from './action';\n\n/**\n * Return false when current algo can not handle this kind of station removal.\n * MUST BE CALLED AND CHECKED BEFORE removeStation!!!\n */\nexport const checkStationCouldBeRemoved = (stationId: string) => {\n    return (dispatch: RootDispatch, getState: () => RootState): boolean => {\n        const { stn_list: stationList, current_stn_idx: currentStationIndex } = getState().param;\n\n        if (stationId === currentStationIndex) {\n            console.log('removeStation():: failed as current station cannot be deleted');\n            return false;\n        }\n\n        const { parents, children } = stationList[stationId];\n\n        if (Object.keys(stationList).length === 4) {\n            console.log('removeStation():: failed as only 2 stations remaining');\n            return false;\n        } else if (parents.length === 2 && children.length === 2) {\n            // Todo: rewrite, join two branches rather than reject?\n            console.log('removeStation():: failed as branches on both sides cannot be combined');\n            return false;\n        }\n\n        // reject if station is the last one on main branch\n        const isNotLastMainBranchStn = Object.keys(stationList).some(\n            id => ![stationId, 'linestart', 'lineend'].includes(id) && getYShareMTR(id, stationList) === 0\n        );\n        if (!isNotLastMainBranchStn) {\n            console.log('removeStation():: failed as selected station is the only station without siblings');\n            return false;\n        }\n\n        return true;\n    };\n};\n\nexport const removeStation = (stationId: string) => {\n    // checkStationCouldBeRemoved BEFORE removeStation!!!\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const stationList = getState().param.stn_list;\n        const { parents, children } = stationList[stationId];\n\n        let newStnList = JSON.parse(JSON.stringify(stationList)) as StationDict;\n\n        if (parents.length === 2 || children.length === 2) {\n            /**\n             * stn1 - stn2 - stn3\n             *         ^   \\\n             *               stn4\n             */\n            parents.forEach(parId => {\n                newStnList[parId].children = children;\n            });\n            children.forEach(childId => {\n                newStnList[childId].parents = parents;\n            });\n            if (parents.length === 1) {\n                newStnList[parents[0]].branch.right = newStnList[stationId].branch.right;\n            }\n            if (children.length === 1) {\n                newStnList[children[0]].branch.left = newStnList[stationId].branch.left;\n            }\n        } else if (stationList[parents[0]].children.length === 2 && stationList[children[0]].parents.length === 2) {\n            /**\n             * stn1 -     stn2    - stn3\n             *      \\      ^      /\n             *        stn4 - stn5\n             */\n            newStnList = {\n                ...stationList,\n                [parents[0]]: {\n                    ...stationList[parents[0]],\n                    children: stationList[parents[0]].children.filter(id => id !== stationId),\n                    branch: {\n                        ...stationList[parents[0]].branch,\n                        right: [],\n                    },\n                },\n                [children[0]]: {\n                    ...stationList[children[0]],\n                    parents: stationList[children[0]].parents.filter(id => id !== stationId),\n                    branch: {\n                        ...stationList[children[0]].branch,\n                        left: [],\n                    },\n                },\n            };\n        } else {\n            /**\n             * stn1 - stn2\n             *      \\\n             *        stn3 - stn4\n             *         ^\n             */\n\n            // parents have length 1\n            parents.forEach(parId => {\n                var idx = newStnList[parId].children.indexOf(stationId);\n                if (children.length) {\n                    newStnList[parId].children[idx] = children[0];\n                } else {\n                    // Right dest\n                    newStnList[parId].children.splice(idx, 1);\n                }\n\n                if (newStnList[parId].branch.right[1] === stationId) {\n                    newStnList[parId].branch.right[1] = children[0];\n                }\n            });\n\n            // children have length 1\n            children.forEach(childId => {\n                var idx = newStnList[childId].parents.indexOf(stationId);\n                if (parents.length) {\n                    newStnList[childId].parents[idx] = parents[0];\n                } else {\n                    // Left dest\n                    newStnList[childId].parents.splice(idx, 1);\n                }\n\n                if (newStnList[childId].branch.left[1] === stationId) {\n                    newStnList[childId].branch.left[1] = parents[0];\n                }\n            });\n        }\n\n        delete newStnList[stationId];\n        dispatch(setStationsBulk(newStnList));\n    };\n};\n","import { Button, HStack } from '@chakra-ui/react';\nimport { RmgSidePanelFooter } from '@railmapgen/rmg-components';\nimport React, { useState } from 'react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport RemoveConfirmModal from '../../modal/remove-confirm-modal';\nimport { setCurrentStation } from '../../../redux/param/action';\nimport { useTranslation } from 'react-i18next';\n\nexport default function StationSidePanelFooter() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedStation = useRootSelector(state => state.app.selectedStation);\n\n    const [isRemoveModalOpen, setIsRemoveModalOpen] = useState(false);\n\n    return (\n        <RmgSidePanelFooter>\n            <HStack>\n                <Button size=\"sm\" variant=\"outline\" onClick={() => dispatch(setCurrentStation(selectedStation))}>\n                    {t('StationSidePanel.footer.current')}\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" onClick={() => setIsRemoveModalOpen(true)}>\n                    {t('StationSidePanel.footer.remove')}\n                </Button>\n            </HStack>\n\n            <RemoveConfirmModal isOpen={isRemoveModalOpen} onClose={() => setIsRemoveModalOpen(false)} />\n        </RmgSidePanelFooter>\n    );\n}\n","import { RmgCard, RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport React, { useState } from 'react';\nimport { ColineInfo, InterchangeInfo, Theme } from '../../../constants/constants';\nimport ThemeButton from '../theme-button';\nimport ColourModal from '../../modal/colour-modal/colour-modal';\nimport { HStack, IconButton } from '@chakra-ui/react';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\n\ninterface ColineCardProps {\n    colineInfo: ColineInfo;\n    routeOptions: Record<string, string>;\n    onUpdateRoute?: (route: string) => void;\n    onUpdateColourInfo?: (colourInfo: InterchangeInfo) => void;\n    onDelete?: (colourIndex: number) => void;\n}\n\nexport default function ColineCard(props: ColineCardProps) {\n    const { colineInfo, routeOptions, onUpdateRoute, onUpdateColourInfo, onDelete } = props;\n    const { t } = useTranslation();\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const fields1: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: 'Route',\n            value: [colineInfo.from, colineInfo.to].join(','),\n            options: routeOptions,\n            onChange: value => onUpdateRoute?.(value as string),\n        },\n    ];\n\n    const fields2: RmgFieldsField[] = [\n        {\n            type: 'custom',\n            label: t('Colour'),\n            component: (\n                <ThemeButton\n                    theme={[\n                        colineInfo.colors[0][0],\n                        colineInfo.colors[0][1],\n                        colineInfo.colors[0][2],\n                        colineInfo.colors[0][3],\n                    ]}\n                    onClick={() => setIsModalOpen(true)}\n                />\n            ),\n        },\n        {\n            type: 'input',\n            label: t('Chinese name'),\n            value: colineInfo.colors[0][4],\n            minW: 120,\n            onChange: value =>\n                onUpdateColourInfo?.([\n                    colineInfo.colors[0][0],\n                    colineInfo.colors[0][1],\n                    colineInfo.colors[0][2],\n                    colineInfo.colors[0][3],\n                    value,\n                    colineInfo.colors[0][5],\n                ]),\n        },\n        {\n            type: 'input',\n            label: t('English name'),\n            value: colineInfo.colors[0][5],\n            minW: 120,\n            onChange: value =>\n                onUpdateColourInfo?.([\n                    colineInfo.colors[0][0],\n                    colineInfo.colors[0][1],\n                    colineInfo.colors[0][2],\n                    colineInfo.colors[0][3],\n                    colineInfo.colors[0][4],\n                    value,\n                ]),\n        },\n    ];\n\n    return (\n        <RmgCard direction=\"column\">\n            <RmgFields fields={fields1} minW=\"full\" />\n            <HStack spacing={0.5}>\n                <RmgFields fields={fields2} />\n\n                <IconButton\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    aria-label=\"Delete colour for route\"\n                    onClick={() => onDelete?.(0)}\n                    icon={<MdDelete />}\n                />\n            </HStack>\n\n            <ColourModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                defaultTheme={colineInfo.colors[0].slice(0, 4) as Theme}\n                onUpdate={theme => onUpdateColourInfo?.([...theme, colineInfo.colors[0][4], colineInfo.colors[0][5]])}\n            />\n        </RmgCard>\n    );\n}\n","import React from 'react';\nimport { Button, Heading, VStack } from '@chakra-ui/react';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport {\n    addColine,\n    findAllColinesInBranch,\n    getPossibleCombinations,\n    removeColineColor,\n    updateColine,\n    updateColineColor,\n} from '../../../redux/param/coline-action';\nimport ColineCard from './coline-card';\nimport { MdAdd } from 'react-icons/md';\nimport { MonoColour } from '../../../constants/constants';\nimport { setGlobalAlert } from '../../../redux/app/app-slice';\nimport { useTranslation } from 'react-i18next';\n\nexport default function ColineSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const { theme, stn_list: stationList } = useRootSelector(state => state.param);\n\n    const colineInfoList = dispatch(findAllColinesInBranch(selectedBranch));\n    const possibleCombinations = dispatch(getPossibleCombinations(selectedBranch));\n\n    const getStationPairDisplayName = (pair: [string, string]) => {\n        return pair.map(id => stationList[id].name.join(' - ')).join(' ~ ');\n    };\n\n    const routeOptions = possibleCombinations.reduce<Record<string, string>>(\n        (acc, cur) => ({\n            ...acc,\n            [cur.join(',')]: getStationPairDisplayName(cur),\n        }),\n        {}\n    );\n\n    const handleAddTrackSharing = () => {\n        console.log(\n            `ColineSection.handleAddTrackSharing():: Adding track sharing to branch ${selectedBranch} with default combination`,\n            possibleCombinations[0]\n        );\n        dispatch(\n            addColine(possibleCombinations[0][0], possibleCombinations[0][1], [\n                [theme[0], '', '#AAAAAA', MonoColour.white, '', ''],\n            ])\n        );\n    };\n\n    const handleUpdateRoute = (colineId: string) => (route: string) => {\n        const [from, to] = route.split(',');\n        console.log(`ColineSection.handleUpdateRoute():: Updating route, colineId=${colineId}, from=${from}, to=${to}`);\n\n        try {\n            dispatch(updateColine(colineId, from, to));\n        } catch {\n            dispatch(setGlobalAlert({ status: 'error', message: 'Unable to draw this share track.' }));\n        }\n    };\n\n    const handleDeleteColour = (colineId: string, colourIndex: number) => {\n        dispatch(removeColineColor(colineId, colourIndex));\n    };\n\n    return (\n        <VStack align=\"flex-start\" p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('BranchSidePanel.coline.title')}\n            </Heading>\n\n            {Object.entries(colineInfoList).map(([id, colineInfo]) => (\n                <ColineCard\n                    key={id}\n                    colineInfo={colineInfo}\n                    routeOptions={routeOptions}\n                    onUpdateRoute={handleUpdateRoute(id)}\n                    onUpdateColourInfo={colourInfo => dispatch(updateColineColor(id, 0, colourInfo))}\n                    onDelete={colourIndex => handleDeleteColour(id, colourIndex)}\n                />\n            ))}\n\n            {(selectedBranch === 0 || Object.keys(colineInfoList).length === 0) && (\n                <Button\n                    size=\"xs\"\n                    variant=\"ghost\"\n                    alignSelf=\"flex-end\"\n                    leftIcon={<MdAdd />}\n                    onClick={handleAddTrackSharing}\n                >\n                    {t('BranchSidePanel.coline.add')}\n                </Button>\n            )}\n        </VStack>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n} from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { Events, RmgStyle } from '../../constants/constants';\nimport { isColineBranch } from '../../redux/param/coline-action';\nimport { autoNumbering } from '../../redux/param/action';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface AutoNumModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function AutoNumModal(props: AutoNumModalProps) {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const { style, stn_list: stationList } = useRootSelector(state => state.param);\n    const branches = useRootSelector(state => state.helper.branches);\n\n    const [where, setWhere] = useState(selectedBranch);\n    const [from, setFrom] = useState('1');\n    const [maxLength, setMaxLength] = useState('2');\n    const [sort, setSort] = useState<'asc' | 'desc'>('asc');\n\n    useEffect(() => {\n        setWhere(selectedBranch);\n    }, [selectedBranch]);\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('AutoNumModal.where'),\n            value: where,\n            options: {\n                ...branches.reduce(\n                    (acc, cur, idx) => ({\n                        ...acc,\n                        [idx]:\n                            idx === 0\n                                ? t('AutoNumModal.main')\n                                : style !== RmgStyle.SHMetro || !isColineBranch(cur, stationList)\n                                ? t('AutoNumModal.branch') + ' ' + idx\n                                : t('AutoNumModal.external') + ' ' + idx,\n                    }),\n                    {}\n                ),\n            },\n            onChange: value => setWhere(value as number),\n        },\n        {\n            type: 'input',\n            label: t('AutoNumModal.from'),\n            value: from,\n            validator: value => !isNaN(Number(value)),\n            onChange: setFrom,\n            debouncedDelay: 0,\n        },\n        {\n            type: 'input',\n            label: t('AutoNumModal.maxLength'),\n            validator: value => !isNaN(Number(value)),\n            value: maxLength,\n            onChange: setMaxLength,\n            debouncedDelay: 0,\n        },\n        {\n            type: 'select',\n            label: t('AutoNumModal.sort'),\n            value: sort,\n            options: {\n                asc: t('AutoNumModal.asc'),\n                desc: t('AutoNumModal.desc'),\n            },\n            onChange: value => setSort(value as 'asc' | 'desc'),\n        },\n    ];\n\n    const handleSubmit = () => {\n        dispatch(autoNumbering(where, Number(from), Number(maxLength), sort));\n        onClose();\n        rmgRuntime.event(Events.AUTO_NUMBERING, {});\n    };\n\n    const isSubmitDisabled = !from || !maxLength || isNaN(Number(from)) || isNaN(Number(maxLength));\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('AutoNumModal.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"primary\" isDisabled={isSubmitDisabled} onClick={handleSubmit}>\n                        {t('Confirm')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import { RootDispatch, RootState } from '..';\nimport { Direction, StationDict } from '../../constants/constants';\nimport { setStationsBulk } from './action';\n\nexport const getBranchType = (branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): 1 | 2 => {\n        const branches = getState().helper.branches;\n        const branch = branches[branchIndex];\n\n        if (branch.includes('linestart') || branch.includes('lineend')) {\n            return 1;\n        } else {\n            return 2;\n        }\n    };\n};\n\nexport const getPossibleStations = (branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): string[] => {\n        const { branches } = getState().helper;\n        const mainBranch = branches[0];\n        const branch = branches[branchIndex];\n        return mainBranch.slice(mainBranch.indexOf(branch[0]) + 1, mainBranch.indexOf(branch.slice(-1)[0]));\n    };\n};\n\nexport const isStationValid2ConnectBranch = (stationId: string, branchIndex: number) => {\n    return (dispatch: RootDispatch): boolean => {\n        const branchType = dispatch(getBranchType(branchIndex));\n\n        if (branchType === 2) {\n            console.log('isStationValid2ConnectBranch():: failed as current branch has 2 connected ends');\n            return false;\n        }\n\n        const possibleStations = dispatch(getPossibleStations(branchIndex));\n\n        if (!possibleStations.includes(stationId)) {\n            console.log('isStationValid2ConnectBranch():: failed as the target station is invalid');\n            return false;\n        }\n        return true;\n    };\n};\n\nexport const connect2MainLine = (stationId: string, branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): boolean => {\n        const isValid = dispatch(isStationValid2ConnectBranch(stationId, branchIndex));\n        if (!isValid) {\n            return false;\n        }\n        const { branches } = getState().helper;\n        const stationList = getState().param.stn_list;\n        const branch = branches[branchIndex];\n\n        if (branch[0] === 'linestart') {\n            const nextStationList: StationDict = {\n                ...stationList,\n                [branch[1]]: {\n                    ...stationList[branch[1]],\n                    parents: [stationId],\n                },\n                [stationId]: {\n                    ...stationList[stationId],\n                    children: stationList.linestart.children.map(id =>\n                        id === branch[1] ? id : stationList[stationId].children[0]\n                    ),\n                    branch: {\n                        left: [],\n                        right: stationList.linestart.branch.right,\n                    },\n                },\n                linestart: {\n                    ...stationList.linestart,\n                    children: stationList.linestart.children.filter(id => id !== branch[1]),\n                    branch: {\n                        left: [],\n                        right: [],\n                    },\n                },\n            };\n            dispatch(setStationsBulk(nextStationList));\n            return true;\n        } else {\n            const seconndLastId: string = branch.slice(-2)[0];\n            const nextStationList: StationDict = {\n                ...stationList,\n                [seconndLastId]: {\n                    ...stationList[seconndLastId],\n                    children: [stationId],\n                },\n                [stationId]: {\n                    ...stationList[stationId],\n                    parents: stationList.lineend.parents.map(id =>\n                        id === seconndLastId ? id : stationList[stationId].parents[0]\n                    ),\n                    branch: {\n                        right: [],\n                        left: stationList.lineend.branch.left,\n                    },\n                },\n                lineend: {\n                    ...stationList.lineend,\n                    parents: stationList.lineend.parents.filter(id => id !== seconndLastId),\n                    branch: {\n                        left: [],\n                        right: [],\n                    },\n                },\n            };\n            dispatch(setStationsBulk(nextStationList));\n            return true;\n        }\n    };\n};\n\nexport const getPossibleDirection = (branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): Direction[] => {\n        const { branches } = getState().helper;\n        const stationList = getState().param.stn_list;\n        const mainBranch = branches[0];\n        const branch = branches[branchIndex];\n        const branchType = dispatch(getBranchType(branchIndex));\n        if (branchType !== 2) {\n            console.log('getPossibleDirection():: failed as there is no possible direction');\n            return [];\n        }\n        const beginStation = mainBranch.indexOf(branch[0]);\n        const leftStationIdList = mainBranch.slice(0, beginStation);\n        const endStation = mainBranch.indexOf(branch.slice(-1)[0]);\n        const rightStationIdList = mainBranch.slice(endStation + 1);\n\n        const isLeftPossible = leftStationIdList.every(stationId => {\n            return stationList[stationId].children.length <= 1 && stationList[stationId].parents.length <= 1;\n        });\n\n        const isRightPossible = rightStationIdList.every(stationId => {\n            return stationList[stationId].children.length <= 1 && stationList[stationId].parents.length <= 1;\n        });\n\n        if (isLeftPossible) {\n            if (isRightPossible) {\n                return [Direction.left, Direction.right];\n            } else {\n                return [Direction.left];\n            }\n        } else {\n            if (isRightPossible) {\n                return [Direction.right];\n            } else {\n                return [];\n            }\n        }\n    };\n};\n\nexport const disconnectFromMainLine = (direction: Direction, branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): boolean => {\n        const directionList = dispatch(getPossibleDirection(branchIndex));\n        if (!directionList.includes(direction)) {\n            console.log('disconnectFromMainLine():: failed as the aim direction is not in the possible direction list');\n            return false;\n        }\n        const { branches } = getState().helper;\n        const stationList = getState().param.stn_list;\n        const mainBranch = branches[0];\n        const branch = branches[branchIndex];\n\n        if (direction === Direction.left) {\n            const beginStation = branch[0];\n\n            const nextStationList: StationDict = {\n                ...stationList,\n                [branch[1]]: {\n                    ...stationList[branch[1]],\n                    parents: ['linestart'],\n                },\n                [beginStation]: {\n                    ...stationList[beginStation],\n                    children: stationList[beginStation].children.filter(id => id !== branch[1]),\n                    branch: {\n                        right: [],\n                        left: [],\n                    },\n                },\n                linestart: {\n                    ...stationList.linestart,\n                    children: stationList[beginStation].children.map(id => (id === branch[1] ? id : mainBranch[1])),\n                    branch: {\n                        left: [],\n                        right: stationList[beginStation].branch.right,\n                    },\n                },\n            };\n            dispatch(setStationsBulk(nextStationList));\n            return true;\n        } else {\n            const endStation = branch.slice(-1)[0];\n            const secondEndStation = branch.slice(-2)[0];\n            const nextStationList: StationDict = {\n                ...stationList,\n                [secondEndStation]: {\n                    ...stationList[secondEndStation],\n                    children: ['lineend'],\n                },\n                [endStation]: {\n                    ...stationList[endStation],\n                    parents: stationList[endStation].parents.filter(id => id !== secondEndStation),\n                    branch: {\n                        right: [],\n                        left: [],\n                    },\n                },\n                lineend: {\n                    ...stationList.lineend,\n                    parents: stationList[endStation].parents.map(id =>\n                        id === secondEndStation ? id : mainBranch.slice(-2)[0]\n                    ),\n                    branch: {\n                        right: [],\n                        left: stationList[endStation].branch.left,\n                    },\n                },\n            };\n            dispatch(setStationsBulk(nextStationList));\n            return true;\n        }\n    };\n};\n","import { Button, Flex } from '@chakra-ui/react';\nimport { RmgCard, RmgDebouncedInput, RmgLabel, RmgSelect } from '@railmapgen/rmg-components';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Direction, Events } from '../../../constants/constants';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { setGlobalAlert } from '../../../redux/app/app-slice';\nimport {\n    connect2MainLine,\n    disconnectFromMainLine,\n    getBranchType,\n    getPossibleDirection,\n    getPossibleStations,\n} from '../../../redux/param/connect-disconnect-branch';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface ConnectDisconnectCardProps {\n    direction: Direction;\n}\n\nexport default function ConnectDisconnectCard(props: ConnectDisconnectCardProps) {\n    const { direction } = props;\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const { branches } = useRootSelector(state => state.helper);\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const { style, stn_list } = useRootSelector(state => state.param);\n\n    const [isEditing, setIsEditing] = useState(false);\n    const [selection, setSelection] = useState('');\n\n    const trimedBranch = branches[selectedBranch].filter(id => !['linestart', 'lineend'].includes(id));\n    const branchEndId = direction === Direction.left ? trimedBranch[0] : trimedBranch.slice(-1)[0];\n    const branchEndInfo = stn_list[branchEndId];\n\n    const possibleStations = dispatch(getPossibleStations(selectedBranch));\n    const branchType = dispatch(getBranchType(selectedBranch));\n    const possibleDirection = dispatch(getPossibleDirection(selectedBranch));\n\n    const isConnectable = branchType === 1 && !branches[0].includes(branchEndId);\n    const isDisconnectable = possibleDirection.includes(direction);\n\n    const options = possibleStations.reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stn_list[cur]?.name.join(' - '),\n        }),\n        { '': t('Please select...') }\n    );\n\n    const handleConnect = () => {\n        const result = dispatch(connect2MainLine(selection, selectedBranch));\n        if (result) {\n            setIsEditing(false);\n        } else {\n            dispatch(setGlobalAlert({ status: 'error', message: t('Unable to connect to main line.') }));\n        }\n        rmgRuntime.event(Events.CONNECT_BRANCH, { style, success: result });\n    };\n\n    const handleDisconnect = () => {\n        const result = dispatch(disconnectFromMainLine(direction, selectedBranch));\n        if (!result) {\n            dispatch(setGlobalAlert({ status: 'error', message: t('Unable to disconnect from main line.') }));\n        }\n        rmgRuntime.event(Events.DISCONNECT_BRANCH, { style, success: result });\n    };\n\n    return (\n        <RmgCard direction=\"column\">\n            <Flex alignItems=\"center\">\n                <RmgLabel label={t('Station name')} flex={1}>\n                    <RmgDebouncedInput defaultValue={branchEndInfo.name.join(' ')} isDisabled={true} />\n                </RmgLabel>\n\n                {isEditing ? (\n                    <Button mx={1} size=\"sm\" variant=\"outline\" onClick={() => setIsEditing(false)}>\n                        {t('Cancel')}\n                    </Button>\n                ) : isConnectable ? (\n                    <Button mx={1} size=\"sm\" variant=\"solid\" colorScheme=\"primary\" onClick={() => setIsEditing(true)}>\n                        {t('Connect to main line')}\n                    </Button>\n                ) : (\n                    <Button\n                        mx={1}\n                        size=\"sm\"\n                        variant=\"solid\"\n                        colorScheme=\"primary\"\n                        onClick={handleDisconnect}\n                        isDisabled={!isDisconnectable}\n                    >\n                        {t('Disconnect from main line')}\n                    </Button>\n                )}\n            </Flex>\n\n            {isEditing && (\n                <Flex alignItems=\"center\">\n                    <RmgLabel label={t('Target station')} flex={1}>\n                        <RmgSelect\n                            defaultValue={selection}\n                            options={options}\n                            disabledOptions={['']}\n                            onChange={({ target: { value } }) => setSelection(value)}\n                        />\n                    </RmgLabel>\n\n                    <Button\n                        mx={1}\n                        size=\"sm\"\n                        variant=\"solid\"\n                        colorScheme=\"primary\"\n                        onClick={handleConnect}\n                        isDisabled={!selection}\n                    >\n                        {t('Confirm')}\n                    </Button>\n                </Flex>\n            )}\n        </RmgCard>\n    );\n}\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Button, Flex, Heading } from '@chakra-ui/react';\nimport { MdCached, MdFilter1 } from 'react-icons/md';\nimport AutoNumModal from '../../modal/auto-num-modal';\nimport { useRootDispatch, useRootSelector } from '../../../redux';\nimport { Direction, Events, RmgStyle } from '../../../constants/constants';\nimport { reverseStations } from '../../../redux/param/action';\nimport ConnectDisconnectCard from './connect-disconnect-card';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\nexport default function ActionSection() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const style = useRootSelector(state => state.param.style);\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const [isAutoNumModalOpen, setIsAutoNumModalOpen] = useState(false);\n\n    const handleReverseStations = () => {\n        dispatch(reverseStations(style === RmgStyle.SHMetro));\n        rmgRuntime.event(Events.REVERSE_STATIONS, { style });\n    };\n\n    return (\n        <Box p={1}>\n            <Heading as=\"h5\" size=\"sm\">\n                {t('BranchSidePanel.action.title')}\n            </Heading>\n\n            <Flex\n                wrap=\"wrap\"\n                sx={{\n                    p: 1,\n\n                    '&> *': {\n                        flexShrink: 0,\n                        flexBasis: '100%',\n\n                        '&:not(:first-child)': {\n                            marginTop: 2,\n                        },\n                    },\n                }}\n            >\n                {selectedBranch !== 0 && style !== RmgStyle.SHMetro && (\n                    <>\n                        <Heading as=\"h6\" size=\"xs\">\n                            {t('Branch left end')}\n                        </Heading>\n                        <ConnectDisconnectCard direction={Direction.left} />\n                        <Heading as=\"h6\" size=\"xs\">\n                            {t('Branch right end')}\n                        </Heading>\n                        <ConnectDisconnectCard direction={Direction.right} />\n                    </>\n                )}\n\n                {style === RmgStyle.GZMTR && (\n                    <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        leftIcon={<MdFilter1 />}\n                        alignSelf=\"flex-end\"\n                        onClick={() => setIsAutoNumModalOpen(true)}\n                    >\n                        {t('BranchSidePanel.action.autoNum')}\n                    </Button>\n                )}\n\n                <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    leftIcon={<MdCached />}\n                    alignSelf=\"flex-end\"\n                    onClick={handleReverseStations}\n                >\n                    {style === RmgStyle.SHMetro\n                        ? t('BranchSidePanel.action.flip')\n                        : t('BranchSidePanel.action.reverse')}\n                </Button>\n            </Flex>\n\n            <AutoNumModal isOpen={isAutoNumModalOpen} onClose={() => setIsAutoNumModalOpen(false)} />\n        </Box>\n    );\n}\n","import { RmgSidePanelBody } from '@railmapgen/rmg-components';\nimport React from 'react';\nimport ColineSection from './coline-section';\nimport { Divider } from '@chakra-ui/react';\nimport ActionSection from './action-section';\nimport { useRootSelector } from '../../../redux';\nimport { RmgStyle } from '../../../constants/constants';\nimport { isColineBranch } from '../../../redux/param/coline-action';\n\nexport default function BranchSidePanel() {\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const { style, stn_list: stationList } = useRootSelector(state => state.param);\n    const branches = useRootSelector(state => state.helper.branches);\n\n    return (\n        <RmgSidePanelBody>\n            {style === RmgStyle.SHMetro &&\n                (selectedBranch === 0 || isColineBranch(branches[selectedBranch], stationList)) && (\n                    <>\n                        <ColineSection />\n                        <Divider />\n                    </>\n                )}\n\n            <ActionSection />\n        </RmgSidePanelBody>\n    );\n}\n","import React, { ReactNode } from 'react';\nimport { useRootSelector } from '../../redux';\nimport { setSidePanelMode } from '../../redux/app/app-slice';\nimport { useDispatch } from 'react-redux';\nimport { SidePanelMode } from '../../constants/constants';\nimport StationSidePanel from './station-side-panel/station-side-panel';\nimport StyleSidePanel from './style-side-panel/style-side-panel';\nimport { RmgMultiLineString, RmgSidePanel, RmgSidePanelHeader } from '@railmapgen/rmg-components';\nimport StationSidePanelFooter from './station-side-panel/station-side-panel-footer';\nimport BranchSidePanel from './branch-side-panel/branch-side-panel';\nimport { useTranslation } from 'react-i18next';\n\nconst SIDE_PANEL_WIDTH = 375;\n\nexport default function SidePanel() {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const { sidePanelMode, selectedStation } = useRootSelector(state => state.app);\n    const name = useRootSelector(state => state.param.stn_list[selectedStation]?.name);\n\n    const mode: Record<SidePanelMode, { header: ReactNode; body?: ReactNode; footer?: ReactNode }> = {\n        STATION: {\n            header: <RmgMultiLineString text={name?.join(' - ') || ''} />,\n            body: <StationSidePanel />,\n            footer: <StationSidePanelFooter />,\n        },\n        STYLE: { header: t('StyleSidePanel.header'), body: <StyleSidePanel /> },\n        BRANCH: { header: t('BranchSidePanel.header'), body: <BranchSidePanel /> },\n        CLOSE: { header: 'Close' },\n    };\n\n    const handleClose = () => {\n        dispatch(setSidePanelMode(SidePanelMode.CLOSE));\n    };\n\n    return (\n        <RmgSidePanel isOpen={sidePanelMode !== SidePanelMode.CLOSE} width={SIDE_PANEL_WIDTH} header=\"Dummy header\">\n            <RmgSidePanelHeader onClose={handleClose}>{mode[sidePanelMode].header}</RmgSidePanelHeader>\n            {mode[sidePanelMode]?.body}\n            {mode[sidePanelMode]?.footer}\n        </RmgSidePanel>\n    );\n}\n","export const downloadAs = (filename: string, type: string, data: any) => {\n    const blob = new Blob([data], { type });\n    downloadBlobAs(filename, blob);\n};\n\nexport const downloadBlobAs = (filename: string, blob: Blob) => {\n    const url = window.URL.createObjectURL(blob);\n\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n};\n\nexport const readFileAsText = (file: File) => {\n    return new Promise((resolve: (text: string) => void) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.readAsText(file);\n    });\n};\n\nexport const isSafari = () => {\n    return navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');\n};\n","import { CanvasType, RmgStyle } from '../constants/constants';\nimport { isSafari } from './utils';\n\nexport const cloneSvgCanvas = async (\n    canvas: CanvasType,\n    rmgStyle: RmgStyle,\n    isTransparent?: boolean,\n    isShowBorder?: boolean,\n    scale?: number\n): Promise<SVGSVGElement> => {\n    let [, thisSVGHeight] = ['--rmg-svg-width', '--rmg-svg-height']\n        .map(\n            key =>\n                (document.querySelector(`svg#${canvas}`) as SVGSVGElement).style.getPropertyValue(key).match(/\\d+/g)![0]\n        )\n        .map(Number);\n\n    const elem = document.querySelector(`svg#${canvas}`)!.cloneNode(true) as SVGSVGElement;\n    // elem.setAttribute('width', (thisSVGWidth * scaleFactor).toString());\n    elem.setAttribute('height', ((thisSVGHeight * (scale || 100)) / 100).toString());\n    elem.style.setProperty('all', 'initial');\n\n    ['share']\n        .map(tag =>\n            [\n                ...(\n                    [...document.querySelectorAll('link')].filter(l => l.id === 'css_' + tag)[0]?.sheet as CSSStyleSheet\n                ).cssRules,\n            ]\n                .map(rule => rule.cssText)\n                .join(' ')\n        )\n        .forEach(txt => {\n            let s = document.createElement('style');\n            s.textContent = txt;\n            elem.prepend(s);\n        });\n\n    elem.querySelector('rect#canvas-border')?.setAttribute('stroke', isShowBorder ? 'black' : 'none');\n    elem.querySelector('rect#canvas-bg')?.setAttribute('fill', isTransparent ? 'none' : 'white');\n\n    if (rmgStyle === RmgStyle.MTR) {\n        try {\n            const uris = await getBase64FontFace(elem);\n            const s = document.createElement('style');\n            s.textContent = uris.join('\\n');\n            elem.prepend(s);\n        } catch (err) {\n            alert('Failed to fonts. Fonts in the exported PNG will be missing.');\n            console.error(err);\n        }\n    }\n\n    return elem;\n};\n\n/**\n * Convert a `Blob` into Base64 data URL.\n * @param blob\n */\nconst readBlobAsDataURL = (blob: Blob): Promise<string> => {\n    return new Promise((resolve: (value: string) => void) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.readAsDataURL(blob);\n    });\n};\n\nconst matchCssRuleByFontFace = (rules: CSSFontFaceRule[], font: FontFace): CSSFontFaceRule | undefined => {\n    return rules.find(rule => {\n        const cssStyle = rule.style as any;\n        return (\n            cssStyle.fontFamily.replace(/^\"(.+)\"$/, '$1') === font.family && cssStyle.unicodeRange === font.unicodeRange\n        );\n    });\n};\n\nexport const getBase64FontFace = async (svgEl: SVGSVGElement): Promise<string[]> => {\n    const uniqueCharacters = Array.from(\n        new Set(\n            [\n                ...svgEl.querySelectorAll<SVGElement>('.rmg-name__zh'),\n                ...svgEl.querySelectorAll<SVGElement>('.rmg-name__en'),\n            ]\n                .map(el => el.innerHTML)\n                .join('')\n                .replace(/[\\s]/g, '')\n        )\n    ).join('');\n\n    const fontFaceList = await document.fonts.load('80px GenYoMin TW, Vegur', uniqueCharacters);\n    const cssRules = Array.from(\n        (document.querySelector<HTMLLinkElement>('link#css_share')!.sheet!.cssRules[0] as CSSImportRule).styleSheet\n            .cssRules\n    ) as CSSFontFaceRule[];\n    const distinctCssRules = fontFaceList.reduce<CSSFontFaceRule[]>((acc, cur) => {\n        const matchedRule = matchCssRuleByFontFace(cssRules, cur);\n        if (matchedRule) {\n            const existence = acc.find(rule => {\n                const ruleStyle = rule.style as any;\n                const matchedStyle = matchedRule.style as any;\n                return (\n                    ruleStyle.fontFamily === matchedStyle.fontFamily &&\n                    ruleStyle.unicodeRange === matchedStyle.unicodeRange\n                );\n            });\n            return existence ? acc : acc.concat(matchedRule);\n        } else {\n            return acc;\n        }\n    }, []);\n\n    return await Promise.all(\n        distinctCssRules.map(async cssRule => {\n            try {\n                const fontResp = await fetch(getAbsoluteUrl(cssRule));\n                const fontDataUri = await readBlobAsDataURL(await fontResp.blob());\n                return cssRule.cssText.replace(/src:[ \\w('\",\\-:/.)]+;/g, `src: url('${fontDataUri}'); `);\n            } catch (err) {\n                console.error(err);\n                return '';\n            }\n        })\n    );\n};\n\nexport const getAbsoluteUrl = (cssRule: CSSFontFaceRule) => {\n    const ruleStyleSrc = (cssRule.style as any).src;\n    return isSafari()\n        ? ruleStyleSrc.replace(/^url\\(\"([\\S]+)\"\\).*$/, '$1')\n        : process.env.PUBLIC_URL + '/styles/' + ruleStyleSrc.match(/^url\\(\"([\\S*]+)\"\\)/)?.[1];\n};\n\nexport const test = async (svgEl: SVGSVGElement, scale: number, isWait: boolean): Promise<Blob> => {\n    let svgW = svgEl.viewBox.baseVal.width;\n    let svgH = svgEl.viewBox.baseVal.height;\n\n    // svgEl.removeAttribute('height');\n\n    let canvas = document.querySelectorAll('canvas')[0];\n    canvas.width = Number(svgW) * window.devicePixelRatio * scale;\n    canvas.height = Number(svgH) * window.devicePixelRatio * scale;\n\n    svgEl.setAttribute('width', canvas.width.toString());\n    svgEl.setAttribute('height', canvas.height.toString());\n\n    let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // bypass Chrome min font size (to be improved)\n\n    svgEl.querySelectorAll('.rmg-name__en.rmg-name__mtr--station').forEach(el => el.setAttribute('font-size', '11px'));\n\n    svgEl\n        .querySelectorAll('.rmg-name__en.rmg-name__gzmtr--next2-dest')\n        .forEach(el => el.setAttribute('font-size', '8.5px'));\n\n    // svgEl\n    //     .querySelectorAll('text:not([font-size]), tspan:not([font-size])')\n    //     .forEach((el) => el.setAttribute('font-size', window.getComputedStyle(el).fontSize));\n\n    svgEl.querySelectorAll('text, tspan').forEach(el => {\n        let elStyle = window.getComputedStyle(el);\n        el.setAttribute('font-family', elStyle.fontFamily);\n        el.setAttribute('fill', elStyle.fill);\n        el.setAttribute('dominant-baseline', elStyle.dominantBaseline);\n        el.setAttribute('text-anchor', elStyle.textAnchor || '');\n        // el.removeAttribute('class');\n    });\n\n    // https://stackoverflow.com/questions/46399223/async-await-in-image-loading/52851789\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onload = () => {\n            setTimeout(\n                () => {\n                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n                    canvas.toBlob(blob => resolve(blob!), 'image/png');\n                },\n                isWait ? 2000 : 0\n            );\n        };\n        img.onerror = reject;\n        img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgEl.outerHTML)));\n    });\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n    Button,\n    HStack,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n} from '@chakra-ui/react';\nimport { canvasConfig, CanvasType, Events, RmgStyle } from '../../constants/constants';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport JSZip from 'jszip';\nimport { setCurrentStation } from '../../redux/param/action';\nimport { cloneSvgCanvas, test } from '../../util/export-utils';\nimport { downloadAs, downloadBlobAs, isSafari } from '../../util/utils';\nimport { useTranslation } from 'react-i18next';\nimport { waitForMs } from '../../utils';\nimport { setLoadingProgress, stopLoading } from '../../redux/app/app-slice';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface DownloadModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function DownloadModal(props: DownloadModalProps) {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n\n    const dispatch = useRootDispatch();\n\n    const [canvasToDownload, setCanvasToDownload] = useState('');\n    const [isTransparent, setIsTransparent] = useState(false);\n    const [isShowBorder, setIsShowBorder] = useState(false);\n    const [scale, setScale] = useState(100);\n    const [format, setFormat] = useState('png');\n\n    const canvasToShow = useRootSelector(state => state.app.canvasToShow);\n    const {\n        style,\n        stn_list: stationList,\n        current_stn_idx: currentStationId,\n        line_name: lineName,\n    } = useRootSelector(state => state.param);\n\n    useEffect(() => {\n        // reset canvas to download if on-screen canvas changed\n        if (canvasToDownload !== '' && !canvasToShow.includes(canvasToDownload as CanvasType)) {\n            setCanvasToDownload('');\n        }\n    }, [canvasToShow]);\n\n    const canvasOptions = canvasConfig[style].reduce<Record<string, string>>(\n        (acc, cur) => {\n            if (canvasToShow.includes(cur)) {\n                return { ...acc, [cur]: t('CanvasType.' + cur) };\n            } else {\n                return { ...acc };\n            }\n        },\n        { '': t('DownloadModal.pleaseSelect') }\n    );\n\n    const scaleOptions = [25, 33, 50, 67, 75, 80, 90, 100, 110, 125, 150, 175, 200, 250, 300, 400, 500].reduce<\n        Record<number, string>\n    >(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: `${cur}%`,\n        }),\n        {}\n    );\n\n    const formatOptions = {\n        png: t('DownloadModal.png'),\n        svg: t('DownloadModal.svg'),\n    };\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('DownloadModal.canvas'),\n            value: canvasToDownload,\n            options: canvasOptions,\n            disabledOptions: [''],\n            onChange: value => setCanvasToDownload(value as CanvasType),\n            minW: 'full',\n        },\n        {\n            type: 'switch',\n            label: t('DownloadModal.transparent'),\n            isChecked: isTransparent,\n            onChange: setIsTransparent,\n            oneLine: true,\n            minW: 'full',\n        },\n        {\n            type: 'switch',\n            label: t('DownloadModal.showBorder'),\n            isChecked: isShowBorder,\n            onChange: setIsShowBorder,\n            oneLine: true,\n            minW: 'full',\n        },\n        {\n            type: 'select',\n            label: t('DownloadModal.scale'),\n            value: scale,\n            options: scaleOptions,\n            onChange: value => setScale(value as number),\n        },\n        {\n            type: 'select',\n            label: t('DownloadModal.format'),\n            value: format,\n            options: formatOptions,\n            onChange: value => setFormat(value as string),\n        },\n    ];\n\n    const handleDownload = async (option: 'current' | 'all') => {\n        dispatch(setLoadingProgress(0));\n        const stationIdListToDownload =\n            option === 'current'\n                ? [currentStationId]\n                : Object.keys(stationList).filter(id => !['linestart', 'lineend'].includes(id));\n\n        const zip = new JSZip();\n\n        for (const index in stationIdListToDownload) {\n            dispatch(setLoadingProgress(((Number(index) + 1) / stationIdListToDownload.length) * 100));\n\n            const stnId = stationIdListToDownload[index];\n            // wait for svg elements updated for station A before we dispatch the current station to B.\n            dispatch(setCurrentStation(stnId));\n            await waitForMs(500);\n\n            const elem = await cloneSvgCanvas(\n                canvasToDownload as CanvasType,\n                style,\n                isTransparent,\n                isShowBorder,\n                scale\n            );\n\n            // append svg to the document so the bbox will be loaded correctly\n            // (but not for gzmtr and have no idea why)\n            document.body.appendChild(elem);\n\n            const filename = `rmg.${stnId}.${stationList[stnId].name[0]}.${stationList[stnId].name[1]}`.replaceAll(\n                /\\\\|\\/|\\||\\*|:|\\?|<|>|\"/g,\n                '_'\n            ); // forbidden characters on windows \\ / : * ? \" < > |\n            if (format === 'png') {\n                const isWait = isSafari() && index === '0';\n                const blob = await test(elem, scale / 100, isWait);\n\n                if (stationIdListToDownload.length > 1) {\n                    // batch download and split base64 for this\n                    // https://stackoverflow.com/questions/31305485/export-resized-image-in-canvas-to-new-jszip-package\n                    zip.file(`${filename}.png`, blob);\n                } else {\n                    downloadBlobAs(`${filename}.png`, blob);\n                }\n            } else if (format === 'svg') {\n                elem.removeAttribute('height');\n                const data = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(elem.outerHTML)));\n\n                if (stationIdListToDownload.length > 1) {\n                    zip.file(`${filename}.svg`, data.split('base64,')[1], { base64: true });\n                } else {\n                    downloadAs(filename + '.svg', 'image/svg+xml', elem.outerHTML);\n                }\n            }\n\n            // don't forget to release it after use\n            document.body.removeChild(elem);\n        }\n\n        // generate the zip for batch download\n        if (stationIdListToDownload.length > 1) {\n            const zipData = await zip.generateAsync({ type: 'blob' });\n            const filename = `rmg.${lineName[0]}.${lineName[1]}.zip`.replaceAll(' ', '_');\n            downloadBlobAs(filename, zipData);\n        }\n\n        // event\n        rmgRuntime.event(Events.DOWNLOAD_IMAGES, { canvasToDownload, style, option, format });\n\n        // revert to original station\n        dispatch(setCurrentStation(currentStationId));\n        dispatch(stopLoading());\n        onClose();\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('DownloadModal.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <HStack>\n                        <Button\n                            colorScheme=\"primary\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDownload('current')}\n                            disabled={!canvasToDownload}\n                        >\n                            {t('DownloadModal.downloadOne')}\n                        </Button>\n                        {style !== RmgStyle.GZMTR && (\n                            <Button\n                                colorScheme=\"primary\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleDownload('all')}\n                                disabled={!canvasToDownload}\n                            >\n                                {t('DownloadModal.downloadAll')}\n                            </Button>\n                        )}\n                    </HStack>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import React, { useState } from 'react';\nimport { Button, Menu, MenuButton, MenuItem, MenuList } from '@chakra-ui/react';\nimport { MdExpandMore } from 'react-icons/md';\nimport { downloadAs } from '../../util/utils';\nimport { useRootSelector } from '../../redux';\nimport { useTranslation } from 'react-i18next';\nimport DownloadModal from '../modal/download-modal';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { Events } from '../../constants/constants';\n\nexport default function DownloadActions() {\n    const { t } = useTranslation();\n\n    const [isDownloadModalOpen, setIsDownloadModalOpen] = useState(false);\n\n    const param = useRootSelector(state => state.param);\n\n    const handleDownloadJson = () => {\n        downloadAs(`RMG_${new Date().valueOf()}.json`, 'application/json', JSON.stringify(param));\n        rmgRuntime.event(Events.DOWNLOAD_PARAM, { style: param.style });\n    };\n\n    return (\n        <Menu>\n            <MenuButton as={Button} variant=\"ghost\" size=\"sm\" rightIcon={<MdExpandMore />}>\n                {t('DownloadActions.downloads')}\n            </MenuButton>\n            <MenuList>\n                <MenuItem onClick={handleDownloadJson}>{t('DownloadActions.configFile')}</MenuItem>\n                <MenuItem onClick={() => setIsDownloadModalOpen(true)}>{t('DownloadActions.images')}</MenuItem>\n            </MenuList>\n\n            <DownloadModal isOpen={isDownloadModalOpen} onClose={() => setIsDownloadModalOpen(false)} />\n        </Menu>\n    );\n}\n","import React, { RefObject } from 'react';\nimport {\n    AlertDialog,\n    AlertDialogBody,\n    AlertDialogContent,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogOverlay,\n    Button,\n} from '@chakra-ui/react';\nimport { Events, MonoColour, RMGParam } from '../../constants/constants';\nimport { RmgLineBadge } from '@railmapgen/rmg-components';\nimport { useTranslation } from 'react-i18next';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface UploadConfirmModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    cancelRef: RefObject<HTMLButtonElement>;\n    uploadedParam?: RMGParam;\n    onOpenParam: (param: Record<string, any>) => void;\n}\n\nexport default function UploadConfirmModal(props: UploadConfirmModalProps) {\n    const { isOpen, onClose, cancelRef, uploadedParam, onOpenParam } = props;\n    const { t } = useTranslation();\n\n    const handleConfirm = () => {\n        if (uploadedParam) {\n            onOpenParam(uploadedParam);\n        }\n        onClose();\n        rmgRuntime.event(Events.UPLOAD_PARAM, { style: uploadedParam?.style });\n    };\n\n    return (\n        <AlertDialog isOpen={isOpen} leastDestructiveRef={cancelRef} onClose={onClose}>\n            <AlertDialogOverlay>\n                <AlertDialogContent>\n                    <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n                        {t('UploadConfirmModal.title')}\n                    </AlertDialogHeader>\n\n                    <AlertDialogBody>\n                        {t('UploadConfirmModal.message1')}\n                        <RmgLineBadge\n                            name={uploadedParam?.line_name?.join(' ') || ''}\n                            fg={uploadedParam?.theme?.[3] || MonoColour.white}\n                            bg={uploadedParam?.theme?.[2] || '#AAAAAA'}\n                        />\n                        {t('UploadConfirmModal.message2') +\n                            (uploadedParam ? Object.keys(uploadedParam.stn_list).length - 2 : 0) +\n                            t('UploadConfirmModal.message3')}\n                    </AlertDialogBody>\n\n                    <AlertDialogFooter>\n                        <Button ref={cancelRef} onClick={onClose}>\n                            {t('Cancel')}\n                        </Button>\n                        <Button colorScheme=\"primary\" onClick={handleConfirm} ml={3}>\n                            {t('Confirm')}\n                        </Button>\n                    </AlertDialogFooter>\n                </AlertDialogContent>\n            </AlertDialogOverlay>\n        </AlertDialog>\n    );\n}\n","import React from 'react';\nimport {\n    Button,\n    Flex,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalHeader,\n    ModalOverlay,\n    SystemStyleObject,\n    Tab,\n    TabList,\n    TabPanel,\n    TabPanels,\n    Tabs,\n    Text,\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { translateText } from '../../i18n/config';\nimport { useRootDispatch } from '../../redux';\nimport { companyConfig, templateList } from '@railmapgen/rmg-templates-resources';\nimport { startLoading } from '../../redux/app/app-slice';\nimport { Events } from '../../constants/constants';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\nconst templateButtonStyle: SystemStyleObject = {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n    h: 10,\n    overflow: 'hidden',\n\n    '& span:first-of-type': {\n        maxW: '100%',\n        textOverflow: 'ellipsis',\n    },\n\n    '& span:last-of-type': {\n        fontWeight: 'normal',\n        fontSize: '2xs',\n    },\n};\n\ninterface TemplateModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    onOpenParam: (param: Record<string, any>) => void;\n}\n\nexport default function TemplateModal(props: TemplateModalProps) {\n    const { isOpen, onClose, onOpenParam } = props;\n\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const handleSelect = async (company: string, filename: string) => {\n        dispatch(startLoading());\n        const module = await import(\n            /* webpackChunkName: \"templates\" */ `@railmapgen/rmg-templates-resources/templates/${company}/${filename}.json`\n        );\n        onOpenParam(module.default);\n        rmgRuntime.event(Events.OPEN_TEMPLATE, { company, filename });\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('TemplateModal.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <Tabs isLazy size=\"sm\" orientation=\"vertical\" colorScheme=\"primary\">\n                        <TabList maxW={150}>\n                            {companyConfig.map(company => (\n                                <Tab key={company.id}>{translateText(company.name)}</Tab>\n                            ))}\n                        </TabList>\n\n                        <TabPanels maxW={250}>\n                            {Object.entries(templateList)\n                                .sort(\n                                    (a, b) =>\n                                        companyConfig.findIndex(c => c.id === a[0]) -\n                                        companyConfig.findIndex(c => c.id === b[0])\n                                )\n                                .map(([company, templates]) => (\n                                    <TabPanel key={company} as={Flex} flexDirection=\"column\" py={0} px={1}>\n                                        {templates.map(template => (\n                                            <Button\n                                                key={template.filename}\n                                                variant=\"ghost\"\n                                                size=\"sm\"\n                                                sx={templateButtonStyle}\n                                                onClick={() => handleSelect(company, template.filename)}\n                                            >\n                                                <span>{translateText(template.name)}</span>\n                                                <Text as=\"span\">\n                                                    {t('by')}: {template.uploadBy ?? 'Unknown'}\n                                                </Text>\n                                            </Button>\n                                        ))}\n                                    </TabPanel>\n                                ))}\n                        </TabPanels>\n                    </Tabs>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import React, { ChangeEvent, useRef, useState } from 'react';\nimport { Button, Menu, MenuButton, MenuItem, MenuList } from '@chakra-ui/react';\nimport { MdExpandMore, MdInsertDriveFile, MdNoteAdd, MdUpload } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport { updateParam } from '../../utils';\nimport { readFileAsText } from '../../util/utils';\nimport UploadConfirmModal from '../modal/upload-confirm-modal';\nimport { setGlobalAlert } from '../../redux/app/app-slice';\nimport { RMGParam } from '../../constants/constants';\nimport TemplateModal from '../modal/template-modal';\nimport { openFromNewParam } from '../../redux/param/open-new-action';\nimport { initParam } from '../../redux/param/util';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { LanguageCode } from '@railmapgen/rmg-translate';\n\nexport default function OpenActions() {\n    const { t, i18n } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const style = useRootSelector(state => state.param.style);\n\n    const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n    const [isTemplateModalOpen, setIsTemplateModalOpen] = useState(false);\n    const [uploadedParam, setUploadedParam] = useState<RMGParam | undefined>(undefined);\n\n    const uploadModalCloseRef = useRef<HTMLButtonElement | null>(null);\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n    const handleUpload = async (event: ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        console.log('OpenActions.handleUpload():: received file', file);\n\n        if (file?.type !== 'application/json') {\n            dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.invalidType') }));\n        } else {\n            try {\n                const paramStr = await readFileAsText(file);\n                const updatedParam = updateParam(JSON.parse(paramStr));\n                setUploadedParam(updatedParam as RMGParam);\n                setIsUploadModalOpen(true);\n            } catch (err) {\n                dispatch(setGlobalAlert({ status: 'error', message: t('OpenActions.unknownError') }));\n                console.error(\n                    'OpenActions.handleUpload():: Unknown error occurred while parsing the uploaded file',\n                    err\n                );\n            }\n        }\n\n        // clear field for next upload\n        event.target.value = '';\n    };\n\n    const handleOpenParam = (param: Record<string, any>) => {\n        dispatch(openFromNewParam(param));\n    };\n\n    return (\n        <Menu>\n            <MenuButton as={Button} variant=\"ghost\" size=\"sm\" rightIcon={<MdExpandMore />}>\n                {t('OpenActions.openFrom')}\n            </MenuButton>\n            <MenuList>\n                <MenuItem\n                    icon={<MdNoteAdd />}\n                    onClick={() => handleOpenParam(initParam(style, i18n.language as LanguageCode))}\n                >\n                    {t('Empty template')}\n                </MenuItem>\n\n                <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\".json\"\n                    hidden={true}\n                    onChange={handleUpload}\n                    data-testid=\"file-upload\"\n                />\n                <MenuItem icon={<MdUpload />} onClick={() => fileInputRef?.current?.click()}>\n                    {t('OpenActions.upload')}\n                </MenuItem>\n\n                <MenuItem icon={<MdInsertDriveFile />} onClick={() => setIsTemplateModalOpen(true)}>\n                    {t('OpenActions.templates')}\n                </MenuItem>\n            </MenuList>\n\n            <UploadConfirmModal\n                isOpen={isUploadModalOpen}\n                onClose={() => setIsUploadModalOpen(false)}\n                cancelRef={uploadModalCloseRef}\n                uploadedParam={uploadedParam}\n                onOpenParam={handleOpenParam}\n            />\n\n            <TemplateModal\n                isOpen={isTemplateModalOpen}\n                onClose={() => setIsTemplateModalOpen(false)}\n                onOpenParam={handleOpenParam}\n            />\n        </Menu>\n    );\n}\n","import { RootDispatch, RootState } from '../index';\nimport { updateParam } from '../../utils';\nimport { canvasConfig, CanvasType, RMGParam, SidePanelMode } from '../../constants/constants';\nimport { setCanvasToShow, setSelectedStation, setSidePanelMode, stopLoading } from '../app/app-slice';\nimport { reRenderApp } from '../../index';\n\nexport const openFromNewParam = (param: Record<string, any>) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const updatedParam = updateParam(param) as RMGParam;\n\n        // close side panel, reset selection\n        dispatch(setSidePanelMode(SidePanelMode.CLOSE));\n        dispatch(setSelectedStation('linestart'));\n\n        // reset to AllCanvas if the current canvas is not supported in the new style\n        const canvasToShow = getState().app.canvasToShow;\n        if (canvasConfig[updatedParam.style].every(canvas => !canvasToShow.includes(canvas))) {\n            dispatch(setCanvasToShow(Object.values(CanvasType)));\n        }\n        reRenderApp(updatedParam);\n        dispatch(stopLoading());\n    };\n};\n","import React from 'react';\nimport { HStack, Button } from '@chakra-ui/react';\nimport DownloadActions from './download-actions';\nimport { MdPalette } from 'react-icons/md';\nimport { useDispatch } from 'react-redux';\nimport { SidePanelMode } from '../../constants/constants';\nimport { setSidePanelMode } from '../../redux/app/app-slice';\nimport { useTranslation } from 'react-i18next';\nimport OpenActions from './open-actions';\n\nexport default function HeaderActions() {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    return (\n        <HStack ml=\"auto\">\n            <DownloadActions />\n\n            <OpenActions />\n\n            <Button\n                variant=\"solid\"\n                size=\"sm\"\n                colorScheme=\"primary\"\n                leftIcon={<MdPalette />}\n                onClick={() => dispatch(setSidePanelMode(SidePanelMode.STYLE))}\n            >\n                {t('HeaderActions.editStyle')}\n            </Button>\n        </HStack>\n    );\n}\n","import React from 'react';\nimport HeaderActions from './header-actions';\nimport { setCanvasScale, setCanvasToShow } from '../../redux/app/app-slice';\nimport { canvasConfig, CanvasType, RmgStyle } from '../../constants/constants';\nimport { useTranslation } from 'react-i18next';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { RmgFields, RmgFieldsField, RmgMultiSelect, RmgPageHeader } from '@railmapgen/rmg-components';\nimport { MdZoomIn, MdZoomOut } from 'react-icons/md';\nimport { setStyle } from '../../redux/param/action';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function PageHeader() {\n    const { t } = useTranslation();\n    const navigate = useNavigate();\n    const dispatch = useRootDispatch();\n\n    const { canvasToShow, canvasScale } = useRootSelector(state => state.app);\n    const rmgStyle = useRootSelector(state => state.param.style);\n\n    const styleSelections = Object.values(RmgStyle).reduce<Partial<Record<RmgStyle, string>>>(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: t('RmgStyle.' + cur),\n        }),\n        {}\n    );\n\n    const canvasSelections = canvasConfig[rmgStyle].map(canvas => ({\n        label: t('CanvasType.' + canvas),\n        value: canvas,\n    }));\n\n    const handleStyleChange = (style: RmgStyle) => {\n        navigate('/' + style);\n        dispatch(setStyle(style));\n    };\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('Style'),\n            value: rmgStyle,\n            options: styleSelections,\n            onChange: value => handleStyleChange(value as RmgStyle),\n        },\n        {\n            type: 'custom',\n            label: t('View'),\n            component: (\n                <RmgMultiSelect\n                    displayValue={t('Select canvas')}\n                    selections={canvasSelections}\n                    defaultValue={canvasToShow}\n                    onChange={value => dispatch(setCanvasToShow(value as CanvasType[]))}\n                />\n            ),\n        },\n        {\n            type: 'slider',\n            label: t('Canvas scale'),\n            value: canvasScale,\n            min: 0.1,\n            max: 2,\n            step: 0.1,\n            onChange: value => dispatch(setCanvasScale(value)),\n            leftIcon: <MdZoomOut />,\n            rightIcon: <MdZoomIn />,\n        },\n    ];\n\n    return (\n        <RmgPageHeader>\n            <RmgFields fields={fields} minW={160} />\n\n            <HeaderActions />\n        </RmgPageHeader>\n    );\n}\n","import React from 'react';\nimport {\n    Avatar,\n    Button,\n    Flex,\n    Heading,\n    Icon,\n    Link,\n    ListItem,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    OrderedList,\n    Tag,\n    TagLabel,\n    Text,\n    useColorModeValue,\n    VStack,\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { MdOpenInNew } from 'react-icons/md';\n\nconst CONTRIBUTORS_ADMINS = ['52PD', 'linchen1965'];\nconst CONTRIBUTORS_LIST = [\n    'jealousyge',\n    'Jay20081229',\n    'clearng-kly',\n    'Dingdong2334',\n    'C1P918R',\n    'AnDanJuneUnderline',\n    'GrassRabbit1410',\n    'xiany114514',\n    'Andy1782010',\n    'Thomastzc',\n    'Tianxiu11111',\n];\n\ninterface HelpModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function HelpModal(props: HelpModalProps) {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n\n    const linkColour = useColorModeValue('primary.500', 'primary.300');\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" scrollBehavior=\"inside\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('Help and support')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <Heading as=\"h5\" size=\"sm\" mb={2}>\n                        {t('Terms and conditions')}\n                    </Heading>\n\n                    <OrderedList>\n                        <ListItem>\n                            The layout of the elements on the signage or rail map, is designed by{' '}\n                            <Link color={linkColour} href=\"https://www.gzmtr.com/\" isExternal={true}>\n                                Guangzhou Metro Group <Icon as={MdOpenInNew} />\n                            </Link>\n                            {', '}\n                            <Link color={linkColour} href=\"https://www.mtr.com.hk/\" isExternal={true}>\n                                MTR Corporation <Icon as={MdOpenInNew} />\n                            </Link>\n                            {' or '}\n                            <Link color={linkColour} href=\"https://www.shmetro.com/\" isExternal={true}>\n                                Shanghai Shentong Metro Group <Icon as={MdOpenInNew} />\n                            </Link>\n                            , depending on your selection. You shall grant appropriate permit or license from the\n                            relevant company above before using the generated images for commercial purposes, if it is\n                            required to do so.\n                            <br />\n                            標誌版或路線圖之元素之佈局，基於你所選擇之風格，為\n                            <Link color={linkColour} href=\"https://www.gzmtr.com/\" isExternal={true}>\n                                廣州地鐵集團公司 <Icon as={MdOpenInNew} />\n                            </Link>\n                            ，\n                            <Link color={linkColour} href=\"https://www.mtr.com.hk/\" isExternal={true}>\n                                港鐵公司 <Icon as={MdOpenInNew} />\n                            </Link>\n                            或\n                            <Link color={linkColour} href=\"https://www.shmetro.com/\" isExternal={true}>\n                                上海申通地鐵集團 <Icon as={MdOpenInNew} />\n                            </Link>\n                            所設計。在產生之圖像用作商業用途前，你應向相關公司取得適當之許可證或授權。\n                        </ListItem>\n                        <ListItem>\n                            The elements including shapes and lines on the image are drawn by{' '}\n                            <Link color={linkColour} href=\"https://www.github.com/wongchito\" isExternal={true}>\n                                Chito Wong <Icon as={MdOpenInNew} />\n                            </Link>\n                            {' and '}\n                            <Link color={linkColour} href=\"https://www.github.com/thekingofcity\" isExternal={true}>\n                                thekingofcity <Icon as={MdOpenInNew} />\n                            </Link>\n                            , based on the design standards or rules of the companies listed above. You may use them for\n                            any purposes, but it is recommended to state the name and the link of software alongside.\n                            <br />\n                            圖像之元素，包括圖形及線條，均由\n                            <Link color={linkColour} href=\"https://www.github.com/wongchito\" isExternal={true}>\n                                Chito Wong <Icon as={MdOpenInNew} />\n                            </Link>\n                            及\n                            <Link color={linkColour} href=\"https://www.github.com/thekingofcity\" isExternal={true}>\n                                thekingofcity <Icon as={MdOpenInNew} />\n                            </Link>\n                            基於上述公司之設計標準或準則繪製。你可將其用於任何目的，但我們建議你於使用同時附以我們之名字以及該軟件之連結。\n                        </ListItem>\n                        <ListItem>\n                            Due to copyright, licensing and other legal restrictions, Rail Map Generator uses{' '}\n                            <Link color={linkColour} href=\"https://github.com/ButTaiwan/genyo-font\" isExternal={true}>\n                                GenYoMin provided by ButTaiwan <Icon as={MdOpenInNew} />\n                            </Link>\n                            , and Vegur instead of MTRSung and Myriad Pro respectively to display and generate MTR-style\n                            signage. You shall grant appropriate permit or license from the manufacturers before using\n                            those generated images for commercial purposes.\n                            <br />\n                            由於著作權及其他法律限制，鐵路路線圖產生器使用\n                            <Link color={linkColour} href=\"https://github.com/ButTaiwan/genyo-font\" isExternal={true}>\n                                由ButTaiwan提供之源樣明體 <Icon as={MdOpenInNew} />\n                            </Link>\n                            ，以及Vegur，以代替港鐵樣式標誌牌所使用之地鐵宋及Myriad\n                            Pro。在產生之圖像用作商業用途前，你應向字型生產廠商取得適當之許可證或授權。\n                        </ListItem>\n                        <ListItem>\n                            The exported images in PNG or SVG format may be modified, published, or used for other\n                            purposes, under the conditions above.\n                            <br />\n                            輸出之PNG或SVG種類之圖像可基於上述條款，用於修改、發行或其他用途。\n                        </ListItem>\n                        <ListItem>\n                            All flag emojis shown on Windows platforms are designed by{' '}\n                            <Link color={linkColour} href=\"https://openmoji.org/\" isExternal={true}>\n                                OpenMoji <Icon as={MdOpenInNew} />\n                            </Link>{' '}\n                            – the open-source emoji and icon project. License:\n                            <Link\n                                color={linkColour}\n                                href=\"https://creativecommons.org/licenses/by-sa/4.0/\"\n                                isExternal={true}\n                            >\n                                CC BY-SA 4.0 <Icon as={MdOpenInNew} />\n                            </Link>\n                            <br />\n                            於Windows作業系統上顯示之旗幟Emoji為\n                            <Link color={linkColour} href=\"https://openmoji.org/\" isExternal={true}>\n                                OpenMoji <Icon as={MdOpenInNew} />\n                            </Link>\n                            所設計。許可證：\n                            <Link\n                                color={linkColour}\n                                href=\"https://creativecommons.org/licenses/by-sa/4.0/\"\n                                isExternal={true}\n                            >\n                                CC BY-SA 4.0 <Icon as={MdOpenInNew} />\n                            </Link>\n                        </ListItem>\n                        <ListItem>\n                            We reserve the rights, without prior notice, to modify, add, or remove these terms. The\n                            Chinese translation is for reference only. In case of any discrepancy between the English\n                            version and the Chinese version, the English version shall prevail.\n                            <br />\n                            我們保留修改、新增或移除上述條款之權利，而無需另行通知。中文譯本僅供參考，文義如與英文有歧異，概以英文本為準。\n                        </ListItem>\n                    </OrderedList>\n\n                    <Heading as=\"h5\" size=\"sm\" mt={3} mb={2}>\n                        {t('Contributors')}\n                    </Heading>\n\n                    <Heading as=\"h6\" size=\"xs\" my={1}>\n                        {t('Core contributors')}\n                    </Heading>\n\n                    <VStack>\n                        <Tag\n                            size=\"lg\"\n                            minW=\"80%\"\n                            onClick={() => window.open('https://github.com/wongchito', '_blank')}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src=\"https://github.com/wongchito.png\" size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    Chito Wong\n                                </Text>\n                                <Text fontSize=\"sm\">Project initiator</Text>\n                                <Text fontSize=\"sm\">Author of MTR and Guangzhou Metro styles</Text>\n                            </TagLabel>\n                        </Tag>\n                        <Tag\n                            size=\"lg\"\n                            minW=\"80%\"\n                            onClick={() => window.open('https://github.com/thekingofcity', '_blank')}\n                            cursor=\"pointer\"\n                        >\n                            <Avatar src=\"https://github.com/thekingofcity.png\" size=\"lg\" my={2} ml={-1} mr={2} />\n                            <TagLabel display=\"block\">\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" mb={1}>\n                                    thekingofcity\n                                </Text>\n                                <Text fontSize=\"sm\">Author of Shanghai Metro style</Text>\n                                <Text fontSize=\"sm\">Desktop version (Electron) maintainer</Text>\n                            </TagLabel>\n                        </Tag>\n                    </VStack>\n\n                    <Heading as=\"h6\" size=\"xs\" my={1}>\n                        {t('Resource contributors')}\n                    </Heading>\n\n                    <Flex wrap=\"wrap\">\n                        {CONTRIBUTORS_ADMINS.map(contributor => (\n                            <Tag\n                                key={contributor}\n                                size=\"lg\"\n                                mb={1}\n                                mr={1}\n                                flex=\"100%\"\n                                onClick={() =>\n                                    window.open(\n                                        `https://github.com/railmapgen/rmg/issues?q=is:issue+author:${contributor}`,\n                                        '_blank'\n                                    )\n                                }\n                                cursor=\"pointer\"\n                            >\n                                <Avatar src={`https://github.com/${contributor}.png`} size=\"xs\" ml={-1} mr={2} />\n                                <TagLabel>{contributor}</TagLabel>\n                                <TagLabel flexGrow={1} />\n                                <TagLabel>\n                                    <Text fontSize=\"sm\">{t('Resource Administrator')}</Text>\n                                </TagLabel>\n                            </Tag>\n                        ))}\n                        {CONTRIBUTORS_LIST.map(contributor => (\n                            <Tag\n                                key={contributor}\n                                size=\"lg\"\n                                mb={1}\n                                mr={1}\n                                onClick={() =>\n                                    window.open(\n                                        `https://github.com/railmapgen/rmg/issues?q=is:issue+author:${contributor}`,\n                                        '_blank'\n                                    )\n                                }\n                                cursor=\"pointer\"\n                            >\n                                <Avatar src={`https://github.com/${contributor}.png`} size=\"xs\" ml={-1} mr={2} />\n                                <TagLabel>{contributor}</TagLabel>\n                            </Tag>\n                        ))}\n                    </Flex>\n\n                    <Text>\n                        {t('Visit')}{' '}\n                        <Link\n                            color={linkColour}\n                            href=\"https://github.com/railmapgen/rmg/wiki/How-to-add-color-palette-and-line-templates\"\n                            isExternal={true}\n                        >\n                            {t('Contribution Wiki')} <Icon as={MdOpenInNew} />\n                        </Link>\n                        {t(', open an issue and join us today!')}\n                    </Text>\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button\n                        colorScheme=\"primary\"\n                        onClick={() => window.open('https://github.com/railmapgen/rmg', '_blank')}\n                    >\n                        {t('Visit GitHub')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import React, { useState } from 'react';\nimport {\n    Heading,\n    HStack,\n    Icon,\n    IconButton,\n    Link,\n    Menu,\n    MenuButton,\n    MenuItem,\n    MenuList,\n    useColorModeValue,\n} from '@chakra-ui/react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { MdHelp, MdOpenInNew, MdTranslate } from 'react-icons/md';\nimport HelpModal from '../modal/help-modal';\nimport { RmgEnvBadge, RmgWindowHeader } from '@railmapgen/rmg-components';\nimport { LanguageCode } from '@railmapgen/rmg-translate';\nimport rmgRuntime, { RmgEnv } from '@railmapgen/rmg-runtime';\nimport { handleLanguageChange } from '../../i18n/config';\n\nexport default function WindowHeader() {\n    const { t } = useTranslation();\n    const linkColour = useColorModeValue('primary.500', 'primary.300');\n\n    const [isHelpModalOpen, setIsHelpModalOpen] = useState(false);\n\n    const environment = rmgRuntime.getEnv();\n    const appVersion = rmgRuntime.getAppVersion();\n\n    const handleChangeLanguage = async (language: LanguageCode) => {\n        rmgRuntime.setLanguage(language);\n        handleLanguageChange(language);\n    };\n\n    const popoverHeader = (\n        <Trans i18nKey=\"WindowHeader.popoverHeader\" environment={environment}>\n            You're on {{ environment }} environment!\n        </Trans>\n    );\n    const popoverBody = (\n        <Trans i18nKey=\"WindowHeader.popoverBody\">\n            This is a testing environment where we don't guarantee the stability and compatibility. Please switch back\n            to{' '}\n            <Link color={linkColour} href={'https://railmapgen.github.io' + window.location.pathname} isExternal={true}>\n                Production environment <Icon as={MdOpenInNew} />\n            </Link>\n            .\n        </Trans>\n    );\n\n    return (\n        <RmgWindowHeader>\n            <Heading as=\"h4\" size=\"md\">\n                {t('Rail Map Generator')}\n            </Heading>\n            <RmgEnvBadge\n                environment={environment}\n                version={appVersion}\n                popoverHeader={environment === RmgEnv.PRD ? undefined : popoverHeader}\n                popoverBody={environment === RmgEnv.PRD ? undefined : popoverBody}\n            />\n\n            <HStack ml=\"auto\">\n                <Menu>\n                    <MenuButton as={IconButton} icon={<MdTranslate />} variant=\"ghost\" size=\"sm\" />\n                    <MenuList>\n                        <MenuItem onClick={() => handleChangeLanguage(LanguageCode.English)}>English</MenuItem>\n                        <MenuItem onClick={() => handleChangeLanguage(LanguageCode.ChineseSimp)}>简体中文</MenuItem>\n                        <MenuItem onClick={() => handleChangeLanguage(LanguageCode.ChineseTrad)}>繁體中文</MenuItem>\n                    </MenuList>\n                </Menu>\n\n                <IconButton\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    aria-label=\"Help\"\n                    icon={<MdHelp />}\n                    onClick={() => setIsHelpModalOpen(true)}\n                />\n            </HStack>\n\n            <HelpModal isOpen={isHelpModalOpen} onClose={() => setIsHelpModalOpen(false)} />\n        </RmgWindowHeader>\n    );\n}\n","import { nanoid } from 'nanoid';\nimport { RootDispatch, RootState } from '../index';\nimport { BranchStyle } from '../../constants/constants';\nimport { getYShareMTR } from '../../methods';\nimport { setStationsBulk } from './action';\nimport { initStationInfo } from './util';\n\nexport const addStation = (where: `${number}` | 'new', from: string, to: string, position?: 'upper' | 'lower') => {\n    return (dispatch: RootDispatch, getState: () => RootState): string | false => {\n        const stationList = getState().param.stn_list;\n\n        // get new id\n        let newId = nanoid(6);\n        while (newId in stationList) {\n            newId = nanoid(6);\n        }\n        const newStationInfo = initStationInfo(newId);\n\n        if (where !== 'new') {\n            const nextStationList = {\n                ...stationList,\n                [from]: {\n                    ...stationList[from],\n                    children: stationList[from].children.map(id => (id === to ? newId : id)),\n                    branch: {\n                        left: stationList[from].branch.left,\n                        right:\n                            stationList[from].branch.right.length && stationList[from].branch.right[1] === to\n                                ? ([stationList[from].branch.right[0], newId] as [BranchStyle, string])\n                                : stationList[from].branch.right,\n                    },\n                },\n                [to]: {\n                    ...stationList[to],\n                    parents: stationList[to].parents.map(id => (id === from ? newId : id)),\n                    branch: {\n                        left:\n                            stationList[to].branch.left.length && stationList[to].branch.left[1] === from\n                                ? ([stationList[to].branch.left[0], newId] as [BranchStyle, string])\n                                : stationList[to].branch.left,\n                        right: stationList[to].branch.right,\n                    },\n                },\n                [newId]: {\n                    ...newStationInfo,\n                    parents: [from],\n                    children: [to],\n                },\n            };\n            dispatch(setStationsBulk(nextStationList));\n            return newId;\n        } else {\n            if (!position) {\n                return false;\n            }\n\n            const nextStationList = {\n                ...stationList,\n                [from]: {\n                    ...stationList[from],\n                    children:\n                        position === 'upper'\n                            ? [newId, stationList[from].children[0]]\n                            : [stationList[from].children[0], newId],\n                    branch: {\n                        left: stationList[from].branch.left,\n                        right: [BranchStyle.through, newId] as [BranchStyle, string],\n                    },\n                },\n                [to]: {\n                    ...stationList[to],\n                    parents:\n                        position === 'upper'\n                            ? [newId, stationList[to].parents[0]]\n                            : [stationList[to].parents[0], newId],\n                    branch: {\n                        left: [BranchStyle.through, newId] as [BranchStyle, string],\n                        right: stationList[to].branch.right,\n                    },\n                },\n                [newId]: {\n                    ...newStationInfo,\n                    parents: [from],\n                    children: [to],\n                },\n            };\n            dispatch(setStationsBulk(nextStationList));\n            return newId;\n        }\n    };\n};\n\nexport const addStationToExistingBranch = (where: number, preposition: 'before' | 'after', pivot: string) => {\n    return (dispatch: RootDispatch, getState: () => RootState): false | string => {\n        const branches = getState().helper.branches;\n        const branch = branches[where];\n\n        if (branch?.length) {\n            if (preposition === 'before') {\n                const from = branch[branch.indexOf(pivot) - 1];\n                return dispatch(addStation(where.toString() as `${number}`, from, pivot));\n            } else {\n                const to = branch[branch.indexOf(pivot) + 1];\n                return dispatch(addStation(where.toString() as `${number}`, pivot, to));\n            }\n        } else {\n            return false;\n        }\n    };\n};\n\nexport const getNewBranchAllowedEnds = () => {\n    return (dispatch: RootDispatch, getState: () => RootState): string[] => {\n        const stationList = getState().param.stn_list;\n        const branches = getState().helper.branches;\n\n        return branches[0].filter(id => {\n            const isTwoSidedBranchOut = stationList[id].parents.length + stationList[id].children.length === 4;\n            const isYShare0 = getYShareMTR(id, stationList) === 0;\n\n            return !isTwoSidedBranchOut && isYShare0;\n        });\n    };\n};\n\nexport const verifyNewBranchEnds = (from: string, to: string) => {\n    return (dispatch: RootDispatch, getState: () => RootState): string => {\n        const stationList = getState().param.stn_list;\n        const branches = getState().helper.branches;\n\n        // should be included in main line\n        if (!branches[0].includes(from) || !branches[0].includes(to)) {\n            return 'Branch should end at main line';\n        }\n\n        // from should come before to\n        if (branches[0].indexOf(from) >= branches[0].indexOf(to)) {\n            return 'Not in correct ordering';\n        }\n\n        // should not from linestart to lineend\n        if (from === 'linestart' && to === 'lineend') {\n            return 'Should not be parallel to main line';\n        }\n\n        // should not be open jaw from the first station\n        if (from === 'linestart' && branches[0].indexOf(to) === 1) {\n            return 'Branch should not be open jaw from the first station';\n        }\n\n        // should not be open jaw from the last station\n        if (to === 'lineend' && branches[0].indexOf(from) === branches[0].length - 2) {\n            return 'Branch should not be open jaw from the last station';\n        }\n\n        // from has one child, to has one parent\n        if (stationList[from].children.length > 1 || stationList[to].parents.length > 1) {\n            return 'Branch already exist';\n        }\n\n        // end station won't be a middle station of any branch except main line\n        const isExistBranchIncludesEndStation = branches\n            .slice(1)\n            .some(branch => branch.slice(1, -1).includes(from) || branch.slice(1, -1).includes(to));\n        if (isExistBranchIncludesEndStation) {\n            return 'Cannot branch out from existing branch';\n        }\n\n        // stations between both ends should be stations which isn't branching out\n        const isStationsBetweenNotBranchOut = branches[0]\n            .slice(branches[0].indexOf(from) + 1, branches[0].indexOf(to))\n            .every(id => stationList[id].parents.length === 1 && stationList[id].children.length === 1);\n        if (!isStationsBetweenNotBranchOut) {\n            return 'One or more stations between both ends are branching out';\n        }\n\n        return '';\n    };\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n    Alert,\n    AlertIcon,\n    Box,\n    Button,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n} from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { Events, RmgStyle, SidePanelMode } from '../../constants/constants';\nimport { isColineBranch } from '../../redux/param/coline-action';\nimport { useTranslation } from 'react-i18next';\nimport { addStationToExistingBranch } from '../../redux/param/add-station-action';\nimport { setSelectedStation, setSidePanelMode } from '../../redux/app/app-slice';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface AddStationModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function AddStationModal(props: AddStationModalProps) {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const { style, stn_list: stationList } = useRootSelector(state => state.param);\n    const branches = useRootSelector(state => state.helper.branches);\n\n    const [where, setWhere] = useState(selectedBranch);\n    const [preposition, setPreposition] = useState<'before' | 'after'>('before');\n    const [pivot, setPivot] = useState('');\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        setWhere(selectedBranch);\n    }, [selectedBranch]);\n\n    useEffect(() => {\n        if (!isOpen) {\n            setError(false);\n        }\n    }, [isOpen]);\n\n    const selectableStations = branches[Number(where)]?.slice(1, -1) ?? [];\n\n    const getStationOptions = (stationIdList: string[]): Record<string, string> => {\n        return stationIdList.reduce(\n            (acc, cur) => ({\n                ...acc,\n                [cur]: stationList[cur]?.name.join(' - '),\n            }),\n            { '': t('AddStationModal.pleaseSelect') }\n        );\n    };\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('AddStationModal.where'),\n            value: where,\n            options: {\n                ...branches.reduce(\n                    (acc, cur, idx) => ({\n                        ...acc,\n                        [idx]:\n                            idx === 0\n                                ? t('AddStationModal.main')\n                                : style !== RmgStyle.SHMetro || !isColineBranch(cur, stationList)\n                                ? t('AddStationModal.branch') + ' ' + idx\n                                : t('AddStationModal.external') + ' ' + idx,\n                    }),\n                    {}\n                ),\n            },\n            onChange: value => handleSelectWhere(value as number),\n            minW: 'full',\n        },\n        {\n            type: 'select',\n            label: t('AddStationModal.preposition'),\n            value: preposition,\n            options: {\n                before: t('AddStationModal.before'),\n                after: t('AddStationModal.after'),\n            },\n            onChange: value => setPreposition(value as 'before' | 'after'),\n        },\n        {\n            type: 'select',\n            label: t('AddStationModal.pivot'),\n            value: pivot,\n            options: getStationOptions(selectableStations),\n            disabledOptions: [''],\n            onChange: value => setPivot(value as string),\n        },\n    ];\n\n    const handleSelectWhere = (value: number) => {\n        setWhere(value);\n        setPivot('');\n    };\n\n    const handleSubmit = () => {\n        const result = dispatch(addStationToExistingBranch(where, preposition, pivot));\n        if (result) {\n            onClose();\n\n            dispatch(setSelectedStation(result));\n            dispatch(setSidePanelMode(SidePanelMode.STATION));\n        } else {\n            console.log('false here');\n            setError(true);\n        }\n        rmgRuntime.event(Events.ADD_STATION, { style, branchIndex: where, success: result });\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                {error && (\n                    <Alert status=\"error\" variant=\"solid\" size=\"xs\">\n                        <AlertIcon />\n                        {t('AddStationModal.error')}\n                    </Alert>\n                )}\n                <Box position=\"relative\">\n                    <ModalHeader>{t('AddStationModal.title')}</ModalHeader>\n                    <ModalCloseButton />\n                </Box>\n\n                <ModalBody>\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button colorScheme=\"primary\" onClick={handleSubmit} disabled={!pivot}>\n                        {t('Confirm')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n} from '@chakra-ui/react';\nimport { RmgFields, RmgFieldsField } from '@railmapgen/rmg-components';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { addStation, getNewBranchAllowedEnds, verifyNewBranchEnds } from '../../redux/param/add-station-action';\nimport { Events, RmgStyle } from '../../constants/constants';\nimport { useTranslation } from 'react-i18next';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\n\ninterface NewBranchModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function NewBranchModal(props: NewBranchModalProps) {\n    const { isOpen, onClose } = props;\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const [where, setWhere] = useState<'new' | 'ext'>('new');\n    const [from, setFrom] = useState('');\n    const [to, setTo] = useState('');\n    const [position, setPosition] = useState<'upper' | 'lower'>('upper');\n\n    const [fromError, setFromError] = useState('');\n    const [toError, setToError] = useState('');\n\n    const { style, stn_list: stationList } = useRootSelector(state => state.param);\n\n    useEffect(() => {\n        // reset whenever modal is closed\n        if (!isOpen) {\n            setWhere('new');\n            setFrom('');\n            setTo('');\n        }\n    }, [isOpen]);\n\n    const getStationOptions = (stationIdList: string[]): Record<string, string> => {\n        return stationIdList.reduce(\n            (acc, cur) => ({\n                ...acc,\n                [cur]: stationList[cur]?.name.join(' - '),\n            }),\n            { '': t('NewBranchModal.pleaseSelect') }\n        );\n    };\n\n    const newBranchEndStationOptions = getStationOptions(dispatch(getNewBranchAllowedEnds()));\n\n    const fields: RmgFieldsField[] = [\n        {\n            type: 'select',\n            label: t('NewBranchModal.where'),\n            value: where,\n            options: {\n                new: t('NewBranchModal.new'),\n                ext: t('NewBranchModal.ext'),\n            },\n            disabledOptions: style === RmgStyle.SHMetro ? [] : ['ext'],\n            onChange: value => handleSelectWhere(value as 'new' | 'ext'),\n            minW: 'full',\n        },\n        {\n            type: 'select',\n            label: t('NewBranchModal.from'),\n            value: from,\n            options: newBranchEndStationOptions,\n            disabledOptions: [''],\n            onChange: value => handleSelectFrom(value as string),\n            isInvalid: Boolean(fromError),\n        },\n        {\n            type: 'select',\n            label: t('NewBranchModal.to'),\n            value: to,\n            options: newBranchEndStationOptions,\n            disabledOptions: [''],\n            onChange: value => handleSelectTo(value as string),\n            isInvalid: Boolean(toError),\n        },\n        {\n            type: 'select',\n            label: t('NewBranchModal.position'),\n            value: position,\n            options: {\n                upper: t('NewBranchModal.upper'),\n                lower: t('NewBranchModal.lower'),\n            },\n            onChange: value => setPosition(value as 'upper' | 'lower'),\n            minW: 'full',\n            hidden: where !== 'new' || style === RmgStyle.SHMetro,\n        },\n    ];\n\n    const handleSelectWhere = (value: 'new' | 'ext') => {\n        setWhere(value);\n        setFrom('');\n        setTo('');\n        setFromError('');\n        setToError('');\n    };\n\n    const handleSelectFrom = (value: string) => {\n        setFrom(value);\n        setFromError('');\n\n        if (value && to) {\n            setToError(dispatch(verifyNewBranchEnds(value, to)));\n        }\n    };\n\n    const handleSelectTo = (value: string) => {\n        setTo(value);\n        setToError('');\n\n        if (from && value) {\n            setFromError(dispatch(verifyNewBranchEnds(from, value)));\n        }\n    };\n\n    const handleSubmit = () => {\n        let result: false | string;\n        if (where === 'ext') {\n            // SHMetro specific - treat lower branch as external line\n            result = dispatch(addStation('new', from, to, 'lower'));\n        } else {\n            if (style === RmgStyle.SHMetro) {\n                result = dispatch(addStation('new', from, to, 'upper'));\n            } else {\n                result = dispatch(addStation('new', from, to, position));\n            }\n        }\n\n        if (result) {\n            onClose();\n            rmgRuntime.event(Events.ADD_BRANCH, { style, where });\n        }\n    };\n\n    const isSubmitDisabled = Boolean(!from || !to || fromError || toError);\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{t('NewBranchModal.title')}</ModalHeader>\n                <ModalCloseButton />\n\n                <ModalBody>\n                    <RmgFields fields={fields} />\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button\n                        colorScheme=\"primary\"\n                        title={isSubmitDisabled ? fromError || toError : t('Confirm')}\n                        onClick={handleSubmit}\n                        disabled={isSubmitDisabled}\n                    >\n                        {t('Confirm')}\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n}\n","import React, { lazy, useState } from 'react';\nimport { Box, Button, HStack, IconButton, Progress, Tab, TabList, TabPanel, TabPanels, Tabs } from '@chakra-ui/react';\nimport { MdAdd } from 'react-icons/md';\nimport AddStationModal from '../modal/add-station-modal';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { RmgStyle, SidePanelMode } from '../../constants/constants';\nimport { isColineBranch } from '../../redux/param/coline-action';\nimport { setSelectedBranch, setSidePanelMode } from '../../redux/app/app-slice';\nimport { useTranslation } from 'react-i18next';\nimport NewBranchModal from '../modal/new-branch-modal';\nimport { RmgErrorBoundary } from '@railmapgen/rmg-components';\n\nconst StationAgGrid = lazy(() => import(/* webpackChunkName: \"StationAgGrid\" */ './station-ag-grid'));\n\nexport default function GridTabs() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    const [isAddStationModalOpen, setIsAddStationModalOpen] = useState(false);\n    const [isNewBranchModalOpen, setIsNewBranchModalOpen] = useState(false);\n\n    const selectedBranch = useRootSelector(state => state.app.selectedBranch);\n    const { style, stn_list: stationList } = useRootSelector(state => state.param);\n    const branches = useRootSelector(state => state.helper.branches);\n\n    const handleEditLineSection = () => {\n        dispatch(setSidePanelMode(SidePanelMode.BRANCH));\n    };\n\n    return (\n        <Box flex={1} overflow=\"hidden\">\n            <Tabs\n                height=\"100%\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                overflow=\"hidden\"\n                index={selectedBranch}\n                onChange={index => dispatch(setSelectedBranch(index))}\n            >\n                <TabList>\n                    {branches.map((branch, i) => {\n                        if (i === 0) {\n                            return <Tab key={i}>{t('GridTabs.main')}</Tab>;\n                        } else {\n                            if (style !== RmgStyle.SHMetro || !isColineBranch(branch, stationList)) {\n                                return <Tab key={i}>{t('GridTabs.branch') + ' ' + i}</Tab>;\n                            } else {\n                                return <Tab key={i}>{t('GridTabs.external') + ' ' + i}</Tab>;\n                            }\n                        }\n                    })}\n                    <IconButton\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        alignSelf=\"center\"\n                        aria-label=\"New branch\"\n                        onClick={() => setIsNewBranchModalOpen(true)}\n                        icon={<MdAdd />}\n                    />\n\n                    <HStack marginLeft=\"auto\" marginRight={1}>\n                        <Button\n                            variant=\"outline\"\n                            size=\"xs\"\n                            leftIcon={<MdAdd />}\n                            onClick={() => setIsAddStationModalOpen(true)}\n                        >\n                            {t('GridTabs.addStation')}\n                        </Button>\n                        <Button size=\"xs\" colorScheme=\"primary\" onClick={handleEditLineSection}>\n                            {t('GridTabs.editLine')}\n                        </Button>\n                    </HStack>\n                </TabList>\n\n                <TabPanels flex={1} overflowY=\"auto\">\n                    {branches.map((_, i) => (\n                        <TabPanel key={i} padding={0} h=\"100%\">\n                            <RmgErrorBoundary suspenseFallback={<Progress isIndeterminate />}>\n                                <StationAgGrid branchIndex={i} />\n                            </RmgErrorBoundary>\n                        </TabPanel>\n                    ))}\n                </TabPanels>\n            </Tabs>\n\n            <AddStationModal isOpen={isAddStationModalOpen} onClose={() => setIsAddStationModalOpen(false)} />\n            <NewBranchModal isOpen={isNewBranchModalOpen} onClose={() => setIsNewBranchModalOpen(false)} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport { CircularProgress, Flex, Modal, ModalOverlay, useColorModeValue } from '@chakra-ui/react';\nimport { useRootSelector } from '../../redux';\n\nexport default function LoadingModal() {\n    const loaderColour = useColorModeValue('primary.500', 'primary.300');\n\n    const isLoading = useRootSelector(state => state.app.isLoading);\n\n    return (\n        <Modal isOpen={isLoading !== undefined} onClose={() => {}}>\n            <ModalOverlay />\n            <Flex\n                position=\"absolute\"\n                top={0}\n                left={0}\n                h=\"100%\"\n                w=\"100%\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                zIndex={9999}\n            >\n                <CircularProgress\n                    isIndeterminate={isLoading === -1}\n                    value={isLoading && isLoading >= 0 ? isLoading : undefined}\n                    color={loaderColour}\n                />\n            </Flex>\n        </Modal>\n    );\n}\n","import React from 'react';\nimport { Alert, AlertIcon, AlertStatus, CloseButton, Link } from '@chakra-ui/react';\nimport rmgRuntime from '@railmapgen/rmg-runtime';\nimport { useRootDispatch, useRootSelector } from '../../redux';\nimport { closeGlobalAlert } from '../../redux/app/app-slice';\n\nexport default function GlobalAlerts() {\n    const dispatch = useRootDispatch();\n\n    const globalAlerts = useRootSelector(state => state.app.globalAlerts);\n\n    const handleAppOpen = (linkedApp: string) => {\n        if (rmgRuntime.isStandaloneWindow()) {\n            window.open(`/${linkedApp}`, '_blank');\n        } else {\n            rmgRuntime.openApp(linkedApp);\n        }\n    };\n\n    return (\n        <>\n            {Object.entries(globalAlerts).map(([status, { message, url, linkedApp }]) => (\n                <Alert key={status} status={status as AlertStatus} variant=\"solid\" size=\"xs\" pl={3} pr={1} py={0}>\n                    <AlertIcon />\n                    {linkedApp ? (\n                        <Link onClick={() => handleAppOpen(linkedApp)}>{message}</Link>\n                    ) : url ? (\n                        <Link href={url} target=\"_blank\">\n                            {message}\n                        </Link>\n                    ) : (\n                        message\n                    )}\n                    <CloseButton ml=\"auto\" onClick={() => dispatch(closeGlobalAlert(status as AlertStatus))} />\n                </Alert>\n            ))}\n        </>\n    );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Flex } from '@chakra-ui/react';\nimport { RmgPage, RmgWindow } from '@railmapgen/rmg-components';\nimport { useRootDispatch } from '../redux';\nimport { setGlobalAlert } from '../redux/app/app-slice';\nimport SvgRouter from '../svgs/svg-router';\nimport SidePanel from './side-panel/side-panel';\nimport PageHeader from './page-header/page-header';\nimport WindowHeader from './root/window-header';\nimport GridTabs from './ag-grid/grid-tabs';\nimport LoadingModal from './modal/loading-modal';\nimport GlobalAlerts from './root/global-alerts';\n\nexport default function AppRoot() {\n    const { t } = useTranslation();\n    const dispatch = useRootDispatch();\n\n    React.useEffect(() => {\n        setTimeout(() => {\n            dispatch(\n                setGlobalAlert({\n                    status: 'info',\n                    message: t('rmpPromotion'),\n                    linkedApp: 'rmp',\n                })\n            );\n        }, 1000);\n    }, []);\n\n    return (\n        <RmgWindow>\n            <LoadingModal />\n            <WindowHeader />\n            <RmgPage>\n                <PageHeader />\n                <GlobalAlerts />\n                <Flex flex={1} overflow=\"hidden\" position=\"relative\">\n                    <Flex as=\"section\" direction=\"column\" flex={1} ml={1} mr={1} overflow=\"hidden\">\n                        <Box>\n                            <SvgRouter />\n                        </Box>\n                        <GridTabs />\n                    </Flex>\n\n                    <SidePanel />\n                </Flex>\n            </RmgPage>\n\n            <canvas style={{ display: 'none' }} />\n        </RmgWindow>\n    );\n}\n","import { RootDispatch, RootState } from '../index';\nimport { ColineInfo, InterchangeInfo, StationDict } from '../../constants/constants';\nimport { setColineBulk } from './action';\nimport { nanoid } from 'nanoid';\n\n// Cartesian product of multiple arrays in JavaScript\n// https://stackoverflow.com/questions/12303989/cartesian-product-of-multiple-arrays-in-javascript\n// Equivalent typescript version\n// https://gist.github.com/ssippe/1f92625532eef28be6974f898efb23ef?permalink_comment_id=3364149#gistcomment-3364149\nfunction cartesian<T>(...allEntries: T[][]): T[][] {\n    return allEntries.reduce<T[][]>(\n        (results, entries) =>\n            results\n                .map(result => entries.map(entry => result.concat([entry])))\n                .reduce((subResults, result) => subResults.concat(result), []),\n        [[]]\n    );\n}\n\n/**\n * Coline branch is also known as the lower branch.\n */\nexport const isColineBranch = (branch: string[], stnList: StationDict) =>\n    stnList[branch[0]].children.indexOf(branch[1]) ? true : false;\n\nexport const getPossibleStnIdsFromMainLine = (branches: string[][], stnList: StationDict) => [\n    branches[0][1], // skip linestart\n    branches[0][branches[0].length - 2], // skip lineend\n    ...branches[0].filter(stnId =>\n        // for every station in the main line, find if it branches out at this station\n        branches\n            .slice(1)\n            .filter(branch => isColineBranch(branch, stnList))\n            // branches after the first/main line may not have linestart or lineend\n            .map(branch => branch.filter(stnId => !['linestart', 'lineend'].includes(stnId)))\n            // only stations at both ends need to be taken into consideration\n            .map(branch => [branch[0], branch[branch.length - 1]])\n            .flat()\n            .includes(stnId)\n    ),\n];\n\nexport const getPossibleStnIdsFromBranchLine = (branches: string[][], stnList: StationDict) =>\n    branches\n        .slice(1)\n        .filter(branch => isColineBranch(branch, stnList))\n        .map(branch => branch.filter(stnId => !['linestart', 'lineend'].includes(stnId)))\n        .map(branch => [branch[0], branch[branch.length - 1]]);\n\nexport const getPossibleCombinations = (branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): [string, string][] => {\n        const branches = getState().helper.branches;\n\n        if (branchIndex === 0) {\n            const stnList = getState().param.stn_list;\n            const possibleStnIdsFromMainLine = getPossibleStnIdsFromMainLine(branches, stnList);\n            return cartesian(possibleStnIdsFromMainLine, possibleStnIdsFromMainLine).filter(\n                val => val[0] !== val[1]\n            ) as [string, string][];\n        } else {\n            const branch = branches[branchIndex];\n            if (branch) {\n                const b = branch.filter(id => !['linestart', 'lineend'].includes(id));\n                return [[b[0], b.slice(-1)[0]]];\n            } else {\n                return [];\n            }\n        }\n    };\n};\n\n/**\n * Calculate row span for displaying track sharing column in StationAgGrid\n * @param stationId id of station that begins to span rows\n * @param branchIndex index of branch that the grid is displaying\n */\nexport const getRowSpanForColine = (stationId: string, branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): [number, string | undefined] => {\n        const coline = getState().param.coline;\n        const branch = getState().helper.branches[branchIndex];\n\n        for (let [clId, cl] of Object.entries(coline)) {\n            if (cl.from === stationId && branch.includes(cl.to)) {\n                const thisIndex = branch.indexOf(stationId);\n                const thatIndex = branch.indexOf(cl.to);\n                if (thatIndex > thisIndex) {\n                    return [thatIndex - thisIndex + 1, clId];\n                }\n            } else if (cl.to === stationId && branch.includes(cl.to)) {\n                const thisIndex = branch.indexOf(stationId);\n                const thatIndex = branch.indexOf(cl.from);\n                if (thatIndex > thisIndex) {\n                    return [thatIndex - thisIndex + 1, clId];\n                }\n            }\n        }\n        return [0, undefined];\n    };\n};\n\n/**\n * Verify station selections from table are consecutive, which is the prerequisite for track sharing.\n * @param selectedIds IDs of the selected stations (get by gridApi)\n * @param branchIndex\n */\nexport const verifyAreSelectionsConsecutive = (selectedIds: string[], branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState): boolean => {\n        const branch = getState().helper.branches[branchIndex];\n\n        const from = selectedIds[0];\n        const to = selectedIds.slice(-1)[0];\n\n        const areConsecutiveSelections =\n            branch.slice(branch.indexOf(from), branch.indexOf(to) + 1).toString() === selectedIds.toString();\n        if (!areConsecutiveSelections) {\n            console.log('verifyAreSelectionsConsecutive():: Selections are NOT consecutive');\n            return false;\n        } else {\n            return true;\n        }\n    };\n};\n\n/**\n *  Checks the validity of from and to. Currently we accept coline if it:\n 1. Start from either ends of the mainline or branch stations and\n terminate at either ends of the mainline or branch stations.\n 2. Start from the one end of the branch line and\n terminate at the other end of the same branch line.\n\n * @param from station id from\n * @param to station id to\n */\nexport const checkColineValidity = (from: string, to: string) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const stnList = getState().param.stn_list;\n        const branches = getState().helper.branches;\n\n        if (from === to) {\n            throw new Error('addColine():: failed for same stnId');\n        }\n        // calculate if coline is in the main line\n        const colineInMainLine = getPossibleStnIdsFromMainLine(branches, stnList).filter(stnId =>\n            [from, to].includes(stnId)\n        );\n        // calculate if coline is in one branch line\n        const colineInBranches = getPossibleStnIdsFromBranchLine(branches, stnList).filter(terminals =>\n            [from, to].every(stnId => terminals.includes(stnId))\n        );\n        // see if coline is in the main line\n        if (colineInMainLine.length === 2 && colineInBranches.length > 0) {\n            throw new Error(`addColine():: main check failed for ${from}, ${to}`);\n        }\n        // see if coline is in one branch line\n        if (colineInMainLine.length !== 2 && colineInBranches.length !== 1) {\n            throw new Error(`addColine():: branch check failed for ${from}, ${to}`);\n        }\n    };\n};\n\nexport const findAllColinesInBranch = (branchIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const coline = getState().param.coline;\n        const branches = getState().helper.branches;\n        const branch = branches[branchIndex];\n\n        if (branch) {\n            return Object.entries(coline).reduce<Record<string, ColineInfo>>((acc, cur) => {\n                if (branch.includes(cur[1].from) && branch.includes(cur[1].to)) {\n                    return { ...acc, [cur[0]]: cur[1] };\n                } else {\n                    return { ...acc };\n                }\n            }, {});\n        } else {\n            return {};\n        }\n    };\n};\n\n/**\n * Remove related coline when the deleteStn is the coline `from` or `to` station.\n */\nexport const removeInvalidColineOnRemoveStation = (deleteStnId: string) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        if (Object.keys(colineInfo).length === 0) return;\n\n        const nextColine = Object.entries(colineInfo).reduce<Record<string, ColineInfo>>((acc, cur) => {\n            if (cur[1].from !== deleteStnId && cur[1].to !== deleteStnId) {\n                return { ...acc, [cur[0]]: cur[1] };\n            } else {\n                return { ...acc };\n            }\n        }, {});\n\n        dispatch(setColineBulk(nextColine));\n    };\n};\n\nexport const addColine = (from: string, to: string, colors: InterchangeInfo[], display: boolean = true) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        dispatch(checkColineValidity(from, to));\n        dispatch(\n            setColineBulk({\n                ...colineInfo,\n                [nanoid(4)]: { from: from, to: to, colors: colors, display: display },\n            })\n        );\n    };\n};\n\nexport const updateColine = (colineId: string, from: string, to: string, display = true) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        if (colineId in colineInfo) {\n            dispatch(checkColineValidity(from, to));\n\n            const newColineInfo = {\n                ...colineInfo,\n                [colineId]: { ...colineInfo[colineId], from, to, display },\n            };\n\n            dispatch(setColineBulk(newColineInfo));\n        }\n    };\n};\n\nexport const removeColine = (colineId: string) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        if (colineId in colineInfo) {\n            const { [colineId]: _, ...nextColine } = colineInfo;\n            dispatch(setColineBulk(nextColine));\n        }\n    };\n};\n\n/**\n *\n * @param colineId\n * @param interchangeInfo\n */\nexport const addColineColor = (colineId: string, interchangeInfo: InterchangeInfo) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        colineInfo[colineId].colors = [...colineInfo[colineId].colors, interchangeInfo];\n\n        dispatch(setColineBulk(colineInfo));\n    };\n};\n\nexport const removeColineColor = (colineId: string, interchangeIndex: number) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        if (colineId in colineInfo && colineInfo[colineId].colors.length > interchangeIndex) {\n            const nextColours = colineInfo[colineId].colors.filter((_, colineIdx) => colineIdx !== interchangeIndex);\n            if (nextColours.length === 0) {\n                // remove entire coline\n                const { [colineId]: _, ...nextColine } = colineInfo;\n                dispatch(setColineBulk(nextColine));\n            } else {\n                // update coline colour list\n                const nextColine = {\n                    ...colineInfo,\n                    [colineId]: { ...colineInfo[colineId], colors: nextColours },\n                };\n                dispatch(setColineBulk(nextColine));\n            }\n        }\n    };\n};\n\nexport const updateColineColor = (colineId: string, interchangeIndex: number, interchangeInfo: InterchangeInfo) => {\n    return (dispatch: RootDispatch, getState: () => RootState) => {\n        const colineInfo = getState().param.coline;\n\n        if (colineId in colineInfo && colineInfo[colineId].colors.length > interchangeIndex) {\n            colineInfo[colineId].colors = colineInfo[colineId].colors.map((int, colineIdx) =>\n                colineIdx === interchangeIndex\n                    ? ([0, 1, 2, 3, 4, 5].map(i =>\n                          interchangeInfo[i] === undefined ? int[i] : interchangeInfo[i]\n                      ) as InterchangeInfo)\n                    : int\n            );\n\n            dispatch(setColineBulk(colineInfo));\n        }\n    };\n};\n\n// DEBUG PROXY\n// declare const window: any;\n// window.addColine = addColine;\n// window.updateColine = updateColine;\n// window.removeColine = removeColine;\n// window.rmgStore.dispatch(window.removeColine(2))\n// let t = ['shanghai', 'sh4', '#5F259F', '#fff', '4号线', 'Line 4']\n// window.rmgStore.dispatch(window.addColine('s9tt', 'l1mz', [t]))\n","var map = {\n\t\"./gzmtr/index\": [\n\t\t226,\n\t\t226\n\t],\n\t\"./mtr/index\": [\n\t\t31711,\n\t\t9014,\n\t\t1711\n\t],\n\t\"./shmetro/index\": [\n\t\t58049,\n\t\t9014,\n\t\t8049\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 33489;\nmodule.exports = webpackAsyncContext;"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","all","slice","style","flexDirection","overflowX","content","margin","flex","border","SvgRouter","location","useLocation","navigate","useNavigate","dispatch","useDispatch","useRootSelector","state","app","canvasToShow","canvasScale","param","svgHeight","svg_height","rmgStyle","canvasMap","useState","setCanvasMap","useEffect","default","catch","console","error","useCanvasMap","pathname","log","nextStyle","split","values","RmgStyle","includes","setStyle","document","getElementById","href","process","rmgRuntime","Events","filteredCanvas","filter","canvas","sx","length","minWidth","height","InfoSection","useTranslation","useRootDispatch","selectedStation","stn_list","num","name","secondaryName","fields","type","label","value","placeholder","onChange","updateStationNum","hidden","updateStationName","updateStationSecondaryName","p","as","size","minW","FlagSvgEmoji","props","countryCode","svgFilename","undefined","src","setSrc","err","message","alt","h","mr","CityPicker","defaultValueId","i18n","currentItem","cityList","item","displayValue","languages","lng","find","data","sort","a","b","CityCode","localeCompare","displayHandler","isCensorTWFlag","country","LanguageCode","isWindowsClient","navigator","platform","flagSvg","countryList","flagEmoji","predicate","input","some","defaultValue","ColourPicker","city","paletteList","cityCode","setPaletteList","usePalette","palette","displayName","fg","MonoColour","bg","colour","ColourModal","isOpen","onClose","defaultTheme","onUpdate","linkColour","useColorModeValue","setCityCode","lineCode","setLineCode","bgColour","setBgColour","fgColour","setFgColour","toString","paletteFields","component","line","customFields","variant","options","isSubmitEnabled","isFitted","colorScheme","w","defaultIndex","fontSize","marginRight","color","onClick","window","open","MdOpenInNew","disabled","ColourUtil","hex","parseInt","alpha","this","hexToRgb","join","hex1","hex2","reduce","acc","cur","idx","Math","pow","ThemeButton","theme","mt","_hover","fade","icon","InterchangeCard","interchangeList","onAdd","onDelete","isModalOpen","setIsModalOpen","selectedIndex","setSelectedIndex","stationList","usedNameList","zhAcc","enAcc","Set","concat","transfer","info","flat","it","interchangeFields","i","val","optionList","direction","spacing","align","noLabel","InterchangeSection","getOSINameFields","setIndex","osi_names","updateStationOsiName","isChecked","paid_area","checked","updateStationPaidArea","oneLine","handleAdd","addInterchange","handleDelete","j","removeInterchange","handleUpdate","updateInterchange","selections","ShortDirection","tick_direc","updateStationTickDirection","infoList","Fragment","alignSelf","leftIcon","MoreSection","loop","services","facility","loop_pivot","one_line","int_padding","serviceSelections","Services","service","mtrFacilityOptions","Facilities","shmetroFacilityOptions","updateStationServices","multiSelect","updateStationFacility","updateStationLoopPivot","updateStationOneLine","validator","Number","isInteger","updateStationIntPadding","_","updateStationIntPaddingToAll","BranchSection","parents","children","branch","branchOptions","BranchStyle","getFirstStationOptions","Direction","positionOptions","upper","lower","getFields","updateStationBranchType","updateStationBranchFirstStation","indexOf","flipStationBranchPosition","StationSidePanel","LayoutSection","svgWidth","y_pc","branchSpacingPct","padding","direction_gz_x","direction_gz_y","canvasConfig","setSvgWidth","setSvgHeight","min","max","setYPercentage","setBranchSpacingPct","setPaddingPercentage","setDirectionIndicatorX","setDirectionIndicatorY","DesignSection","lineName","line_name","lineNum","line_num","platformNum","platform_num","psdNum","psd_num","namePosMTR","customiseMTRDest","info_panel_type","directionSelections","panelTypeGZMTROptions","PanelTypeGZMTR","panelTypeSHMetroOptions","PanelTypeShmetro","setLineName","setLineNum","setPlatform","setPsdNum","setPanelType","nextDirection","setDirection","staggerNameSelections","mtrSpecifiedFields","isStagger","staggerStationNames","flipStationNames","isLegacy","toggleLineNameBeforeDestination","terminal","customiseDestinationName","nextTheme","setTheme","LoopSection","branches","helper","loop_info","bank","left_and_right_factor","bottom_factor","branch_stn_ids","v","stn_id","abs","left_and_right_factor_max","floor","setLoop","setLoopBank","setLoopLeftAndRightFactor","setLoopBottomFactor","GZMTRNoteCard","note","fields1","fields2","GZMTRNoteSection","notesGZMTR","updateNote","removeNote","addNote","StyleSidePanel","getYShareMTR","stnId","stnList","stnPred","RemoveConfirmModal","setError","status","position","stationId","result","getState","currentStationIndex","current_stn_idx","setSidePanelMode","SidePanelMode","setSelectedStation","removeInvalidColineOnRemoveStation","newStnList","JSON","parse","stringify","forEach","parId","childId","right","left","splice","setStationsBulk","removeStation","success","ml","StationSidePanelFooter","isRemoveModalOpen","setIsRemoveModalOpen","setCurrentStation","ColineCard","colineInfo","routeOptions","onUpdateRoute","onUpdateColourInfo","from","to","colors","ColineSection","selectedBranch","colineInfoList","findAllColinesInBranch","possibleCombinations","getPossibleCombinations","entries","colineId","route","updateColine","setGlobalAlert","colourInfo","updateColineColor","colourIndex","removeColineColor","handleDeleteColour","addColine","AutoNumModal","where","setWhere","setFrom","maxLength","setMaxLength","setSort","isColineBranch","isNaN","debouncedDelay","asc","desc","isSubmitDisabled","isDisabled","autoNumbering","getBranchType","branchIndex","getPossibleStations","mainBranch","connect2MainLine","isValid","isStationValid2ConnectBranch","nextStationList","linestart","seconndLastId","lineend","getPossibleDirection","beginStation","leftStationIdList","endStation","rightStationIdList","isLeftPossible","every","isRightPossible","ConnectDisconnectCard","isEditing","setIsEditing","selection","setSelection","trimedBranch","branchEndId","branchEndInfo","possibleStations","branchType","possibleDirection","isConnectable","isDisconnectable","alignItems","mx","secondEndStation","disconnectFromMainLine","disabledOptions","target","ActionSection","isAutoNumModalOpen","setIsAutoNumModalOpen","wrap","flexShrink","flexBasis","marginTop","reverseStations","BranchSidePanel","SidePanel","sidePanelMode","mode","STATION","header","text","body","footer","STYLE","BRANCH","CLOSE","width","downloadAs","filename","blob","Blob","downloadBlobAs","url","URL","createObjectURL","createElement","download","appendChild","click","removeChild","revokeObjectURL","readFileAsText","file","reader","FileReader","onloadend","readAsText","isSafari","userAgent","cloneSvgCanvas","isTransparent","isShowBorder","scale","key","querySelector","getPropertyValue","match","thisSVGHeight","elem","cloneNode","setAttribute","setProperty","tag","querySelectorAll","l","sheet","cssRules","rule","cssText","txt","s","textContent","prepend","getBase64FontFace","uris","alert","readBlobAsDataURL","readAsDataURL","svgEl","uniqueCharacters","Array","el","innerHTML","replace","fonts","load","fontFaceList","styleSheet","distinctCssRules","font","matchedRule","cssStyle","fontFamily","family","unicodeRange","ruleStyle","matchedStyle","cssRule","fetch","getAbsoluteUrl","fontResp","fontDataUri","ruleStyleSrc","test","isWait","svgW","viewBox","baseVal","svgH","devicePixelRatio","ctx","getContext","clearRect","elStyle","getComputedStyle","fill","dominantBaseline","textAnchor","reject","img","Image","onload","setTimeout","drawImage","toBlob","onerror","btoa","unescape","encodeURIComponent","outerHTML","DownloadModal","canvasToDownload","setCanvasToDownload","setIsTransparent","setIsShowBorder","setScale","format","setFormat","currentStationId","canvasOptions","scaleOptions","formatOptions","png","svg","handleDownload","option","setLoadingProgress","stationIdListToDownload","zip","JSZip","index","waitForMs","replaceAll","removeAttribute","base64","generateAsync","zipData","stopLoading","DownloadActions","isDownloadModalOpen","setIsDownloadModalOpen","Button","rightIcon","Date","valueOf","UploadConfirmModal","cancelRef","uploadedParam","onOpenParam","leastDestructiveRef","fontWeight","ref","templateButtonStyle","justifyContent","overflow","maxW","textOverflow","TemplateModal","handleSelect","company","startLoading","isLazy","orientation","companyConfig","translateText","templateList","c","templates","Flex","py","px","template","uploadBy","OpenActions","isUploadModalOpen","setIsUploadModalOpen","isTemplateModalOpen","setIsTemplateModalOpen","setUploadedParam","uploadModalCloseRef","useRef","fileInputRef","handleUpload","event","files","paramStr","updatedParam","updateParam","handleOpenParam","setCanvasToShow","CanvasType","reRenderApp","openFromNewParam","initParam","language","accept","current","HeaderActions","PageHeader","styleSelections","canvasSelections","handleStyleChange","step","setCanvasScale","CONTRIBUTORS_ADMINS","CONTRIBUTORS_LIST","HelpModal","scrollBehavior","mb","isExternal","my","cursor","display","contributor","flexGrow","WindowHeader","isHelpModalOpen","setIsHelpModalOpen","environment","appVersion","handleChangeLanguage","handleLanguageChange","popoverHeader","Trans","i18nKey","popoverBody","version","RmgEnv","IconButton","addStation","newId","nanoid","newStationInfo","initStationInfo","verifyNewBranchEnds","AddStationModal","preposition","setPreposition","pivot","setPivot","stationIdList","selectableStations","handleSelectWhere","before","after","addStationToExistingBranch","NewBranchModal","setTo","setPosition","fromError","setFromError","toError","setToError","newBranchEndStationOptions","isTwoSidedBranchOut","isYShare0","new","ext","handleSelectFrom","isInvalid","Boolean","handleSelectTo","title","StationAgGrid","lazy","GridTabs","isAddStationModalOpen","setIsAddStationModalOpen","isNewBranchModalOpen","setIsNewBranchModalOpen","setSelectedBranch","marginLeft","overflowY","suspenseFallback","isIndeterminate","LoadingModal","loaderColour","isLoading","top","zIndex","GlobalAlerts","globalAlerts","linkedApp","pl","pr","handleAppOpen","closeGlobalAlert","AppRoot","React","getPossibleStnIdsFromMainLine","possibleStnIdsFromMainLine","allEntries","results","entry","subResults","cartesian","getRowSpanForColine","coline","clId","cl","thisIndex","thatIndex","checkColineValidity","colineInMainLine","colineInBranches","getPossibleStnIdsFromBranchLine","terminals","deleteStnId","nextColine","setColineBulk","newColineInfo","interchangeIndex","nextColours","colineIdx","interchangeInfo","int"],"sourceRoot":""}