{"version":3,"file":"static/js/destinationMTR.f696c5dd.chunk.js","mappings":"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","sources":["svgs/destination/destination-mtr.tsx","svgs/strip/strip-mtr.tsx","svgs/svg-wrapper.tsx"],"sourcesContent":["import React, { memo } from 'react';\nimport StripMTR from '../strip/strip-mtr';\nimport { CanvasType, Name, ShortDirection } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport SvgWrapper from '../svg-wrapper';\n\nconst CANVAS_TYPE = CanvasType.Destination;\n\nexport default function DestinationMTR() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const { svgWidth: svgWidths, svg_height: svgHeight, theme } = useRootSelector(state => state.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <DefsMTR />\n            <StripMTR stripPc={90} />\n            <InfoMTR />\n        </SvgWrapper>\n    );\n}\n\nconst DefsMTR = memo(() => (\n    <defs>\n        <path id=\"arrow\" d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\" fill=\"var(--rmg-black,#000)\" />\n    </defs>\n));\n\nconst InfoMTR = () => {\n    const routes = useRootSelector(store => store.helper.routes);\n\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const customisedMTRDestination = useRootSelector(store => store.param.customiseMTRDest);\n    const platformNumber = useRootSelector(store => store.param.platform_num);\n    const lineName = useRootSelector(store => store.param.line_name);\n\n    const currentStationIndex = useRootSelector(store => store.param.current_stn_idx);\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    let destNames: Name;\n    if (customisedMTRDestination.terminal !== false) {\n        destNames = customisedMTRDestination.terminal;\n    } else {\n        const validDests = [\n            ...new Set(\n                routes\n                    .filter(route => route.includes(currentStationIndex))\n                    .map(\n                        route =>\n                            route\n                                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                                .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                    )\n                    .filter(id => id !== currentStationIndex)\n            ),\n        ];\n        destNames = [\n            validDests.map(stnId => stationList[stnId].name[0]).join('/'),\n            validDests\n                .map(stnId => stationList[stnId].name[1])\n                .join('/')\n                .replace('\\\\', ' '),\n        ];\n    }\n\n    const destNameEl = React.useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(destNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [destNames.toString(), customisedMTRDestination.isLegacy]\n    );\n\n    const flagLength = 160 + 150 + bBox.width + 45 + 50;\n    const arrowX = (svgWidths[CanvasType.Destination] - (direction === ShortDirection.left ? 1 : -1) * flagLength) / 2;\n    const platformNumX = arrowX + (direction === ShortDirection.left ? 1 : -1) * (160 + 50 + 75);\n    const destNameX = platformNumX + (direction === ShortDirection.left ? 1 : -1) * (75 + 45);\n\n    return (\n        <g id=\"dest_name\" style={{ transform: 'translateY(calc(var(--rmg-svg-height) / 2 - 20px))' }}>\n            <use\n                xlinkHref=\"#arrow\"\n                transform={`translate(${arrowX},0)rotate(${direction === ShortDirection.left ? 0 : 180})`}\n            />\n            <PlatformNum num={platformNumber} transform={`translate(${platformNumX},0)`} />\n            <g\n                ref={destNameEl}\n                textAnchor={direction === ShortDirection.left ? 'start' : 'end'}\n                transform={`translate(${destNameX},-25)`}\n                fill=\"var(--rmg-black)\"\n            >\n                <text className=\"rmg-name__zh\" fontSize={90}>\n                    {(customisedMTRDestination.isLegacy ? lineName[0] : '') + 'å¾€' + destNames[0]}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={45} dy={80}>\n                    {(customisedMTRDestination.isLegacy ? lineName[1] + ' ' : '') + 'to ' + destNames[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst PlatformNum = (props: { num: string | false } & React.SVGProps<SVGGElement>) => {\n    const { num, ...others } = props;\n\n    return (\n        <g id=\"platform\" {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <circle cx={0} cy={0} r={75} fill=\"var(--rmg-theme-colour)\" />\n                        <text className=\"rmg-name__zh\" dy={0} textAnchor=\"middle\" fontSize={135} fill=\"#fff\">\n                            {num}\n                        </text>\n                    </>\n                ),\n                [num]\n            )}\n        </g>\n    );\n};\n","import React, { memo } from 'react';\n\nexport default memo(function StripMTR(props: { stripPc: number }) {\n    return (\n        <rect\n            fill=\"var(--rmg-theme-colour)\"\n            height={20}\n            style={{\n                width: 'var(--rmg-svg-width)',\n                ['--strip-percentage' as any]: props.stripPc,\n                transform: `translateY(calc(var(--strip-percentage, 95) * var(--rmg-svg-height) / 100 - 10px))`,\n            }}\n        />\n    );\n});\n","import { CanvasType, Theme } from '../constants/constants';\nimport React, { ReactNode } from 'react';\n\ninterface SvgWrapperProps {\n    type: CanvasType;\n    svgWidth: number;\n    svgHeight: number;\n    canvasScale: number;\n    theme: Theme;\n    children: ReactNode;\n}\n\nexport default function SvgWrapper(props: SvgWrapperProps) {\n    const { type, svgWidth, svgHeight, canvasScale, theme, children } = props;\n\n    return (\n        <svg\n            id={type}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            height={svgHeight * canvasScale}\n            viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n            colorInterpolationFilters=\"sRGB\"\n            style={{\n                ['--rmg-svg-width' as any]: svgWidth + 'px',\n                ['--rmg-svg-height' as any]: svgHeight + 'px',\n                ['--rmg-theme-colour' as any]: theme[2],\n                ['--rmg-theme-fg' as any]: theme[3],\n            }}\n        >\n            <rect\n                id=\"canvas-bg\"\n                fill=\"white\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n            {children}\n            <rect\n                id=\"canvas-border\"\n                fill=\"none\"\n                strokeWidth={3}\n                stroke=\"none\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n        </svg>\n    );\n}\n"],"names":["CANVAS_TYPE","CanvasType","DestinationMTR","canvasScale","useRootSelector","state","app","param","svgWidths","svgWidth","svgHeight","svg_height","theme","type","DefsMTR","stripPc","InfoMTR","memo","id","d","fill","destNames","routes","store","helper","direction","customisedMTRDestination","customiseMTRDest","platformNumber","platform_num","lineName","line_name","currentStationIndex","current_stn_idx","stationList","stn_list","terminal","validDests","Set","filter","route","includes","map","stnId","slice","ShortDirection","name","join","replace","destNameEl","React","width","bBox","setBBox","current","getBBox","toString","isLegacy","flagLength","arrowX","platformNumX","destNameX","style","transform","xlinkHref","PlatformNum","num","ref","textAnchor","className","fontSize","dy","props","others","cx","cy","r","height","SvgWrapper","children","xmlns","xmlnsXlink","viewBox","colorInterpolationFilters","strokeWidth","stroke"],"sourceRoot":""}