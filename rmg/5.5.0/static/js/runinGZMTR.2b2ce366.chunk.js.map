{"version":3,"file":"static/js/runinGZMTR.2b2ce366.chunk.js","mappings":"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","sources":["svgs/gzmtr/station-icon/station-icon.tsx","svgs/gzmtr/station-icon/station-number.tsx","svgs/gzmtr/current-station-name.tsx","svgs/runin/info-gzmtr.tsx","svgs/gzmtr/platform-number.tsx","svgs/gzmtr/otis-frame.tsx","svgs/runin/runin-gzmtr.tsx","svgs/gzmtr/psd-number.tsx","svgs/strip/strip-gzmtr.tsx","svgs/svg-wrapper.tsx"],"sourcesContent":["import React, { memo } from 'react';\n\ninterface StationIconProps {\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default memo(\n    function StationIcon(props: StationIconProps) {\n        const { passed, large } = props;\n\n        const pathD = large\n            ? 'M0,12.95 V-12.95 H-12.95 a12.95,12.95 0 0,0 0,25.9 h25.9 a12.95,12.95 0 0,0 0,-25.9 H0'\n            : 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\n\n        return <path d={pathD} fill=\"#fff\" strokeWidth={2} stroke={passed ? '#aaa' : 'var(--rmg-theme-colour)'} />;\n    },\n    (prevProps, nextProps) => prevProps.passed === nextProps.passed && prevProps.large === nextProps.large\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport StationIcon from './station-icon';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, passed, large, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g {...others}>\n            <StationIcon passed={passed} large={large} />\n            <g\n                textAnchor=\"middle\"\n                fontSize={13.5}\n                transform={large ? 'scale(1.4)' : ''}\n                fill={passed ? '#aaa' : '#000'}\n            >\n                <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                    <text ref={lineNumEl} className=\"rmg-name__zh\">\n                        {lineNum}\n                    </text>\n                </g>\n                <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                    <text ref={stnNumEl} className=\"rmg-name__zh\">\n                        {stnNum}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React, { memo, SVGProps, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../constants/constants';\n\ninterface CurrentStationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n}\n\nexport default memo(\n    function CurrentStationName(props: CurrentStationNameProps) {\n        const { stnName, onUpdate } = props;\n\n        const nameEl = useRef<SVGGElement | null>(null);\n\n        useEffect(() => {\n            onUpdate?.(nameEl.current!.getBBox());\n        }, [stnName.toString()]);\n\n        return (\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={90}>\n                    {stnName[0]}\n                </text>\n                <g fontSize={36}>\n                    {stnName[1].split('\\\\').map((txt, i) => (\n                        <text className=\"rmg-name__en\" key={i} dy={70 + i * 36}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.stnName.toString() === nextProps.stnName.toString()\n);\n\ninterface CurrentStationSecondaryNameProps extends SVGProps<SVGGElement> {\n    secondaryName: Name;\n}\n\nexport const CurrentStationSecondaryName = (props: CurrentStationSecondaryNameProps) => {\n    const { secondaryName, transform } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(() => setBBox(nameEl.current!.getBBox()), [secondaryName.toString()]);\n\n    return (\n        <g transform={transform}>\n            <g transform=\"translate(0,4.5)\" fontSize={36}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={26}>\n                    {secondaryName[0]}\n                </text>\n                <text dy={22} className=\"rmg-name__en\" fontSize={14}>\n                    {secondaryName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport StationNumber from '../gzmtr/station-icon/station-number';\nimport { CanvasType, Name, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useRootSelector } from '../../redux';\nimport CurrentStationName, { CurrentStationSecondaryName } from '../gzmtr/current-station-name';\n\nconst InfoGZMTR = () => {\n    const svgHeight = useRootSelector(store => store.param.svg_height);\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const infoPanelType = useRootSelector(store => store.param.info_panel_type);\n    const lineNumber = useRootSelector(store => store.param.line_num);\n    const currentStationIndex = useRootSelector(store => store.param.current_stn_idx);\n    const curStnInfo = useRootSelector(store => store.param.stn_list[currentStationIndex]);\n\n    const [nameBBox, setNameBBox] = useState({ width: 0 } as SVGRect);\n\n    const nextStnId = curStnInfo[direction === ShortDirection.left ? 'parents' : 'children'];\n\n    const otisTransforms = {\n        name: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 4},45)`,\n        next: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 10},45)`,\n    };\n\n    const transforms = {\n        nameGroup: {\n            x: svgWidths.runin / 2,\n            y:\n                0.5 * svgHeight -\n                50 -\n                (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                (curStnInfo.secondaryName ? 29 : 0),\n        },\n        secondaryName: {\n            x: 0,\n            y: 70 + curStnInfo.name[1].split('\\\\').length * 36,\n        },\n    };\n\n    return (\n        <g>\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.name : ''}>\n                <g textAnchor=\"middle\" transform={`translate(${transforms.nameGroup.x},${transforms.nameGroup.y})`}>\n                    <CurrentStationName stnName={curStnInfo.name} onUpdate={setNameBBox} />\n                    {curStnInfo.secondaryName && (\n                        <CurrentStationSecondaryName\n                            secondaryName={curStnInfo.secondaryName}\n                            transform={`translate(${transforms.secondaryName.x},${transforms.secondaryName.y})`}\n                        />\n                    )}\n                </g>\n\n                <StationNumber\n                    lineNum={lineNumber}\n                    stnNum={curStnInfo.num}\n                    style={{\n                        ['--translate-x' as any]: `${(svgWidths[CanvasType.RunIn] + nameBBox.width) / 2 + 55}px`,\n                        ['--translate-y' as any]: `${\n                            0.5 * svgHeight -\n                            30 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                        transform: 'translate(var(--translate-x, 800px), var(--translate-y, 145px))',\n                    }}\n                    large\n                />\n            </g>\n\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.next : ''}>\n                {!nextStnId || nextStnId.includes('linestart') || nextStnId.includes('lineend') ? (\n                    <></>\n                ) : nextStnId.length === 1 ? (\n                    <BigNext nextId={nextStnId[0]} nameBBox={nameBBox} />\n                ) : (\n                    <BigNext2 nextIds={nextStnId} nameBBox={nameBBox} />\n                )}\n            </g>\n        </g>\n    );\n};\n\nexport default InfoGZMTR;\n\nconst BigNext = (props: { nextId: string; nameBBox: DOMRect }) => {\n    const { nextId, nameBBox } = props;\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const nextInfo = useRootSelector(store => store.param.stn_list[nextId]);\n    const { name, secondaryName } = nextInfo;\n\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEl = React.useRef<SVGGElement | null>(null);\n    useEffect(\n        () => setNextBBox(nextNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [name.toString()]\n    );\n\n    const nextNameZHCount = name[0].length;\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next\">\n                <g\n                    textAnchor=\"middle\"\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? '80px'\n                                : nextNameZHCount <= 2\n                                ? `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 70}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 35 * 1.5}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        下站\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={17} dy={30}>\n                        Next\n                    </text>\n                </g>\n                <g\n                    textAnchor=\"start\"\n                    ref={nextNameEl}\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? nextNameZHCount <= 2\n                                    ? `${115 + 35}px`\n                                    : `${115 + 35 / 2}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        {name[0]}\n                    </text>\n                    <g fontSize={17}>\n                        {name[1].split('\\\\').map((txt: string, i: number) => (\n                            <text className=\"rmg-name__en\" dy={30 + i * 17} key={i}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n                {secondaryName && (\n                    <g\n                        textAnchor=\"middle\"\n                        style={{\n                            ['--translate-x' as any]:\n                                direction === ShortDirection.left\n                                    ? nextNameZHCount <= 2\n                                        ? `${115 + 35}px`\n                                        : `${115 + 35 / 2}px`\n                                    : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                        }}\n                    >\n                        <BigNextSec\n                            secName={secondaryName}\n                            transform={`translate(${nextBBox.width / 2},${30 + name[1].split('\\\\').length * 17 + 5})`}\n                        />\n                    </g>\n                )}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${\n                                  (115 + 35 * ((nextNameZHCount <= 2 ? 1 : 0.5) + nextNameZHCount) + nameBcrX) / 2 - 20\n                              }px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      (nextNameZHCount <= 2 ? 70 + 35 : 35 * 2.5) +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n\nconst BigNextSec = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,2.5)\" fontSize={25}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {secName[0]}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={10} dy={15}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigNext2 = (props: { nextIds: string[]; nameBBox: DOMRect }) => {\n    const { nextIds, nameBBox } = props;\n    const { routes } = useRootSelector(store => store.helper);\n    const svgWidths = useRootSelector(store => store.param.svgWidth);\n    const direction = useRootSelector(store => store.param.direction);\n    const stationList = useRootSelector(store => store.param.stn_list);\n\n    const nextNames = nextIds.map(id => stationList[id].name);\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEls = useRef<(SVGGElement | null)[]>([]);\n    useEffect(\n        () => {\n            setNextBBox(prevBBox => ({ ...prevBBox, width: 0 }));\n            nextNameEls.current.forEach(el => {\n                let nextBBox = el?.getBBox();\n                setNextBBox(prevBBox => {\n                    if (nextBBox) {\n                        return prevBBox.width > nextBBox.width ? prevBBox : nextBBox;\n                    } else {\n                        return prevBBox;\n                    }\n                });\n            });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [nextNames.toString()]\n    );\n\n    const validEnds = props.nextIds.map(stnId =>\n        routes.reduce(\n            (acc, route) =>\n                // filter routes not containing next station's id\n                route.includes(stnId)\n                    ? acc.concat(\n                          route\n                              .filter(s => !['linestart', 'lineend'].includes(s))\n                              // select first/last station's id\n                              .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                      )\n                    : acc,\n            [] as string[]\n        )\n    );\n\n    const nextNameZHCount = Math.max(...nextNames.map(names => names[0].length));\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next_2\">\n                {nextNames.map((name, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            <g\n                                textAnchor=\"middle\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '72px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 41}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">下站</text>\n                                <text className=\"rmg-name__en\" y={22}>\n                                    Next\n                                </text>\n                            </g>\n                            <g\n                                ref={el => (nextNameEls.current[i] = el)}\n                                textAnchor=\"start\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '113px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">{name[0]}</text>\n                                {name[1].split('\\\\').map((txt, j) => (\n                                    <text key={j} className=\"rmg-name__en\" y={22 + j * 13}>\n                                        {txt}\n                                    </text>\n                                ))}\n                                <text className=\"rmg-name__zh\" y={-35}>\n                                    {validEnds[i].map(s => stationList[s].name[0]).join('/') + '方向'}\n                                </text>\n                                <text className=\"rmg-name__en rmg-name__gzmtr--next2-dest\" y={-20}>\n                                    {'Towards ' +\n                                        validEnds[i]\n                                            .map(s => stationList[s].name[1])\n                                            .join('/')\n                                            .replace('\\\\', ' ')}\n                                </text>\n                            </g>\n                        </React.Fragment>\n                    );\n                })}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${(99 + 27 * (1 + nextNameZHCount) + nameBcrX) / 2 - 20}px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      41 -\n                                      27 +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n","import React, { SVGProps } from 'react';\n\ninterface PlatformNumberProps extends SVGProps<SVGGElement> {\n    num: string | false;\n}\n\nexport default function PlatformNumber(props: PlatformNumberProps) {\n    const { num, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill=\"var(--rmg-theme-fg)\" {...others}>\n            <circle cx={0} cy={0} r={30} fill=\"var(--rmg-theme-colour)\" />\n            <text className=\"rmg-name__en\" fontSize={38} dy={-9.5}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={13} dy={10}>\n                站台\n            </text>\n            <text className=\"rmg-name__en\" fontSize={9} dy={21}>\n                Platform\n            </text>\n        </g>\n    );\n}\n","import React from 'react';\nimport { useRootSelector } from '../../redux';\nimport { CanvasType } from '../../constants/constants';\n\ninterface OtisFrameProps {\n    canvasType: CanvasType;\n}\n\nexport default function OtisFrame(props: OtisFrameProps) {\n    const { canvasType } = props;\n    const { svgWidth: svgWidths, svg_height: svgHeight } = useRootSelector(store => store.param);\n\n    return (\n        <g id=\"otis_frame\" strokeWidth={3} stroke=\"black\">\n            <line y2={svgHeight} transform={`translate(${svgWidths[canvasType] / 2},0)`} />\n            <line x2={svgWidths[canvasType]} transform=\"translate(0,90)\" />\n        </g>\n    );\n}\n","import React from 'react';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport InfoGZMTR from './info-gzmtr';\nimport { useRootSelector } from '../../redux';\nimport { CanvasType, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport PlatformNumber from '../gzmtr/platform-number';\nimport SvgWrapper from '../svg-wrapper';\nimport OtisFrame from '../gzmtr/otis-frame';\n\nconst CANVAS_TYPE = CanvasType.RunIn;\n\nexport default function RunInGZMTR() {\n    const { canvasScale } = useRootSelector(state => state.app);\n    const {\n        svgWidth: svgWidths,\n        svg_height: svgHeight,\n        direction,\n        info_panel_type: infoPanelType,\n        platform_num: platformNumber,\n        psd_num: psdNumber,\n        theme,\n    } = useRootSelector(store => store.param);\n\n    const svgWidth = svgWidths[CANVAS_TYPE];\n\n    const otisTransforms = {\n        platform: `translate(${direction === ShortDirection.left ? 50 : -50},45)`,\n    };\n    return (\n        <SvgWrapper\n            type={CANVAS_TYPE}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n            canvasScale={canvasScale}\n            theme={theme}\n        >\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType !== PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType !== PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.platform : ''}>\n                <PlatformNumber\n                    num={platformNumber}\n                    style={{\n                        ['--translate-x' as any]: `${direction === ShortDirection.left ? svgWidth - 100 : 100}px`,\n                        ['--translate-y' as any]: 'calc(var(--rmg-svg-height) / 2 - 30px)',\n                        transform: 'translate(var(--translate-x, 100px), var(--translate-y))',\n                    }}\n                />\n            </g>\n\n            <InfoGZMTR />\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && <OtisFrame canvasType={CANVAS_TYPE} />}\n        </SvgWrapper>\n    );\n}\n","import React, { SVGProps } from 'react';\nimport { MonoColour } from '../../constants/constants';\n\ninterface PsdNumberProps extends SVGProps<SVGGElement> {\n    num: string;\n    inStrip?: boolean;\n}\n\nexport default function PsdNumber(props: PsdNumberProps) {\n    const { num, inStrip, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={inStrip ? MonoColour.black : 'var(--rmg-theme-fg)'} {...others}>\n            <rect height={40} width={40} rx={4} x={-20} fill={inStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n            <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                屏蔽门\n            </text>\n            <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                Screen Door\n            </text>\n        </g>\n    );\n}\n","import React from 'react';\nimport { PanelTypeGZMTR, PanelTypeShmetro } from '../../constants/constants';\nimport PsdNumber from '../gzmtr/psd-number';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <PsdNumber\n                num={props.isShowPSD as string}\n                inStrip={isInStrip}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            />\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n","import { CanvasType, Theme } from '../constants/constants';\nimport React, { ReactNode } from 'react';\n\ninterface SvgWrapperProps {\n    type: CanvasType;\n    svgWidth: number;\n    svgHeight: number;\n    canvasScale: number;\n    theme: Theme;\n    children: ReactNode;\n}\n\nexport default function SvgWrapper(props: SvgWrapperProps) {\n    const { type, svgWidth, svgHeight, canvasScale, theme, children } = props;\n\n    return (\n        <svg\n            id={type}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            height={svgHeight * canvasScale}\n            viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n            colorInterpolationFilters=\"sRGB\"\n            style={{\n                ['--rmg-svg-width' as any]: svgWidth + 'px',\n                ['--rmg-svg-height' as any]: svgHeight + 'px',\n                ['--rmg-theme-colour' as any]: theme[2],\n                ['--rmg-theme-fg' as any]: theme[3],\n            }}\n        >\n            <rect\n                id=\"canvas-bg\"\n                fill=\"white\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n            {children}\n            <rect\n                id=\"canvas-border\"\n                fill=\"none\"\n                strokeWidth={3}\n                stroke=\"none\"\n                style={{ height: 'var(--rmg-svg-height)', width: 'var(--rmg-svg-width)' }}\n            />\n        </svg>\n    );\n}\n"],"names":["memo","props","passed","pathD","large","d","fill","strokeWidth","stroke","prevProps","nextProps","StationNumber","lineNum","stnNum","others","lineNumEl","useRef","stnNumEl","useState","width","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","useEffect","current","getBBox","lineNumScale","Math","max","stnNumScale","length","textAnchor","fontSize","transform","ref","className","stnName","onUpdate","nameEl","toString","split","map","txt","i","dy","CurrentStationSecondaryName","secondaryName","x","bBox","setBBox","svgHeight","useRootSelector","store","param","svg_height","svgWidths","svgWidth","direction","infoPanelType","info_panel_type","lineNumber","line_num","currentStationIndex","current_stn_idx","curStnInfo","stn_list","nameBBox","setNameBBox","nextStnId","ShortDirection","otisTransforms","name","CanvasType","next","transforms","nameGroup","runin","y","PanelTypeGZMTR","num","style","includes","BigNext","nextId","BigNext2","nextIds","nextInfo","nextBBox","setNextBBox","nextNameEl","React","nextNameZHCount","nameBcrX","id","BigNextSec","secName","routes","helper","stationList","nextNames","nextNameEls","prevBBox","forEach","el","validEnds","stnId","reduce","acc","route","concat","filter","s","slice","names","j","join","replace","PlatformNumber","cx","cy","r","OtisFrame","canvasType","y2","x2","CANVAS_TYPE","RunInGZMTR","canvasScale","state","app","platformNumber","platform_num","psdNumber","psd_num","theme","platform","type","variant","isShowLight","isShowPSD","PsdNumber","inStrip","MonoColour","height","rx","stripHeight","indicatorLight","ry","PSD","isInStrip","psdDy","SvgWrapper","children","xmlns","xmlnsXlink","viewBox","colorInterpolationFilters"],"sourceRoot":""}