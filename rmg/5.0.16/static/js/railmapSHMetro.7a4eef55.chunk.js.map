{"version":3,"file":"static/js/railmapSHMetro.7a4eef55.chunk.js","mappings":"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","sources":["svgs/railmap/methods/shmetro-coline.ts","svgs/railmap/main/coline/coline-shmetro.tsx","svgs/railmap/main/main-shmetro.tsx","svgs/railmap/railmap-shmetro.tsx"],"sourcesContent":["import { ColineInfo, InterchangeInfo } from '../../../constants/constants';\nimport { drawLine } from './share';\n\nexport interface ColineLinePath {\n    main: {\n        linePath: string[];\n        colors: InterchangeInfo[];\n    }[];\n    pass: {\n        linePath: string[];\n        colors: InterchangeInfo[];\n    }[];\n}\n\n/**\n * Return all stations from ColineInfo's `from` and `to` with coline color preserved.\n */\nexport const calculateColineStations = (colineInfoList: ColineInfo[], branches: string[][]) =>\n    colineInfoList\n        .map(coLine => {\n            const involvedBranches = branches.filter(\n                branch => branch.includes(coLine.from) && branch.includes(coLine.to)\n            );\n\n            // the current coLineInfo fall on two separate branches,\n            // which should not be possible in current design.\n            if (involvedBranches.length !== 1) return { linePath: [], colors: coLine.colors };\n\n            const branch = involvedBranches.flat();\n            const a = branch.indexOf(coLine.from);\n            const b = branch.indexOf(coLine.to);\n            const linePath = a < b ? branch.slice(a, b + 1) : branch.slice(b, a + 1);\n            return {\n                linePath: linePath,\n                colors: coLine.colors,\n            };\n        })\n        .filter(branchWithColine => branchWithColine.linePath.length !== 0);\n\n/**\n * Return coline segments with stations in main/pass order.\n */\nexport const calculateColine = (\n    branchWithColine: ReturnType<typeof calculateColineStations>,\n    stnStates: {\n        [stnId: string]: 0 | 1 | -1;\n    }\n) =>\n    branchWithColine\n        .map(branchWithColine => {\n            const linePaths = drawLine(branchWithColine.linePath, stnStates);\n            return {\n                main: [\n                    {\n                        linePath: linePaths.main,\n                        colors: branchWithColine.colors,\n                    },\n                ],\n                pass: [\n                    {\n                        linePath: linePaths.pass,\n                        colors: branchWithColine.colors,\n                    },\n                ],\n            };\n        })\n        // .map(branchWithColine =>\n        //     (\n        //         Object.entries(drawLine(branchWithColine.linePath, stnStates)) as [\n        //             keyof ReturnType<typeof drawLine>,\n        //             string[]\n        //         ][]\n        //     )\n        //         .map(([type, linePath]) => ({ [type]: { linePath: linePath, colors: branchWithColine.colors } }))\n        //         .reduce((acc, cur) => ({ ...acc, ...cur }), { main: [], pass: [] } as ColineLinePath)\n        // )\n        .reduce(\n            (acc, cur) => {\n                acc.main = [...acc.main, ...cur.main];\n                acc.pass = [...acc.pass, ...cur.pass];\n                return acc;\n            },\n            { main: [], pass: [] } as ColineLinePath\n        );\n","import React from 'react';\nimport { drawLine } from '../../methods/share';\nimport { calculateColineStations, calculateColine } from '../../methods/shmetro-coline';\nimport { AtLeastOneOfPartial, Services, InterchangeInfo } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\nimport { _linePath, StationGroupProps } from '../main-shmetro';\nimport StationSHMetro from '../station/station-shmetro';\n\ninterface Props {\n    xs: { [stnId: string]: number };\n    servicesPresent: Services[];\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\ninterface ColineServicesPath {\n    main: {\n        path: string;\n        colors: InterchangeInfo[];\n    }[];\n    pass: {\n        path: string;\n        colors: InterchangeInfo[];\n    }[];\n    service: Services;\n}\n\ntype ColinePath = AtLeastOneOfPartial<Record<Services, ColineServicesPath>>;\nconst defaultTheme = ['shanghai', 'sh4', '#5F259F', '#fff', '4号线', 'Line 4'] as InterchangeInfo;\n\nexport const ColineSHMetro = (props: Props) => {\n    const { xs, servicesPresent, stnStates } = props;\n\n    const {\n        direction,\n        stn_list,\n        current_stn_idx,\n        branch_spacing,\n        info_panel_type,\n        coline: colineInfo,\n    } = useAppSelector(store => store.param);\n    const { branches, depsStr: deps } = useAppSelector(store => store.helper);\n\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(stn_list).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    const branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: stn_list[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -3 : 3 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    // filter out all positive yShares to draw the railmap w/ coline and its branches\n    const colineYShares = Object.entries(yShares)\n        .filter(([k, v]) => v <= 0)\n        .reduce((acc, [k, v]) => ({ ...acc, [k]: v }), {} as typeof yShares);\n    const colineYs = Object.keys(colineYShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -colineYShares[cur] * branch_spacing }),\n        {} as typeof yShares\n    );\n\n    // coline color and all stations in the coline segments\n    const colineStns = React.useMemo(\n        () =>\n            calculateColine(\n                calculateColineStations(\n                    Object.values(colineInfo).filter(co => co.display),\n                    branches\n                ),\n                stnStates\n            ),\n        [JSON.stringify(colineInfo), current_stn_idx, direction, deps]\n    );\n\n    const colinePaths = servicesPresent.reduce(\n        (acc, service) => ({\n            ...acc,\n            [service]: (Object.keys(colineStns) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n                (acc, cur) => ({\n                    ...acc,\n                    [cur]: colineStns[cur]\n                        .map(colineStn => ({\n                            path: _linePath(\n                                colineStn.linePath,\n                                cur,\n                                xs,\n                                colineYs,\n                                direction,\n                                service,\n                                servicesPresent.length,\n                                stn_list,\n                                'diagonal'\n                            ),\n                            colors: colineStn.colors,\n                        }))\n                        .filter(colineStn => colineStn.path !== ''),\n                }),\n                {} as ColineServicesPath\n            ),\n        }),\n        {} as ColinePath\n    );\n\n    // only display coline stations when coline in effect\n    const colineStations = calculateColineStations(\n        Object.values(colineInfo).filter(co => co.display),\n        branches\n    )\n        .map(co => co.linePath)\n        .flat();\n\n    const LINE_WIDTH = 12;\n    const COLINE_GAP = info_panel_type === 'sh2020' ? 3 : 0;\n    return (\n        <>\n            <g id=\"coline\" transform={`translate(0,${LINE_WIDTH + COLINE_GAP})`}>\n                <CoLine paths={colinePaths} direction={direction} />\n                <ColineStationInMainLine\n                    colineStns={colineStns}\n                    branches={branches}\n                    xs={xs}\n                    ys={colineYs}\n                    stnStates={stnStates}\n                    lineWidth={LINE_WIDTH}\n                    colineGap={COLINE_GAP}\n                />\n                <ColineStationGroup\n                    stnIds={Object.entries(yShares)\n                        .filter(([k, v]) => v < 0)\n                        .reduce((acc, [k, v]) => [...acc, k], [] as string[])\n                        .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                        .filter(stnId => stn_list[stnId].services.length !== 0)\n                        .filter(stnId => colineStations.includes(stnId))}\n                    xs={xs}\n                    ys={colineYs}\n                    stnStates={stnStates}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default ColineSHMetro;\n\nconst CoLine = (props: { paths: ColinePath; direction: 'l' | 'r' }) => {\n    const { paths, direction } = props;\n\n    return (\n        <>\n            {(Object.keys(paths) as Services[]).map((service, i) => (\n                <g key={`servicePath${i}`} transform={`translate(0,${i * 25})`}>\n                    <g>\n                        {paths[service]?.pass.map((colinePath, j) => (\n                            <React.Fragment key={j}>\n                                <path\n                                    key={j}\n                                    stroke=\"var(--rmg-grey)\"\n                                    strokeWidth={12}\n                                    fill=\"none\"\n                                    d={colinePath.path}\n                                    strokeLinejoin=\"round\"\n                                    filter={service === Services.local ? undefined : `url(#contrast-${service})`}\n                                />\n                            </React.Fragment>\n                        ))}\n\n                        {paths[service]?.main.map((colinePath, j) => (\n                            <React.Fragment key={j}>\n                                {colinePath.colors.length > 1 && (\n                                    <linearGradient\n                                        id={`grad${j}`}\n                                        y1=\"-100%\"\n                                        y2=\"100%\"\n                                        x1=\"0\"\n                                        x2=\"0\"\n                                        // gradientTransform=\"rotate(90)\"\n                                        gradientUnits=\"userSpaceOnUse\"\n                                    >\n                                        {colinePath.colors.map((color, i) => (\n                                            <React.Fragment key={i}>\n                                                {/* more about React.Fragment on https://stackoverflow.com/a/59390967 */}\n                                                <stop // from\n                                                    offset={`${(100 / colinePath.colors.length) * (i + 0)}%`}\n                                                    stopColor={color[2]}\n                                                />\n                                                <stop // to\n                                                    offset={`${(100 / colinePath.colors.length) * (i + 1)}%`}\n                                                    stopColor={color[2]}\n                                                />\n                                            </React.Fragment>\n                                        ))}\n                                    </linearGradient>\n                                )}\n\n                                {direction === 'l' && (\n                                    <marker\n                                        id={`arrow_left_${j}_${colinePath.colors.map(c => c[2]).join('_')}`}\n                                        refY={0.5}\n                                        refX={1}\n                                    >\n                                        <path\n                                            d=\"M1,0L0,1H1z\"\n                                            fill={\n                                                colinePath.colors.length > 1\n                                                    ? `url(#grad${j})`\n                                                    : colinePath.colors[0][2]\n                                            }\n                                        />\n                                    </marker>\n                                )}\n                                {direction === 'r' && (\n                                    <marker\n                                        id={`arrow_right_${j}_${colinePath.colors.map(c => c[2]).join('_')}`}\n                                        refY={0.5}\n                                    >\n                                        <path\n                                            d=\"M0,0L1,1H-1z\"\n                                            fill={\n                                                colinePath.colors.length > 1\n                                                    ? `url(#grad${j})`\n                                                    : colinePath.colors[0][2]\n                                            }\n                                        />\n                                    </marker>\n                                )}\n\n                                <path\n                                    key={j}\n                                    // stroke={colinePath.colors.length > 1 ? `url(#grad${j})` : colinePath.colors[0][2]}\n                                    stroke={(colinePath.colors.at(-1) ?? defaultTheme)[2]}\n                                    strokeWidth={12}\n                                    fill=\"none\"\n                                    d={colinePath.path}\n                                    markerStart={\n                                        direction === 'l'\n                                            ? `url(#arrow_left_${j}_${colinePath.colors.map(c => c[2]).join('_')})`\n                                            : undefined\n                                    }\n                                    markerEnd={\n                                        direction === 'r'\n                                            ? `url(#arrow_right_${j}_${colinePath.colors.map(c => c[2]).join('_')})`\n                                            : undefined\n                                    }\n                                    strokeLinejoin=\"round\"\n                                    filter={service === Services.local ? undefined : `url(#contrast-${service})`}\n                                />\n                            </React.Fragment>\n                        ))}\n                    </g>\n                </g>\n            ))}\n        </>\n    );\n};\n\ninterface ColineStationInMainLineProps {\n    colineStns: ReturnType<typeof calculateColine>;\n    branches: string[][];\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n    lineWidth: number;\n    colineGap: number;\n}\n\n/**\n * A small rect overlay on the main branch where coline is present.\n */\nconst ColineStationInMainLine = (props: ColineStationInMainLineProps) => {\n    const { colineStns, branches, xs, ys, stnStates, lineWidth: LINE_WIDTH, colineGap: COLINE_GAP } = props;\n    const { line_name, theme, info_panel_type } = useAppSelector(store => store.param);\n\n    // data to draw the station elements.\n    const colineStations = [...colineStns.main, ...colineStns.pass]\n        // Merge main and pass station together to minimize the code duplication\n        // and its state can obtained by stnStates.\n        .map(stns =>\n            stns.linePath.map(stnId => ({\n                curStn: stnId,\n                x: xs[stnId],\n                y: ys[stnId],\n                color: stns.colors.at(-1) ?? [...theme, ...line_name],\n            }))\n        )\n        .flat()\n        .reduce(\n            // remove current station as it appears in both main and pass\n            (acc, cur) => (acc.find(x => x.curStn === cur.curStn) ? acc : acc.concat(cur)),\n            [] as {\n                curStn: string;\n                x: number;\n                y: number;\n                color: InterchangeInfo;\n            }[]\n        )\n        // only take the coline stations in the first branch(general main line)\n        // as coline stations in lower branches will be taken care by ColineStationGroup\n        .filter(stn => branches[0].includes(stn.curStn));\n    console.log(colineStations);\n\n    return (\n        <g id=\"stations_in_mainline\">\n            {colineStations.map(colineStation => {\n                const { curStn, x, y, color } = colineStation;\n                const height = (stnStates[curStn] === -1 ? 0 : LINE_WIDTH) + COLINE_GAP + LINE_WIDTH;\n                const dy = (stnStates[curStn] === -1 ? 0 : -LINE_WIDTH) - COLINE_GAP - LINE_WIDTH / 2;\n                return (\n                    <g key={curStn} transform={`translate(${x},${y})`}>\n                        {info_panel_type === 'sh2020' ? (\n                            <rect\n                                stroke=\"none\"\n                                height={height}\n                                width={12}\n                                x={-6}\n                                y={dy}\n                                fill={stnStates[curStn] === -1 ? 'var(--rmg-grey)' : color[2]}\n                            />\n                        ) : (\n                            <use\n                                xlinkHref=\"#int2_sh\"\n                                stroke=\"var(--rmg-theme-colour)\"\n                                transform={`translate(0,${-LINE_WIDTH})`}\n                            />\n                        )}\n                    </g>\n                );\n            })}\n        </g>\n    );\n};\n\n/**\n * Complete station component for stations in lower branches.\n */\nconst ColineStationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates, stnIds } = props;\n    const { branches, depsStr: deps } = useAppSelector(store => store.helper);\n    const { line_name, theme, coline } = useAppSelector(store => store.param);\n\n    // get colors of stations in coline branches, they use different colors than var(--rmg-theme-colour)\n    const colines = React.useMemo(\n        () => calculateColineStations(Object.values(coline), branches),\n        [JSON.stringify(coline), deps]\n    );\n    const colors = stnIds.reduce(\n        (acc, stnId) => ({\n            ...acc,\n            [stnId]: colines\n                .filter(coline => coline.linePath.includes(stnId))\n                .map(coline => coline.colors)\n                .flat()\n                // TODO-coline: support multiple colines\n                .at(0) ?? [...theme, ...line_name],\n        }),\n        {} as { [stnId: string]: InterchangeInfo }\n    );\n\n    return (\n        <g id=\"stations_in_coline\">\n            {stnIds.map(stnId => (\n                <g key={stnId} transform={`translate(${xs[stnId]},${ys[stnId]})`}>\n                    <StationSHMetro stnId={stnId} stnState={stnStates[stnId]} color={colors[stnId][2]} />\n                </g>\n            ))}\n        </g>\n    );\n};\n","import React from 'react';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport StationSHMetro from './station/station-shmetro';\nimport ColineSHMetro from './coline/coline-shmetro';\nimport { AtLeastOneOfPartial, Services, StationDict } from '../../../constants/constants';\nimport { useAppSelector } from '../../../redux';\n\ninterface servicesPath {\n    main: string[];\n    pass: string[];\n    service: Services;\n}\n\ntype Paths = AtLeastOneOfPartial<Record<Services, servicesPath>>;\n\nconst MainSHMetro = () => {\n    const { routes, branches, depsStr: deps } = useAppSelector(store => store.helper);\n    const param = useAppSelector(store => store.param);\n    const { stn_list, branch_spacing, coline, direction } = useAppSelector(store => store.param);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        () => 0,\n        () => 0\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    // const yShares = React.useMemo(\n    //     () => {\n    //         console.log('computing y shares');\n    //         return Object.keys(param.stn_list).reduce(\n    //             (acc, cur) => ({ ...acc, [cur]: branches[0].includes(cur) ? 0 : 3 }),\n    //             {} as { [stnId: string]: number }\n    //         );\n    //     },\n    //     // eslint-disable-next-line react-hooks/exhaustive-deps\n    //     [deps]\n    // );\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(stn_list).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    const branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: stn_list[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -3 : 3 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n\n    // filter out all negative yShares to draw the traditional railmap w/o coline and its branches\n    const lineYShares = Object.entries(yShares)\n        .filter(([k, v]) => v >= 0)\n        .reduce((acc, [k, v]) => ({ ...acc, [k]: v }), {} as typeof yShares);\n    const lineYs = Object.keys(lineYShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -lineYShares[cur] * branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const servicesAll = Object.values(Services);\n    const servicesPresent = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat() // all services in all stations\n        .reduce(\n            (acc, cur) => {\n                acc[servicesAll.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        ) // set the flag in order\n        .map((bool, i) => [servicesAll[i], bool] as [Services, boolean]) // zip\n        .filter(s => s[1]) // get the existing service\n        .map(s => s[0]); // maintain the services' order\n\n    const linePaths = branches\n        .map(branch => drawLine(branch, stnStates))\n        .reduce(\n            (acc, cur) => {\n                acc.main.push(cur.main);\n                acc.pass.push(cur.pass);\n                return acc;\n            },\n            { main: [], pass: [] } as { main: string[][]; pass: string[][] }\n        );\n\n    const paths = servicesPresent.reduce(\n        (acc, service) => ({\n            ...acc,\n            [service]: (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n                (acc, cur) => ({\n                    ...acc,\n                    [cur]: linePaths[cur]\n                        .map(stns =>\n                            _linePath(\n                                stns,\n                                cur,\n                                xs,\n                                lineYs,\n                                direction,\n                                service,\n                                servicesPresent.length,\n                                stn_list\n                                // info_panel_type === 'sh2020' ? 'rightangle' : 'diagonal'\n                            )\n                        )\n                        .filter(path => path !== ''),\n                }),\n                {} as servicesPath\n            ),\n        }),\n        {} as Paths\n    );\n\n    return (\n        <g\n            id=\"main\"\n            transform={`translate(0,${param.svg_height * (Object.keys(coline).length > 0 ? 0.5 : 0.7 + 0.1)})`}\n        >\n            <Line paths={paths} direction={param.direction} />\n            <StationGroup\n                stnIds={Object.keys(lineYShares)\n                    .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                    .filter(stnId => stn_list[stnId].services.length !== 0)}\n                xs={xs}\n                ys={lineYs}\n                stnStates={stnStates}\n            />\n            {Object.keys(coline).length > 0 && (\n                <ColineSHMetro xs={xs} servicesPresent={servicesPresent} stnStates={stnStates} />\n            )}\n            <ServicesElements servicesLevel={servicesPresent} lineXs={lineXs} />\n        </g>\n    );\n};\n\nexport default MainSHMetro;\n\nconst Line = (props: { paths: Paths; direction: 'l' | 'r' }) => {\n    const { theme } = useAppSelector(store => store.param);\n    const { paths, direction } = props;\n\n    return (\n        <>\n            {(Object.keys(paths) as Services[]).map((service, i) => (\n                <g\n                    key={`servicePath${i}`}\n                    transform={`translate(0,${i * 25})`}\n                    // the following line is a special case for pujiang line\n                    // where its pass line color should be white with outline\n                    // surrounding it, see #161 for details.\n                    filter={theme[2] === '#999999' ? 'url(#pujiang_outline_railmap)' : undefined}\n                >\n                    <g>\n                        {paths[service]?.pass.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"var(--rmg-grey)\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_gray)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_gray)' : undefined}\n                                strokeLinejoin=\"round\"\n                            />\n                        ))}\n                    </g>\n                    <g>\n                        {paths[service]?.main.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"var(--rmg-theme-colour)\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={direction === 'l' ? 'url(#arrow_theme_left)' : undefined}\n                                markerEnd={direction === 'r' ? 'url(#arrow_theme_right)' : undefined}\n                                strokeLinejoin=\"round\"\n                                filter={service === Services.local ? undefined : `url(#contrast-${service})`}\n                            />\n                        ))}\n                    </g>\n                </g>\n            ))}\n        </>\n    );\n};\n\nexport const _linePath = (\n    stnIds: string[],\n    type: 'main' | 'pass',\n    xs: { [stnId: string]: number },\n    ys: { [stnId: string]: number },\n    direction: 'l' | 'r',\n    services: Services,\n    servicesMax: number,\n    stn_list: StationDict, // only used to determine startFromTerminal or endAtTerminal\n    bend: 'rightangle' | 'diagonal' = 'rightangle'\n) => {\n    var [prevY, prevX] = [] as number[];\n    var path: { [key: string]: number[] } = {};\n\n    const servicesDelta = {\n        local: 0,\n        express: 20,\n        direct: 40,\n    }[services]; // TODO: enum Services could be a better idea?\n    const servicesPassDelta = servicesMax > 1 ? 50 : 0;\n\n    // extra short line on either end\n    let e1 = 30;\n    // check if path starts from or ends at the terminal\n    // and change e1 to 0 if it matches\n    if (stnIds.length > 0) {\n        let startFromTerminal = false,\n            endAtTerminal = false;\n        if (stn_list[stnIds.at(-1) || 0].children.some(stnId => ['linestart', 'lineend'].includes(stnId))) {\n            endAtTerminal = true;\n        } else if (stn_list[stnIds.at(0) || 0].parents.some(stnId => ['linestart', 'lineend'].includes(stnId))) {\n            startFromTerminal = true;\n        }\n        e1 = startFromTerminal || endAtTerminal ? e1 : 0;\n    }\n\n    // diagonal use e2 to make soft line\n    const e2 = 30;\n\n    stnIds.forEach(stnId => {\n        var x = xs[stnId];\n        var y = ys[stnId];\n        if (!prevY && prevY !== 0) {\n            [prevX, prevY] = [x, y];\n            path['start'] = [x, y];\n            return;\n        }\n        if (y === 0) {\n            // merge back to main line\n            if (y !== prevY) {\n                path['bifurcate'] = [prevX, prevY];\n            }\n        } else {\n            // on the branch line\n            if (y !== prevY) {\n                path['bifurcate'] = [x, y];\n            }\n        }\n        path['end'] = [x, y];\n        [prevX, prevY] = [x, y];\n    });\n\n    // generate path\n    if (!path.hasOwnProperty('start')) {\n        // no line generated\n        // keys in path: none\n        return '';\n    } else if (!path.hasOwnProperty('end')) {\n        // little line (only beyond terminal station)\n        // keys in path: start\n        let [x, y] = path['start'];\n        if (type === 'main') {\n            // current at terminal(end) station, draw the litte main line\n            if (direction === 'l') {\n                return `M ${x - e1 - servicesDelta},${y} H ${x}`;\n            } else {\n                return `M ${x},${y} H ${x + e1 + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            // current at terminal(start) station, draw the litte pass line\n            if (direction === 'l') {\n                return `M ${x},${y} L ${x + e1 + servicesPassDelta},${y}`;\n            } else {\n                return `M ${x - e1 - servicesPassDelta},${y} L ${x},${y}`;\n            }\n        }\n    } else if (!path.hasOwnProperty('bifurcate')) {\n        // general main line\n        // keys in path: start, end\n        let [x, y] = path['start'],\n            h = path['end'][0];\n        if (type === 'main') {\n            if (direction === 'l') {\n                return `M ${x - e1 - servicesDelta},${y} H ${h}`;\n            } else {\n                return `M ${x},${y} H ${h + e1 + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                return `M ${x - e1},${y} H ${h + e1 + servicesPassDelta}`;\n            } else {\n                return `M ${x - e1 - servicesPassDelta},${y} H ${h + e1}`;\n            }\n        }\n    } else {\n        // main line bifurcate here to become the branch line\n        // and path return here are only branch line\n        // keys in path: start, bifurcate, end\n        // TODO: make diagonal available to `sh`\n\n        let [x, y] = path['start'];\n        let xb = path['bifurcate'][0];\n        let [xm, ym] = path['end'];\n        if (type === 'main') {\n            if (direction === 'l') {\n                if (ym > y) {\n                    console.log(path);\n                    // main line, left direction, center to upper\n                    if (bend === 'rightangle') return `M ${x - e1},${y} H ${xm} V ${ym}`;\n                    // center to upper/rightangle, lower to center/diagonal\n                    else return `M ${x},${y} H ${x + e2} L ${xb - e2},${ym} H ${xm}`;\n                } else {\n                    // wrong marker\n                    // main line, left direction, upper to center\n                    if (bend === 'rightangle') return `M ${x},${y} V ${ym} H ${xm}`;\n                    // upper to center/rightangle, center to lower/diagonal\n                    else return `M ${x - e1},${y} H ${xb + e2} L ${xm - e2},${ym} H ${xm}`;\n                }\n            } else {\n                if (ym > y) {\n                    // wrong marker\n                    // main line, right direction, upper to center\n                    if (bend === 'rightangle') return `M ${x},${y} H ${xm} V ${ym}`;\n                    // upper to center/rightangle, center to lower/diagonal\n                    else return `M ${x},${y} H ${x + e2} L ${xb - e2},${ym} H ${xm + e1}`;\n                } else {\n                    // main line, right direction, center to upper\n                    if (bend === 'rightangle') return `M ${x},${y} V ${ym} H ${xm + e1}`;\n                    // center to upper/rightangle, lower to center/diagonal\n                    else return `M ${x},${y} H ${xb + e2} L ${xm - e2},${ym} H ${xm}`;\n                }\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                if (ym > y) {\n                    // pass line, left direction, center to upper\n                    if (bend === 'rightangle') return `M ${x - e1},${y} H ${xm} V ${ym}`;\n                    // center to upper/rightangle, lower to center/diagonal\n                    else return `M ${x},${y} H ${x + e2} L ${xb - e2},${ym} H ${xm + e1}`;\n                } else {\n                    // pass line, left direction, upper to center\n                    if (bend === 'rightangle') return `M ${x},${y} V ${ym} H ${xm + e1}`;\n                    // upper to center/rightangle, center to lower/diagonal\n                    else return `M ${x - e1},${y} H ${xb + e2} L ${xm - e2},${ym} H ${xm}`;\n                }\n            } else {\n                if (ym > y) {\n                    // pass line, right direction, upper to center\n                    if (bend === 'rightangle') return `M ${x - e1},${y} H ${xm} V ${ym}`;\n                    // upper to center/rightangle, center to lower/diagonal\n                    return `M ${x},${y} H ${x + e2} L ${xb - e2},${ym} H ${xm + e1}`;\n                } else {\n                    // pass line, right direction, center to upper\n                    if (bend === 'rightangle') return `M ${x},${y} V ${ym} H ${xm + e1}`;\n                    // center to upper/rightangle, lower to center/diagonal\n                    return `M ${x - e1},${y} H ${xb + e2} L ${xm - e2},${ym} H ${xm}`;\n                }\n            }\n        }\n    }\n};\n\nexport interface StationGroupProps {\n    stnIds: string[];\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates, stnIds } = props;\n\n    return (\n        <g>\n            {stnIds.map(stnId => (\n                <g key={stnId} transform={`translate(${xs[stnId]},${ys[stnId]})`}>\n                    <StationSHMetro stnId={stnId} stnState={stnStates[stnId]} />\n                </g>\n            ))}\n        </g>\n    );\n};\n\nconst ServicesElements = (props: { servicesLevel: Services[]; lineXs: number[] }) => {\n    const { svg_height, direction, svgWidth } = useAppSelector(store => store.param);\n    const dy = -svg_height * (0.5 + 0.1);\n\n    if (props.servicesLevel.length === 1) return <></>;\n\n    const servicesLevel = props.servicesLevel.map(\n        service =>\n            ({\n                local: '普通车',\n                express: '大站车',\n                direct: '直达车',\n            }[service])\n    );\n\n    // let dx = props.direction === 'r' ? 5 : param.svgWidth.railmap - 55;\n    const labelX = direction === 'r' ? props.lineXs[0] - 42 : props.lineXs[1] + 42;\n\n    let dx_hint = props.servicesLevel.length === 2 ? 350 : 500;\n\n    return (\n        <g>\n            {servicesLevel.map((service, i) => (\n                <g key={service} transform={`translate(${labelX},${i * 25})`}>\n                    <rect x={-27.5} height={10} width={55} fill={'white'} stroke={'black'} y={-5}></rect>\n                    <text className=\"rmg-name__zh\" fontSize={9} y={3} textAnchor=\"middle\">{`${service}运行线`}</text>\n                </g>\n            ))}\n            <g transform={`translate(${direction === 'r' ? 30 : svgWidth.railmap - dx_hint},${dy})`}>\n                <text className=\"rmg-name__zh\">图例：</text>\n                {servicesLevel.map((serviceLevel, i) => (\n                    <g key={`serviceLevel${i}`} transform={`translate(${i * 150 + 50},0)`}>\n                        <line\n                            x1=\"0\"\n                            x2=\"35\"\n                            y1=\"-5\"\n                            y2=\"-5\"\n                            stroke=\"var(--rmg-theme-colour)\"\n                            strokeWidth=\"12\"\n                            filter={i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : ''}\n                        />\n                        <use x=\"17.5\" y=\"-5\" xlinkHref=\"#stn_sh\" fill=\"var(--rmg-theme-colour)\" />\n                        <text x=\"40\" className=\"rmg-name__zh\">{`${serviceLevel}停靠站`}</text>\n                    </g>\n                ))}\n            </g>\n        </g>\n    );\n};\n\nexport const DirectionElements = () => {\n    const { direction, svgWidth, svg_height, loop } = useAppSelector(store => store.param);\n\n    return React.useMemo(\n        () => (\n            <g\n                transform={`translate(${direction === 'l' ? 50 : svgWidth.railmap - 150},${\n                    loop ? svg_height - 30 : 50\n                })`}\n            >\n                <text className=\"rmg-name__zh\">列车前进方向</text>\n                <path\n                    d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\"\n                    fill=\"var(--rmg-theme-colour)\"\n                    transform={`translate(${direction === 'l' ? -30 : 125},-5)rotate(${\n                        direction === 'l' ? 0 : 180\n                    })scale(0.15)`}\n                />\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [direction, svgWidth.railmap, svg_height]\n    );\n};\n","import * as React from 'react';\nimport MainSHMetro, { DirectionElements } from './main/main-shmetro';\nimport LoopSHMetro from './main/loop/loop-shmetro';\nimport { useAppSelector } from '../../redux';\n\nconst RailMapSHMetro = React.memo(() => {\n    const { loop } = useAppSelector(store => store.param);\n    return (\n        <>\n            <DefsSHMetro />\n\n            {loop ? <LoopSHMetro bank_angle={true} /> : <MainSHMetro />}\n\n            <DirectionElements />\n        </>\n    );\n});\n\nexport default RailMapSHMetro;\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} r={5} />\n        <path id=\"int2_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\" />\n        <path\n            id=\"express_sh\"\n            fill=\"var(--rmg-white)\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"direct_sh\"\n            fill=\"var(--rmg-white)\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V50 a 5,5 0 1 1 -10,0Z\"\n        />\n        <rect id=\"stn_sh_2020\" stroke=\"none\" height={24} width={12} x={-6} y={-18} />\n        <rect id=\"stn_sh_2020_express\" stroke=\"none\" height={49} width={12} x={-6} y={-18} />\n        <rect id=\"stn_sh_2020_direct\" stroke=\"none\" height={74} width={12} x={-6} y={-18} />\n\n        <rect id=\"intbox_number\" height={22} width={20} y={-11} />\n\n        <g id=\"intbox_maglev\" transform=\"translate(-25,0)\">\n            <rect id=\"maglev_5\" height={144} width={130} y=\"40\" x=\"30\" strokeWidth={10} />\n            <path\n                id=\"maglev_3\"\n                fill=\"var(--rmg-white)\"\n                d=\"m90,55a40,5 0 0 0 -40,3a5,5 0 0 0 -5,5a5,60 0 0 0 -3,60a5,5 0 0 0 5,5l96,0a5,5 0 0 0 5,-5a5,60 0 0 0 -3,-60a5,5 0 0 0 -5,-5a40,5 0 0 0 -40,-3l-5,-10l-5,10\"\n            />\n            <path\n                id=\"maglev_4\"\n                fill=\"var(--rmg-white)\"\n                d=\"m90,140l-40,0a10,5 0 0 1 -10,-5l0,25a10,15 0 0 0 10,15l15,0l0,-10l-15,0l0,-15l90,0l0,15l-15,0l0,10l15,0a10,15 0 0 0 10,-15l0,-25a10,5 0 0 1 -10,5l-50,0\"\n            />\n            <rect id=\"maglev_1\" height=\"25\" width=\"40\" y=\"80\" x=\"50\" />\n            <rect id=\"maglev_2\" height=\"25\" width=\"40\" y=\"80\" x=\"100\" />\n        </g>\n\n        <g id=\"airport\" transform=\"scale(0.5)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" />\n            <path\n                id=\"airport\"\n                d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                transform=\"translate(-28.9697,0.14347)\"\n                fill=\"var(--rmg-white)\"\n            />\n        </g>\n        <g id=\"disney\" transform=\"scale(0.5)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" />\n            <path\n                fill=\"var(--rmg-white)\"\n                d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                transform=\"translate(-28.9697 0.13398)\"\n            />\n        </g>\n        {/* Special thanks to Wikimedia Commons, see https://commons.wikimedia.org/wiki/File:China_Railways.svg */}\n        <g id=\"railway\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" transform=\"translate(0,-2)scale(0.5)\" />\n            <path\n                fill=\"var(--rmg-white)\"\n                d=\"M169,273.5c0-19,14.7-34.8,33.7-36.3c18.9-1.5,38.1-2.2,57.4-2.2c19.3,0,38.4,0.8,57.3,2.2  c19,1.5,33.7,17.3,33.7,36.3v47.3l-51.3,14.7c-11.2,3.2-18.9,13.4-18.9,25v147.8c0,17.4,12.2,32.3,29.3,35.7l110.6,22.1  c4.9,1,8.4,5.2,8.4,10.2V599H91v-22.7c0-5,3.5-9.2,8.4-10.2L209.9,544c17-3.4,29.3-18.3,29.3-35.7V360.5c0-11.6-7.7-21.8-18.9-25  L169,320.8V273.5z M309.4,31.7c0.2-1.2,0.3-2.4,0.3-3.6c0-14-11.1-25.4-24.9-26C276.6,1.4,268.3,1,260,1c-8.3,0-16.6,0.4-24.7,1.1  c-13.9,0.6-24.9,12-24.9,26c0,1.2,0.1,2.5,0.3,3.6C90.6,54.8,0,160.3,0,287c0,97.2,53.4,182,132.4,226.6l36.8-48.1  C104.3,432.4,59.8,364.9,59.8,287c0-110.6,89.6-200.2,200.2-200.2S460.2,176.4,460.2,287c0,77.9-44.5,145.4-109.4,178.5  c15,19.6,25.6,33.5,36.8,48.1C466.6,469,520,384.2,520,287C520,160.3,429.4,54.8,309.4,31.7z\"\n                transform=\"translate(-10,0)scale(0.04)\"\n            />\n        </g>\n\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"arrow_gray\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-grey)\" />\n        </marker>\n        <marker id=\"arrow_theme_left\" refX={1} refY={0.5}>\n            <path d=\"M1,0L0,1H1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n        <marker id=\"arrow_theme_right\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n\n        {/* Contrast filters for lines. */}\n        <filter id=\"contrast-direct\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncG type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncB type=\"linear\" slope={0.5} intercept={0.25} />\n            </feComponentTransfer>\n        </filter>\n        <filter id=\"contrast-express\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncG type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncB type=\"linear\" slope={0.75} intercept={0.125} />\n            </feComponentTransfer>\n        </filter>\n\n        <filter\n            id=\"pujiang_outline_railmap\"\n            colorInterpolationFilters=\"sRGB\"\n            // TODO: remove the absolute value while make the filter works correctly\n            filterUnits=\"userSpaceOnUse\"\n            x=\"0\"\n            y=\"-1000\"\n            width=\"5000\"\n            height=\"2000\"\n        >\n            {/* Replace pass gray color with white.\n                https://stackoverflow.com/questions/41639049/replace-one-color-using-svg-filters */}\n            <feComponentTransfer in=\"SourceGraphic\">\n                <feFuncR\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n                <feFuncG\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n                <feFuncB\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n            </feComponentTransfer>\n            <feColorMatrix\n                type=\"matrix\"\n                values=\"1 0 0 0 0\n                                                 0 1 0 0 0\n                                                 0 0 1 0 0\n                                                 1 1 1 1 -3\"\n                result=\"selectedColor1\"\n            />\n\n            {/* Draw an outline line around the pass line.\n                https://stackoverflow.com/questions/49693471/svg-border-outline-for-group-of-elements\n                Also see #181 why we do not simply outline the pass line element. */}\n            <feMorphology operator=\"erode\" in=\"selectedColor1\" radius=\"0\" result=\"e1\" />\n            <feMorphology operator=\"erode\" in=\"selectedColor1\" radius=\"1\" result=\"e2\" />\n            <feComposite in=\"e1\" in2=\"e2\" operator=\"xor\" result=\"uncoloredOutline\" />\n            {/* As the pass line is colored in white, we need to recolor the outline with black. */}\n            <feFlood floodColor=\"rgb(0,0,0)\" />\n            <feComposite operator=\"in\" in2=\"uncoloredOutline\" result=\"outline\" />\n            {/* Put the outline on the white not gray pass line. */}\n            <feComposite in=\"outline\" in2=\"selectedColor1\" operator=\"over\" result=\"result\" />\n            {/* Put the white pass line with outline on the original line. */}\n            <feComposite in=\"result\" in2=\"SourceGraphic\" operator=\"over\" />\n        </filter>\n    </defs>\n));\n"],"names":["calculateColineStations","colineInfoList","branches","map","coLine","involvedBranches","filter","branch","includes","from","to","length","linePath","colors","flat","a","indexOf","b","slice","branchWithColine","calculateColine","stnStates","linePaths","drawLine","main","pass","reduce","acc","cur","defaultTheme","props","xs","servicesPresent","useAppSelector","store","param","direction","stn_list","current_stn_idx","branch_spacing","info_panel_type","colineInfo","coline","helper","deps","depsStr","yShares","React","console","log","Object","keys","branchOfStn","children","colineYShares","entries","k","v","colineYs","colineStns","values","co","display","JSON","stringify","colinePaths","service","colineStn","path","_linePath","colineStations","COLINE_GAP","id","transform","CoLine","paths","ColineStationInMainLine","ys","lineWidth","colineGap","ColineStationGroup","stnIds","stnId","services","i","colinePath","j","stroke","strokeWidth","fill","d","strokeLinejoin","Services","undefined","y1","y2","x1","x2","gradientUnits","color","offset","stopColor","c","join","refY","refX","at","markerStart","markerEnd","LINE_WIDTH","line_name","theme","stns","curStn","x","y","find","concat","stn","colineStation","height","dy","width","xlinkHref","colines","stnState","routes","adjMat","adjacencyList","criticalPath","criticalPathMethod","realCP","nodes","xShares","getXShareMTR","toString","lineXs","svgWidth","railmap","padding","len","lineYShares","lineYs","getStnState","servicesAll","stationInfo","bool","s","push","svg_height","Line","StationGroup","ServicesElements","servicesLevel","type","servicesMax","bend","prevY","prevX","servicesDelta","local","express","direct","servicesPassDelta","e1","startFromTerminal","endAtTerminal","some","parents","e2","forEach","hasOwnProperty","xb","xm","ym","h","labelX","dx_hint","className","fontSize","textAnchor","serviceLevel","DirectionElements","loop","DefsSHMetro","bank_angle","r","cx","cy","viewBox","filterUnits","slope","intercept","colorInterpolationFilters","in","tableValues","result","operator","radius","in2","floodColor"],"sourceRoot":""}